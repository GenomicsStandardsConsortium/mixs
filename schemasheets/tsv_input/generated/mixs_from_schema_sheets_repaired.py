# Auto generated from mixs_from_schema_sheets_repaired.yaml by pythongen.py version: 0.9.0
# Generation date: 2022-09-30T17:42:45
# Schema: TEMP
#
# id: TEMP
# description:
# license: https://creativecommons.org/publicdomain/zero/1.0/

import dataclasses
import sys
import re
from jsonasobj2 import JsonObj, as_dict
from typing import Optional, List, Union, Dict, ClassVar, Any
from dataclasses import dataclass
from linkml_runtime.linkml_model.meta import EnumDefinition, PermissibleValue, PvFormulaOptions

from linkml_runtime.utils.slot import Slot
from linkml_runtime.utils.metamodelcore import empty_list, empty_dict, bnode
from linkml_runtime.utils.yamlutils import YAMLRoot, extended_str, extended_float, extended_int
from linkml_runtime.utils.dataclass_extensions_376 import dataclasses_init_fn_with_kwargs
from linkml_runtime.utils.formatutils import camelcase, underscore, sfx
from linkml_runtime.utils.enumerations import EnumDefinitionImpl
from rdflib import Namespace, URIRef
from linkml_runtime.utils.curienamespace import CurieNamespace
from linkml_runtime.linkml_model.types import String

metamodel_version = "1.7.0"
version = None

# Overwrite dataclasses _init_fn to add **kwargs in __init__
dataclasses._init_fn = dataclasses_init_fn_with_kwargs

# Namespaces
MIXS = CurieNamespace('MIXS', 'http://example.org/MIXS/')
TEMP = CurieNamespace('TEMP', 'https://example.org/TEMP/')
LINKML = CurieNamespace('linkml', 'https://w3id.org/linkml/')
DEFAULT_ = TEMP


# Types

# Class references



class Database(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.Database
    class_class_curie: ClassVar[str] = "TEMP:Database"
    class_name: ClassVar[str] = "Database"
    class_model_uri: ClassVar[URIRef] = TEMP.Database


@dataclass
class MigsEu(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.MigsEu
    class_class_curie: ClassVar[str] = "TEMP:MigsEu"
    class_name: ClassVar[str] = "migs_eu"
    class_model_uri: ClassVar[URIRef] = TEMP.MigsEu

    samp_size: Optional[str] = None
    samp_collec_device: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    contam_screen_input: Optional[str] = None
    wga_amp_kit: Optional[str] = None
    experimental_factor: Optional[str] = None
    lat_lon: Optional[str] = None
    geo_loc_name: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    samp_mat_process: Optional[str] = None
    size_frac: Optional[str] = None
    depth: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    ploidy: Optional[str] = None
    num_replicons: Optional[str] = None
    extrachrom_elements: Optional[str] = None
    estimated_size: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    pathogenicity: Optional[str] = None
    biotic_relationship: Optional[str] = None
    specific_host: Optional[str] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[str] = None
    propagation: Optional[str] = None
    encoded_traits: Optional[str] = None
    source_uvig: Optional[str] = None
    virus_enrich_appr: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[str] = None
    lib_reads_seqd: Optional[str] = None
    lib_layout: Optional[str] = None
    lib_vector: Optional[str] = None
    lib_screen: Optional[str] = None
    target_gene: Optional[str] = None
    target_subfragment: Optional[str] = None
    pcr_primers: Optional[str] = None
    mid: Optional[str] = None
    adapters: Optional[str] = None
    pcr_cond: Optional[str] = None
    seq_meth: Optional[str] = None
    seq_quality_check: Optional[str] = None
    chimera_check: Optional[str] = None
    tax_ident: Optional[str] = None
    single_cell_lysis_prot: Optional[str] = None
    wga_amp_appr: Optional[str] = None
    assembly_qual: Optional[str] = None
    assembly_name: Optional[str] = None
    assembly_software: Optional[str] = None
    annot: Optional[str] = None
    number_contig: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_db: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    x_16s_recover: Optional[str] = None
    x_16s_recover_software: Optional[str] = None
    trnas: Optional[str] = None
    trna_ext_software: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    compl_appr: Optional[str] = None
    contam_score: Optional[str] = None
    contam_screen_param: Optional[str] = None
    decontam_software: Optional[str] = None
    sort_tech: Optional[str] = None
    single_cell_lysis_appr: Optional[str] = None
    bin_param: Optional[str] = None
    bin_software: Optional[str] = None
    reassembly_bin: Optional[str] = None
    mag_cov_software: Optional[str] = None
    vir_ident_software: Optional[str] = None
    pred_genome_type: Optional[str] = None
    pred_genome_struc: Optional[str] = None
    detec_type: Optional[str] = None
    otu_class_appr: Optional[str] = None
    otu_seq_comp_appr: Optional[str] = None
    otu_db: Optional[str] = None
    host_pred_appr: Optional[str] = None
    host_pred_est_acc: Optional[str] = None
    sop: Optional[Union[str, List[str]]] = empty_list()
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    elev: Optional[str] = None
    alt: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_name: Optional[str] = None
    samp_collec_method: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    neg_cont_type: Optional[str] = None
    pos_cont_type: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collec_device is not None and not isinstance(self.samp_collec_device, str):
            self.samp_collec_device = str(self.samp_collec_device)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, str):
            self.contam_screen_input = str(self.contam_screen_input)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.num_replicons is not None and not isinstance(self.num_replicons, str):
            self.num_replicons = str(self.num_replicons)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, str):
            self.extrachrom_elements = str(self.extrachrom_elements)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, str):
            self.biotic_relationship = str(self.biotic_relationship)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.trophic_level is not None and not isinstance(self.trophic_level, str):
            self.trophic_level = str(self.trophic_level)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.source_uvig is not None and not isinstance(self.source_uvig, str):
            self.source_uvig = str(self.source_uvig)

        if self.virus_enrich_appr is not None and not isinstance(self.virus_enrich_appr, str):
            self.virus_enrich_appr = str(self.virus_enrich_appr)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, str):
            self.lib_size = str(self.lib_size)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, str):
            self.lib_reads_seqd = str(self.lib_reads_seqd)

        if self.lib_layout is not None and not isinstance(self.lib_layout, str):
            self.lib_layout = str(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.target_gene is not None and not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.single_cell_lysis_prot is not None and not isinstance(self.single_cell_lysis_prot, str):
            self.single_cell_lysis_prot = str(self.single_cell_lysis_prot)

        if self.wga_amp_appr is not None and not isinstance(self.wga_amp_appr, str):
            self.wga_amp_appr = str(self.wga_amp_appr)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.number_contig is not None and not isinstance(self.number_contig, str):
            self.number_contig = str(self.number_contig)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.x_16s_recover is not None and not isinstance(self.x_16s_recover, str):
            self.x_16s_recover = str(self.x_16s_recover)

        if self.x_16s_recover_software is not None and not isinstance(self.x_16s_recover_software, str):
            self.x_16s_recover_software = str(self.x_16s_recover_software)

        if self.trnas is not None and not isinstance(self.trnas, str):
            self.trnas = str(self.trnas)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.contam_score is not None and not isinstance(self.contam_score, str):
            self.contam_score = str(self.contam_score)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.sort_tech is not None and not isinstance(self.sort_tech, str):
            self.sort_tech = str(self.sort_tech)

        if self.single_cell_lysis_appr is not None and not isinstance(self.single_cell_lysis_appr, str):
            self.single_cell_lysis_appr = str(self.single_cell_lysis_appr)

        if self.bin_param is not None and not isinstance(self.bin_param, str):
            self.bin_param = str(self.bin_param)

        if self.bin_software is not None and not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, str):
            self.reassembly_bin = str(self.reassembly_bin)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, str):
            self.mag_cov_software = str(self.mag_cov_software)

        if self.vir_ident_software is not None and not isinstance(self.vir_ident_software, str):
            self.vir_ident_software = str(self.vir_ident_software)

        if self.pred_genome_type is not None and not isinstance(self.pred_genome_type, str):
            self.pred_genome_type = str(self.pred_genome_type)

        if self.pred_genome_struc is not None and not isinstance(self.pred_genome_struc, str):
            self.pred_genome_struc = str(self.pred_genome_struc)

        if self.detec_type is not None and not isinstance(self.detec_type, str):
            self.detec_type = str(self.detec_type)

        if self.otu_class_appr is not None and not isinstance(self.otu_class_appr, str):
            self.otu_class_appr = str(self.otu_class_appr)

        if self.otu_seq_comp_appr is not None and not isinstance(self.otu_seq_comp_appr, str):
            self.otu_seq_comp_appr = str(self.otu_seq_comp_appr)

        if self.otu_db is not None and not isinstance(self.otu_db, str):
            self.otu_db = str(self.otu_db)

        if self.host_pred_appr is not None and not isinstance(self.host_pred_appr, str):
            self.host_pred_appr = str(self.host_pred_appr)

        if self.host_pred_est_acc is not None and not isinstance(self.host_pred_est_acc, str):
            self.host_pred_est_acc = str(self.host_pred_est_acc)

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self.samp_collec_method is not None and not isinstance(self.samp_collec_method, str):
            self.samp_collec_method = str(self.samp_collec_method)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, str):
            self.neg_cont_type = str(self.neg_cont_type)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        super().__post_init__(**kwargs)


@dataclass
class MigsBa(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.MigsBa
    class_class_curie: ClassVar[str] = "TEMP:MigsBa"
    class_name: ClassVar[str] = "migs_ba"
    class_model_uri: ClassVar[URIRef] = TEMP.MigsBa

    samp_size: Optional[str] = None
    samp_collec_device: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    contam_screen_input: Optional[str] = None
    wga_amp_kit: Optional[str] = None
    experimental_factor: Optional[str] = None
    lat_lon: Optional[str] = None
    geo_loc_name: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    samp_mat_process: Optional[str] = None
    size_frac: Optional[str] = None
    depth: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    ploidy: Optional[str] = None
    num_replicons: Optional[str] = None
    extrachrom_elements: Optional[str] = None
    estimated_size: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    pathogenicity: Optional[str] = None
    biotic_relationship: Optional[str] = None
    specific_host: Optional[str] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[str] = None
    propagation: Optional[str] = None
    encoded_traits: Optional[str] = None
    source_uvig: Optional[str] = None
    virus_enrich_appr: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[str] = None
    lib_reads_seqd: Optional[str] = None
    lib_layout: Optional[str] = None
    lib_vector: Optional[str] = None
    lib_screen: Optional[str] = None
    target_gene: Optional[str] = None
    target_subfragment: Optional[str] = None
    pcr_primers: Optional[str] = None
    mid: Optional[str] = None
    adapters: Optional[str] = None
    pcr_cond: Optional[str] = None
    seq_meth: Optional[str] = None
    seq_quality_check: Optional[str] = None
    chimera_check: Optional[str] = None
    tax_ident: Optional[str] = None
    single_cell_lysis_prot: Optional[str] = None
    wga_amp_appr: Optional[str] = None
    assembly_qual: Optional[str] = None
    assembly_name: Optional[str] = None
    assembly_software: Optional[str] = None
    annot: Optional[str] = None
    number_contig: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_db: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    x_16s_recover: Optional[str] = None
    x_16s_recover_software: Optional[str] = None
    trnas: Optional[str] = None
    trna_ext_software: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    compl_appr: Optional[str] = None
    contam_score: Optional[str] = None
    contam_screen_param: Optional[str] = None
    decontam_software: Optional[str] = None
    sort_tech: Optional[str] = None
    single_cell_lysis_appr: Optional[str] = None
    bin_param: Optional[str] = None
    bin_software: Optional[str] = None
    reassembly_bin: Optional[str] = None
    mag_cov_software: Optional[str] = None
    vir_ident_software: Optional[str] = None
    pred_genome_type: Optional[str] = None
    pred_genome_struc: Optional[str] = None
    detec_type: Optional[str] = None
    otu_class_appr: Optional[str] = None
    otu_seq_comp_appr: Optional[str] = None
    otu_db: Optional[str] = None
    host_pred_appr: Optional[str] = None
    host_pred_est_acc: Optional[str] = None
    sop: Optional[Union[str, List[str]]] = empty_list()
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    elev: Optional[str] = None
    alt: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_name: Optional[str] = None
    samp_collec_method: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    neg_cont_type: Optional[str] = None
    pos_cont_type: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collec_device is not None and not isinstance(self.samp_collec_device, str):
            self.samp_collec_device = str(self.samp_collec_device)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, str):
            self.contam_screen_input = str(self.contam_screen_input)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.num_replicons is not None and not isinstance(self.num_replicons, str):
            self.num_replicons = str(self.num_replicons)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, str):
            self.extrachrom_elements = str(self.extrachrom_elements)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, str):
            self.biotic_relationship = str(self.biotic_relationship)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.trophic_level is not None and not isinstance(self.trophic_level, str):
            self.trophic_level = str(self.trophic_level)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.source_uvig is not None and not isinstance(self.source_uvig, str):
            self.source_uvig = str(self.source_uvig)

        if self.virus_enrich_appr is not None and not isinstance(self.virus_enrich_appr, str):
            self.virus_enrich_appr = str(self.virus_enrich_appr)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, str):
            self.lib_size = str(self.lib_size)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, str):
            self.lib_reads_seqd = str(self.lib_reads_seqd)

        if self.lib_layout is not None and not isinstance(self.lib_layout, str):
            self.lib_layout = str(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.target_gene is not None and not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.single_cell_lysis_prot is not None and not isinstance(self.single_cell_lysis_prot, str):
            self.single_cell_lysis_prot = str(self.single_cell_lysis_prot)

        if self.wga_amp_appr is not None and not isinstance(self.wga_amp_appr, str):
            self.wga_amp_appr = str(self.wga_amp_appr)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.number_contig is not None and not isinstance(self.number_contig, str):
            self.number_contig = str(self.number_contig)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.x_16s_recover is not None and not isinstance(self.x_16s_recover, str):
            self.x_16s_recover = str(self.x_16s_recover)

        if self.x_16s_recover_software is not None and not isinstance(self.x_16s_recover_software, str):
            self.x_16s_recover_software = str(self.x_16s_recover_software)

        if self.trnas is not None and not isinstance(self.trnas, str):
            self.trnas = str(self.trnas)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.contam_score is not None and not isinstance(self.contam_score, str):
            self.contam_score = str(self.contam_score)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.sort_tech is not None and not isinstance(self.sort_tech, str):
            self.sort_tech = str(self.sort_tech)

        if self.single_cell_lysis_appr is not None and not isinstance(self.single_cell_lysis_appr, str):
            self.single_cell_lysis_appr = str(self.single_cell_lysis_appr)

        if self.bin_param is not None and not isinstance(self.bin_param, str):
            self.bin_param = str(self.bin_param)

        if self.bin_software is not None and not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, str):
            self.reassembly_bin = str(self.reassembly_bin)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, str):
            self.mag_cov_software = str(self.mag_cov_software)

        if self.vir_ident_software is not None and not isinstance(self.vir_ident_software, str):
            self.vir_ident_software = str(self.vir_ident_software)

        if self.pred_genome_type is not None and not isinstance(self.pred_genome_type, str):
            self.pred_genome_type = str(self.pred_genome_type)

        if self.pred_genome_struc is not None and not isinstance(self.pred_genome_struc, str):
            self.pred_genome_struc = str(self.pred_genome_struc)

        if self.detec_type is not None and not isinstance(self.detec_type, str):
            self.detec_type = str(self.detec_type)

        if self.otu_class_appr is not None and not isinstance(self.otu_class_appr, str):
            self.otu_class_appr = str(self.otu_class_appr)

        if self.otu_seq_comp_appr is not None and not isinstance(self.otu_seq_comp_appr, str):
            self.otu_seq_comp_appr = str(self.otu_seq_comp_appr)

        if self.otu_db is not None and not isinstance(self.otu_db, str):
            self.otu_db = str(self.otu_db)

        if self.host_pred_appr is not None and not isinstance(self.host_pred_appr, str):
            self.host_pred_appr = str(self.host_pred_appr)

        if self.host_pred_est_acc is not None and not isinstance(self.host_pred_est_acc, str):
            self.host_pred_est_acc = str(self.host_pred_est_acc)

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self.samp_collec_method is not None and not isinstance(self.samp_collec_method, str):
            self.samp_collec_method = str(self.samp_collec_method)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, str):
            self.neg_cont_type = str(self.neg_cont_type)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        super().__post_init__(**kwargs)


@dataclass
class MigsPl(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.MigsPl
    class_class_curie: ClassVar[str] = "TEMP:MigsPl"
    class_name: ClassVar[str] = "migs_pl"
    class_model_uri: ClassVar[URIRef] = TEMP.MigsPl

    samp_size: Optional[str] = None
    samp_collec_device: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    contam_screen_input: Optional[str] = None
    wga_amp_kit: Optional[str] = None
    experimental_factor: Optional[str] = None
    lat_lon: Optional[str] = None
    geo_loc_name: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    samp_mat_process: Optional[str] = None
    size_frac: Optional[str] = None
    depth: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    ploidy: Optional[str] = None
    num_replicons: Optional[str] = None
    extrachrom_elements: Optional[str] = None
    estimated_size: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    pathogenicity: Optional[str] = None
    biotic_relationship: Optional[str] = None
    specific_host: Optional[str] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[str] = None
    propagation: Optional[str] = None
    encoded_traits: Optional[str] = None
    source_uvig: Optional[str] = None
    virus_enrich_appr: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[str] = None
    lib_reads_seqd: Optional[str] = None
    lib_layout: Optional[str] = None
    lib_vector: Optional[str] = None
    lib_screen: Optional[str] = None
    target_gene: Optional[str] = None
    target_subfragment: Optional[str] = None
    pcr_primers: Optional[str] = None
    mid: Optional[str] = None
    adapters: Optional[str] = None
    pcr_cond: Optional[str] = None
    seq_meth: Optional[str] = None
    seq_quality_check: Optional[str] = None
    chimera_check: Optional[str] = None
    tax_ident: Optional[str] = None
    single_cell_lysis_prot: Optional[str] = None
    wga_amp_appr: Optional[str] = None
    assembly_qual: Optional[str] = None
    assembly_name: Optional[str] = None
    assembly_software: Optional[str] = None
    annot: Optional[str] = None
    number_contig: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_db: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    x_16s_recover: Optional[str] = None
    x_16s_recover_software: Optional[str] = None
    trnas: Optional[str] = None
    trna_ext_software: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    compl_appr: Optional[str] = None
    contam_score: Optional[str] = None
    contam_screen_param: Optional[str] = None
    decontam_software: Optional[str] = None
    sort_tech: Optional[str] = None
    single_cell_lysis_appr: Optional[str] = None
    bin_param: Optional[str] = None
    bin_software: Optional[str] = None
    reassembly_bin: Optional[str] = None
    mag_cov_software: Optional[str] = None
    vir_ident_software: Optional[str] = None
    pred_genome_type: Optional[str] = None
    pred_genome_struc: Optional[str] = None
    detec_type: Optional[str] = None
    otu_class_appr: Optional[str] = None
    otu_seq_comp_appr: Optional[str] = None
    otu_db: Optional[str] = None
    host_pred_appr: Optional[str] = None
    host_pred_est_acc: Optional[str] = None
    sop: Optional[Union[str, List[str]]] = empty_list()
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    elev: Optional[str] = None
    alt: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_name: Optional[str] = None
    samp_collec_method: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    neg_cont_type: Optional[str] = None
    pos_cont_type: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collec_device is not None and not isinstance(self.samp_collec_device, str):
            self.samp_collec_device = str(self.samp_collec_device)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, str):
            self.contam_screen_input = str(self.contam_screen_input)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.num_replicons is not None and not isinstance(self.num_replicons, str):
            self.num_replicons = str(self.num_replicons)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, str):
            self.extrachrom_elements = str(self.extrachrom_elements)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, str):
            self.biotic_relationship = str(self.biotic_relationship)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.trophic_level is not None and not isinstance(self.trophic_level, str):
            self.trophic_level = str(self.trophic_level)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.source_uvig is not None and not isinstance(self.source_uvig, str):
            self.source_uvig = str(self.source_uvig)

        if self.virus_enrich_appr is not None and not isinstance(self.virus_enrich_appr, str):
            self.virus_enrich_appr = str(self.virus_enrich_appr)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, str):
            self.lib_size = str(self.lib_size)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, str):
            self.lib_reads_seqd = str(self.lib_reads_seqd)

        if self.lib_layout is not None and not isinstance(self.lib_layout, str):
            self.lib_layout = str(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.target_gene is not None and not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.single_cell_lysis_prot is not None and not isinstance(self.single_cell_lysis_prot, str):
            self.single_cell_lysis_prot = str(self.single_cell_lysis_prot)

        if self.wga_amp_appr is not None and not isinstance(self.wga_amp_appr, str):
            self.wga_amp_appr = str(self.wga_amp_appr)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.number_contig is not None and not isinstance(self.number_contig, str):
            self.number_contig = str(self.number_contig)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.x_16s_recover is not None and not isinstance(self.x_16s_recover, str):
            self.x_16s_recover = str(self.x_16s_recover)

        if self.x_16s_recover_software is not None and not isinstance(self.x_16s_recover_software, str):
            self.x_16s_recover_software = str(self.x_16s_recover_software)

        if self.trnas is not None and not isinstance(self.trnas, str):
            self.trnas = str(self.trnas)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.contam_score is not None and not isinstance(self.contam_score, str):
            self.contam_score = str(self.contam_score)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.sort_tech is not None and not isinstance(self.sort_tech, str):
            self.sort_tech = str(self.sort_tech)

        if self.single_cell_lysis_appr is not None and not isinstance(self.single_cell_lysis_appr, str):
            self.single_cell_lysis_appr = str(self.single_cell_lysis_appr)

        if self.bin_param is not None and not isinstance(self.bin_param, str):
            self.bin_param = str(self.bin_param)

        if self.bin_software is not None and not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, str):
            self.reassembly_bin = str(self.reassembly_bin)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, str):
            self.mag_cov_software = str(self.mag_cov_software)

        if self.vir_ident_software is not None and not isinstance(self.vir_ident_software, str):
            self.vir_ident_software = str(self.vir_ident_software)

        if self.pred_genome_type is not None and not isinstance(self.pred_genome_type, str):
            self.pred_genome_type = str(self.pred_genome_type)

        if self.pred_genome_struc is not None and not isinstance(self.pred_genome_struc, str):
            self.pred_genome_struc = str(self.pred_genome_struc)

        if self.detec_type is not None and not isinstance(self.detec_type, str):
            self.detec_type = str(self.detec_type)

        if self.otu_class_appr is not None and not isinstance(self.otu_class_appr, str):
            self.otu_class_appr = str(self.otu_class_appr)

        if self.otu_seq_comp_appr is not None and not isinstance(self.otu_seq_comp_appr, str):
            self.otu_seq_comp_appr = str(self.otu_seq_comp_appr)

        if self.otu_db is not None and not isinstance(self.otu_db, str):
            self.otu_db = str(self.otu_db)

        if self.host_pred_appr is not None and not isinstance(self.host_pred_appr, str):
            self.host_pred_appr = str(self.host_pred_appr)

        if self.host_pred_est_acc is not None and not isinstance(self.host_pred_est_acc, str):
            self.host_pred_est_acc = str(self.host_pred_est_acc)

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self.samp_collec_method is not None and not isinstance(self.samp_collec_method, str):
            self.samp_collec_method = str(self.samp_collec_method)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, str):
            self.neg_cont_type = str(self.neg_cont_type)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        super().__post_init__(**kwargs)


@dataclass
class MigsVi(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.MigsVi
    class_class_curie: ClassVar[str] = "TEMP:MigsVi"
    class_name: ClassVar[str] = "migs_vi"
    class_model_uri: ClassVar[URIRef] = TEMP.MigsVi

    samp_size: Optional[str] = None
    samp_collec_device: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    contam_screen_input: Optional[str] = None
    wga_amp_kit: Optional[str] = None
    experimental_factor: Optional[str] = None
    lat_lon: Optional[str] = None
    geo_loc_name: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    samp_mat_process: Optional[str] = None
    size_frac: Optional[str] = None
    depth: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    ploidy: Optional[str] = None
    num_replicons: Optional[str] = None
    extrachrom_elements: Optional[str] = None
    estimated_size: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    pathogenicity: Optional[str] = None
    biotic_relationship: Optional[str] = None
    specific_host: Optional[str] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[str] = None
    propagation: Optional[str] = None
    encoded_traits: Optional[str] = None
    source_uvig: Optional[str] = None
    virus_enrich_appr: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[str] = None
    lib_reads_seqd: Optional[str] = None
    lib_layout: Optional[str] = None
    lib_vector: Optional[str] = None
    lib_screen: Optional[str] = None
    target_gene: Optional[str] = None
    target_subfragment: Optional[str] = None
    pcr_primers: Optional[str] = None
    mid: Optional[str] = None
    adapters: Optional[str] = None
    pcr_cond: Optional[str] = None
    seq_meth: Optional[str] = None
    seq_quality_check: Optional[str] = None
    chimera_check: Optional[str] = None
    tax_ident: Optional[str] = None
    single_cell_lysis_prot: Optional[str] = None
    wga_amp_appr: Optional[str] = None
    assembly_qual: Optional[str] = None
    assembly_name: Optional[str] = None
    assembly_software: Optional[str] = None
    annot: Optional[str] = None
    number_contig: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_db: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    x_16s_recover: Optional[str] = None
    x_16s_recover_software: Optional[str] = None
    trnas: Optional[str] = None
    trna_ext_software: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    compl_appr: Optional[str] = None
    contam_score: Optional[str] = None
    contam_screen_param: Optional[str] = None
    decontam_software: Optional[str] = None
    sort_tech: Optional[str] = None
    single_cell_lysis_appr: Optional[str] = None
    bin_param: Optional[str] = None
    bin_software: Optional[str] = None
    reassembly_bin: Optional[str] = None
    mag_cov_software: Optional[str] = None
    vir_ident_software: Optional[str] = None
    pred_genome_type: Optional[str] = None
    pred_genome_struc: Optional[str] = None
    detec_type: Optional[str] = None
    otu_class_appr: Optional[str] = None
    otu_seq_comp_appr: Optional[str] = None
    otu_db: Optional[str] = None
    host_pred_appr: Optional[str] = None
    host_pred_est_acc: Optional[str] = None
    sop: Optional[Union[str, List[str]]] = empty_list()
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    elev: Optional[str] = None
    alt: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_name: Optional[str] = None
    samp_collec_method: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    neg_cont_type: Optional[str] = None
    pos_cont_type: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collec_device is not None and not isinstance(self.samp_collec_device, str):
            self.samp_collec_device = str(self.samp_collec_device)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, str):
            self.contam_screen_input = str(self.contam_screen_input)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.num_replicons is not None and not isinstance(self.num_replicons, str):
            self.num_replicons = str(self.num_replicons)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, str):
            self.extrachrom_elements = str(self.extrachrom_elements)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, str):
            self.biotic_relationship = str(self.biotic_relationship)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.trophic_level is not None and not isinstance(self.trophic_level, str):
            self.trophic_level = str(self.trophic_level)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.source_uvig is not None and not isinstance(self.source_uvig, str):
            self.source_uvig = str(self.source_uvig)

        if self.virus_enrich_appr is not None and not isinstance(self.virus_enrich_appr, str):
            self.virus_enrich_appr = str(self.virus_enrich_appr)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, str):
            self.lib_size = str(self.lib_size)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, str):
            self.lib_reads_seqd = str(self.lib_reads_seqd)

        if self.lib_layout is not None and not isinstance(self.lib_layout, str):
            self.lib_layout = str(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.target_gene is not None and not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.single_cell_lysis_prot is not None and not isinstance(self.single_cell_lysis_prot, str):
            self.single_cell_lysis_prot = str(self.single_cell_lysis_prot)

        if self.wga_amp_appr is not None and not isinstance(self.wga_amp_appr, str):
            self.wga_amp_appr = str(self.wga_amp_appr)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.number_contig is not None and not isinstance(self.number_contig, str):
            self.number_contig = str(self.number_contig)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.x_16s_recover is not None and not isinstance(self.x_16s_recover, str):
            self.x_16s_recover = str(self.x_16s_recover)

        if self.x_16s_recover_software is not None and not isinstance(self.x_16s_recover_software, str):
            self.x_16s_recover_software = str(self.x_16s_recover_software)

        if self.trnas is not None and not isinstance(self.trnas, str):
            self.trnas = str(self.trnas)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.contam_score is not None and not isinstance(self.contam_score, str):
            self.contam_score = str(self.contam_score)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.sort_tech is not None and not isinstance(self.sort_tech, str):
            self.sort_tech = str(self.sort_tech)

        if self.single_cell_lysis_appr is not None and not isinstance(self.single_cell_lysis_appr, str):
            self.single_cell_lysis_appr = str(self.single_cell_lysis_appr)

        if self.bin_param is not None and not isinstance(self.bin_param, str):
            self.bin_param = str(self.bin_param)

        if self.bin_software is not None and not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, str):
            self.reassembly_bin = str(self.reassembly_bin)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, str):
            self.mag_cov_software = str(self.mag_cov_software)

        if self.vir_ident_software is not None and not isinstance(self.vir_ident_software, str):
            self.vir_ident_software = str(self.vir_ident_software)

        if self.pred_genome_type is not None and not isinstance(self.pred_genome_type, str):
            self.pred_genome_type = str(self.pred_genome_type)

        if self.pred_genome_struc is not None and not isinstance(self.pred_genome_struc, str):
            self.pred_genome_struc = str(self.pred_genome_struc)

        if self.detec_type is not None and not isinstance(self.detec_type, str):
            self.detec_type = str(self.detec_type)

        if self.otu_class_appr is not None and not isinstance(self.otu_class_appr, str):
            self.otu_class_appr = str(self.otu_class_appr)

        if self.otu_seq_comp_appr is not None and not isinstance(self.otu_seq_comp_appr, str):
            self.otu_seq_comp_appr = str(self.otu_seq_comp_appr)

        if self.otu_db is not None and not isinstance(self.otu_db, str):
            self.otu_db = str(self.otu_db)

        if self.host_pred_appr is not None and not isinstance(self.host_pred_appr, str):
            self.host_pred_appr = str(self.host_pred_appr)

        if self.host_pred_est_acc is not None and not isinstance(self.host_pred_est_acc, str):
            self.host_pred_est_acc = str(self.host_pred_est_acc)

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self.samp_collec_method is not None and not isinstance(self.samp_collec_method, str):
            self.samp_collec_method = str(self.samp_collec_method)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, str):
            self.neg_cont_type = str(self.neg_cont_type)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        super().__post_init__(**kwargs)


@dataclass
class MigsOrg(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.MigsOrg
    class_class_curie: ClassVar[str] = "TEMP:MigsOrg"
    class_name: ClassVar[str] = "migs_org"
    class_model_uri: ClassVar[URIRef] = TEMP.MigsOrg

    samp_size: Optional[str] = None
    samp_collec_device: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    contam_screen_input: Optional[str] = None
    wga_amp_kit: Optional[str] = None
    experimental_factor: Optional[str] = None
    lat_lon: Optional[str] = None
    geo_loc_name: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    samp_mat_process: Optional[str] = None
    size_frac: Optional[str] = None
    depth: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    ploidy: Optional[str] = None
    num_replicons: Optional[str] = None
    extrachrom_elements: Optional[str] = None
    estimated_size: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    pathogenicity: Optional[str] = None
    biotic_relationship: Optional[str] = None
    specific_host: Optional[str] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[str] = None
    propagation: Optional[str] = None
    encoded_traits: Optional[str] = None
    source_uvig: Optional[str] = None
    virus_enrich_appr: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[str] = None
    lib_reads_seqd: Optional[str] = None
    lib_layout: Optional[str] = None
    lib_vector: Optional[str] = None
    lib_screen: Optional[str] = None
    target_gene: Optional[str] = None
    target_subfragment: Optional[str] = None
    pcr_primers: Optional[str] = None
    mid: Optional[str] = None
    adapters: Optional[str] = None
    pcr_cond: Optional[str] = None
    seq_meth: Optional[str] = None
    seq_quality_check: Optional[str] = None
    chimera_check: Optional[str] = None
    tax_ident: Optional[str] = None
    single_cell_lysis_prot: Optional[str] = None
    wga_amp_appr: Optional[str] = None
    assembly_qual: Optional[str] = None
    assembly_name: Optional[str] = None
    assembly_software: Optional[str] = None
    annot: Optional[str] = None
    number_contig: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_db: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    x_16s_recover: Optional[str] = None
    x_16s_recover_software: Optional[str] = None
    trnas: Optional[str] = None
    trna_ext_software: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    compl_appr: Optional[str] = None
    contam_score: Optional[str] = None
    contam_screen_param: Optional[str] = None
    decontam_software: Optional[str] = None
    sort_tech: Optional[str] = None
    single_cell_lysis_appr: Optional[str] = None
    bin_param: Optional[str] = None
    bin_software: Optional[str] = None
    reassembly_bin: Optional[str] = None
    mag_cov_software: Optional[str] = None
    vir_ident_software: Optional[str] = None
    pred_genome_type: Optional[str] = None
    pred_genome_struc: Optional[str] = None
    detec_type: Optional[str] = None
    otu_class_appr: Optional[str] = None
    otu_seq_comp_appr: Optional[str] = None
    otu_db: Optional[str] = None
    host_pred_appr: Optional[str] = None
    host_pred_est_acc: Optional[str] = None
    sop: Optional[Union[str, List[str]]] = empty_list()
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    elev: Optional[str] = None
    alt: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_name: Optional[str] = None
    samp_collec_method: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    neg_cont_type: Optional[str] = None
    pos_cont_type: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collec_device is not None and not isinstance(self.samp_collec_device, str):
            self.samp_collec_device = str(self.samp_collec_device)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, str):
            self.contam_screen_input = str(self.contam_screen_input)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.num_replicons is not None and not isinstance(self.num_replicons, str):
            self.num_replicons = str(self.num_replicons)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, str):
            self.extrachrom_elements = str(self.extrachrom_elements)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, str):
            self.biotic_relationship = str(self.biotic_relationship)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.trophic_level is not None and not isinstance(self.trophic_level, str):
            self.trophic_level = str(self.trophic_level)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.source_uvig is not None and not isinstance(self.source_uvig, str):
            self.source_uvig = str(self.source_uvig)

        if self.virus_enrich_appr is not None and not isinstance(self.virus_enrich_appr, str):
            self.virus_enrich_appr = str(self.virus_enrich_appr)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, str):
            self.lib_size = str(self.lib_size)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, str):
            self.lib_reads_seqd = str(self.lib_reads_seqd)

        if self.lib_layout is not None and not isinstance(self.lib_layout, str):
            self.lib_layout = str(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.target_gene is not None and not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.single_cell_lysis_prot is not None and not isinstance(self.single_cell_lysis_prot, str):
            self.single_cell_lysis_prot = str(self.single_cell_lysis_prot)

        if self.wga_amp_appr is not None and not isinstance(self.wga_amp_appr, str):
            self.wga_amp_appr = str(self.wga_amp_appr)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.number_contig is not None and not isinstance(self.number_contig, str):
            self.number_contig = str(self.number_contig)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.x_16s_recover is not None and not isinstance(self.x_16s_recover, str):
            self.x_16s_recover = str(self.x_16s_recover)

        if self.x_16s_recover_software is not None and not isinstance(self.x_16s_recover_software, str):
            self.x_16s_recover_software = str(self.x_16s_recover_software)

        if self.trnas is not None and not isinstance(self.trnas, str):
            self.trnas = str(self.trnas)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.contam_score is not None and not isinstance(self.contam_score, str):
            self.contam_score = str(self.contam_score)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.sort_tech is not None and not isinstance(self.sort_tech, str):
            self.sort_tech = str(self.sort_tech)

        if self.single_cell_lysis_appr is not None and not isinstance(self.single_cell_lysis_appr, str):
            self.single_cell_lysis_appr = str(self.single_cell_lysis_appr)

        if self.bin_param is not None and not isinstance(self.bin_param, str):
            self.bin_param = str(self.bin_param)

        if self.bin_software is not None and not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, str):
            self.reassembly_bin = str(self.reassembly_bin)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, str):
            self.mag_cov_software = str(self.mag_cov_software)

        if self.vir_ident_software is not None and not isinstance(self.vir_ident_software, str):
            self.vir_ident_software = str(self.vir_ident_software)

        if self.pred_genome_type is not None and not isinstance(self.pred_genome_type, str):
            self.pred_genome_type = str(self.pred_genome_type)

        if self.pred_genome_struc is not None and not isinstance(self.pred_genome_struc, str):
            self.pred_genome_struc = str(self.pred_genome_struc)

        if self.detec_type is not None and not isinstance(self.detec_type, str):
            self.detec_type = str(self.detec_type)

        if self.otu_class_appr is not None and not isinstance(self.otu_class_appr, str):
            self.otu_class_appr = str(self.otu_class_appr)

        if self.otu_seq_comp_appr is not None and not isinstance(self.otu_seq_comp_appr, str):
            self.otu_seq_comp_appr = str(self.otu_seq_comp_appr)

        if self.otu_db is not None and not isinstance(self.otu_db, str):
            self.otu_db = str(self.otu_db)

        if self.host_pred_appr is not None and not isinstance(self.host_pred_appr, str):
            self.host_pred_appr = str(self.host_pred_appr)

        if self.host_pred_est_acc is not None and not isinstance(self.host_pred_est_acc, str):
            self.host_pred_est_acc = str(self.host_pred_est_acc)

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self.samp_collec_method is not None and not isinstance(self.samp_collec_method, str):
            self.samp_collec_method = str(self.samp_collec_method)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, str):
            self.neg_cont_type = str(self.neg_cont_type)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        super().__post_init__(**kwargs)


@dataclass
class Mims(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.Mims
    class_class_curie: ClassVar[str] = "TEMP:Mims"
    class_name: ClassVar[str] = "mims"
    class_model_uri: ClassVar[URIRef] = TEMP.Mims

    samp_size: Optional[str] = None
    samp_collec_device: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    contam_screen_input: Optional[str] = None
    wga_amp_kit: Optional[str] = None
    experimental_factor: Optional[str] = None
    lat_lon: Optional[str] = None
    geo_loc_name: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    samp_mat_process: Optional[str] = None
    size_frac: Optional[str] = None
    depth: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    ploidy: Optional[str] = None
    num_replicons: Optional[str] = None
    extrachrom_elements: Optional[str] = None
    estimated_size: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    pathogenicity: Optional[str] = None
    biotic_relationship: Optional[str] = None
    specific_host: Optional[str] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[str] = None
    propagation: Optional[str] = None
    encoded_traits: Optional[str] = None
    source_uvig: Optional[str] = None
    virus_enrich_appr: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[str] = None
    lib_reads_seqd: Optional[str] = None
    lib_layout: Optional[str] = None
    lib_vector: Optional[str] = None
    lib_screen: Optional[str] = None
    target_gene: Optional[str] = None
    target_subfragment: Optional[str] = None
    pcr_primers: Optional[str] = None
    mid: Optional[str] = None
    adapters: Optional[str] = None
    pcr_cond: Optional[str] = None
    seq_meth: Optional[str] = None
    seq_quality_check: Optional[str] = None
    chimera_check: Optional[str] = None
    tax_ident: Optional[str] = None
    single_cell_lysis_prot: Optional[str] = None
    wga_amp_appr: Optional[str] = None
    assembly_qual: Optional[str] = None
    assembly_name: Optional[str] = None
    assembly_software: Optional[str] = None
    annot: Optional[str] = None
    number_contig: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_db: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    x_16s_recover: Optional[str] = None
    x_16s_recover_software: Optional[str] = None
    trnas: Optional[str] = None
    trna_ext_software: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    compl_appr: Optional[str] = None
    contam_score: Optional[str] = None
    contam_screen_param: Optional[str] = None
    decontam_software: Optional[str] = None
    sort_tech: Optional[str] = None
    single_cell_lysis_appr: Optional[str] = None
    bin_param: Optional[str] = None
    bin_software: Optional[str] = None
    reassembly_bin: Optional[str] = None
    mag_cov_software: Optional[str] = None
    vir_ident_software: Optional[str] = None
    pred_genome_type: Optional[str] = None
    pred_genome_struc: Optional[str] = None
    detec_type: Optional[str] = None
    otu_class_appr: Optional[str] = None
    otu_seq_comp_appr: Optional[str] = None
    otu_db: Optional[str] = None
    host_pred_appr: Optional[str] = None
    host_pred_est_acc: Optional[str] = None
    sop: Optional[Union[str, List[str]]] = empty_list()
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    elev: Optional[str] = None
    alt: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_name: Optional[str] = None
    samp_collec_method: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    neg_cont_type: Optional[str] = None
    pos_cont_type: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collec_device is not None and not isinstance(self.samp_collec_device, str):
            self.samp_collec_device = str(self.samp_collec_device)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, str):
            self.contam_screen_input = str(self.contam_screen_input)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.num_replicons is not None and not isinstance(self.num_replicons, str):
            self.num_replicons = str(self.num_replicons)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, str):
            self.extrachrom_elements = str(self.extrachrom_elements)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, str):
            self.biotic_relationship = str(self.biotic_relationship)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.trophic_level is not None and not isinstance(self.trophic_level, str):
            self.trophic_level = str(self.trophic_level)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.source_uvig is not None and not isinstance(self.source_uvig, str):
            self.source_uvig = str(self.source_uvig)

        if self.virus_enrich_appr is not None and not isinstance(self.virus_enrich_appr, str):
            self.virus_enrich_appr = str(self.virus_enrich_appr)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, str):
            self.lib_size = str(self.lib_size)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, str):
            self.lib_reads_seqd = str(self.lib_reads_seqd)

        if self.lib_layout is not None and not isinstance(self.lib_layout, str):
            self.lib_layout = str(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.target_gene is not None and not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.single_cell_lysis_prot is not None and not isinstance(self.single_cell_lysis_prot, str):
            self.single_cell_lysis_prot = str(self.single_cell_lysis_prot)

        if self.wga_amp_appr is not None and not isinstance(self.wga_amp_appr, str):
            self.wga_amp_appr = str(self.wga_amp_appr)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.number_contig is not None and not isinstance(self.number_contig, str):
            self.number_contig = str(self.number_contig)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.x_16s_recover is not None and not isinstance(self.x_16s_recover, str):
            self.x_16s_recover = str(self.x_16s_recover)

        if self.x_16s_recover_software is not None and not isinstance(self.x_16s_recover_software, str):
            self.x_16s_recover_software = str(self.x_16s_recover_software)

        if self.trnas is not None and not isinstance(self.trnas, str):
            self.trnas = str(self.trnas)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.contam_score is not None and not isinstance(self.contam_score, str):
            self.contam_score = str(self.contam_score)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.sort_tech is not None and not isinstance(self.sort_tech, str):
            self.sort_tech = str(self.sort_tech)

        if self.single_cell_lysis_appr is not None and not isinstance(self.single_cell_lysis_appr, str):
            self.single_cell_lysis_appr = str(self.single_cell_lysis_appr)

        if self.bin_param is not None and not isinstance(self.bin_param, str):
            self.bin_param = str(self.bin_param)

        if self.bin_software is not None and not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, str):
            self.reassembly_bin = str(self.reassembly_bin)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, str):
            self.mag_cov_software = str(self.mag_cov_software)

        if self.vir_ident_software is not None and not isinstance(self.vir_ident_software, str):
            self.vir_ident_software = str(self.vir_ident_software)

        if self.pred_genome_type is not None and not isinstance(self.pred_genome_type, str):
            self.pred_genome_type = str(self.pred_genome_type)

        if self.pred_genome_struc is not None and not isinstance(self.pred_genome_struc, str):
            self.pred_genome_struc = str(self.pred_genome_struc)

        if self.detec_type is not None and not isinstance(self.detec_type, str):
            self.detec_type = str(self.detec_type)

        if self.otu_class_appr is not None and not isinstance(self.otu_class_appr, str):
            self.otu_class_appr = str(self.otu_class_appr)

        if self.otu_seq_comp_appr is not None and not isinstance(self.otu_seq_comp_appr, str):
            self.otu_seq_comp_appr = str(self.otu_seq_comp_appr)

        if self.otu_db is not None and not isinstance(self.otu_db, str):
            self.otu_db = str(self.otu_db)

        if self.host_pred_appr is not None and not isinstance(self.host_pred_appr, str):
            self.host_pred_appr = str(self.host_pred_appr)

        if self.host_pred_est_acc is not None and not isinstance(self.host_pred_est_acc, str):
            self.host_pred_est_acc = str(self.host_pred_est_acc)

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self.samp_collec_method is not None and not isinstance(self.samp_collec_method, str):
            self.samp_collec_method = str(self.samp_collec_method)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, str):
            self.neg_cont_type = str(self.neg_cont_type)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        super().__post_init__(**kwargs)


@dataclass
class MimarksS(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.MimarksS
    class_class_curie: ClassVar[str] = "TEMP:MimarksS"
    class_name: ClassVar[str] = "mimarks_s"
    class_model_uri: ClassVar[URIRef] = TEMP.MimarksS

    samp_size: Optional[str] = None
    samp_collec_device: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    contam_screen_input: Optional[str] = None
    wga_amp_kit: Optional[str] = None
    experimental_factor: Optional[str] = None
    lat_lon: Optional[str] = None
    geo_loc_name: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    samp_mat_process: Optional[str] = None
    size_frac: Optional[str] = None
    depth: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    ploidy: Optional[str] = None
    num_replicons: Optional[str] = None
    extrachrom_elements: Optional[str] = None
    estimated_size: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    pathogenicity: Optional[str] = None
    biotic_relationship: Optional[str] = None
    specific_host: Optional[str] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[str] = None
    propagation: Optional[str] = None
    encoded_traits: Optional[str] = None
    source_uvig: Optional[str] = None
    virus_enrich_appr: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[str] = None
    lib_reads_seqd: Optional[str] = None
    lib_layout: Optional[str] = None
    lib_vector: Optional[str] = None
    lib_screen: Optional[str] = None
    target_gene: Optional[str] = None
    target_subfragment: Optional[str] = None
    pcr_primers: Optional[str] = None
    mid: Optional[str] = None
    adapters: Optional[str] = None
    pcr_cond: Optional[str] = None
    seq_meth: Optional[str] = None
    seq_quality_check: Optional[str] = None
    chimera_check: Optional[str] = None
    tax_ident: Optional[str] = None
    single_cell_lysis_prot: Optional[str] = None
    wga_amp_appr: Optional[str] = None
    assembly_qual: Optional[str] = None
    assembly_name: Optional[str] = None
    assembly_software: Optional[str] = None
    annot: Optional[str] = None
    number_contig: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_db: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    x_16s_recover: Optional[str] = None
    x_16s_recover_software: Optional[str] = None
    trnas: Optional[str] = None
    trna_ext_software: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    compl_appr: Optional[str] = None
    contam_score: Optional[str] = None
    contam_screen_param: Optional[str] = None
    decontam_software: Optional[str] = None
    sort_tech: Optional[str] = None
    single_cell_lysis_appr: Optional[str] = None
    bin_param: Optional[str] = None
    bin_software: Optional[str] = None
    reassembly_bin: Optional[str] = None
    mag_cov_software: Optional[str] = None
    vir_ident_software: Optional[str] = None
    pred_genome_type: Optional[str] = None
    pred_genome_struc: Optional[str] = None
    detec_type: Optional[str] = None
    otu_class_appr: Optional[str] = None
    otu_seq_comp_appr: Optional[str] = None
    otu_db: Optional[str] = None
    host_pred_appr: Optional[str] = None
    host_pred_est_acc: Optional[str] = None
    sop: Optional[Union[str, List[str]]] = empty_list()
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    elev: Optional[str] = None
    alt: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_name: Optional[str] = None
    samp_collec_method: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    neg_cont_type: Optional[str] = None
    pos_cont_type: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collec_device is not None and not isinstance(self.samp_collec_device, str):
            self.samp_collec_device = str(self.samp_collec_device)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, str):
            self.contam_screen_input = str(self.contam_screen_input)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.num_replicons is not None and not isinstance(self.num_replicons, str):
            self.num_replicons = str(self.num_replicons)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, str):
            self.extrachrom_elements = str(self.extrachrom_elements)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, str):
            self.biotic_relationship = str(self.biotic_relationship)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.trophic_level is not None and not isinstance(self.trophic_level, str):
            self.trophic_level = str(self.trophic_level)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.source_uvig is not None and not isinstance(self.source_uvig, str):
            self.source_uvig = str(self.source_uvig)

        if self.virus_enrich_appr is not None and not isinstance(self.virus_enrich_appr, str):
            self.virus_enrich_appr = str(self.virus_enrich_appr)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, str):
            self.lib_size = str(self.lib_size)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, str):
            self.lib_reads_seqd = str(self.lib_reads_seqd)

        if self.lib_layout is not None and not isinstance(self.lib_layout, str):
            self.lib_layout = str(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.target_gene is not None and not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.single_cell_lysis_prot is not None and not isinstance(self.single_cell_lysis_prot, str):
            self.single_cell_lysis_prot = str(self.single_cell_lysis_prot)

        if self.wga_amp_appr is not None and not isinstance(self.wga_amp_appr, str):
            self.wga_amp_appr = str(self.wga_amp_appr)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.number_contig is not None and not isinstance(self.number_contig, str):
            self.number_contig = str(self.number_contig)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.x_16s_recover is not None and not isinstance(self.x_16s_recover, str):
            self.x_16s_recover = str(self.x_16s_recover)

        if self.x_16s_recover_software is not None and not isinstance(self.x_16s_recover_software, str):
            self.x_16s_recover_software = str(self.x_16s_recover_software)

        if self.trnas is not None and not isinstance(self.trnas, str):
            self.trnas = str(self.trnas)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.contam_score is not None and not isinstance(self.contam_score, str):
            self.contam_score = str(self.contam_score)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.sort_tech is not None and not isinstance(self.sort_tech, str):
            self.sort_tech = str(self.sort_tech)

        if self.single_cell_lysis_appr is not None and not isinstance(self.single_cell_lysis_appr, str):
            self.single_cell_lysis_appr = str(self.single_cell_lysis_appr)

        if self.bin_param is not None and not isinstance(self.bin_param, str):
            self.bin_param = str(self.bin_param)

        if self.bin_software is not None and not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, str):
            self.reassembly_bin = str(self.reassembly_bin)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, str):
            self.mag_cov_software = str(self.mag_cov_software)

        if self.vir_ident_software is not None and not isinstance(self.vir_ident_software, str):
            self.vir_ident_software = str(self.vir_ident_software)

        if self.pred_genome_type is not None and not isinstance(self.pred_genome_type, str):
            self.pred_genome_type = str(self.pred_genome_type)

        if self.pred_genome_struc is not None and not isinstance(self.pred_genome_struc, str):
            self.pred_genome_struc = str(self.pred_genome_struc)

        if self.detec_type is not None and not isinstance(self.detec_type, str):
            self.detec_type = str(self.detec_type)

        if self.otu_class_appr is not None and not isinstance(self.otu_class_appr, str):
            self.otu_class_appr = str(self.otu_class_appr)

        if self.otu_seq_comp_appr is not None and not isinstance(self.otu_seq_comp_appr, str):
            self.otu_seq_comp_appr = str(self.otu_seq_comp_appr)

        if self.otu_db is not None and not isinstance(self.otu_db, str):
            self.otu_db = str(self.otu_db)

        if self.host_pred_appr is not None and not isinstance(self.host_pred_appr, str):
            self.host_pred_appr = str(self.host_pred_appr)

        if self.host_pred_est_acc is not None and not isinstance(self.host_pred_est_acc, str):
            self.host_pred_est_acc = str(self.host_pred_est_acc)

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self.samp_collec_method is not None and not isinstance(self.samp_collec_method, str):
            self.samp_collec_method = str(self.samp_collec_method)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, str):
            self.neg_cont_type = str(self.neg_cont_type)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        super().__post_init__(**kwargs)


@dataclass
class MimarksC(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.MimarksC
    class_class_curie: ClassVar[str] = "TEMP:MimarksC"
    class_name: ClassVar[str] = "mimarks_c"
    class_model_uri: ClassVar[URIRef] = TEMP.MimarksC

    samp_size: Optional[str] = None
    samp_collec_device: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    contam_screen_input: Optional[str] = None
    wga_amp_kit: Optional[str] = None
    experimental_factor: Optional[str] = None
    lat_lon: Optional[str] = None
    geo_loc_name: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    samp_mat_process: Optional[str] = None
    size_frac: Optional[str] = None
    depth: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    ploidy: Optional[str] = None
    num_replicons: Optional[str] = None
    extrachrom_elements: Optional[str] = None
    estimated_size: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    pathogenicity: Optional[str] = None
    biotic_relationship: Optional[str] = None
    specific_host: Optional[str] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[str] = None
    propagation: Optional[str] = None
    encoded_traits: Optional[str] = None
    source_uvig: Optional[str] = None
    virus_enrich_appr: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[str] = None
    lib_reads_seqd: Optional[str] = None
    lib_layout: Optional[str] = None
    lib_vector: Optional[str] = None
    lib_screen: Optional[str] = None
    target_gene: Optional[str] = None
    target_subfragment: Optional[str] = None
    pcr_primers: Optional[str] = None
    mid: Optional[str] = None
    adapters: Optional[str] = None
    pcr_cond: Optional[str] = None
    seq_meth: Optional[str] = None
    seq_quality_check: Optional[str] = None
    chimera_check: Optional[str] = None
    tax_ident: Optional[str] = None
    single_cell_lysis_prot: Optional[str] = None
    wga_amp_appr: Optional[str] = None
    assembly_qual: Optional[str] = None
    assembly_name: Optional[str] = None
    assembly_software: Optional[str] = None
    annot: Optional[str] = None
    number_contig: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_db: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    x_16s_recover: Optional[str] = None
    x_16s_recover_software: Optional[str] = None
    trnas: Optional[str] = None
    trna_ext_software: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    compl_appr: Optional[str] = None
    contam_score: Optional[str] = None
    contam_screen_param: Optional[str] = None
    decontam_software: Optional[str] = None
    sort_tech: Optional[str] = None
    single_cell_lysis_appr: Optional[str] = None
    bin_param: Optional[str] = None
    bin_software: Optional[str] = None
    reassembly_bin: Optional[str] = None
    mag_cov_software: Optional[str] = None
    vir_ident_software: Optional[str] = None
    pred_genome_type: Optional[str] = None
    pred_genome_struc: Optional[str] = None
    detec_type: Optional[str] = None
    otu_class_appr: Optional[str] = None
    otu_seq_comp_appr: Optional[str] = None
    otu_db: Optional[str] = None
    host_pred_appr: Optional[str] = None
    host_pred_est_acc: Optional[str] = None
    sop: Optional[Union[str, List[str]]] = empty_list()
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    elev: Optional[str] = None
    alt: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_name: Optional[str] = None
    samp_collec_method: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    neg_cont_type: Optional[str] = None
    pos_cont_type: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collec_device is not None and not isinstance(self.samp_collec_device, str):
            self.samp_collec_device = str(self.samp_collec_device)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, str):
            self.contam_screen_input = str(self.contam_screen_input)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.num_replicons is not None and not isinstance(self.num_replicons, str):
            self.num_replicons = str(self.num_replicons)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, str):
            self.extrachrom_elements = str(self.extrachrom_elements)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, str):
            self.biotic_relationship = str(self.biotic_relationship)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.trophic_level is not None and not isinstance(self.trophic_level, str):
            self.trophic_level = str(self.trophic_level)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.source_uvig is not None and not isinstance(self.source_uvig, str):
            self.source_uvig = str(self.source_uvig)

        if self.virus_enrich_appr is not None and not isinstance(self.virus_enrich_appr, str):
            self.virus_enrich_appr = str(self.virus_enrich_appr)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, str):
            self.lib_size = str(self.lib_size)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, str):
            self.lib_reads_seqd = str(self.lib_reads_seqd)

        if self.lib_layout is not None and not isinstance(self.lib_layout, str):
            self.lib_layout = str(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.target_gene is not None and not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.single_cell_lysis_prot is not None and not isinstance(self.single_cell_lysis_prot, str):
            self.single_cell_lysis_prot = str(self.single_cell_lysis_prot)

        if self.wga_amp_appr is not None and not isinstance(self.wga_amp_appr, str):
            self.wga_amp_appr = str(self.wga_amp_appr)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.number_contig is not None and not isinstance(self.number_contig, str):
            self.number_contig = str(self.number_contig)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.x_16s_recover is not None and not isinstance(self.x_16s_recover, str):
            self.x_16s_recover = str(self.x_16s_recover)

        if self.x_16s_recover_software is not None and not isinstance(self.x_16s_recover_software, str):
            self.x_16s_recover_software = str(self.x_16s_recover_software)

        if self.trnas is not None and not isinstance(self.trnas, str):
            self.trnas = str(self.trnas)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.contam_score is not None and not isinstance(self.contam_score, str):
            self.contam_score = str(self.contam_score)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.sort_tech is not None and not isinstance(self.sort_tech, str):
            self.sort_tech = str(self.sort_tech)

        if self.single_cell_lysis_appr is not None and not isinstance(self.single_cell_lysis_appr, str):
            self.single_cell_lysis_appr = str(self.single_cell_lysis_appr)

        if self.bin_param is not None and not isinstance(self.bin_param, str):
            self.bin_param = str(self.bin_param)

        if self.bin_software is not None and not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, str):
            self.reassembly_bin = str(self.reassembly_bin)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, str):
            self.mag_cov_software = str(self.mag_cov_software)

        if self.vir_ident_software is not None and not isinstance(self.vir_ident_software, str):
            self.vir_ident_software = str(self.vir_ident_software)

        if self.pred_genome_type is not None and not isinstance(self.pred_genome_type, str):
            self.pred_genome_type = str(self.pred_genome_type)

        if self.pred_genome_struc is not None and not isinstance(self.pred_genome_struc, str):
            self.pred_genome_struc = str(self.pred_genome_struc)

        if self.detec_type is not None and not isinstance(self.detec_type, str):
            self.detec_type = str(self.detec_type)

        if self.otu_class_appr is not None and not isinstance(self.otu_class_appr, str):
            self.otu_class_appr = str(self.otu_class_appr)

        if self.otu_seq_comp_appr is not None and not isinstance(self.otu_seq_comp_appr, str):
            self.otu_seq_comp_appr = str(self.otu_seq_comp_appr)

        if self.otu_db is not None and not isinstance(self.otu_db, str):
            self.otu_db = str(self.otu_db)

        if self.host_pred_appr is not None and not isinstance(self.host_pred_appr, str):
            self.host_pred_appr = str(self.host_pred_appr)

        if self.host_pred_est_acc is not None and not isinstance(self.host_pred_est_acc, str):
            self.host_pred_est_acc = str(self.host_pred_est_acc)

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self.samp_collec_method is not None and not isinstance(self.samp_collec_method, str):
            self.samp_collec_method = str(self.samp_collec_method)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, str):
            self.neg_cont_type = str(self.neg_cont_type)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        super().__post_init__(**kwargs)


@dataclass
class Misag(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.Misag
    class_class_curie: ClassVar[str] = "TEMP:Misag"
    class_name: ClassVar[str] = "misag"
    class_model_uri: ClassVar[URIRef] = TEMP.Misag

    samp_size: Optional[str] = None
    samp_collec_device: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    contam_screen_input: Optional[str] = None
    wga_amp_kit: Optional[str] = None
    experimental_factor: Optional[str] = None
    lat_lon: Optional[str] = None
    geo_loc_name: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    samp_mat_process: Optional[str] = None
    size_frac: Optional[str] = None
    depth: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    ploidy: Optional[str] = None
    num_replicons: Optional[str] = None
    extrachrom_elements: Optional[str] = None
    estimated_size: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    pathogenicity: Optional[str] = None
    biotic_relationship: Optional[str] = None
    specific_host: Optional[str] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[str] = None
    propagation: Optional[str] = None
    encoded_traits: Optional[str] = None
    source_uvig: Optional[str] = None
    virus_enrich_appr: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[str] = None
    lib_reads_seqd: Optional[str] = None
    lib_layout: Optional[str] = None
    lib_vector: Optional[str] = None
    lib_screen: Optional[str] = None
    target_gene: Optional[str] = None
    target_subfragment: Optional[str] = None
    pcr_primers: Optional[str] = None
    mid: Optional[str] = None
    adapters: Optional[str] = None
    pcr_cond: Optional[str] = None
    seq_meth: Optional[str] = None
    seq_quality_check: Optional[str] = None
    chimera_check: Optional[str] = None
    tax_ident: Optional[str] = None
    single_cell_lysis_prot: Optional[str] = None
    wga_amp_appr: Optional[str] = None
    assembly_qual: Optional[str] = None
    assembly_name: Optional[str] = None
    assembly_software: Optional[str] = None
    annot: Optional[str] = None
    number_contig: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_db: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    x_16s_recover: Optional[str] = None
    x_16s_recover_software: Optional[str] = None
    trnas: Optional[str] = None
    trna_ext_software: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    compl_appr: Optional[str] = None
    contam_score: Optional[str] = None
    contam_screen_param: Optional[str] = None
    decontam_software: Optional[str] = None
    sort_tech: Optional[str] = None
    single_cell_lysis_appr: Optional[str] = None
    bin_param: Optional[str] = None
    bin_software: Optional[str] = None
    reassembly_bin: Optional[str] = None
    mag_cov_software: Optional[str] = None
    vir_ident_software: Optional[str] = None
    pred_genome_type: Optional[str] = None
    pred_genome_struc: Optional[str] = None
    detec_type: Optional[str] = None
    otu_class_appr: Optional[str] = None
    otu_seq_comp_appr: Optional[str] = None
    otu_db: Optional[str] = None
    host_pred_appr: Optional[str] = None
    host_pred_est_acc: Optional[str] = None
    sop: Optional[Union[str, List[str]]] = empty_list()
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    elev: Optional[str] = None
    alt: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_name: Optional[str] = None
    samp_collec_method: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    neg_cont_type: Optional[str] = None
    pos_cont_type: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collec_device is not None and not isinstance(self.samp_collec_device, str):
            self.samp_collec_device = str(self.samp_collec_device)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, str):
            self.contam_screen_input = str(self.contam_screen_input)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.num_replicons is not None and not isinstance(self.num_replicons, str):
            self.num_replicons = str(self.num_replicons)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, str):
            self.extrachrom_elements = str(self.extrachrom_elements)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, str):
            self.biotic_relationship = str(self.biotic_relationship)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.trophic_level is not None and not isinstance(self.trophic_level, str):
            self.trophic_level = str(self.trophic_level)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.source_uvig is not None and not isinstance(self.source_uvig, str):
            self.source_uvig = str(self.source_uvig)

        if self.virus_enrich_appr is not None and not isinstance(self.virus_enrich_appr, str):
            self.virus_enrich_appr = str(self.virus_enrich_appr)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, str):
            self.lib_size = str(self.lib_size)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, str):
            self.lib_reads_seqd = str(self.lib_reads_seqd)

        if self.lib_layout is not None and not isinstance(self.lib_layout, str):
            self.lib_layout = str(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.target_gene is not None and not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.single_cell_lysis_prot is not None and not isinstance(self.single_cell_lysis_prot, str):
            self.single_cell_lysis_prot = str(self.single_cell_lysis_prot)

        if self.wga_amp_appr is not None and not isinstance(self.wga_amp_appr, str):
            self.wga_amp_appr = str(self.wga_amp_appr)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.number_contig is not None and not isinstance(self.number_contig, str):
            self.number_contig = str(self.number_contig)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.x_16s_recover is not None and not isinstance(self.x_16s_recover, str):
            self.x_16s_recover = str(self.x_16s_recover)

        if self.x_16s_recover_software is not None and not isinstance(self.x_16s_recover_software, str):
            self.x_16s_recover_software = str(self.x_16s_recover_software)

        if self.trnas is not None and not isinstance(self.trnas, str):
            self.trnas = str(self.trnas)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.contam_score is not None and not isinstance(self.contam_score, str):
            self.contam_score = str(self.contam_score)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.sort_tech is not None and not isinstance(self.sort_tech, str):
            self.sort_tech = str(self.sort_tech)

        if self.single_cell_lysis_appr is not None and not isinstance(self.single_cell_lysis_appr, str):
            self.single_cell_lysis_appr = str(self.single_cell_lysis_appr)

        if self.bin_param is not None and not isinstance(self.bin_param, str):
            self.bin_param = str(self.bin_param)

        if self.bin_software is not None and not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, str):
            self.reassembly_bin = str(self.reassembly_bin)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, str):
            self.mag_cov_software = str(self.mag_cov_software)

        if self.vir_ident_software is not None and not isinstance(self.vir_ident_software, str):
            self.vir_ident_software = str(self.vir_ident_software)

        if self.pred_genome_type is not None and not isinstance(self.pred_genome_type, str):
            self.pred_genome_type = str(self.pred_genome_type)

        if self.pred_genome_struc is not None and not isinstance(self.pred_genome_struc, str):
            self.pred_genome_struc = str(self.pred_genome_struc)

        if self.detec_type is not None and not isinstance(self.detec_type, str):
            self.detec_type = str(self.detec_type)

        if self.otu_class_appr is not None and not isinstance(self.otu_class_appr, str):
            self.otu_class_appr = str(self.otu_class_appr)

        if self.otu_seq_comp_appr is not None and not isinstance(self.otu_seq_comp_appr, str):
            self.otu_seq_comp_appr = str(self.otu_seq_comp_appr)

        if self.otu_db is not None and not isinstance(self.otu_db, str):
            self.otu_db = str(self.otu_db)

        if self.host_pred_appr is not None and not isinstance(self.host_pred_appr, str):
            self.host_pred_appr = str(self.host_pred_appr)

        if self.host_pred_est_acc is not None and not isinstance(self.host_pred_est_acc, str):
            self.host_pred_est_acc = str(self.host_pred_est_acc)

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self.samp_collec_method is not None and not isinstance(self.samp_collec_method, str):
            self.samp_collec_method = str(self.samp_collec_method)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, str):
            self.neg_cont_type = str(self.neg_cont_type)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        super().__post_init__(**kwargs)


@dataclass
class Mimag(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.Mimag
    class_class_curie: ClassVar[str] = "TEMP:Mimag"
    class_name: ClassVar[str] = "mimag"
    class_model_uri: ClassVar[URIRef] = TEMP.Mimag

    samp_size: Optional[str] = None
    samp_collec_device: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    contam_screen_input: Optional[str] = None
    wga_amp_kit: Optional[str] = None
    experimental_factor: Optional[str] = None
    lat_lon: Optional[str] = None
    geo_loc_name: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    samp_mat_process: Optional[str] = None
    size_frac: Optional[str] = None
    depth: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    ploidy: Optional[str] = None
    num_replicons: Optional[str] = None
    extrachrom_elements: Optional[str] = None
    estimated_size: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    pathogenicity: Optional[str] = None
    biotic_relationship: Optional[str] = None
    specific_host: Optional[str] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[str] = None
    propagation: Optional[str] = None
    encoded_traits: Optional[str] = None
    source_uvig: Optional[str] = None
    virus_enrich_appr: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[str] = None
    lib_reads_seqd: Optional[str] = None
    lib_layout: Optional[str] = None
    lib_vector: Optional[str] = None
    lib_screen: Optional[str] = None
    target_gene: Optional[str] = None
    target_subfragment: Optional[str] = None
    pcr_primers: Optional[str] = None
    mid: Optional[str] = None
    adapters: Optional[str] = None
    pcr_cond: Optional[str] = None
    seq_meth: Optional[str] = None
    seq_quality_check: Optional[str] = None
    chimera_check: Optional[str] = None
    tax_ident: Optional[str] = None
    single_cell_lysis_prot: Optional[str] = None
    wga_amp_appr: Optional[str] = None
    assembly_qual: Optional[str] = None
    assembly_name: Optional[str] = None
    assembly_software: Optional[str] = None
    annot: Optional[str] = None
    number_contig: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_db: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    x_16s_recover: Optional[str] = None
    x_16s_recover_software: Optional[str] = None
    trnas: Optional[str] = None
    trna_ext_software: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    compl_appr: Optional[str] = None
    contam_score: Optional[str] = None
    contam_screen_param: Optional[str] = None
    decontam_software: Optional[str] = None
    sort_tech: Optional[str] = None
    single_cell_lysis_appr: Optional[str] = None
    bin_param: Optional[str] = None
    bin_software: Optional[str] = None
    reassembly_bin: Optional[str] = None
    mag_cov_software: Optional[str] = None
    vir_ident_software: Optional[str] = None
    pred_genome_type: Optional[str] = None
    pred_genome_struc: Optional[str] = None
    detec_type: Optional[str] = None
    otu_class_appr: Optional[str] = None
    otu_seq_comp_appr: Optional[str] = None
    otu_db: Optional[str] = None
    host_pred_appr: Optional[str] = None
    host_pred_est_acc: Optional[str] = None
    sop: Optional[Union[str, List[str]]] = empty_list()
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    elev: Optional[str] = None
    alt: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_name: Optional[str] = None
    samp_collec_method: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    neg_cont_type: Optional[str] = None
    pos_cont_type: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collec_device is not None and not isinstance(self.samp_collec_device, str):
            self.samp_collec_device = str(self.samp_collec_device)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, str):
            self.contam_screen_input = str(self.contam_screen_input)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.num_replicons is not None and not isinstance(self.num_replicons, str):
            self.num_replicons = str(self.num_replicons)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, str):
            self.extrachrom_elements = str(self.extrachrom_elements)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, str):
            self.biotic_relationship = str(self.biotic_relationship)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.trophic_level is not None and not isinstance(self.trophic_level, str):
            self.trophic_level = str(self.trophic_level)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.source_uvig is not None and not isinstance(self.source_uvig, str):
            self.source_uvig = str(self.source_uvig)

        if self.virus_enrich_appr is not None and not isinstance(self.virus_enrich_appr, str):
            self.virus_enrich_appr = str(self.virus_enrich_appr)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, str):
            self.lib_size = str(self.lib_size)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, str):
            self.lib_reads_seqd = str(self.lib_reads_seqd)

        if self.lib_layout is not None and not isinstance(self.lib_layout, str):
            self.lib_layout = str(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.target_gene is not None and not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.single_cell_lysis_prot is not None and not isinstance(self.single_cell_lysis_prot, str):
            self.single_cell_lysis_prot = str(self.single_cell_lysis_prot)

        if self.wga_amp_appr is not None and not isinstance(self.wga_amp_appr, str):
            self.wga_amp_appr = str(self.wga_amp_appr)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.number_contig is not None and not isinstance(self.number_contig, str):
            self.number_contig = str(self.number_contig)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.x_16s_recover is not None and not isinstance(self.x_16s_recover, str):
            self.x_16s_recover = str(self.x_16s_recover)

        if self.x_16s_recover_software is not None and not isinstance(self.x_16s_recover_software, str):
            self.x_16s_recover_software = str(self.x_16s_recover_software)

        if self.trnas is not None and not isinstance(self.trnas, str):
            self.trnas = str(self.trnas)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.contam_score is not None and not isinstance(self.contam_score, str):
            self.contam_score = str(self.contam_score)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.sort_tech is not None and not isinstance(self.sort_tech, str):
            self.sort_tech = str(self.sort_tech)

        if self.single_cell_lysis_appr is not None and not isinstance(self.single_cell_lysis_appr, str):
            self.single_cell_lysis_appr = str(self.single_cell_lysis_appr)

        if self.bin_param is not None and not isinstance(self.bin_param, str):
            self.bin_param = str(self.bin_param)

        if self.bin_software is not None and not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, str):
            self.reassembly_bin = str(self.reassembly_bin)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, str):
            self.mag_cov_software = str(self.mag_cov_software)

        if self.vir_ident_software is not None and not isinstance(self.vir_ident_software, str):
            self.vir_ident_software = str(self.vir_ident_software)

        if self.pred_genome_type is not None and not isinstance(self.pred_genome_type, str):
            self.pred_genome_type = str(self.pred_genome_type)

        if self.pred_genome_struc is not None and not isinstance(self.pred_genome_struc, str):
            self.pred_genome_struc = str(self.pred_genome_struc)

        if self.detec_type is not None and not isinstance(self.detec_type, str):
            self.detec_type = str(self.detec_type)

        if self.otu_class_appr is not None and not isinstance(self.otu_class_appr, str):
            self.otu_class_appr = str(self.otu_class_appr)

        if self.otu_seq_comp_appr is not None and not isinstance(self.otu_seq_comp_appr, str):
            self.otu_seq_comp_appr = str(self.otu_seq_comp_appr)

        if self.otu_db is not None and not isinstance(self.otu_db, str):
            self.otu_db = str(self.otu_db)

        if self.host_pred_appr is not None and not isinstance(self.host_pred_appr, str):
            self.host_pred_appr = str(self.host_pred_appr)

        if self.host_pred_est_acc is not None and not isinstance(self.host_pred_est_acc, str):
            self.host_pred_est_acc = str(self.host_pred_est_acc)

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self.samp_collec_method is not None and not isinstance(self.samp_collec_method, str):
            self.samp_collec_method = str(self.samp_collec_method)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, str):
            self.neg_cont_type = str(self.neg_cont_type)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        super().__post_init__(**kwargs)


@dataclass
class Miuvig(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.Miuvig
    class_class_curie: ClassVar[str] = "TEMP:Miuvig"
    class_name: ClassVar[str] = "miuvig"
    class_model_uri: ClassVar[URIRef] = TEMP.Miuvig

    samp_size: Optional[str] = None
    samp_collec_device: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    contam_screen_input: Optional[str] = None
    wga_amp_kit: Optional[str] = None
    experimental_factor: Optional[str] = None
    lat_lon: Optional[str] = None
    geo_loc_name: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    rel_to_oxygen: Optional[str] = None
    samp_mat_process: Optional[str] = None
    size_frac: Optional[str] = None
    depth: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    ploidy: Optional[str] = None
    num_replicons: Optional[str] = None
    extrachrom_elements: Optional[str] = None
    estimated_size: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    pathogenicity: Optional[str] = None
    biotic_relationship: Optional[str] = None
    specific_host: Optional[str] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[str] = None
    propagation: Optional[str] = None
    encoded_traits: Optional[str] = None
    source_uvig: Optional[str] = None
    virus_enrich_appr: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[str] = None
    lib_reads_seqd: Optional[str] = None
    lib_layout: Optional[str] = None
    lib_vector: Optional[str] = None
    lib_screen: Optional[str] = None
    target_gene: Optional[str] = None
    target_subfragment: Optional[str] = None
    pcr_primers: Optional[str] = None
    mid: Optional[str] = None
    adapters: Optional[str] = None
    pcr_cond: Optional[str] = None
    seq_meth: Optional[str] = None
    seq_quality_check: Optional[str] = None
    chimera_check: Optional[str] = None
    tax_ident: Optional[str] = None
    single_cell_lysis_prot: Optional[str] = None
    wga_amp_appr: Optional[str] = None
    assembly_qual: Optional[str] = None
    assembly_name: Optional[str] = None
    assembly_software: Optional[str] = None
    annot: Optional[str] = None
    number_contig: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_db: Optional[str] = None
    sim_search_meth: Optional[str] = None
    tax_class: Optional[str] = None
    x_16s_recover: Optional[str] = None
    x_16s_recover_software: Optional[str] = None
    trnas: Optional[str] = None
    trna_ext_software: Optional[str] = None
    compl_score: Optional[str] = None
    compl_software: Optional[str] = None
    compl_appr: Optional[str] = None
    contam_score: Optional[str] = None
    contam_screen_param: Optional[str] = None
    decontam_software: Optional[str] = None
    sort_tech: Optional[str] = None
    single_cell_lysis_appr: Optional[str] = None
    bin_param: Optional[str] = None
    bin_software: Optional[str] = None
    reassembly_bin: Optional[str] = None
    mag_cov_software: Optional[str] = None
    vir_ident_software: Optional[str] = None
    pred_genome_type: Optional[str] = None
    pred_genome_struc: Optional[str] = None
    detec_type: Optional[str] = None
    otu_class_appr: Optional[str] = None
    otu_seq_comp_appr: Optional[str] = None
    otu_db: Optional[str] = None
    host_pred_appr: Optional[str] = None
    host_pred_est_acc: Optional[str] = None
    sop: Optional[Union[str, List[str]]] = empty_list()
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    elev: Optional[str] = None
    alt: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_name: Optional[str] = None
    samp_collec_method: Optional[str] = None
    samp_taxon_id: Optional[str] = None
    neg_cont_type: Optional[str] = None
    pos_cont_type: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collec_device is not None and not isinstance(self.samp_collec_device, str):
            self.samp_collec_device = str(self.samp_collec_device)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, str):
            self.contam_screen_input = str(self.contam_screen_input)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        if self.experimental_factor is not None and not isinstance(self.experimental_factor, str):
            self.experimental_factor = str(self.experimental_factor)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, str):
            self.rel_to_oxygen = str(self.rel_to_oxygen)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.num_replicons is not None and not isinstance(self.num_replicons, str):
            self.num_replicons = str(self.num_replicons)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, str):
            self.extrachrom_elements = str(self.extrachrom_elements)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, str):
            self.biotic_relationship = str(self.biotic_relationship)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.trophic_level is not None and not isinstance(self.trophic_level, str):
            self.trophic_level = str(self.trophic_level)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.source_uvig is not None and not isinstance(self.source_uvig, str):
            self.source_uvig = str(self.source_uvig)

        if self.virus_enrich_appr is not None and not isinstance(self.virus_enrich_appr, str):
            self.virus_enrich_appr = str(self.virus_enrich_appr)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, str):
            self.lib_size = str(self.lib_size)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, str):
            self.lib_reads_seqd = str(self.lib_reads_seqd)

        if self.lib_layout is not None and not isinstance(self.lib_layout, str):
            self.lib_layout = str(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.target_gene is not None and not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.tax_ident is not None and not isinstance(self.tax_ident, str):
            self.tax_ident = str(self.tax_ident)

        if self.single_cell_lysis_prot is not None and not isinstance(self.single_cell_lysis_prot, str):
            self.single_cell_lysis_prot = str(self.single_cell_lysis_prot)

        if self.wga_amp_appr is not None and not isinstance(self.wga_amp_appr, str):
            self.wga_amp_appr = str(self.wga_amp_appr)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.number_contig is not None and not isinstance(self.number_contig, str):
            self.number_contig = str(self.number_contig)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.x_16s_recover is not None and not isinstance(self.x_16s_recover, str):
            self.x_16s_recover = str(self.x_16s_recover)

        if self.x_16s_recover_software is not None and not isinstance(self.x_16s_recover_software, str):
            self.x_16s_recover_software = str(self.x_16s_recover_software)

        if self.trnas is not None and not isinstance(self.trnas, str):
            self.trnas = str(self.trnas)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.compl_appr is not None and not isinstance(self.compl_appr, str):
            self.compl_appr = str(self.compl_appr)

        if self.contam_score is not None and not isinstance(self.contam_score, str):
            self.contam_score = str(self.contam_score)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.sort_tech is not None and not isinstance(self.sort_tech, str):
            self.sort_tech = str(self.sort_tech)

        if self.single_cell_lysis_appr is not None and not isinstance(self.single_cell_lysis_appr, str):
            self.single_cell_lysis_appr = str(self.single_cell_lysis_appr)

        if self.bin_param is not None and not isinstance(self.bin_param, str):
            self.bin_param = str(self.bin_param)

        if self.bin_software is not None and not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, str):
            self.reassembly_bin = str(self.reassembly_bin)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, str):
            self.mag_cov_software = str(self.mag_cov_software)

        if self.vir_ident_software is not None and not isinstance(self.vir_ident_software, str):
            self.vir_ident_software = str(self.vir_ident_software)

        if self.pred_genome_type is not None and not isinstance(self.pred_genome_type, str):
            self.pred_genome_type = str(self.pred_genome_type)

        if self.pred_genome_struc is not None and not isinstance(self.pred_genome_struc, str):
            self.pred_genome_struc = str(self.pred_genome_struc)

        if self.detec_type is not None and not isinstance(self.detec_type, str):
            self.detec_type = str(self.detec_type)

        if self.otu_class_appr is not None and not isinstance(self.otu_class_appr, str):
            self.otu_class_appr = str(self.otu_class_appr)

        if self.otu_seq_comp_appr is not None and not isinstance(self.otu_seq_comp_appr, str):
            self.otu_seq_comp_appr = str(self.otu_seq_comp_appr)

        if self.otu_db is not None and not isinstance(self.otu_db, str):
            self.otu_db = str(self.otu_db)

        if self.host_pred_appr is not None and not isinstance(self.host_pred_appr, str):
            self.host_pred_appr = str(self.host_pred_appr)

        if self.host_pred_est_acc is not None and not isinstance(self.host_pred_est_acc, str):
            self.host_pred_est_acc = str(self.host_pred_est_acc)

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self.samp_collec_method is not None and not isinstance(self.samp_collec_method, str):
            self.samp_collec_method = str(self.samp_collec_method)

        if self.samp_taxon_id is not None and not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, str):
            self.neg_cont_type = str(self.neg_cont_type)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        super().__post_init__(**kwargs)


@dataclass
class Agriculture(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.Agriculture
    class_class_curie: ClassVar[str] = "TEMP:Agriculture"
    class_name: ClassVar[str] = "agriculture"
    class_model_uri: ClassVar[URIRef] = TEMP.Agriculture

    samp_size: Optional[str] = None
    samp_collect_device: Optional[str] = None
    isol_growth_condt: Optional[str] = None
    samp_mat_process: Optional[str] = None
    soil_depth: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    pathogenicity: Optional[str] = None
    biotic_relationship: Optional[str] = None
    specific_host: Optional[str] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[str] = None
    lib_reads_seqd: Optional[str] = None
    lib_layout: Optional[str] = None
    lib_vector: Optional[str] = None
    lib_screen: Optional[str] = None
    target_gene: Optional[str] = None
    target_subfragment: Optional[str] = None
    pcr_primers: Optional[str] = None
    mid: Optional[str] = None
    adapters: Optional[str] = None
    pcr_cond: Optional[str] = None
    seq_meth: Optional[str] = None
    seq_quality_check: Optional[str] = None
    chimera_check: Optional[str] = None
    assembly_software: Optional[str] = None
    assembly_name: Optional[str] = None
    assembly_quality: Optional[str] = None
    annot: Optional[str] = None
    sop: Optional[Union[str, List[str]]] = empty_list()
    url: Optional[Union[str, List[str]]] = empty_list()
    elev: Optional[str] = None
    humidity: Optional[str] = None
    organism_count: Optional[str] = None
    samp_stor_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    solar_irradiance: Optional[Union[str, List[str]]] = empty_list()
    temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    porosity: Optional[str] = None
    ances_data: Optional[str] = None
    host_common_name: Optional[str] = None
    host_taxid: Optional[str] = None
    host_life_stage: Optional[str] = None
    host_age: Optional[str] = None
    host_length: Optional[str] = None
    host_dry_mass: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    cur_vegetation: Optional[str] = None
    cur_vegetation_meth: Optional[str] = None
    previous_land_use: Optional[str] = None
    previous_land_use_meth: Optional[str] = None
    crop_rotation: Optional[str] = None
    flooding: Optional[str] = None
    extreme_event: Optional[str] = None
    horizon_meth: Optional[str] = None
    sieving: Optional[str] = None
    pool_dna_extracts: Optional[str] = None
    store_cond: Optional[str] = None
    link_climate_info: Optional[str] = None
    link_class_info: Optional[str] = None
    local_class: Optional[str] = None
    local_class_meth: Optional[str] = None
    soil_type: Optional[str] = None
    soil_type_meth: Optional[str] = None
    texture: Optional[str] = None
    texture_meth: Optional[str] = None
    tot_org_c_meth: Optional[str] = None
    tot_n_meth: Optional[str] = None
    microbial_biomass_meth: Optional[str] = None
    heavy_metals_meth: Optional[str] = None
    host_genotype: Optional[str] = None
    tot_car: Optional[str] = None
    tot_nitro: Optional[str] = None
    tot_org_carb: Optional[str] = None
    fungicide_regm: Optional[Union[str, List[str]]] = empty_list()
    gaseous_environment: Optional[Union[str, List[str]]] = empty_list()
    herbicide_regm: Optional[Union[str, List[str]]] = empty_list()
    non_mineral_nutr_regm: Optional[Union[str, List[str]]] = empty_list()
    pesticide_regm: Optional[Union[str, List[str]]] = empty_list()
    root_med_carbon: Optional[str] = None
    root_med_macronutr: Optional[str] = None
    salt_regm: Optional[Union[str, List[str]]] = empty_list()
    water_temp_regm: Optional[Union[str, List[str]]] = empty_list()
    watering_regm: Optional[Union[str, List[str]]] = empty_list()
    agrochem_addition: Optional[Union[str, List[str]]] = empty_list()
    annual_temp: Optional[str] = None
    season_temp: Optional[str] = None
    annual_precpt: Optional[str] = None
    season_precpt: Optional[str] = None
    slope_gradient: Optional[str] = None
    slope_aspect: Optional[str] = None
    microbial_biomass: Optional[str] = None
    tot_phos: Optional[str] = None
    size_frac_low: Optional[str] = None
    size_frac_up: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    pres_animal_insect: Optional[str] = None
    season: Optional[str] = None
    genetic_mod: Optional[str] = None
    host_phenotype: Optional[str] = None
    climate_environment: Optional[Union[str, List[str]]] = empty_list()
    ph_regm: Optional[Union[str, List[str]]] = empty_list()
    plant_growth_med: Optional[str] = None
    plant_product: Optional[str] = None
    plant_struc: Optional[str] = None
    root_med_ph: Optional[str] = None
    season_environment: Optional[Union[str, List[str]]] = empty_list()
    standing_water_regm: Optional[Union[str, List[str]]] = empty_list()
    cur_land_use: Optional[str] = None
    tillage: Optional[Union[str, List[str]]] = empty_list()
    horizon: Optional[str] = None
    fao_class: Optional[str] = None
    profile_position: Optional[str] = None
    drainage_class: Optional[str] = None
    fire: Optional[str] = None
    ph_meth: Optional[str] = None
    farm_water_source: Optional[Union[str, List[str]]] = empty_list()
    plant_water_method: Optional[str] = None
    anim_water_method: Optional[Union[str, List[str]]] = empty_list()
    crop_yield: Optional[str] = None
    adjacent_environment: Optional[Union[str, List[str]]] = empty_list()
    farm_equip_shared: Optional[str] = None
    farm_equip_san: Optional[str] = None
    farm_equip: Optional[str] = None
    fertilizer_admin: Optional[str] = None
    food_harvest_proc: Optional[str] = None
    food_trav_mode: Optional[Union[str, List[str]]] = empty_list()
    food_trav_vehic: Optional[Union[str, List[str]]] = empty_list()
    Food_source: Optional[str] = None
    library_prep_kit: Optional[str] = None
    lot_number: Optional[str] = None
    season_humidity: Optional[str] = None
    samp_pooling: Optional[str] = None
    sequencing_location: Optional[str] = None
    soil_conductivity: Optional[str] = None
    soil_cover: Optional[str] = None
    soil_pH: Optional[str] = None
    rel_location: Optional[str] = None
    spikein_strain: Optional[Union[str, List[str]]] = empty_list()
    water_pH: Optional[str] = None
    water_source_shared: Optional[Union[str, List[str]]] = empty_list()
    enrichment_protocol: Optional[str] = None
    cult_isol_date: Optional[str] = None
    Food_Product_type: Optional[str] = None
    food_prod: Optional[Union[str, List[str]]] = empty_list()
    samp_collect_method: Optional[str] = None
    soil_horizon: Optional[str] = None
    photosynt_activ: Optional[Union[str, List[str]]] = empty_list()
    host_symbiont: Optional[str] = None
    host_subspecf_genlin: Optional[Union[str, List[str]]] = empty_list()
    photosynt_activ_meth: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.soil_depth is not None and not isinstance(self.soil_depth, str):
            self.soil_depth = str(self.soil_depth)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, str):
            self.biotic_relationship = str(self.biotic_relationship)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.trophic_level is not None and not isinstance(self.trophic_level, str):
            self.trophic_level = str(self.trophic_level)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, str):
            self.lib_size = str(self.lib_size)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, str):
            self.lib_reads_seqd = str(self.lib_reads_seqd)

        if self.lib_layout is not None and not isinstance(self.lib_layout, str):
            self.lib_layout = str(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self.target_gene is not None and not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, str):
            self.seq_quality_check = str(self.seq_quality_check)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.assembly_quality is not None and not isinstance(self.assembly_quality, str):
            self.assembly_quality = str(self.assembly_quality)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        if not isinstance(self.url, list):
            self.url = [self.url] if self.url is not None else []
        self.url = [v if isinstance(v, str) else str(v) for v in self.url]

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.humidity is not None and not isinstance(self.humidity, str):
            self.humidity = str(self.humidity)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.samp_stor_temp is not None and not isinstance(self.samp_stor_temp, str):
            self.samp_stor_temp = str(self.samp_stor_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if not isinstance(self.solar_irradiance, list):
            self.solar_irradiance = [self.solar_irradiance] if self.solar_irradiance is not None else []
        self.solar_irradiance = [v if isinstance(v, str) else str(v) for v in self.solar_irradiance]

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.porosity is not None and not isinstance(self.porosity, str):
            self.porosity = str(self.porosity)

        if self.ances_data is not None and not isinstance(self.ances_data, str):
            self.ances_data = str(self.ances_data)

        if self.host_common_name is not None and not isinstance(self.host_common_name, str):
            self.host_common_name = str(self.host_common_name)

        if self.host_taxid is not None and not isinstance(self.host_taxid, str):
            self.host_taxid = str(self.host_taxid)

        if self.host_life_stage is not None and not isinstance(self.host_life_stage, str):
            self.host_life_stage = str(self.host_life_stage)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_length is not None and not isinstance(self.host_length, str):
            self.host_length = str(self.host_length)

        if self.host_dry_mass is not None and not isinstance(self.host_dry_mass, str):
            self.host_dry_mass = str(self.host_dry_mass)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.cur_vegetation is not None and not isinstance(self.cur_vegetation, str):
            self.cur_vegetation = str(self.cur_vegetation)

        if self.cur_vegetation_meth is not None and not isinstance(self.cur_vegetation_meth, str):
            self.cur_vegetation_meth = str(self.cur_vegetation_meth)

        if self.previous_land_use is not None and not isinstance(self.previous_land_use, str):
            self.previous_land_use = str(self.previous_land_use)

        if self.previous_land_use_meth is not None and not isinstance(self.previous_land_use_meth, str):
            self.previous_land_use_meth = str(self.previous_land_use_meth)

        if self.crop_rotation is not None and not isinstance(self.crop_rotation, str):
            self.crop_rotation = str(self.crop_rotation)

        if self.flooding is not None and not isinstance(self.flooding, str):
            self.flooding = str(self.flooding)

        if self.extreme_event is not None and not isinstance(self.extreme_event, str):
            self.extreme_event = str(self.extreme_event)

        if self.horizon_meth is not None and not isinstance(self.horizon_meth, str):
            self.horizon_meth = str(self.horizon_meth)

        if self.sieving is not None and not isinstance(self.sieving, str):
            self.sieving = str(self.sieving)

        if self.pool_dna_extracts is not None and not isinstance(self.pool_dna_extracts, str):
            self.pool_dna_extracts = str(self.pool_dna_extracts)

        if self.store_cond is not None and not isinstance(self.store_cond, str):
            self.store_cond = str(self.store_cond)

        if self.link_climate_info is not None and not isinstance(self.link_climate_info, str):
            self.link_climate_info = str(self.link_climate_info)

        if self.link_class_info is not None and not isinstance(self.link_class_info, str):
            self.link_class_info = str(self.link_class_info)

        if self.local_class is not None and not isinstance(self.local_class, str):
            self.local_class = str(self.local_class)

        if self.local_class_meth is not None and not isinstance(self.local_class_meth, str):
            self.local_class_meth = str(self.local_class_meth)

        if self.soil_type is not None and not isinstance(self.soil_type, str):
            self.soil_type = str(self.soil_type)

        if self.soil_type_meth is not None and not isinstance(self.soil_type_meth, str):
            self.soil_type_meth = str(self.soil_type_meth)

        if self.texture is not None and not isinstance(self.texture, str):
            self.texture = str(self.texture)

        if self.texture_meth is not None and not isinstance(self.texture_meth, str):
            self.texture_meth = str(self.texture_meth)

        if self.tot_org_c_meth is not None and not isinstance(self.tot_org_c_meth, str):
            self.tot_org_c_meth = str(self.tot_org_c_meth)

        if self.tot_n_meth is not None and not isinstance(self.tot_n_meth, str):
            self.tot_n_meth = str(self.tot_n_meth)

        if self.microbial_biomass_meth is not None and not isinstance(self.microbial_biomass_meth, str):
            self.microbial_biomass_meth = str(self.microbial_biomass_meth)

        if self.heavy_metals_meth is not None and not isinstance(self.heavy_metals_meth, str):
            self.heavy_metals_meth = str(self.heavy_metals_meth)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.tot_car is not None and not isinstance(self.tot_car, str):
            self.tot_car = str(self.tot_car)

        if self.tot_nitro is not None and not isinstance(self.tot_nitro, str):
            self.tot_nitro = str(self.tot_nitro)

        if self.tot_org_carb is not None and not isinstance(self.tot_org_carb, str):
            self.tot_org_carb = str(self.tot_org_carb)

        if not isinstance(self.fungicide_regm, list):
            self.fungicide_regm = [self.fungicide_regm] if self.fungicide_regm is not None else []
        self.fungicide_regm = [v if isinstance(v, str) else str(v) for v in self.fungicide_regm]

        if not isinstance(self.gaseous_environment, list):
            self.gaseous_environment = [self.gaseous_environment] if self.gaseous_environment is not None else []
        self.gaseous_environment = [v if isinstance(v, str) else str(v) for v in self.gaseous_environment]

        if not isinstance(self.herbicide_regm, list):
            self.herbicide_regm = [self.herbicide_regm] if self.herbicide_regm is not None else []
        self.herbicide_regm = [v if isinstance(v, str) else str(v) for v in self.herbicide_regm]

        if not isinstance(self.non_mineral_nutr_regm, list):
            self.non_mineral_nutr_regm = [self.non_mineral_nutr_regm] if self.non_mineral_nutr_regm is not None else []
        self.non_mineral_nutr_regm = [v if isinstance(v, str) else str(v) for v in self.non_mineral_nutr_regm]

        if not isinstance(self.pesticide_regm, list):
            self.pesticide_regm = [self.pesticide_regm] if self.pesticide_regm is not None else []
        self.pesticide_regm = [v if isinstance(v, str) else str(v) for v in self.pesticide_regm]

        if self.root_med_carbon is not None and not isinstance(self.root_med_carbon, str):
            self.root_med_carbon = str(self.root_med_carbon)

        if self.root_med_macronutr is not None and not isinstance(self.root_med_macronutr, str):
            self.root_med_macronutr = str(self.root_med_macronutr)

        if not isinstance(self.salt_regm, list):
            self.salt_regm = [self.salt_regm] if self.salt_regm is not None else []
        self.salt_regm = [v if isinstance(v, str) else str(v) for v in self.salt_regm]

        if not isinstance(self.water_temp_regm, list):
            self.water_temp_regm = [self.water_temp_regm] if self.water_temp_regm is not None else []
        self.water_temp_regm = [v if isinstance(v, str) else str(v) for v in self.water_temp_regm]

        if not isinstance(self.watering_regm, list):
            self.watering_regm = [self.watering_regm] if self.watering_regm is not None else []
        self.watering_regm = [v if isinstance(v, str) else str(v) for v in self.watering_regm]

        if not isinstance(self.agrochem_addition, list):
            self.agrochem_addition = [self.agrochem_addition] if self.agrochem_addition is not None else []
        self.agrochem_addition = [v if isinstance(v, str) else str(v) for v in self.agrochem_addition]

        if self.annual_temp is not None and not isinstance(self.annual_temp, str):
            self.annual_temp = str(self.annual_temp)

        if self.season_temp is not None and not isinstance(self.season_temp, str):
            self.season_temp = str(self.season_temp)

        if self.annual_precpt is not None and not isinstance(self.annual_precpt, str):
            self.annual_precpt = str(self.annual_precpt)

        if self.season_precpt is not None and not isinstance(self.season_precpt, str):
            self.season_precpt = str(self.season_precpt)

        if self.slope_gradient is not None and not isinstance(self.slope_gradient, str):
            self.slope_gradient = str(self.slope_gradient)

        if self.slope_aspect is not None and not isinstance(self.slope_aspect, str):
            self.slope_aspect = str(self.slope_aspect)

        if self.microbial_biomass is not None and not isinstance(self.microbial_biomass, str):
            self.microbial_biomass = str(self.microbial_biomass)

        if self.tot_phos is not None and not isinstance(self.tot_phos, str):
            self.tot_phos = str(self.tot_phos)

        if self.size_frac_low is not None and not isinstance(self.size_frac_low, str):
            self.size_frac_low = str(self.size_frac_low)

        if self.size_frac_up is not None and not isinstance(self.size_frac_up, str):
            self.size_frac_up = str(self.size_frac_up)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.pres_animal_insect is not None and not isinstance(self.pres_animal_insect, str):
            self.pres_animal_insect = str(self.pres_animal_insect)

        if self.season is not None and not isinstance(self.season, str):
            self.season = str(self.season)

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if not isinstance(self.climate_environment, list):
            self.climate_environment = [self.climate_environment] if self.climate_environment is not None else []
        self.climate_environment = [v if isinstance(v, str) else str(v) for v in self.climate_environment]

        if not isinstance(self.ph_regm, list):
            self.ph_regm = [self.ph_regm] if self.ph_regm is not None else []
        self.ph_regm = [v if isinstance(v, str) else str(v) for v in self.ph_regm]

        if self.plant_growth_med is not None and not isinstance(self.plant_growth_med, str):
            self.plant_growth_med = str(self.plant_growth_med)

        if self.plant_product is not None and not isinstance(self.plant_product, str):
            self.plant_product = str(self.plant_product)

        if self.plant_struc is not None and not isinstance(self.plant_struc, str):
            self.plant_struc = str(self.plant_struc)

        if self.root_med_ph is not None and not isinstance(self.root_med_ph, str):
            self.root_med_ph = str(self.root_med_ph)

        if not isinstance(self.season_environment, list):
            self.season_environment = [self.season_environment] if self.season_environment is not None else []
        self.season_environment = [v if isinstance(v, str) else str(v) for v in self.season_environment]

        if not isinstance(self.standing_water_regm, list):
            self.standing_water_regm = [self.standing_water_regm] if self.standing_water_regm is not None else []
        self.standing_water_regm = [v if isinstance(v, str) else str(v) for v in self.standing_water_regm]

        if self.cur_land_use is not None and not isinstance(self.cur_land_use, str):
            self.cur_land_use = str(self.cur_land_use)

        if not isinstance(self.tillage, list):
            self.tillage = [self.tillage] if self.tillage is not None else []
        self.tillage = [v if isinstance(v, str) else str(v) for v in self.tillage]

        if self.horizon is not None and not isinstance(self.horizon, str):
            self.horizon = str(self.horizon)

        if self.fao_class is not None and not isinstance(self.fao_class, str):
            self.fao_class = str(self.fao_class)

        if self.profile_position is not None and not isinstance(self.profile_position, str):
            self.profile_position = str(self.profile_position)

        if self.drainage_class is not None and not isinstance(self.drainage_class, str):
            self.drainage_class = str(self.drainage_class)

        if self.fire is not None and not isinstance(self.fire, str):
            self.fire = str(self.fire)

        if self.ph_meth is not None and not isinstance(self.ph_meth, str):
            self.ph_meth = str(self.ph_meth)

        if not isinstance(self.farm_water_source, list):
            self.farm_water_source = [self.farm_water_source] if self.farm_water_source is not None else []
        self.farm_water_source = [v if isinstance(v, str) else str(v) for v in self.farm_water_source]

        if self.plant_water_method is not None and not isinstance(self.plant_water_method, str):
            self.plant_water_method = str(self.plant_water_method)

        if not isinstance(self.anim_water_method, list):
            self.anim_water_method = [self.anim_water_method] if self.anim_water_method is not None else []
        self.anim_water_method = [v if isinstance(v, str) else str(v) for v in self.anim_water_method]

        if self.crop_yield is not None and not isinstance(self.crop_yield, str):
            self.crop_yield = str(self.crop_yield)

        if not isinstance(self.adjacent_environment, list):
            self.adjacent_environment = [self.adjacent_environment] if self.adjacent_environment is not None else []
        self.adjacent_environment = [v if isinstance(v, str) else str(v) for v in self.adjacent_environment]

        if self.farm_equip_shared is not None and not isinstance(self.farm_equip_shared, str):
            self.farm_equip_shared = str(self.farm_equip_shared)

        if self.farm_equip_san is not None and not isinstance(self.farm_equip_san, str):
            self.farm_equip_san = str(self.farm_equip_san)

        if self.farm_equip is not None and not isinstance(self.farm_equip, str):
            self.farm_equip = str(self.farm_equip)

        if self.fertilizer_admin is not None and not isinstance(self.fertilizer_admin, str):
            self.fertilizer_admin = str(self.fertilizer_admin)

        if self.food_harvest_proc is not None and not isinstance(self.food_harvest_proc, str):
            self.food_harvest_proc = str(self.food_harvest_proc)

        if not isinstance(self.food_trav_mode, list):
            self.food_trav_mode = [self.food_trav_mode] if self.food_trav_mode is not None else []
        self.food_trav_mode = [v if isinstance(v, str) else str(v) for v in self.food_trav_mode]

        if not isinstance(self.food_trav_vehic, list):
            self.food_trav_vehic = [self.food_trav_vehic] if self.food_trav_vehic is not None else []
        self.food_trav_vehic = [v if isinstance(v, str) else str(v) for v in self.food_trav_vehic]

        if self.Food_source is not None and not isinstance(self.Food_source, str):
            self.Food_source = str(self.Food_source)

        if self.library_prep_kit is not None and not isinstance(self.library_prep_kit, str):
            self.library_prep_kit = str(self.library_prep_kit)

        if self.lot_number is not None and not isinstance(self.lot_number, str):
            self.lot_number = str(self.lot_number)

        if self.season_humidity is not None and not isinstance(self.season_humidity, str):
            self.season_humidity = str(self.season_humidity)

        if self.samp_pooling is not None and not isinstance(self.samp_pooling, str):
            self.samp_pooling = str(self.samp_pooling)

        if self.sequencing_location is not None and not isinstance(self.sequencing_location, str):
            self.sequencing_location = str(self.sequencing_location)

        if self.soil_conductivity is not None and not isinstance(self.soil_conductivity, str):
            self.soil_conductivity = str(self.soil_conductivity)

        if self.soil_cover is not None and not isinstance(self.soil_cover, str):
            self.soil_cover = str(self.soil_cover)

        if self.soil_pH is not None and not isinstance(self.soil_pH, str):
            self.soil_pH = str(self.soil_pH)

        if self.rel_location is not None and not isinstance(self.rel_location, str):
            self.rel_location = str(self.rel_location)

        if self.soil_temp is not None and not isinstance(self.soil_temp, str):
            self.soil_temp = str(self.soil_temp)

        if not isinstance(self.spikein_strain, list):
            self.spikein_strain = [self.spikein_strain] if self.spikein_strain is not None else []
        self.spikein_strain = [v if isinstance(v, str) else str(v) for v in self.spikein_strain]

        if self.water_pH is not None and not isinstance(self.water_pH, str):
            self.water_pH = str(self.water_pH)

        if not isinstance(self.water_source_shared, list):
            self.water_source_shared = [self.water_source_shared] if self.water_source_shared is not None else []
        self.water_source_shared = [v if isinstance(v, str) else str(v) for v in self.water_source_shared]

        if self.enrichment_protocol is not None and not isinstance(self.enrichment_protocol, str):
            self.enrichment_protocol = str(self.enrichment_protocol)

        if self.cult_isol_date is not None and not isinstance(self.cult_isol_date, str):
            self.cult_isol_date = str(self.cult_isol_date)

        if self.Food_Product_type is not None and not isinstance(self.Food_Product_type, str):
            self.Food_Product_type = str(self.Food_Product_type)

        if not isinstance(self.food_prod, list):
            self.food_prod = [self.food_prod] if self.food_prod is not None else []
        self.food_prod = [v if isinstance(v, str) else str(v) for v in self.food_prod]

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if self.soil_horizon is not None and not isinstance(self.soil_horizon, str):
            self.soil_horizon = str(self.soil_horizon)

        if not isinstance(self.photosynt_activ, list):
            self.photosynt_activ = [self.photosynt_activ] if self.photosynt_activ is not None else []
        self.photosynt_activ = [v if isinstance(v, str) else str(v) for v in self.photosynt_activ]

        if self.host_symbiont is not None and not isinstance(self.host_symbiont, str):
            self.host_symbiont = str(self.host_symbiont)

        if not isinstance(self.host_subspecf_genlin, list):
            self.host_subspecf_genlin = [self.host_subspecf_genlin] if self.host_subspecf_genlin is not None else []
        self.host_subspecf_genlin = [v if isinstance(v, str) else str(v) for v in self.host_subspecf_genlin]

        if not isinstance(self.photosynt_activ_meth, list):
            self.photosynt_activ_meth = [self.photosynt_activ_meth] if self.photosynt_activ_meth is not None else []
        self.photosynt_activ_meth = [v if isinstance(v, str) else str(v) for v in self.photosynt_activ_meth]

        super().__post_init__(**kwargs)


@dataclass
class FoodAnimalAndAnimalFeed(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.FoodAnimalAndAnimalFeed
    class_class_curie: ClassVar[str] = "TEMP:FoodAnimalAndAnimalFeed"
    class_name: ClassVar[str] = "food_animal_and_animal_feed"
    class_model_uri: ClassVar[URIRef] = TEMP.FoodAnimalAndAnimalFeed

    samp_size: Optional[str] = None
    samp_collect_device: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    lat_lon: Optional[str] = None
    geo_loc_name: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    seq_meth: Optional[str] = None
    project_name: Optional[str] = None
    organism_count: Optional[str] = None
    spikein_count: Optional[str] = None
    samp_stor_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_stor_dur: Optional[str] = None
    pool_dna_extracts: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_stor_loc: Optional[str] = None
    samp_name: Optional[str] = None
    animal_feed_equip: Optional[Union[str, List[str]]] = empty_list()
    cult_result: Optional[str] = None
    cult_result_org: Optional[Union[str, List[str]]] = empty_list()
    cult_target: Optional[Union[str, List[str]]] = empty_list()
    animal_group_size: Optional[str] = None
    animal_diet: Optional[Union[str, List[str]]] = empty_list()
    food_contact_surf: Optional[Union[str, List[str]]] = empty_list()
    food_contain_wrap: Optional[str] = None
    food_pack_medium: Optional[Union[str, List[str]]] = empty_list()
    food_preserv_proc: Optional[Union[str, List[str]]] = empty_list()
    food_trav_mode: Optional[Union[str, List[str]]] = empty_list()
    food_trav_vehic: Optional[Union[str, List[str]]] = empty_list()
    food_source: Optional[str] = None
    food_treat_proc: Optional[Union[str, List[str]]] = empty_list()
    intended_consumer: Optional[Union[str, List[str]]] = empty_list()
    library_prep_kit: Optional[str] = None
    lot_number: Optional[Union[str, List[str]]] = empty_list()
    part_plant_animal: Optional[Union[str, List[str]]] = empty_list()
    samp_purpose: Optional[str] = None
    repository_name: Optional[Union[str, List[str]]] = empty_list()
    samp_pooling: Optional[Union[str, List[str]]] = empty_list()
    samp_source_mat_cat: Optional[str] = None
    sequencing_kit: Optional[str] = None
    sequencing_location: Optional[str] = None
    serovar_or_serotype: Optional[Union[str, List[str]]] = empty_list()
    spikein_org: Optional[Union[str, List[str]]] = empty_list()
    spikein_serovar: Optional[Union[str, List[str]]] = empty_list()
    spikein_growth_med: Optional[Union[str, List[str]]] = empty_list()
    spikein_strain: Optional[Union[str, List[str]]] = empty_list()
    spikein_antibiotic: Optional[Union[str, List[str]]] = empty_list()
    spikein_metal: Optional[Union[str, List[str]]] = empty_list()
    timepoint: Optional[str] = None
    enrichment_protocol: Optional[str] = None
    food_quality_date: Optional[str] = None
    IFSAC_category: Optional[Union[str, List[str]]] = empty_list()
    animal_housing: Optional[Union[str, List[str]]] = empty_list()
    cult_isol_date: Optional[str] = None
    coll_site_geo_feat: Optional[str] = None
    food_product_type: Optional[Union[str, List[str]]] = empty_list()
    bacterial_density: Optional[str] = None
    cons_food_stor_dur: Optional[str] = None
    cons_food_stor_temp: Optional[str] = None
    cons_purch_date: Optional[str] = None
    cons_qty_purchased: Optional[str] = None
    food_additive: Optional[Union[str, List[str]]] = empty_list()
    food_cooking_proc: Optional[Union[str, List[str]]] = empty_list()
    food_dis_point: Optional[Union[str, List[str]]] = empty_list()
    food_dis_point_city: Optional[str] = None
    food_ingredient: Optional[Union[str, List[str]]] = empty_list()
    food_origin: Optional[str] = None
    food_pack_capacity: Optional[str] = None
    food_pack_integrity: Optional[Union[str, List[str]]] = empty_list()
    food_prior_contact: Optional[Union[str, List[str]]] = empty_list()
    food_prod: Optional[Union[str, List[str]]] = empty_list()
    food_prod_synonym: Optional[Union[str, List[str]]] = empty_list()
    food_product_qual: Optional[str] = None
    food_trace_list: Optional[str] = None
    HACCP_term: Optional[Union[str, List[str]]] = empty_list()
    microb_cult_med: Optional[str] = None
    samp_collect_method: Optional[str] = None
    samp_rep_biol: Optional[str] = None
    samp_rep_tech: Optional[str] = None
    samp_stor_device: Optional[str] = None
    samp_stor_media: Optional[str] = None
    samp_transport_cont: Optional[str] = None
    samp_transport_dur: Optional[str] = None
    samp_transport_temp: Optional[str] = None
    spikein_AMR: Optional[Union[str, List[str]]] = empty_list()
    study_design: Optional[Union[str, List[str]]] = empty_list()
    study_inc_dur: Optional[str] = None
    study_inc_temp: Optional[str] = None
    study_timecourse: Optional[str] = None
    study_tmnt: Optional[Union[str, List[str]]] = empty_list()
    animal_am: Optional[str] = None
    animal_am_dur: Optional[str] = None
    animal_am_freq: Optional[str] = None
    animal_am_route: Optional[str] = None
    animal_am_use: Optional[str] = None
    animal_body_cond: Optional[str] = None
    animal_sex: Optional[str] = None
    food_source_age: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.spikein_count is not None and not isinstance(self.spikein_count, str):
            self.spikein_count = str(self.spikein_count)

        if self.samp_stor_temp is not None and not isinstance(self.samp_stor_temp, str):
            self.samp_stor_temp = str(self.samp_stor_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_stor_dur is not None and not isinstance(self.samp_stor_dur, str):
            self.samp_stor_dur = str(self.samp_stor_dur)

        if not isinstance(self.pool_dna_extracts, list):
            self.pool_dna_extracts = [self.pool_dna_extracts] if self.pool_dna_extracts is not None else []
        self.pool_dna_extracts = [v if isinstance(v, str) else str(v) for v in self.pool_dna_extracts]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_stor_loc is not None and not isinstance(self.samp_stor_loc, str):
            self.samp_stor_loc = str(self.samp_stor_loc)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if not isinstance(self.animal_feed_equip, list):
            self.animal_feed_equip = [self.animal_feed_equip] if self.animal_feed_equip is not None else []
        self.animal_feed_equip = [v if isinstance(v, str) else str(v) for v in self.animal_feed_equip]

        if self.cult_result is not None and not isinstance(self.cult_result, str):
            self.cult_result = str(self.cult_result)

        if not isinstance(self.cult_result_org, list):
            self.cult_result_org = [self.cult_result_org] if self.cult_result_org is not None else []
        self.cult_result_org = [v if isinstance(v, str) else str(v) for v in self.cult_result_org]

        if not isinstance(self.cult_target, list):
            self.cult_target = [self.cult_target] if self.cult_target is not None else []
        self.cult_target = [v if isinstance(v, str) else str(v) for v in self.cult_target]

        if self.animal_group_size is not None and not isinstance(self.animal_group_size, str):
            self.animal_group_size = str(self.animal_group_size)

        if not isinstance(self.animal_diet, list):
            self.animal_diet = [self.animal_diet] if self.animal_diet is not None else []
        self.animal_diet = [v if isinstance(v, str) else str(v) for v in self.animal_diet]

        if not isinstance(self.food_contact_surf, list):
            self.food_contact_surf = [self.food_contact_surf] if self.food_contact_surf is not None else []
        self.food_contact_surf = [v if isinstance(v, str) else str(v) for v in self.food_contact_surf]

        if self.food_contain_wrap is not None and not isinstance(self.food_contain_wrap, str):
            self.food_contain_wrap = str(self.food_contain_wrap)

        if not isinstance(self.food_pack_medium, list):
            self.food_pack_medium = [self.food_pack_medium] if self.food_pack_medium is not None else []
        self.food_pack_medium = [v if isinstance(v, str) else str(v) for v in self.food_pack_medium]

        if not isinstance(self.food_preserv_proc, list):
            self.food_preserv_proc = [self.food_preserv_proc] if self.food_preserv_proc is not None else []
        self.food_preserv_proc = [v if isinstance(v, str) else str(v) for v in self.food_preserv_proc]

        if not isinstance(self.food_trav_mode, list):
            self.food_trav_mode = [self.food_trav_mode] if self.food_trav_mode is not None else []
        self.food_trav_mode = [v if isinstance(v, str) else str(v) for v in self.food_trav_mode]

        if not isinstance(self.food_trav_vehic, list):
            self.food_trav_vehic = [self.food_trav_vehic] if self.food_trav_vehic is not None else []
        self.food_trav_vehic = [v if isinstance(v, str) else str(v) for v in self.food_trav_vehic]

        if self.food_source is not None and not isinstance(self.food_source, str):
            self.food_source = str(self.food_source)

        if not isinstance(self.food_treat_proc, list):
            self.food_treat_proc = [self.food_treat_proc] if self.food_treat_proc is not None else []
        self.food_treat_proc = [v if isinstance(v, str) else str(v) for v in self.food_treat_proc]

        if not isinstance(self.intended_consumer, list):
            self.intended_consumer = [self.intended_consumer] if self.intended_consumer is not None else []
        self.intended_consumer = [v if isinstance(v, str) else str(v) for v in self.intended_consumer]

        if self.library_prep_kit is not None and not isinstance(self.library_prep_kit, str):
            self.library_prep_kit = str(self.library_prep_kit)

        if not isinstance(self.lot_number, list):
            self.lot_number = [self.lot_number] if self.lot_number is not None else []
        self.lot_number = [v if isinstance(v, str) else str(v) for v in self.lot_number]

        if not isinstance(self.part_plant_animal, list):
            self.part_plant_animal = [self.part_plant_animal] if self.part_plant_animal is not None else []
        self.part_plant_animal = [v if isinstance(v, str) else str(v) for v in self.part_plant_animal]

        if self.samp_purpose is not None and not isinstance(self.samp_purpose, str):
            self.samp_purpose = str(self.samp_purpose)

        if not isinstance(self.repository_name, list):
            self.repository_name = [self.repository_name] if self.repository_name is not None else []
        self.repository_name = [v if isinstance(v, str) else str(v) for v in self.repository_name]

        if not isinstance(self.samp_pooling, list):
            self.samp_pooling = [self.samp_pooling] if self.samp_pooling is not None else []
        self.samp_pooling = [v if isinstance(v, str) else str(v) for v in self.samp_pooling]

        if self.samp_source_mat_cat is not None and not isinstance(self.samp_source_mat_cat, str):
            self.samp_source_mat_cat = str(self.samp_source_mat_cat)

        if self.sequencing_kit is not None and not isinstance(self.sequencing_kit, str):
            self.sequencing_kit = str(self.sequencing_kit)

        if self.sequencing_location is not None and not isinstance(self.sequencing_location, str):
            self.sequencing_location = str(self.sequencing_location)

        if not isinstance(self.serovar_or_serotype, list):
            self.serovar_or_serotype = [self.serovar_or_serotype] if self.serovar_or_serotype is not None else []
        self.serovar_or_serotype = [v if isinstance(v, str) else str(v) for v in self.serovar_or_serotype]

        if not isinstance(self.spikein_org, list):
            self.spikein_org = [self.spikein_org] if self.spikein_org is not None else []
        self.spikein_org = [v if isinstance(v, str) else str(v) for v in self.spikein_org]

        if not isinstance(self.spikein_serovar, list):
            self.spikein_serovar = [self.spikein_serovar] if self.spikein_serovar is not None else []
        self.spikein_serovar = [v if isinstance(v, str) else str(v) for v in self.spikein_serovar]

        if not isinstance(self.spikein_growth_med, list):
            self.spikein_growth_med = [self.spikein_growth_med] if self.spikein_growth_med is not None else []
        self.spikein_growth_med = [v if isinstance(v, str) else str(v) for v in self.spikein_growth_med]

        if not isinstance(self.spikein_strain, list):
            self.spikein_strain = [self.spikein_strain] if self.spikein_strain is not None else []
        self.spikein_strain = [v if isinstance(v, str) else str(v) for v in self.spikein_strain]

        if not isinstance(self.spikein_antibiotic, list):
            self.spikein_antibiotic = [self.spikein_antibiotic] if self.spikein_antibiotic is not None else []
        self.spikein_antibiotic = [v if isinstance(v, str) else str(v) for v in self.spikein_antibiotic]

        if not isinstance(self.spikein_metal, list):
            self.spikein_metal = [self.spikein_metal] if self.spikein_metal is not None else []
        self.spikein_metal = [v if isinstance(v, str) else str(v) for v in self.spikein_metal]

        if self.timepoint is not None and not isinstance(self.timepoint, str):
            self.timepoint = str(self.timepoint)

        if self.enrichment_protocol is not None and not isinstance(self.enrichment_protocol, str):
            self.enrichment_protocol = str(self.enrichment_protocol)

        if self.food_quality_date is not None and not isinstance(self.food_quality_date, str):
            self.food_quality_date = str(self.food_quality_date)

        if not isinstance(self.IFSAC_category, list):
            self.IFSAC_category = [self.IFSAC_category] if self.IFSAC_category is not None else []
        self.IFSAC_category = [v if isinstance(v, str) else str(v) for v in self.IFSAC_category]

        if not isinstance(self.animal_housing, list):
            self.animal_housing = [self.animal_housing] if self.animal_housing is not None else []
        self.animal_housing = [v if isinstance(v, str) else str(v) for v in self.animal_housing]

        if self.cult_isol_date is not None and not isinstance(self.cult_isol_date, str):
            self.cult_isol_date = str(self.cult_isol_date)

        if self.coll_site_geo_feat is not None and not isinstance(self.coll_site_geo_feat, str):
            self.coll_site_geo_feat = str(self.coll_site_geo_feat)

        if not isinstance(self.food_product_type, list):
            self.food_product_type = [self.food_product_type] if self.food_product_type is not None else []
        self.food_product_type = [v if isinstance(v, str) else str(v) for v in self.food_product_type]

        if self.bacterial_density is not None and not isinstance(self.bacterial_density, str):
            self.bacterial_density = str(self.bacterial_density)

        if self.cons_food_stor_dur is not None and not isinstance(self.cons_food_stor_dur, str):
            self.cons_food_stor_dur = str(self.cons_food_stor_dur)

        if self.cons_food_stor_temp is not None and not isinstance(self.cons_food_stor_temp, str):
            self.cons_food_stor_temp = str(self.cons_food_stor_temp)

        if self.cons_purch_date is not None and not isinstance(self.cons_purch_date, str):
            self.cons_purch_date = str(self.cons_purch_date)

        if self.cons_qty_purchased is not None and not isinstance(self.cons_qty_purchased, str):
            self.cons_qty_purchased = str(self.cons_qty_purchased)

        if not isinstance(self.food_additive, list):
            self.food_additive = [self.food_additive] if self.food_additive is not None else []
        self.food_additive = [v if isinstance(v, str) else str(v) for v in self.food_additive]

        if not isinstance(self.food_cooking_proc, list):
            self.food_cooking_proc = [self.food_cooking_proc] if self.food_cooking_proc is not None else []
        self.food_cooking_proc = [v if isinstance(v, str) else str(v) for v in self.food_cooking_proc]

        if not isinstance(self.food_dis_point, list):
            self.food_dis_point = [self.food_dis_point] if self.food_dis_point is not None else []
        self.food_dis_point = [v if isinstance(v, str) else str(v) for v in self.food_dis_point]

        if self.food_dis_point_city is not None and not isinstance(self.food_dis_point_city, str):
            self.food_dis_point_city = str(self.food_dis_point_city)

        if not isinstance(self.food_ingredient, list):
            self.food_ingredient = [self.food_ingredient] if self.food_ingredient is not None else []
        self.food_ingredient = [v if isinstance(v, str) else str(v) for v in self.food_ingredient]

        if self.food_origin is not None and not isinstance(self.food_origin, str):
            self.food_origin = str(self.food_origin)

        if self.food_pack_capacity is not None and not isinstance(self.food_pack_capacity, str):
            self.food_pack_capacity = str(self.food_pack_capacity)

        if not isinstance(self.food_pack_integrity, list):
            self.food_pack_integrity = [self.food_pack_integrity] if self.food_pack_integrity is not None else []
        self.food_pack_integrity = [v if isinstance(v, str) else str(v) for v in self.food_pack_integrity]

        if not isinstance(self.food_prior_contact, list):
            self.food_prior_contact = [self.food_prior_contact] if self.food_prior_contact is not None else []
        self.food_prior_contact = [v if isinstance(v, str) else str(v) for v in self.food_prior_contact]

        if not isinstance(self.food_prod, list):
            self.food_prod = [self.food_prod] if self.food_prod is not None else []
        self.food_prod = [v if isinstance(v, str) else str(v) for v in self.food_prod]

        if not isinstance(self.food_prod_synonym, list):
            self.food_prod_synonym = [self.food_prod_synonym] if self.food_prod_synonym is not None else []
        self.food_prod_synonym = [v if isinstance(v, str) else str(v) for v in self.food_prod_synonym]

        if self.food_product_qual is not None and not isinstance(self.food_product_qual, str):
            self.food_product_qual = str(self.food_product_qual)

        if self.food_trace_list is not None and not isinstance(self.food_trace_list, str):
            self.food_trace_list = str(self.food_trace_list)

        if not isinstance(self.HACCP_term, list):
            self.HACCP_term = [self.HACCP_term] if self.HACCP_term is not None else []
        self.HACCP_term = [v if isinstance(v, str) else str(v) for v in self.HACCP_term]

        if self.microb_cult_med is not None and not isinstance(self.microb_cult_med, str):
            self.microb_cult_med = str(self.microb_cult_med)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if self.samp_rep_biol is not None and not isinstance(self.samp_rep_biol, str):
            self.samp_rep_biol = str(self.samp_rep_biol)

        if self.samp_rep_tech is not None and not isinstance(self.samp_rep_tech, str):
            self.samp_rep_tech = str(self.samp_rep_tech)

        if self.samp_stor_device is not None and not isinstance(self.samp_stor_device, str):
            self.samp_stor_device = str(self.samp_stor_device)

        if self.samp_stor_media is not None and not isinstance(self.samp_stor_media, str):
            self.samp_stor_media = str(self.samp_stor_media)

        if self.samp_transport_cont is not None and not isinstance(self.samp_transport_cont, str):
            self.samp_transport_cont = str(self.samp_transport_cont)

        if self.samp_transport_dur is not None and not isinstance(self.samp_transport_dur, str):
            self.samp_transport_dur = str(self.samp_transport_dur)

        if self.samp_transport_temp is not None and not isinstance(self.samp_transport_temp, str):
            self.samp_transport_temp = str(self.samp_transport_temp)

        if not isinstance(self.spikein_AMR, list):
            self.spikein_AMR = [self.spikein_AMR] if self.spikein_AMR is not None else []
        self.spikein_AMR = [v if isinstance(v, str) else str(v) for v in self.spikein_AMR]

        if not isinstance(self.study_design, list):
            self.study_design = [self.study_design] if self.study_design is not None else []
        self.study_design = [v if isinstance(v, str) else str(v) for v in self.study_design]

        if self.study_inc_dur is not None and not isinstance(self.study_inc_dur, str):
            self.study_inc_dur = str(self.study_inc_dur)

        if self.study_inc_temp is not None and not isinstance(self.study_inc_temp, str):
            self.study_inc_temp = str(self.study_inc_temp)

        if self.study_timecourse is not None and not isinstance(self.study_timecourse, str):
            self.study_timecourse = str(self.study_timecourse)

        if not isinstance(self.study_tmnt, list):
            self.study_tmnt = [self.study_tmnt] if self.study_tmnt is not None else []
        self.study_tmnt = [v if isinstance(v, str) else str(v) for v in self.study_tmnt]

        if self.animal_am is not None and not isinstance(self.animal_am, str):
            self.animal_am = str(self.animal_am)

        if self.animal_am_dur is not None and not isinstance(self.animal_am_dur, str):
            self.animal_am_dur = str(self.animal_am_dur)

        if self.animal_am_freq is not None and not isinstance(self.animal_am_freq, str):
            self.animal_am_freq = str(self.animal_am_freq)

        if self.animal_am_route is not None and not isinstance(self.animal_am_route, str):
            self.animal_am_route = str(self.animal_am_route)

        if self.animal_am_use is not None and not isinstance(self.animal_am_use, str):
            self.animal_am_use = str(self.animal_am_use)

        if self.animal_body_cond is not None and not isinstance(self.animal_body_cond, str):
            self.animal_body_cond = str(self.animal_body_cond)

        if self.animal_sex is not None and not isinstance(self.animal_sex, str):
            self.animal_sex = str(self.animal_sex)

        if self.food_source_age is not None and not isinstance(self.food_source_age, str):
            self.food_source_age = str(self.food_source_age)

        super().__post_init__(**kwargs)


@dataclass
class FoodFarmEnvironment(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.FoodFarmEnvironment
    class_class_curie: ClassVar[str] = "TEMP:FoodFarmEnvironment"
    class_name: ClassVar[str] = "food_farm_environment"
    class_model_uri: ClassVar[URIRef] = TEMP.FoodFarmEnvironment

    samp_size: Optional[str] = None
    samp_collect_device: Optional[str] = None
    lat_lon: Optional[str] = None
    geo_loc_name: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    depth: Optional[str] = None
    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    nucl_acid_ext: Optional[str] = None
    seq_meth: Optional[str] = None
    project_name: Optional[str] = None
    humidity: Optional[str] = None
    organism_count: Optional[str] = None
    spikein_count: Optional[str] = None
    air_PM_concen: Optional[Union[str, List[str]]] = empty_list()
    samp_stor_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    solar_irradiance: Optional[Union[str, List[str]]] = empty_list()
    temp: Optional[str] = None
    ventilation_rate: Optional[str] = None
    samp_stor_dur: Optional[str] = None
    wind_speed: Optional[str] = None
    salinity: Optional[str] = None
    turbidity: Optional[str] = None
    ances_data: Optional[str] = None
    host_taxid: Optional[str] = None
    host_age: Optional[str] = None
    host_length: Optional[str] = None
    host_dry_mass: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    previous_land_use: Optional[str] = None
    crop_rotation: Optional[str] = None
    soil_type: Optional[Union[str, List[str]]] = empty_list()
    soil_type_meth: Optional[str] = None
    soil_texture_meth: Optional[str] = None
    tot_org_c_meth: Optional[str] = None
    tot_nitro_cont_meth: Optional[Union[str, List[str]]] = empty_list()
    salinity_meth: Optional[str] = None
    host_genotype: Optional[str] = None
    tot_nitro_content: Optional[Union[str, List[str]]] = empty_list()
    tot_org_carb: Optional[str] = None
    root_med_carbon: Optional[str] = None
    root_med_macronutr: Optional[str] = None
    root_med_micronutr: Optional[str] = None
    season_temp: Optional[str] = None
    season_precpt: Optional[Union[str, List[str]]] = empty_list()
    conduc: Optional[str] = None
    size_frac_low: Optional[str] = None
    size_frac_up: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    ventilation_type: Optional[Union[str, List[str]]] = empty_list()
    wind_direction: Optional[str] = None
    season: Optional[str] = None
    genetic_mod: Optional[Union[str, List[str]]] = empty_list()
    host_phenotype: Optional[str] = None
    samp_type: Optional[str] = None
    ph: Optional[str] = None
    biotic_regm: Optional[Union[str, List[str]]] = empty_list()
    growth_habit: Optional[str] = None
    mechanical_damage: Optional[Union[str, List[str]]] = empty_list()
    plant_growth_med: Optional[Union[str, List[str]]] = empty_list()
    root_cond: Optional[str] = None
    root_med_ph: Optional[str] = None
    tillage: Optional[str] = None
    ph_meth: Optional[str] = None
    samp_name: Optional[str] = None
    growth_medium: Optional[str] = None
    farm_water_source: Optional[Union[str, List[str]]] = empty_list()
    plant_water_method: Optional[str] = None
    animal_feed_equip: Optional[Union[str, List[str]]] = empty_list()
    animal_intrusion: Optional[Union[str, List[str]]] = empty_list()
    anim_water_method: Optional[Union[str, List[str]]] = empty_list()
    crop_yield: Optional[str] = None
    cult_result: Optional[str] = None
    cult_result_org: Optional[Union[str, List[str]]] = empty_list()
    cult_target: Optional[Union[str, List[str]]] = empty_list()
    plant_part_maturity: Optional[str] = None
    adjacent_environment: Optional[Union[str, List[str]]] = empty_list()
    water_source_adjac: Optional[Union[str, List[str]]] = empty_list()
    farm_equip_shared: Optional[Union[str, List[str]]] = empty_list()
    farm_equip_san: Optional[Union[str, List[str]]] = empty_list()
    farm_equip_san_freq: Optional[str] = None
    farm_equip: Optional[Union[str, List[str]]] = empty_list()
    fertilizer_admin: Optional[str] = None
    fertilizer_date: Optional[str] = None
    animal_group_size: Optional[str] = None
    animal_diet: Optional[Union[str, List[str]]] = empty_list()
    food_contact_surf: Optional[Union[str, List[str]]] = empty_list()
    food_contain_wrap: Optional[str] = None
    food_harvest_proc: Optional[Union[str, List[str]]] = empty_list()
    food_pack_medium: Optional[Union[str, List[str]]] = empty_list()
    food_preserv_proc: Optional[Union[str, List[str]]] = empty_list()
    food_prod_char: Optional[Union[str, List[str]]] = empty_list()
    food_trav_mode: Optional[Union[str, List[str]]] = empty_list()
    food_trav_vehic: Optional[Union[str, List[str]]] = empty_list()
    food_source: Optional[str] = None
    food_treat_proc: Optional[Union[str, List[str]]] = empty_list()
    extr_weather_event: Optional[Union[str, List[str]]] = empty_list()
    date_extr_weath: Optional[Union[str, List[str]]] = empty_list()
    intended_consumer: Optional[Union[str, List[str]]] = empty_list()
    library_prep_kit: Optional[str] = None
    air_flow_impede: Optional[Union[str, List[str]]] = empty_list()
    lot_number: Optional[Union[str, List[str]]] = empty_list()
    season_humidity: Optional[str] = None
    part_plant_animal: Optional[Union[str, List[str]]] = empty_list()
    plant_reprod_crop: Optional[Union[str, List[str]]] = empty_list()
    samp_purpose: Optional[str] = None
    repository_name: Optional[Union[str, List[str]]] = empty_list()
    samp_pooling: Optional[Union[str, List[str]]] = empty_list()
    samp_source_mat_cat: Optional[str] = None
    sequencing_kit: Optional[str] = None
    sequencing_location: Optional[str] = None
    serovar_or_serotype: Optional[Union[str, List[str]]] = empty_list()
    soil_conductivity: Optional[str] = None
    soil_cover: Optional[str] = None
    soil_pH: Optional[str] = None
    rel_location: Optional[str] = None
    soil_porosity: Optional[str] = None
    soil_texture_class: Optional[str] = None
    spikein_org: Optional[Union[str, List[str]]] = empty_list()
    spikein_serovar: Optional[Union[str, List[str]]] = empty_list()
    spikein_growth_med: Optional[Union[str, List[str]]] = empty_list()
    spikein_strain: Optional[Union[str, List[str]]] = empty_list()
    spikein_antibiotic: Optional[Union[str, List[str]]] = empty_list()
    spikein_metal: Optional[Union[str, List[str]]] = empty_list()
    timepoint: Optional[str] = None
    water_frequency: Optional[str] = None
    water_pH: Optional[str] = None
    water_source_shared: Optional[Union[str, List[str]]] = empty_list()
    enrichment_protocol: Optional[str] = None
    food_quality_date: Optional[str] = None
    IFSAC_category: Optional[Union[str, List[str]]] = empty_list()
    animal_housing: Optional[Union[str, List[str]]] = empty_list()
    cult_isol_date: Optional[str] = None
    food_clean_proc: Optional[Union[str, List[str]]] = empty_list()
    food_product_type: Optional[Union[str, List[str]]] = empty_list()
    host_subspecf_genlin: Optional[Union[str, List[str]]] = empty_list()
    prod_label_claims: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.humidity is not None and not isinstance(self.humidity, str):
            self.humidity = str(self.humidity)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.spikein_count is not None and not isinstance(self.spikein_count, str):
            self.spikein_count = str(self.spikein_count)

        if not isinstance(self.air_PM_concen, list):
            self.air_PM_concen = [self.air_PM_concen] if self.air_PM_concen is not None else []
        self.air_PM_concen = [v if isinstance(v, str) else str(v) for v in self.air_PM_concen]

        if self.samp_stor_temp is not None and not isinstance(self.samp_stor_temp, str):
            self.samp_stor_temp = str(self.samp_stor_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if not isinstance(self.solar_irradiance, list):
            self.solar_irradiance = [self.solar_irradiance] if self.solar_irradiance is not None else []
        self.solar_irradiance = [v if isinstance(v, str) else str(v) for v in self.solar_irradiance]

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.ventilation_rate is not None and not isinstance(self.ventilation_rate, str):
            self.ventilation_rate = str(self.ventilation_rate)

        if self.samp_stor_dur is not None and not isinstance(self.samp_stor_dur, str):
            self.samp_stor_dur = str(self.samp_stor_dur)

        if self.wind_speed is not None and not isinstance(self.wind_speed, str):
            self.wind_speed = str(self.wind_speed)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.turbidity is not None and not isinstance(self.turbidity, str):
            self.turbidity = str(self.turbidity)

        if self.ances_data is not None and not isinstance(self.ances_data, str):
            self.ances_data = str(self.ances_data)

        if self.host_taxid is not None and not isinstance(self.host_taxid, str):
            self.host_taxid = str(self.host_taxid)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_length is not None and not isinstance(self.host_length, str):
            self.host_length = str(self.host_length)

        if self.host_dry_mass is not None and not isinstance(self.host_dry_mass, str):
            self.host_dry_mass = str(self.host_dry_mass)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.previous_land_use is not None and not isinstance(self.previous_land_use, str):
            self.previous_land_use = str(self.previous_land_use)

        if self.crop_rotation is not None and not isinstance(self.crop_rotation, str):
            self.crop_rotation = str(self.crop_rotation)

        if not isinstance(self.soil_type, list):
            self.soil_type = [self.soil_type] if self.soil_type is not None else []
        self.soil_type = [v if isinstance(v, str) else str(v) for v in self.soil_type]

        if self.soil_type_meth is not None and not isinstance(self.soil_type_meth, str):
            self.soil_type_meth = str(self.soil_type_meth)

        if self.soil_texture_meth is not None and not isinstance(self.soil_texture_meth, str):
            self.soil_texture_meth = str(self.soil_texture_meth)

        if self.tot_org_c_meth is not None and not isinstance(self.tot_org_c_meth, str):
            self.tot_org_c_meth = str(self.tot_org_c_meth)

        if not isinstance(self.tot_nitro_cont_meth, list):
            self.tot_nitro_cont_meth = [self.tot_nitro_cont_meth] if self.tot_nitro_cont_meth is not None else []
        self.tot_nitro_cont_meth = [v if isinstance(v, str) else str(v) for v in self.tot_nitro_cont_meth]

        if self.salinity_meth is not None and not isinstance(self.salinity_meth, str):
            self.salinity_meth = str(self.salinity_meth)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if not isinstance(self.tot_nitro_content, list):
            self.tot_nitro_content = [self.tot_nitro_content] if self.tot_nitro_content is not None else []
        self.tot_nitro_content = [v if isinstance(v, str) else str(v) for v in self.tot_nitro_content]

        if self.tot_org_carb is not None and not isinstance(self.tot_org_carb, str):
            self.tot_org_carb = str(self.tot_org_carb)

        if self.root_med_carbon is not None and not isinstance(self.root_med_carbon, str):
            self.root_med_carbon = str(self.root_med_carbon)

        if self.root_med_macronutr is not None and not isinstance(self.root_med_macronutr, str):
            self.root_med_macronutr = str(self.root_med_macronutr)

        if self.root_med_micronutr is not None and not isinstance(self.root_med_micronutr, str):
            self.root_med_micronutr = str(self.root_med_micronutr)

        if self.season_temp is not None and not isinstance(self.season_temp, str):
            self.season_temp = str(self.season_temp)

        if not isinstance(self.season_precpt, list):
            self.season_precpt = [self.season_precpt] if self.season_precpt is not None else []
        self.season_precpt = [v if isinstance(v, str) else str(v) for v in self.season_precpt]

        if self.conduc is not None and not isinstance(self.conduc, str):
            self.conduc = str(self.conduc)

        if self.size_frac_low is not None and not isinstance(self.size_frac_low, str):
            self.size_frac_low = str(self.size_frac_low)

        if self.size_frac_up is not None and not isinstance(self.size_frac_up, str):
            self.size_frac_up = str(self.size_frac_up)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if not isinstance(self.ventilation_type, list):
            self.ventilation_type = [self.ventilation_type] if self.ventilation_type is not None else []
        self.ventilation_type = [v if isinstance(v, str) else str(v) for v in self.ventilation_type]

        if self.wind_direction is not None and not isinstance(self.wind_direction, str):
            self.wind_direction = str(self.wind_direction)

        if self.season is not None and not isinstance(self.season, str):
            self.season = str(self.season)

        if not isinstance(self.genetic_mod, list):
            self.genetic_mod = [self.genetic_mod] if self.genetic_mod is not None else []
        self.genetic_mod = [v if isinstance(v, str) else str(v) for v in self.genetic_mod]

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.samp_type is not None and not isinstance(self.samp_type, str):
            self.samp_type = str(self.samp_type)

        if self.ph is not None and not isinstance(self.ph, str):
            self.ph = str(self.ph)

        if not isinstance(self.biotic_regm, list):
            self.biotic_regm = [self.biotic_regm] if self.biotic_regm is not None else []
        self.biotic_regm = [v if isinstance(v, str) else str(v) for v in self.biotic_regm]

        if self.growth_habit is not None and not isinstance(self.growth_habit, str):
            self.growth_habit = str(self.growth_habit)

        if not isinstance(self.mechanical_damage, list):
            self.mechanical_damage = [self.mechanical_damage] if self.mechanical_damage is not None else []
        self.mechanical_damage = [v if isinstance(v, str) else str(v) for v in self.mechanical_damage]

        if not isinstance(self.plant_growth_med, list):
            self.plant_growth_med = [self.plant_growth_med] if self.plant_growth_med is not None else []
        self.plant_growth_med = [v if isinstance(v, str) else str(v) for v in self.plant_growth_med]

        if self.root_cond is not None and not isinstance(self.root_cond, str):
            self.root_cond = str(self.root_cond)

        if self.root_med_ph is not None and not isinstance(self.root_med_ph, str):
            self.root_med_ph = str(self.root_med_ph)

        if self.tillage is not None and not isinstance(self.tillage, str):
            self.tillage = str(self.tillage)

        if self.ph_meth is not None and not isinstance(self.ph_meth, str):
            self.ph_meth = str(self.ph_meth)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self.growth_medium is not None and not isinstance(self.growth_medium, str):
            self.growth_medium = str(self.growth_medium)

        if not isinstance(self.farm_water_source, list):
            self.farm_water_source = [self.farm_water_source] if self.farm_water_source is not None else []
        self.farm_water_source = [v if isinstance(v, str) else str(v) for v in self.farm_water_source]

        if self.plant_water_method is not None and not isinstance(self.plant_water_method, str):
            self.plant_water_method = str(self.plant_water_method)

        if not isinstance(self.animal_feed_equip, list):
            self.animal_feed_equip = [self.animal_feed_equip] if self.animal_feed_equip is not None else []
        self.animal_feed_equip = [v if isinstance(v, str) else str(v) for v in self.animal_feed_equip]

        if not isinstance(self.animal_intrusion, list):
            self.animal_intrusion = [self.animal_intrusion] if self.animal_intrusion is not None else []
        self.animal_intrusion = [v if isinstance(v, str) else str(v) for v in self.animal_intrusion]

        if not isinstance(self.anim_water_method, list):
            self.anim_water_method = [self.anim_water_method] if self.anim_water_method is not None else []
        self.anim_water_method = [v if isinstance(v, str) else str(v) for v in self.anim_water_method]

        if self.crop_yield is not None and not isinstance(self.crop_yield, str):
            self.crop_yield = str(self.crop_yield)

        if self.cult_result is not None and not isinstance(self.cult_result, str):
            self.cult_result = str(self.cult_result)

        if not isinstance(self.cult_result_org, list):
            self.cult_result_org = [self.cult_result_org] if self.cult_result_org is not None else []
        self.cult_result_org = [v if isinstance(v, str) else str(v) for v in self.cult_result_org]

        if not isinstance(self.cult_target, list):
            self.cult_target = [self.cult_target] if self.cult_target is not None else []
        self.cult_target = [v if isinstance(v, str) else str(v) for v in self.cult_target]

        if self.plant_part_maturity is not None and not isinstance(self.plant_part_maturity, str):
            self.plant_part_maturity = str(self.plant_part_maturity)

        if not isinstance(self.adjacent_environment, list):
            self.adjacent_environment = [self.adjacent_environment] if self.adjacent_environment is not None else []
        self.adjacent_environment = [v if isinstance(v, str) else str(v) for v in self.adjacent_environment]

        if not isinstance(self.water_source_adjac, list):
            self.water_source_adjac = [self.water_source_adjac] if self.water_source_adjac is not None else []
        self.water_source_adjac = [v if isinstance(v, str) else str(v) for v in self.water_source_adjac]

        if not isinstance(self.farm_equip_shared, list):
            self.farm_equip_shared = [self.farm_equip_shared] if self.farm_equip_shared is not None else []
        self.farm_equip_shared = [v if isinstance(v, str) else str(v) for v in self.farm_equip_shared]

        if not isinstance(self.farm_equip_san, list):
            self.farm_equip_san = [self.farm_equip_san] if self.farm_equip_san is not None else []
        self.farm_equip_san = [v if isinstance(v, str) else str(v) for v in self.farm_equip_san]

        if self.farm_equip_san_freq is not None and not isinstance(self.farm_equip_san_freq, str):
            self.farm_equip_san_freq = str(self.farm_equip_san_freq)

        if not isinstance(self.farm_equip, list):
            self.farm_equip = [self.farm_equip] if self.farm_equip is not None else []
        self.farm_equip = [v if isinstance(v, str) else str(v) for v in self.farm_equip]

        if self.fertilizer_admin is not None and not isinstance(self.fertilizer_admin, str):
            self.fertilizer_admin = str(self.fertilizer_admin)

        if self.fertilizer_date is not None and not isinstance(self.fertilizer_date, str):
            self.fertilizer_date = str(self.fertilizer_date)

        if self.animal_group_size is not None and not isinstance(self.animal_group_size, str):
            self.animal_group_size = str(self.animal_group_size)

        if not isinstance(self.animal_diet, list):
            self.animal_diet = [self.animal_diet] if self.animal_diet is not None else []
        self.animal_diet = [v if isinstance(v, str) else str(v) for v in self.animal_diet]

        if not isinstance(self.food_contact_surf, list):
            self.food_contact_surf = [self.food_contact_surf] if self.food_contact_surf is not None else []
        self.food_contact_surf = [v if isinstance(v, str) else str(v) for v in self.food_contact_surf]

        if self.food_contain_wrap is not None and not isinstance(self.food_contain_wrap, str):
            self.food_contain_wrap = str(self.food_contain_wrap)

        if not isinstance(self.food_harvest_proc, list):
            self.food_harvest_proc = [self.food_harvest_proc] if self.food_harvest_proc is not None else []
        self.food_harvest_proc = [v if isinstance(v, str) else str(v) for v in self.food_harvest_proc]

        if not isinstance(self.food_pack_medium, list):
            self.food_pack_medium = [self.food_pack_medium] if self.food_pack_medium is not None else []
        self.food_pack_medium = [v if isinstance(v, str) else str(v) for v in self.food_pack_medium]

        if not isinstance(self.food_preserv_proc, list):
            self.food_preserv_proc = [self.food_preserv_proc] if self.food_preserv_proc is not None else []
        self.food_preserv_proc = [v if isinstance(v, str) else str(v) for v in self.food_preserv_proc]

        if not isinstance(self.food_prod_char, list):
            self.food_prod_char = [self.food_prod_char] if self.food_prod_char is not None else []
        self.food_prod_char = [v if isinstance(v, str) else str(v) for v in self.food_prod_char]

        if not isinstance(self.food_trav_mode, list):
            self.food_trav_mode = [self.food_trav_mode] if self.food_trav_mode is not None else []
        self.food_trav_mode = [v if isinstance(v, str) else str(v) for v in self.food_trav_mode]

        if not isinstance(self.food_trav_vehic, list):
            self.food_trav_vehic = [self.food_trav_vehic] if self.food_trav_vehic is not None else []
        self.food_trav_vehic = [v if isinstance(v, str) else str(v) for v in self.food_trav_vehic]

        if self.food_source is not None and not isinstance(self.food_source, str):
            self.food_source = str(self.food_source)

        if not isinstance(self.food_treat_proc, list):
            self.food_treat_proc = [self.food_treat_proc] if self.food_treat_proc is not None else []
        self.food_treat_proc = [v if isinstance(v, str) else str(v) for v in self.food_treat_proc]

        if not isinstance(self.extr_weather_event, list):
            self.extr_weather_event = [self.extr_weather_event] if self.extr_weather_event is not None else []
        self.extr_weather_event = [v if isinstance(v, str) else str(v) for v in self.extr_weather_event]

        if not isinstance(self.date_extr_weath, list):
            self.date_extr_weath = [self.date_extr_weath] if self.date_extr_weath is not None else []
        self.date_extr_weath = [v if isinstance(v, str) else str(v) for v in self.date_extr_weath]

        if not isinstance(self.intended_consumer, list):
            self.intended_consumer = [self.intended_consumer] if self.intended_consumer is not None else []
        self.intended_consumer = [v if isinstance(v, str) else str(v) for v in self.intended_consumer]

        if self.library_prep_kit is not None and not isinstance(self.library_prep_kit, str):
            self.library_prep_kit = str(self.library_prep_kit)

        if not isinstance(self.air_flow_impede, list):
            self.air_flow_impede = [self.air_flow_impede] if self.air_flow_impede is not None else []
        self.air_flow_impede = [v if isinstance(v, str) else str(v) for v in self.air_flow_impede]

        if not isinstance(self.lot_number, list):
            self.lot_number = [self.lot_number] if self.lot_number is not None else []
        self.lot_number = [v if isinstance(v, str) else str(v) for v in self.lot_number]

        if self.season_humidity is not None and not isinstance(self.season_humidity, str):
            self.season_humidity = str(self.season_humidity)

        if not isinstance(self.part_plant_animal, list):
            self.part_plant_animal = [self.part_plant_animal] if self.part_plant_animal is not None else []
        self.part_plant_animal = [v if isinstance(v, str) else str(v) for v in self.part_plant_animal]

        if not isinstance(self.plant_reprod_crop, list):
            self.plant_reprod_crop = [self.plant_reprod_crop] if self.plant_reprod_crop is not None else []
        self.plant_reprod_crop = [v if isinstance(v, str) else str(v) for v in self.plant_reprod_crop]

        if self.samp_purpose is not None and not isinstance(self.samp_purpose, str):
            self.samp_purpose = str(self.samp_purpose)

        if not isinstance(self.repository_name, list):
            self.repository_name = [self.repository_name] if self.repository_name is not None else []
        self.repository_name = [v if isinstance(v, str) else str(v) for v in self.repository_name]

        if not isinstance(self.samp_pooling, list):
            self.samp_pooling = [self.samp_pooling] if self.samp_pooling is not None else []
        self.samp_pooling = [v if isinstance(v, str) else str(v) for v in self.samp_pooling]

        if self.samp_source_mat_cat is not None and not isinstance(self.samp_source_mat_cat, str):
            self.samp_source_mat_cat = str(self.samp_source_mat_cat)

        if self.sequencing_kit is not None and not isinstance(self.sequencing_kit, str):
            self.sequencing_kit = str(self.sequencing_kit)

        if self.sequencing_location is not None and not isinstance(self.sequencing_location, str):
            self.sequencing_location = str(self.sequencing_location)

        if not isinstance(self.serovar_or_serotype, list):
            self.serovar_or_serotype = [self.serovar_or_serotype] if self.serovar_or_serotype is not None else []
        self.serovar_or_serotype = [v if isinstance(v, str) else str(v) for v in self.serovar_or_serotype]

        if self.soil_conductivity is not None and not isinstance(self.soil_conductivity, str):
            self.soil_conductivity = str(self.soil_conductivity)

        if self.soil_cover is not None and not isinstance(self.soil_cover, str):
            self.soil_cover = str(self.soil_cover)

        if self.soil_pH is not None and not isinstance(self.soil_pH, str):
            self.soil_pH = str(self.soil_pH)

        if self.rel_location is not None and not isinstance(self.rel_location, str):
            self.rel_location = str(self.rel_location)

        if self.soil_porosity is not None and not isinstance(self.soil_porosity, str):
            self.soil_porosity = str(self.soil_porosity)

        if not isinstance(self.soil_temp, list):
            self.soil_temp = [self.soil_temp] if self.soil_temp is not None else []
        self.soil_temp = [v if isinstance(v, str) else str(v) for v in self.soil_temp]

        if self.soil_texture_class is not None and not isinstance(self.soil_texture_class, str):
            self.soil_texture_class = str(self.soil_texture_class)

        if not isinstance(self.spikein_org, list):
            self.spikein_org = [self.spikein_org] if self.spikein_org is not None else []
        self.spikein_org = [v if isinstance(v, str) else str(v) for v in self.spikein_org]

        if not isinstance(self.spikein_serovar, list):
            self.spikein_serovar = [self.spikein_serovar] if self.spikein_serovar is not None else []
        self.spikein_serovar = [v if isinstance(v, str) else str(v) for v in self.spikein_serovar]

        if not isinstance(self.spikein_growth_med, list):
            self.spikein_growth_med = [self.spikein_growth_med] if self.spikein_growth_med is not None else []
        self.spikein_growth_med = [v if isinstance(v, str) else str(v) for v in self.spikein_growth_med]

        if not isinstance(self.spikein_strain, list):
            self.spikein_strain = [self.spikein_strain] if self.spikein_strain is not None else []
        self.spikein_strain = [v if isinstance(v, str) else str(v) for v in self.spikein_strain]

        if not isinstance(self.spikein_antibiotic, list):
            self.spikein_antibiotic = [self.spikein_antibiotic] if self.spikein_antibiotic is not None else []
        self.spikein_antibiotic = [v if isinstance(v, str) else str(v) for v in self.spikein_antibiotic]

        if not isinstance(self.spikein_metal, list):
            self.spikein_metal = [self.spikein_metal] if self.spikein_metal is not None else []
        self.spikein_metal = [v if isinstance(v, str) else str(v) for v in self.spikein_metal]

        if self.timepoint is not None and not isinstance(self.timepoint, str):
            self.timepoint = str(self.timepoint)

        if self.water_frequency is not None and not isinstance(self.water_frequency, str):
            self.water_frequency = str(self.water_frequency)

        if self.water_pH is not None and not isinstance(self.water_pH, str):
            self.water_pH = str(self.water_pH)

        if not isinstance(self.water_source_shared, list):
            self.water_source_shared = [self.water_source_shared] if self.water_source_shared is not None else []
        self.water_source_shared = [v if isinstance(v, str) else str(v) for v in self.water_source_shared]

        if self.enrichment_protocol is not None and not isinstance(self.enrichment_protocol, str):
            self.enrichment_protocol = str(self.enrichment_protocol)

        if self.food_quality_date is not None and not isinstance(self.food_quality_date, str):
            self.food_quality_date = str(self.food_quality_date)

        if not isinstance(self.IFSAC_category, list):
            self.IFSAC_category = [self.IFSAC_category] if self.IFSAC_category is not None else []
        self.IFSAC_category = [v if isinstance(v, str) else str(v) for v in self.IFSAC_category]

        if not isinstance(self.animal_housing, list):
            self.animal_housing = [self.animal_housing] if self.animal_housing is not None else []
        self.animal_housing = [v if isinstance(v, str) else str(v) for v in self.animal_housing]

        if self.cult_isol_date is not None and not isinstance(self.cult_isol_date, str):
            self.cult_isol_date = str(self.cult_isol_date)

        if not isinstance(self.food_clean_proc, list):
            self.food_clean_proc = [self.food_clean_proc] if self.food_clean_proc is not None else []
        self.food_clean_proc = [v if isinstance(v, str) else str(v) for v in self.food_clean_proc]

        if not isinstance(self.food_product_type, list):
            self.food_product_type = [self.food_product_type] if self.food_product_type is not None else []
        self.food_product_type = [v if isinstance(v, str) else str(v) for v in self.food_product_type]

        if not isinstance(self.host_subspecf_genlin, list):
            self.host_subspecf_genlin = [self.host_subspecf_genlin] if self.host_subspecf_genlin is not None else []
        self.host_subspecf_genlin = [v if isinstance(v, str) else str(v) for v in self.host_subspecf_genlin]

        if not isinstance(self.prod_label_claims, list):
            self.prod_label_claims = [self.prod_label_claims] if self.prod_label_claims is not None else []
        self.prod_label_claims = [v if isinstance(v, str) else str(v) for v in self.prod_label_claims]

        super().__post_init__(**kwargs)


@dataclass
class FoodFoodProductionFacility(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.FoodFoodProductionFacility
    class_class_curie: ClassVar[str] = "TEMP:FoodFoodProductionFacility"
    class_name: ClassVar[str] = "food_food_production_facility"
    class_model_uri: ClassVar[URIRef] = TEMP.FoodFoodProductionFacility

    samp_size: Optional[str] = None
    samp_collect_device: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    lat_lon: Optional[str] = None
    geo_loc_name: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    seq_meth: Optional[str] = None
    project_name: Optional[str] = None
    organism_count: Optional[str] = None
    samp_stor_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    samp_stor_dur: Optional[str] = None
    air_temp: Optional[str] = None
    room_dim: Optional[str] = None
    freq_clean: Optional[str] = None
    samp_room_id: Optional[str] = None
    pool_dna_extracts: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    samp_stor_loc: Optional[str] = None
    surf_material: Optional[str] = None
    indoor_surf: Optional[str] = None
    avg_occup: Optional[str] = None
    samp_floor: Optional[str] = None
    genetic_mod: Optional[str] = None
    samp_type: Optional[str] = None
    samp_name: Optional[str] = None
    cult_result: Optional[str] = None
    cult_result_org: Optional[Union[str, List[str]]] = empty_list()
    cult_target: Optional[Union[str, List[str]]] = empty_list()
    food_contact_surf: Optional[Union[str, List[str]]] = empty_list()
    food_contain_wrap: Optional[str] = None
    food_pack_medium: Optional[Union[str, List[str]]] = empty_list()
    food_preserv_proc: Optional[Union[str, List[str]]] = empty_list()
    food_prod_char: Optional[Union[str, List[str]]] = empty_list()
    food_trav_mode: Optional[Union[str, List[str]]] = empty_list()
    food_trav_vehic: Optional[Union[str, List[str]]] = empty_list()
    food_source: Optional[str] = None
    food_treat_proc: Optional[Union[str, List[str]]] = empty_list()
    intended_consumer: Optional[Union[str, List[str]]] = empty_list()
    library_prep_kit: Optional[str] = None
    lot_number: Optional[Union[str, List[str]]] = empty_list()
    part_plant_animal: Optional[Union[str, List[str]]] = empty_list()
    samp_purpose: Optional[str] = None
    repository_name: Optional[Union[str, List[str]]] = empty_list()
    samp_pooling: Optional[Union[str, List[str]]] = empty_list()
    samp_source_mat_cat: Optional[str] = None
    sequencing_kit: Optional[str] = None
    sequencing_location: Optional[str] = None
    timepoint: Optional[str] = None
    enrichment_protocol: Optional[str] = None
    food_quality_date: Optional[str] = None
    IFSAC_category: Optional[Union[str, List[str]]] = empty_list()
    cult_isol_date: Optional[str] = None
    coll_site_geo_feat: Optional[str] = None
    food_product_type: Optional[Union[str, List[str]]] = empty_list()
    bacterial_density: Optional[str] = None
    dietary_claim_use: Optional[Union[str, List[str]]] = empty_list()
    food_additive: Optional[Union[str, List[str]]] = empty_list()
    food_allergen_label: Optional[Union[str, List[str]]] = empty_list()
    food_cooking_proc: Optional[Union[str, List[str]]] = empty_list()
    food_dis_point: Optional[Union[str, List[str]]] = empty_list()
    food_dis_point_city: Optional[Union[str, List[str]]] = empty_list()
    food_ingredient: Optional[Union[str, List[str]]] = empty_list()
    food_name_status: Optional[str] = None
    food_origin: Optional[str] = None
    food_pack_capacity: Optional[str] = None
    food_pack_integrity: Optional[Union[str, List[str]]] = empty_list()
    food_prior_contact: Optional[Union[str, List[str]]] = empty_list()
    food_prod: Optional[Union[str, List[str]]] = empty_list()
    food_prod_synonym: Optional[Union[str, List[str]]] = empty_list()
    food_product_qual: Optional[str] = None
    food_trace_list: Optional[str] = None
    HACCP_term: Optional[Union[str, List[str]]] = empty_list()
    microb_cult_med: Optional[str] = None
    nucl_acid_ext_kit: Optional[Union[str, List[str]]] = empty_list()
    num_samp_collect: Optional[str] = None
    samp_collect_method: Optional[str] = None
    samp_rep_biol: Optional[str] = None
    samp_rep_tech: Optional[str] = None
    samp_stor_device: Optional[str] = None
    samp_stor_media: Optional[str] = None
    samp_transport_cont: Optional[str] = None
    samp_transport_dur: Optional[str] = None
    samp_transport_temp: Optional[str] = None
    spec_intended_cons: Optional[Union[str, List[str]]] = empty_list()
    study_design: Optional[Union[str, List[str]]] = empty_list()
    study_inc_dur: Optional[str] = None
    study_inc_temp: Optional[str] = None
    study_timecourse: Optional[str] = None
    study_tmnt: Optional[Union[str, List[str]]] = empty_list()
    facility_type: Optional[Union[str, List[str]]] = empty_list()
    hygienic_area: Optional[str] = None
    env_monitoring_zone: Optional[str] = None
    area_samp_size: Optional[str] = None
    samp_surf_moisture: Optional[Union[str, List[str]]] = empty_list()
    samp_loc_condition: Optional[str] = None
    biocide_used: Optional[Union[str, List[str]]] = empty_list()
    ster_meth_samp_room: Optional[Union[str, List[str]]] = empty_list()
    prod_label_claims: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.samp_stor_temp is not None and not isinstance(self.samp_stor_temp, str):
            self.samp_stor_temp = str(self.samp_stor_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.samp_stor_dur is not None and not isinstance(self.samp_stor_dur, str):
            self.samp_stor_dur = str(self.samp_stor_dur)

        if self.air_temp is not None and not isinstance(self.air_temp, str):
            self.air_temp = str(self.air_temp)

        if self.room_dim is not None and not isinstance(self.room_dim, str):
            self.room_dim = str(self.room_dim)

        if self.freq_clean is not None and not isinstance(self.freq_clean, str):
            self.freq_clean = str(self.freq_clean)

        if self.samp_room_id is not None and not isinstance(self.samp_room_id, str):
            self.samp_room_id = str(self.samp_room_id)

        if not isinstance(self.pool_dna_extracts, list):
            self.pool_dna_extracts = [self.pool_dna_extracts] if self.pool_dna_extracts is not None else []
        self.pool_dna_extracts = [v if isinstance(v, str) else str(v) for v in self.pool_dna_extracts]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.samp_stor_loc is not None and not isinstance(self.samp_stor_loc, str):
            self.samp_stor_loc = str(self.samp_stor_loc)

        if self.surf_material is not None and not isinstance(self.surf_material, str):
            self.surf_material = str(self.surf_material)

        if self.indoor_surf is not None and not isinstance(self.indoor_surf, str):
            self.indoor_surf = str(self.indoor_surf)

        if self.avg_occup is not None and not isinstance(self.avg_occup, str):
            self.avg_occup = str(self.avg_occup)

        if self.samp_floor is not None and not isinstance(self.samp_floor, str):
            self.samp_floor = str(self.samp_floor)

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if self.samp_type is not None and not isinstance(self.samp_type, str):
            self.samp_type = str(self.samp_type)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self.cult_result is not None and not isinstance(self.cult_result, str):
            self.cult_result = str(self.cult_result)

        if not isinstance(self.cult_result_org, list):
            self.cult_result_org = [self.cult_result_org] if self.cult_result_org is not None else []
        self.cult_result_org = [v if isinstance(v, str) else str(v) for v in self.cult_result_org]

        if not isinstance(self.cult_target, list):
            self.cult_target = [self.cult_target] if self.cult_target is not None else []
        self.cult_target = [v if isinstance(v, str) else str(v) for v in self.cult_target]

        if not isinstance(self.food_contact_surf, list):
            self.food_contact_surf = [self.food_contact_surf] if self.food_contact_surf is not None else []
        self.food_contact_surf = [v if isinstance(v, str) else str(v) for v in self.food_contact_surf]

        if self.food_contain_wrap is not None and not isinstance(self.food_contain_wrap, str):
            self.food_contain_wrap = str(self.food_contain_wrap)

        if not isinstance(self.food_pack_medium, list):
            self.food_pack_medium = [self.food_pack_medium] if self.food_pack_medium is not None else []
        self.food_pack_medium = [v if isinstance(v, str) else str(v) for v in self.food_pack_medium]

        if not isinstance(self.food_preserv_proc, list):
            self.food_preserv_proc = [self.food_preserv_proc] if self.food_preserv_proc is not None else []
        self.food_preserv_proc = [v if isinstance(v, str) else str(v) for v in self.food_preserv_proc]

        if not isinstance(self.food_prod_char, list):
            self.food_prod_char = [self.food_prod_char] if self.food_prod_char is not None else []
        self.food_prod_char = [v if isinstance(v, str) else str(v) for v in self.food_prod_char]

        if not isinstance(self.food_trav_mode, list):
            self.food_trav_mode = [self.food_trav_mode] if self.food_trav_mode is not None else []
        self.food_trav_mode = [v if isinstance(v, str) else str(v) for v in self.food_trav_mode]

        if not isinstance(self.food_trav_vehic, list):
            self.food_trav_vehic = [self.food_trav_vehic] if self.food_trav_vehic is not None else []
        self.food_trav_vehic = [v if isinstance(v, str) else str(v) for v in self.food_trav_vehic]

        if self.food_source is not None and not isinstance(self.food_source, str):
            self.food_source = str(self.food_source)

        if not isinstance(self.food_treat_proc, list):
            self.food_treat_proc = [self.food_treat_proc] if self.food_treat_proc is not None else []
        self.food_treat_proc = [v if isinstance(v, str) else str(v) for v in self.food_treat_proc]

        if not isinstance(self.intended_consumer, list):
            self.intended_consumer = [self.intended_consumer] if self.intended_consumer is not None else []
        self.intended_consumer = [v if isinstance(v, str) else str(v) for v in self.intended_consumer]

        if self.library_prep_kit is not None and not isinstance(self.library_prep_kit, str):
            self.library_prep_kit = str(self.library_prep_kit)

        if not isinstance(self.lot_number, list):
            self.lot_number = [self.lot_number] if self.lot_number is not None else []
        self.lot_number = [v if isinstance(v, str) else str(v) for v in self.lot_number]

        if not isinstance(self.part_plant_animal, list):
            self.part_plant_animal = [self.part_plant_animal] if self.part_plant_animal is not None else []
        self.part_plant_animal = [v if isinstance(v, str) else str(v) for v in self.part_plant_animal]

        if self.samp_purpose is not None and not isinstance(self.samp_purpose, str):
            self.samp_purpose = str(self.samp_purpose)

        if not isinstance(self.repository_name, list):
            self.repository_name = [self.repository_name] if self.repository_name is not None else []
        self.repository_name = [v if isinstance(v, str) else str(v) for v in self.repository_name]

        if not isinstance(self.samp_pooling, list):
            self.samp_pooling = [self.samp_pooling] if self.samp_pooling is not None else []
        self.samp_pooling = [v if isinstance(v, str) else str(v) for v in self.samp_pooling]

        if self.samp_source_mat_cat is not None and not isinstance(self.samp_source_mat_cat, str):
            self.samp_source_mat_cat = str(self.samp_source_mat_cat)

        if self.sequencing_kit is not None and not isinstance(self.sequencing_kit, str):
            self.sequencing_kit = str(self.sequencing_kit)

        if self.sequencing_location is not None and not isinstance(self.sequencing_location, str):
            self.sequencing_location = str(self.sequencing_location)

        if self.timepoint is not None and not isinstance(self.timepoint, str):
            self.timepoint = str(self.timepoint)

        if self.enrichment_protocol is not None and not isinstance(self.enrichment_protocol, str):
            self.enrichment_protocol = str(self.enrichment_protocol)

        if self.food_quality_date is not None and not isinstance(self.food_quality_date, str):
            self.food_quality_date = str(self.food_quality_date)

        if not isinstance(self.IFSAC_category, list):
            self.IFSAC_category = [self.IFSAC_category] if self.IFSAC_category is not None else []
        self.IFSAC_category = [v if isinstance(v, str) else str(v) for v in self.IFSAC_category]

        if self.cult_isol_date is not None and not isinstance(self.cult_isol_date, str):
            self.cult_isol_date = str(self.cult_isol_date)

        if self.coll_site_geo_feat is not None and not isinstance(self.coll_site_geo_feat, str):
            self.coll_site_geo_feat = str(self.coll_site_geo_feat)

        if not isinstance(self.food_product_type, list):
            self.food_product_type = [self.food_product_type] if self.food_product_type is not None else []
        self.food_product_type = [v if isinstance(v, str) else str(v) for v in self.food_product_type]

        if self.bacterial_density is not None and not isinstance(self.bacterial_density, str):
            self.bacterial_density = str(self.bacterial_density)

        if not isinstance(self.dietary_claim_use, list):
            self.dietary_claim_use = [self.dietary_claim_use] if self.dietary_claim_use is not None else []
        self.dietary_claim_use = [v if isinstance(v, str) else str(v) for v in self.dietary_claim_use]

        if not isinstance(self.food_additive, list):
            self.food_additive = [self.food_additive] if self.food_additive is not None else []
        self.food_additive = [v if isinstance(v, str) else str(v) for v in self.food_additive]

        if not isinstance(self.food_allergen_label, list):
            self.food_allergen_label = [self.food_allergen_label] if self.food_allergen_label is not None else []
        self.food_allergen_label = [v if isinstance(v, str) else str(v) for v in self.food_allergen_label]

        if not isinstance(self.food_cooking_proc, list):
            self.food_cooking_proc = [self.food_cooking_proc] if self.food_cooking_proc is not None else []
        self.food_cooking_proc = [v if isinstance(v, str) else str(v) for v in self.food_cooking_proc]

        if not isinstance(self.food_dis_point, list):
            self.food_dis_point = [self.food_dis_point] if self.food_dis_point is not None else []
        self.food_dis_point = [v if isinstance(v, str) else str(v) for v in self.food_dis_point]

        if not isinstance(self.food_dis_point_city, list):
            self.food_dis_point_city = [self.food_dis_point_city] if self.food_dis_point_city is not None else []
        self.food_dis_point_city = [v if isinstance(v, str) else str(v) for v in self.food_dis_point_city]

        if not isinstance(self.food_ingredient, list):
            self.food_ingredient = [self.food_ingredient] if self.food_ingredient is not None else []
        self.food_ingredient = [v if isinstance(v, str) else str(v) for v in self.food_ingredient]

        if self.food_name_status is not None and not isinstance(self.food_name_status, str):
            self.food_name_status = str(self.food_name_status)

        if self.food_origin is not None and not isinstance(self.food_origin, str):
            self.food_origin = str(self.food_origin)

        if self.food_pack_capacity is not None and not isinstance(self.food_pack_capacity, str):
            self.food_pack_capacity = str(self.food_pack_capacity)

        if not isinstance(self.food_pack_integrity, list):
            self.food_pack_integrity = [self.food_pack_integrity] if self.food_pack_integrity is not None else []
        self.food_pack_integrity = [v if isinstance(v, str) else str(v) for v in self.food_pack_integrity]

        if not isinstance(self.food_prior_contact, list):
            self.food_prior_contact = [self.food_prior_contact] if self.food_prior_contact is not None else []
        self.food_prior_contact = [v if isinstance(v, str) else str(v) for v in self.food_prior_contact]

        if not isinstance(self.food_prod, list):
            self.food_prod = [self.food_prod] if self.food_prod is not None else []
        self.food_prod = [v if isinstance(v, str) else str(v) for v in self.food_prod]

        if not isinstance(self.food_prod_synonym, list):
            self.food_prod_synonym = [self.food_prod_synonym] if self.food_prod_synonym is not None else []
        self.food_prod_synonym = [v if isinstance(v, str) else str(v) for v in self.food_prod_synonym]

        if self.food_product_qual is not None and not isinstance(self.food_product_qual, str):
            self.food_product_qual = str(self.food_product_qual)

        if self.food_trace_list is not None and not isinstance(self.food_trace_list, str):
            self.food_trace_list = str(self.food_trace_list)

        if not isinstance(self.HACCP_term, list):
            self.HACCP_term = [self.HACCP_term] if self.HACCP_term is not None else []
        self.HACCP_term = [v if isinstance(v, str) else str(v) for v in self.HACCP_term]

        if self.microb_cult_med is not None and not isinstance(self.microb_cult_med, str):
            self.microb_cult_med = str(self.microb_cult_med)

        if not isinstance(self.nucl_acid_ext_kit, list):
            self.nucl_acid_ext_kit = [self.nucl_acid_ext_kit] if self.nucl_acid_ext_kit is not None else []
        self.nucl_acid_ext_kit = [v if isinstance(v, str) else str(v) for v in self.nucl_acid_ext_kit]

        if self.num_samp_collect is not None and not isinstance(self.num_samp_collect, str):
            self.num_samp_collect = str(self.num_samp_collect)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if self.samp_rep_biol is not None and not isinstance(self.samp_rep_biol, str):
            self.samp_rep_biol = str(self.samp_rep_biol)

        if self.samp_rep_tech is not None and not isinstance(self.samp_rep_tech, str):
            self.samp_rep_tech = str(self.samp_rep_tech)

        if self.samp_stor_device is not None and not isinstance(self.samp_stor_device, str):
            self.samp_stor_device = str(self.samp_stor_device)

        if self.samp_stor_media is not None and not isinstance(self.samp_stor_media, str):
            self.samp_stor_media = str(self.samp_stor_media)

        if self.samp_transport_cont is not None and not isinstance(self.samp_transport_cont, str):
            self.samp_transport_cont = str(self.samp_transport_cont)

        if self.samp_transport_dur is not None and not isinstance(self.samp_transport_dur, str):
            self.samp_transport_dur = str(self.samp_transport_dur)

        if self.samp_transport_temp is not None and not isinstance(self.samp_transport_temp, str):
            self.samp_transport_temp = str(self.samp_transport_temp)

        if not isinstance(self.spec_intended_cons, list):
            self.spec_intended_cons = [self.spec_intended_cons] if self.spec_intended_cons is not None else []
        self.spec_intended_cons = [v if isinstance(v, str) else str(v) for v in self.spec_intended_cons]

        if not isinstance(self.study_design, list):
            self.study_design = [self.study_design] if self.study_design is not None else []
        self.study_design = [v if isinstance(v, str) else str(v) for v in self.study_design]

        if self.study_inc_dur is not None and not isinstance(self.study_inc_dur, str):
            self.study_inc_dur = str(self.study_inc_dur)

        if self.study_inc_temp is not None and not isinstance(self.study_inc_temp, str):
            self.study_inc_temp = str(self.study_inc_temp)

        if self.study_timecourse is not None and not isinstance(self.study_timecourse, str):
            self.study_timecourse = str(self.study_timecourse)

        if not isinstance(self.study_tmnt, list):
            self.study_tmnt = [self.study_tmnt] if self.study_tmnt is not None else []
        self.study_tmnt = [v if isinstance(v, str) else str(v) for v in self.study_tmnt]

        if not isinstance(self.facility_type, list):
            self.facility_type = [self.facility_type] if self.facility_type is not None else []
        self.facility_type = [v if isinstance(v, str) else str(v) for v in self.facility_type]

        if self.hygienic_area is not None and not isinstance(self.hygienic_area, str):
            self.hygienic_area = str(self.hygienic_area)

        if self.env_monitoring_zone is not None and not isinstance(self.env_monitoring_zone, str):
            self.env_monitoring_zone = str(self.env_monitoring_zone)

        if self.area_samp_size is not None and not isinstance(self.area_samp_size, str):
            self.area_samp_size = str(self.area_samp_size)

        if not isinstance(self.samp_surf_moisture, list):
            self.samp_surf_moisture = [self.samp_surf_moisture] if self.samp_surf_moisture is not None else []
        self.samp_surf_moisture = [v if isinstance(v, str) else str(v) for v in self.samp_surf_moisture]

        if self.samp_loc_condition is not None and not isinstance(self.samp_loc_condition, str):
            self.samp_loc_condition = str(self.samp_loc_condition)

        if not isinstance(self.biocide_used, list):
            self.biocide_used = [self.biocide_used] if self.biocide_used is not None else []
        self.biocide_used = [v if isinstance(v, str) else str(v) for v in self.biocide_used]

        if not isinstance(self.ster_meth_samp_room, list):
            self.ster_meth_samp_room = [self.ster_meth_samp_room] if self.ster_meth_samp_room is not None else []
        self.ster_meth_samp_room = [v if isinstance(v, str) else str(v) for v in self.ster_meth_samp_room]

        if not isinstance(self.prod_label_claims, list):
            self.prod_label_claims = [self.prod_label_claims] if self.prod_label_claims is not None else []
        self.prod_label_claims = [v if isinstance(v, str) else str(v) for v in self.prod_label_claims]

        super().__post_init__(**kwargs)


@dataclass
class FoodHumanFoods(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.FoodHumanFoods
    class_class_curie: ClassVar[str] = "TEMP:FoodHumanFoods"
    class_name: ClassVar[str] = "food_human_foods"
    class_model_uri: ClassVar[URIRef] = TEMP.FoodHumanFoods

    samp_size: Optional[str] = None
    samp_collect_device: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    lat_lon: Optional[str] = None
    geo_loc_name: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    seq_meth: Optional[str] = None
    project_name: Optional[str] = None
    organism_count: Optional[str] = None
    samp_stor_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_stor_dur: Optional[str] = None
    pool_dna_extracts: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_stor_loc: Optional[str] = None
    genetic_mod: Optional[str] = None
    samp_name: Optional[str] = None
    cult_result: Optional[str] = None
    cult_result_org: Optional[Union[str, List[str]]] = empty_list()
    cult_target: Optional[Union[str, List[str]]] = empty_list()
    food_contact_surf: Optional[Union[str, List[str]]] = empty_list()
    food_contain_wrap: Optional[str] = None
    food_pack_medium: Optional[Union[str, List[str]]] = empty_list()
    food_preserv_proc: Optional[Union[str, List[str]]] = empty_list()
    food_trav_mode: Optional[Union[str, List[str]]] = empty_list()
    food_trav_vehic: Optional[Union[str, List[str]]] = empty_list()
    food_source: Optional[str] = None
    food_treat_proc: Optional[Union[str, List[str]]] = empty_list()
    intended_consumer: Optional[Union[str, List[str]]] = empty_list()
    library_prep_kit: Optional[str] = None
    lot_number: Optional[Union[str, List[str]]] = empty_list()
    part_plant_animal: Optional[Union[str, List[str]]] = empty_list()
    samp_purpose: Optional[str] = None
    repository_name: Optional[Union[str, List[str]]] = empty_list()
    samp_pooling: Optional[Union[str, List[str]]] = empty_list()
    samp_source_mat_cat: Optional[str] = None
    sequencing_kit: Optional[str] = None
    sequencing_location: Optional[str] = None
    serovar_or_serotype: Optional[Union[str, List[str]]] = empty_list()
    spikein_org: Optional[Union[str, List[str]]] = empty_list()
    spikein_serovar: Optional[Union[str, List[str]]] = empty_list()
    spikein_growth_med: Optional[Union[str, List[str]]] = empty_list()
    spikein_strain: Optional[Union[str, List[str]]] = empty_list()
    spikein_antibiotic: Optional[Union[str, List[str]]] = empty_list()
    spikein_metal: Optional[Union[str, List[str]]] = empty_list()
    timepoint: Optional[str] = None
    enrichment_protocol: Optional[str] = None
    food_quality_date: Optional[str] = None
    IFSAC_category: Optional[Union[str, List[str]]] = empty_list()
    cult_isol_date: Optional[str] = None
    coll_site_geo_feat: Optional[str] = None
    food_product_type: Optional[Union[str, List[str]]] = empty_list()
    ferm_chem_add: Optional[Union[str, List[str]]] = empty_list()
    ferm_chem_add_perc: Optional[Union[str, List[str]]] = empty_list()
    ferm_headspace_oxy: Optional[str] = None
    ferm_medium: Optional[str] = None
    ferm_pH: Optional[str] = None
    ferm_rel_humidity: Optional[str] = None
    ferm_temp: Optional[str] = None
    ferm_time: Optional[str] = None
    ferm_vessel: Optional[str] = None
    bacterial_density: Optional[str] = None
    cons_food_stor_dur: Optional[str] = None
    cons_food_stor_temp: Optional[str] = None
    cons_purch_date: Optional[str] = None
    cons_qty_purchased: Optional[str] = None
    dietary_claim_use: Optional[Union[str, List[str]]] = empty_list()
    food_additive: Optional[Union[str, List[str]]] = empty_list()
    food_allergen_label: Optional[Union[str, List[str]]] = empty_list()
    food_cooking_proc: Optional[Union[str, List[str]]] = empty_list()
    food_dis_point: Optional[Union[str, List[str]]] = empty_list()
    food_ingredient: Optional[Union[str, List[str]]] = empty_list()
    food_name_status: Optional[str] = None
    food_origin: Optional[str] = None
    food_pack_capacity: Optional[str] = None
    food_pack_integrity: Optional[Union[str, List[str]]] = empty_list()
    food_prior_contact: Optional[Union[str, List[str]]] = empty_list()
    food_prod: Optional[Union[str, List[str]]] = empty_list()
    food_prod_synonym: Optional[Union[str, List[str]]] = empty_list()
    food_product_qual: Optional[str] = None
    food_trace_list: Optional[str] = None
    HACCP_term: Optional[Union[str, List[str]]] = empty_list()
    microb_cult_med: Optional[str] = None
    microb_start: Optional[str] = None
    microb_start_count: Optional[str] = None
    microb_start_inoc: Optional[str] = None
    microb_start_prep: Optional[str] = None
    microb_start_source: Optional[str] = None
    microb_start_taxID: Optional[str] = None
    nucl_acid_ext_kit: Optional[Union[str, List[str]]] = empty_list()
    num_samp_collect: Optional[str] = None
    sample_collec_method: Optional[str] = None
    samp_rep_biol: Optional[str] = None
    samp_rep_tech: Optional[str] = None
    samp_stor_device: Optional[str] = None
    samp_stor_media: Optional[str] = None
    samp_transport_cont: Optional[str] = None
    samp_transport_dur: Optional[str] = None
    samp_transport_temp: Optional[str] = None
    spikein_AMR: Optional[Union[str, List[str]]] = empty_list()
    study_design: Optional[Union[str, List[str]]] = empty_list()
    study_inc_dur: Optional[str] = None
    study_inc_temp: Optional[str] = None
    study_timecourse: Optional[str] = None
    study_tmnt: Optional[Union[str, List[str]]] = empty_list()
    spikein_count: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.seq_meth is not None and not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.organism_count is not None and not isinstance(self.organism_count, str):
            self.organism_count = str(self.organism_count)

        if self.samp_stor_temp is not None and not isinstance(self.samp_stor_temp, str):
            self.samp_stor_temp = str(self.samp_stor_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_stor_dur is not None and not isinstance(self.samp_stor_dur, str):
            self.samp_stor_dur = str(self.samp_stor_dur)

        if not isinstance(self.pool_dna_extracts, list):
            self.pool_dna_extracts = [self.pool_dna_extracts] if self.pool_dna_extracts is not None else []
        self.pool_dna_extracts = [v if isinstance(v, str) else str(v) for v in self.pool_dna_extracts]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_stor_loc is not None and not isinstance(self.samp_stor_loc, str):
            self.samp_stor_loc = str(self.samp_stor_loc)

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self.cult_result is not None and not isinstance(self.cult_result, str):
            self.cult_result = str(self.cult_result)

        if not isinstance(self.cult_result_org, list):
            self.cult_result_org = [self.cult_result_org] if self.cult_result_org is not None else []
        self.cult_result_org = [v if isinstance(v, str) else str(v) for v in self.cult_result_org]

        if not isinstance(self.cult_target, list):
            self.cult_target = [self.cult_target] if self.cult_target is not None else []
        self.cult_target = [v if isinstance(v, str) else str(v) for v in self.cult_target]

        if not isinstance(self.food_contact_surf, list):
            self.food_contact_surf = [self.food_contact_surf] if self.food_contact_surf is not None else []
        self.food_contact_surf = [v if isinstance(v, str) else str(v) for v in self.food_contact_surf]

        if self.food_contain_wrap is not None and not isinstance(self.food_contain_wrap, str):
            self.food_contain_wrap = str(self.food_contain_wrap)

        if not isinstance(self.food_pack_medium, list):
            self.food_pack_medium = [self.food_pack_medium] if self.food_pack_medium is not None else []
        self.food_pack_medium = [v if isinstance(v, str) else str(v) for v in self.food_pack_medium]

        if not isinstance(self.food_preserv_proc, list):
            self.food_preserv_proc = [self.food_preserv_proc] if self.food_preserv_proc is not None else []
        self.food_preserv_proc = [v if isinstance(v, str) else str(v) for v in self.food_preserv_proc]

        if not isinstance(self.food_trav_mode, list):
            self.food_trav_mode = [self.food_trav_mode] if self.food_trav_mode is not None else []
        self.food_trav_mode = [v if isinstance(v, str) else str(v) for v in self.food_trav_mode]

        if not isinstance(self.food_trav_vehic, list):
            self.food_trav_vehic = [self.food_trav_vehic] if self.food_trav_vehic is not None else []
        self.food_trav_vehic = [v if isinstance(v, str) else str(v) for v in self.food_trav_vehic]

        if self.food_source is not None and not isinstance(self.food_source, str):
            self.food_source = str(self.food_source)

        if not isinstance(self.food_treat_proc, list):
            self.food_treat_proc = [self.food_treat_proc] if self.food_treat_proc is not None else []
        self.food_treat_proc = [v if isinstance(v, str) else str(v) for v in self.food_treat_proc]

        if not isinstance(self.intended_consumer, list):
            self.intended_consumer = [self.intended_consumer] if self.intended_consumer is not None else []
        self.intended_consumer = [v if isinstance(v, str) else str(v) for v in self.intended_consumer]

        if self.library_prep_kit is not None and not isinstance(self.library_prep_kit, str):
            self.library_prep_kit = str(self.library_prep_kit)

        if not isinstance(self.lot_number, list):
            self.lot_number = [self.lot_number] if self.lot_number is not None else []
        self.lot_number = [v if isinstance(v, str) else str(v) for v in self.lot_number]

        if not isinstance(self.part_plant_animal, list):
            self.part_plant_animal = [self.part_plant_animal] if self.part_plant_animal is not None else []
        self.part_plant_animal = [v if isinstance(v, str) else str(v) for v in self.part_plant_animal]

        if self.samp_purpose is not None and not isinstance(self.samp_purpose, str):
            self.samp_purpose = str(self.samp_purpose)

        if not isinstance(self.repository_name, list):
            self.repository_name = [self.repository_name] if self.repository_name is not None else []
        self.repository_name = [v if isinstance(v, str) else str(v) for v in self.repository_name]

        if not isinstance(self.samp_pooling, list):
            self.samp_pooling = [self.samp_pooling] if self.samp_pooling is not None else []
        self.samp_pooling = [v if isinstance(v, str) else str(v) for v in self.samp_pooling]

        if self.samp_source_mat_cat is not None and not isinstance(self.samp_source_mat_cat, str):
            self.samp_source_mat_cat = str(self.samp_source_mat_cat)

        if self.sequencing_kit is not None and not isinstance(self.sequencing_kit, str):
            self.sequencing_kit = str(self.sequencing_kit)

        if self.sequencing_location is not None and not isinstance(self.sequencing_location, str):
            self.sequencing_location = str(self.sequencing_location)

        if not isinstance(self.serovar_or_serotype, list):
            self.serovar_or_serotype = [self.serovar_or_serotype] if self.serovar_or_serotype is not None else []
        self.serovar_or_serotype = [v if isinstance(v, str) else str(v) for v in self.serovar_or_serotype]

        if not isinstance(self.spikein_org, list):
            self.spikein_org = [self.spikein_org] if self.spikein_org is not None else []
        self.spikein_org = [v if isinstance(v, str) else str(v) for v in self.spikein_org]

        if not isinstance(self.spikein_serovar, list):
            self.spikein_serovar = [self.spikein_serovar] if self.spikein_serovar is not None else []
        self.spikein_serovar = [v if isinstance(v, str) else str(v) for v in self.spikein_serovar]

        if not isinstance(self.spikein_growth_med, list):
            self.spikein_growth_med = [self.spikein_growth_med] if self.spikein_growth_med is not None else []
        self.spikein_growth_med = [v if isinstance(v, str) else str(v) for v in self.spikein_growth_med]

        if not isinstance(self.spikein_strain, list):
            self.spikein_strain = [self.spikein_strain] if self.spikein_strain is not None else []
        self.spikein_strain = [v if isinstance(v, str) else str(v) for v in self.spikein_strain]

        if not isinstance(self.spikein_antibiotic, list):
            self.spikein_antibiotic = [self.spikein_antibiotic] if self.spikein_antibiotic is not None else []
        self.spikein_antibiotic = [v if isinstance(v, str) else str(v) for v in self.spikein_antibiotic]

        if not isinstance(self.spikein_metal, list):
            self.spikein_metal = [self.spikein_metal] if self.spikein_metal is not None else []
        self.spikein_metal = [v if isinstance(v, str) else str(v) for v in self.spikein_metal]

        if self.timepoint is not None and not isinstance(self.timepoint, str):
            self.timepoint = str(self.timepoint)

        if self.enrichment_protocol is not None and not isinstance(self.enrichment_protocol, str):
            self.enrichment_protocol = str(self.enrichment_protocol)

        if self.food_quality_date is not None and not isinstance(self.food_quality_date, str):
            self.food_quality_date = str(self.food_quality_date)

        if not isinstance(self.IFSAC_category, list):
            self.IFSAC_category = [self.IFSAC_category] if self.IFSAC_category is not None else []
        self.IFSAC_category = [v if isinstance(v, str) else str(v) for v in self.IFSAC_category]

        if self.cult_isol_date is not None and not isinstance(self.cult_isol_date, str):
            self.cult_isol_date = str(self.cult_isol_date)

        if self.coll_site_geo_feat is not None and not isinstance(self.coll_site_geo_feat, str):
            self.coll_site_geo_feat = str(self.coll_site_geo_feat)

        if not isinstance(self.food_product_type, list):
            self.food_product_type = [self.food_product_type] if self.food_product_type is not None else []
        self.food_product_type = [v if isinstance(v, str) else str(v) for v in self.food_product_type]

        if not isinstance(self.ferm_chem_add, list):
            self.ferm_chem_add = [self.ferm_chem_add] if self.ferm_chem_add is not None else []
        self.ferm_chem_add = [v if isinstance(v, str) else str(v) for v in self.ferm_chem_add]

        if not isinstance(self.ferm_chem_add_perc, list):
            self.ferm_chem_add_perc = [self.ferm_chem_add_perc] if self.ferm_chem_add_perc is not None else []
        self.ferm_chem_add_perc = [v if isinstance(v, str) else str(v) for v in self.ferm_chem_add_perc]

        if self.ferm_headspace_oxy is not None and not isinstance(self.ferm_headspace_oxy, str):
            self.ferm_headspace_oxy = str(self.ferm_headspace_oxy)

        if self.ferm_medium is not None and not isinstance(self.ferm_medium, str):
            self.ferm_medium = str(self.ferm_medium)

        if self.ferm_pH is not None and not isinstance(self.ferm_pH, str):
            self.ferm_pH = str(self.ferm_pH)

        if self.ferm_rel_humidity is not None and not isinstance(self.ferm_rel_humidity, str):
            self.ferm_rel_humidity = str(self.ferm_rel_humidity)

        if self.ferm_temp is not None and not isinstance(self.ferm_temp, str):
            self.ferm_temp = str(self.ferm_temp)

        if self.ferm_time is not None and not isinstance(self.ferm_time, str):
            self.ferm_time = str(self.ferm_time)

        if self.ferm_vessel is not None and not isinstance(self.ferm_vessel, str):
            self.ferm_vessel = str(self.ferm_vessel)

        if self.bacterial_density is not None and not isinstance(self.bacterial_density, str):
            self.bacterial_density = str(self.bacterial_density)

        if self.cons_food_stor_dur is not None and not isinstance(self.cons_food_stor_dur, str):
            self.cons_food_stor_dur = str(self.cons_food_stor_dur)

        if self.cons_food_stor_temp is not None and not isinstance(self.cons_food_stor_temp, str):
            self.cons_food_stor_temp = str(self.cons_food_stor_temp)

        if self.cons_purch_date is not None and not isinstance(self.cons_purch_date, str):
            self.cons_purch_date = str(self.cons_purch_date)

        if self.cons_qty_purchased is not None and not isinstance(self.cons_qty_purchased, str):
            self.cons_qty_purchased = str(self.cons_qty_purchased)

        if not isinstance(self.dietary_claim_use, list):
            self.dietary_claim_use = [self.dietary_claim_use] if self.dietary_claim_use is not None else []
        self.dietary_claim_use = [v if isinstance(v, str) else str(v) for v in self.dietary_claim_use]

        if not isinstance(self.food_additive, list):
            self.food_additive = [self.food_additive] if self.food_additive is not None else []
        self.food_additive = [v if isinstance(v, str) else str(v) for v in self.food_additive]

        if not isinstance(self.food_allergen_label, list):
            self.food_allergen_label = [self.food_allergen_label] if self.food_allergen_label is not None else []
        self.food_allergen_label = [v if isinstance(v, str) else str(v) for v in self.food_allergen_label]

        if not isinstance(self.food_cooking_proc, list):
            self.food_cooking_proc = [self.food_cooking_proc] if self.food_cooking_proc is not None else []
        self.food_cooking_proc = [v if isinstance(v, str) else str(v) for v in self.food_cooking_proc]

        if not isinstance(self.food_dis_point, list):
            self.food_dis_point = [self.food_dis_point] if self.food_dis_point is not None else []
        self.food_dis_point = [v if isinstance(v, str) else str(v) for v in self.food_dis_point]

        if not isinstance(self.food_ingredient, list):
            self.food_ingredient = [self.food_ingredient] if self.food_ingredient is not None else []
        self.food_ingredient = [v if isinstance(v, str) else str(v) for v in self.food_ingredient]

        if self.food_name_status is not None and not isinstance(self.food_name_status, str):
            self.food_name_status = str(self.food_name_status)

        if self.food_origin is not None and not isinstance(self.food_origin, str):
            self.food_origin = str(self.food_origin)

        if self.food_pack_capacity is not None and not isinstance(self.food_pack_capacity, str):
            self.food_pack_capacity = str(self.food_pack_capacity)

        if not isinstance(self.food_pack_integrity, list):
            self.food_pack_integrity = [self.food_pack_integrity] if self.food_pack_integrity is not None else []
        self.food_pack_integrity = [v if isinstance(v, str) else str(v) for v in self.food_pack_integrity]

        if not isinstance(self.food_prior_contact, list):
            self.food_prior_contact = [self.food_prior_contact] if self.food_prior_contact is not None else []
        self.food_prior_contact = [v if isinstance(v, str) else str(v) for v in self.food_prior_contact]

        if not isinstance(self.food_prod, list):
            self.food_prod = [self.food_prod] if self.food_prod is not None else []
        self.food_prod = [v if isinstance(v, str) else str(v) for v in self.food_prod]

        if not isinstance(self.food_prod_synonym, list):
            self.food_prod_synonym = [self.food_prod_synonym] if self.food_prod_synonym is not None else []
        self.food_prod_synonym = [v if isinstance(v, str) else str(v) for v in self.food_prod_synonym]

        if self.food_product_qual is not None and not isinstance(self.food_product_qual, str):
            self.food_product_qual = str(self.food_product_qual)

        if self.food_trace_list is not None and not isinstance(self.food_trace_list, str):
            self.food_trace_list = str(self.food_trace_list)

        if not isinstance(self.HACCP_term, list):
            self.HACCP_term = [self.HACCP_term] if self.HACCP_term is not None else []
        self.HACCP_term = [v if isinstance(v, str) else str(v) for v in self.HACCP_term]

        if self.microb_cult_med is not None and not isinstance(self.microb_cult_med, str):
            self.microb_cult_med = str(self.microb_cult_med)

        if self.microb_start is not None and not isinstance(self.microb_start, str):
            self.microb_start = str(self.microb_start)

        if self.microb_start_count is not None and not isinstance(self.microb_start_count, str):
            self.microb_start_count = str(self.microb_start_count)

        if self.microb_start_inoc is not None and not isinstance(self.microb_start_inoc, str):
            self.microb_start_inoc = str(self.microb_start_inoc)

        if self.microb_start_prep is not None and not isinstance(self.microb_start_prep, str):
            self.microb_start_prep = str(self.microb_start_prep)

        if self.microb_start_source is not None and not isinstance(self.microb_start_source, str):
            self.microb_start_source = str(self.microb_start_source)

        if self.microb_start_taxID is not None and not isinstance(self.microb_start_taxID, str):
            self.microb_start_taxID = str(self.microb_start_taxID)

        if not isinstance(self.nucl_acid_ext_kit, list):
            self.nucl_acid_ext_kit = [self.nucl_acid_ext_kit] if self.nucl_acid_ext_kit is not None else []
        self.nucl_acid_ext_kit = [v if isinstance(v, str) else str(v) for v in self.nucl_acid_ext_kit]

        if self.num_samp_collect is not None and not isinstance(self.num_samp_collect, str):
            self.num_samp_collect = str(self.num_samp_collect)

        if self.sample_collec_method is not None and not isinstance(self.sample_collec_method, str):
            self.sample_collec_method = str(self.sample_collec_method)

        if self.samp_rep_biol is not None and not isinstance(self.samp_rep_biol, str):
            self.samp_rep_biol = str(self.samp_rep_biol)

        if self.samp_rep_tech is not None and not isinstance(self.samp_rep_tech, str):
            self.samp_rep_tech = str(self.samp_rep_tech)

        if self.samp_stor_device is not None and not isinstance(self.samp_stor_device, str):
            self.samp_stor_device = str(self.samp_stor_device)

        if self.samp_stor_media is not None and not isinstance(self.samp_stor_media, str):
            self.samp_stor_media = str(self.samp_stor_media)

        if self.samp_transport_cont is not None and not isinstance(self.samp_transport_cont, str):
            self.samp_transport_cont = str(self.samp_transport_cont)

        if self.samp_transport_dur is not None and not isinstance(self.samp_transport_dur, str):
            self.samp_transport_dur = str(self.samp_transport_dur)

        if self.samp_transport_temp is not None and not isinstance(self.samp_transport_temp, str):
            self.samp_transport_temp = str(self.samp_transport_temp)

        if not isinstance(self.spikein_AMR, list):
            self.spikein_AMR = [self.spikein_AMR] if self.spikein_AMR is not None else []
        self.spikein_AMR = [v if isinstance(v, str) else str(v) for v in self.spikein_AMR]

        if not isinstance(self.study_design, list):
            self.study_design = [self.study_design] if self.study_design is not None else []
        self.study_design = [v if isinstance(v, str) else str(v) for v in self.study_design]

        if self.study_inc_dur is not None and not isinstance(self.study_inc_dur, str):
            self.study_inc_dur = str(self.study_inc_dur)

        if self.study_inc_temp is not None and not isinstance(self.study_inc_temp, str):
            self.study_inc_temp = str(self.study_inc_temp)

        if self.study_timecourse is not None and not isinstance(self.study_timecourse, str):
            self.study_timecourse = str(self.study_timecourse)

        if not isinstance(self.study_tmnt, list):
            self.study_tmnt = [self.study_tmnt] if self.study_tmnt is not None else []
        self.study_tmnt = [v if isinstance(v, str) else str(v) for v in self.study_tmnt]

        if self.spikein_count is not None and not isinstance(self.spikein_count, str):
            self.spikein_count = str(self.spikein_count)

        super().__post_init__(**kwargs)


@dataclass
class SymbiontAssociated(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.SymbiontAssociated
    class_class_curie: ClassVar[str] = "TEMP:SymbiontAssociated"
    class_name: ClassVar[str] = "symbiont_associated"
    class_model_uri: ClassVar[URIRef] = TEMP.SymbiontAssociated

    lat_lon: Optional[str] = None
    geo_loc_name: Optional[str] = None
    collection_date: Optional[str] = None
    env_broad_scale: Optional[str] = None
    env_local_scale: Optional[str] = None
    env_medium: Optional[str] = None
    depth: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    elev: Optional[str] = None
    alt: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_salinity: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    host_common_name: Optional[str] = None
    host_taxid: Optional[str] = None
    host_life_stage: Optional[str] = None
    host_substrate: Optional[str] = None
    host_infra_specific_name: Optional[str] = None
    host_infra_specific_rank: Optional[str] = None
    host_age: Optional[str] = None
    host_length: Optional[str] = None
    host_dry_mass: Optional[str] = None
    host_color: Optional[str] = None
    host_shape: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    host_genotype: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_sex: Optional[str] = None
    host_body_habitat: Optional[str] = None
    host_body_site: Optional[str] = None
    host_body_product: Optional[str] = None
    host_growth_cond: Optional[str] = None
    host_family_relationship: Optional[str] = None
    host_phenotype: Optional[str] = None
    gravidity: Optional[str] = None
    sample_name: Optional[str] = None
    association_duration: Optional[str] = None
    sym_life_cycle_type: Optional[str] = None
    symbiont_host_role: Optional[str] = None
    host_number: Optional[str] = None
    host_of_host_taxid: Optional[str] = None
    type_of_symbiosis: Optional[str] = None
    host_specificity: Optional[str] = None
    host_symbiont: Optional[str] = None
    host_of_host_coinf: Optional[str] = None
    mode_transmission: Optional[str] = None
    host_cellular_loc: Optional[str] = None
    host_dependence: Optional[str] = None
    route_transmission: Optional[str] = None
    samp_store_sol: Optional[str] = None
    host_of_host_disease: Optional[Union[str, List[str]]] = empty_list()
    host_of_host_name: Optional[str] = None
    host_of_host_env_loc: Optional[Union[str, List[str]]] = empty_list()
    host_of_host_env_med: Optional[str] = None
    host_of_host_sub_id: Optional[str] = None
    host_of_host_fam_rel: Optional[Union[str, List[str]]] = empty_list()
    host_of_host_infname: Optional[str] = None
    host_of_host_infrank: Optional[str] = None
    host_of_host_geno: Optional[str] = None
    host_of_host_pheno: Optional[str] = None
    host_of_host_gravid: Optional[str] = None
    host_of_host_totmass: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.lat_lon is not None and not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self.geo_loc_name is not None and not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.collection_date is not None and not isinstance(self.collection_date, str):
            self.collection_date = str(self.collection_date)

        if self.env_broad_scale is not None and not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self.env_local_scale is not None and not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self.env_medium is not None and not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_salinity is not None and not isinstance(self.samp_salinity, str):
            self.samp_salinity = str(self.samp_salinity)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.host_common_name is not None and not isinstance(self.host_common_name, str):
            self.host_common_name = str(self.host_common_name)

        if self.host_taxid is not None and not isinstance(self.host_taxid, str):
            self.host_taxid = str(self.host_taxid)

        if self.host_life_stage is not None and not isinstance(self.host_life_stage, str):
            self.host_life_stage = str(self.host_life_stage)

        if self.host_substrate is not None and not isinstance(self.host_substrate, str):
            self.host_substrate = str(self.host_substrate)

        if self.host_infra_specific_name is not None and not isinstance(self.host_infra_specific_name, str):
            self.host_infra_specific_name = str(self.host_infra_specific_name)

        if self.host_infra_specific_rank is not None and not isinstance(self.host_infra_specific_rank, str):
            self.host_infra_specific_rank = str(self.host_infra_specific_rank)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_length is not None and not isinstance(self.host_length, str):
            self.host_length = str(self.host_length)

        if self.host_dry_mass is not None and not isinstance(self.host_dry_mass, str):
            self.host_dry_mass = str(self.host_dry_mass)

        if self.host_color is not None and not isinstance(self.host_color, str):
            self.host_color = str(self.host_color)

        if self.host_shape is not None and not isinstance(self.host_shape, str):
            self.host_shape = str(self.host_shape)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_sex is not None and not isinstance(self.host_sex, str):
            self.host_sex = str(self.host_sex)

        if self.host_body_habitat is not None and not isinstance(self.host_body_habitat, str):
            self.host_body_habitat = str(self.host_body_habitat)

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if self.host_body_product is not None and not isinstance(self.host_body_product, str):
            self.host_body_product = str(self.host_body_product)

        if self.host_growth_cond is not None and not isinstance(self.host_growth_cond, str):
            self.host_growth_cond = str(self.host_growth_cond)

        if self.host_family_relationship is not None and not isinstance(self.host_family_relationship, str):
            self.host_family_relationship = str(self.host_family_relationship)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.gravidity is not None and not isinstance(self.gravidity, str):
            self.gravidity = str(self.gravidity)

        if self.sample_name is not None and not isinstance(self.sample_name, str):
            self.sample_name = str(self.sample_name)

        if self.association_duration is not None and not isinstance(self.association_duration, str):
            self.association_duration = str(self.association_duration)

        if self.sym_life_cycle_type is not None and not isinstance(self.sym_life_cycle_type, str):
            self.sym_life_cycle_type = str(self.sym_life_cycle_type)

        if self.symbiont_host_role is not None and not isinstance(self.symbiont_host_role, str):
            self.symbiont_host_role = str(self.symbiont_host_role)

        if self.host_number is not None and not isinstance(self.host_number, str):
            self.host_number = str(self.host_number)

        if self.host_of_host_taxid is not None and not isinstance(self.host_of_host_taxid, str):
            self.host_of_host_taxid = str(self.host_of_host_taxid)

        if self.type_of_symbiosis is not None and not isinstance(self.type_of_symbiosis, str):
            self.type_of_symbiosis = str(self.type_of_symbiosis)

        if self.host_specificity is not None and not isinstance(self.host_specificity, str):
            self.host_specificity = str(self.host_specificity)

        if self.host_symbiont is not None and not isinstance(self.host_symbiont, str):
            self.host_symbiont = str(self.host_symbiont)

        if self.host_of_host_coinf is not None and not isinstance(self.host_of_host_coinf, str):
            self.host_of_host_coinf = str(self.host_of_host_coinf)

        if self.mode_transmission is not None and not isinstance(self.mode_transmission, str):
            self.mode_transmission = str(self.mode_transmission)

        if self.host_cellular_loc is not None and not isinstance(self.host_cellular_loc, str):
            self.host_cellular_loc = str(self.host_cellular_loc)

        if self.host_dependence is not None and not isinstance(self.host_dependence, str):
            self.host_dependence = str(self.host_dependence)

        if self.route_transmission is not None and not isinstance(self.route_transmission, str):
            self.route_transmission = str(self.route_transmission)

        if self.samp_store_sol is not None and not isinstance(self.samp_store_sol, str):
            self.samp_store_sol = str(self.samp_store_sol)

        if not isinstance(self.host_of_host_disease, list):
            self.host_of_host_disease = [self.host_of_host_disease] if self.host_of_host_disease is not None else []
        self.host_of_host_disease = [v if isinstance(v, str) else str(v) for v in self.host_of_host_disease]

        if self.host_of_host_name is not None and not isinstance(self.host_of_host_name, str):
            self.host_of_host_name = str(self.host_of_host_name)

        if not isinstance(self.host_of_host_env_loc, list):
            self.host_of_host_env_loc = [self.host_of_host_env_loc] if self.host_of_host_env_loc is not None else []
        self.host_of_host_env_loc = [v if isinstance(v, str) else str(v) for v in self.host_of_host_env_loc]

        if self.host_of_host_env_med is not None and not isinstance(self.host_of_host_env_med, str):
            self.host_of_host_env_med = str(self.host_of_host_env_med)

        if self.host_of_host_sub_id is not None and not isinstance(self.host_of_host_sub_id, str):
            self.host_of_host_sub_id = str(self.host_of_host_sub_id)

        if not isinstance(self.host_of_host_fam_rel, list):
            self.host_of_host_fam_rel = [self.host_of_host_fam_rel] if self.host_of_host_fam_rel is not None else []
        self.host_of_host_fam_rel = [v if isinstance(v, str) else str(v) for v in self.host_of_host_fam_rel]

        if self.host_of_host_infname is not None and not isinstance(self.host_of_host_infname, str):
            self.host_of_host_infname = str(self.host_of_host_infname)

        if self.host_of_host_infrank is not None and not isinstance(self.host_of_host_infrank, str):
            self.host_of_host_infrank = str(self.host_of_host_infrank)

        if self.host_of_host_geno is not None and not isinstance(self.host_of_host_geno, str):
            self.host_of_host_geno = str(self.host_of_host_geno)

        if self.host_of_host_pheno is not None and not isinstance(self.host_of_host_pheno, str):
            self.host_of_host_pheno = str(self.host_of_host_pheno)

        if self.host_of_host_gravid is not None and not isinstance(self.host_of_host_gravid, str):
            self.host_of_host_gravid = str(self.host_of_host_gravid)

        if self.host_of_host_totmass is not None and not isinstance(self.host_of_host_totmass, str):
            self.host_of_host_totmass = str(self.host_of_host_totmass)

        super().__post_init__(**kwargs)


@dataclass
class HostAssociated(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.HostAssociated
    class_class_curie: ClassVar[str] = "TEMP:HostAssociated"
    class_name: ClassVar[str] = "host_associated"
    class_model_uri: ClassVar[URIRef] = TEMP.HostAssociated

    depth: Optional[str] = None
    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    elev: Optional[str] = None
    alt: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    salinity: Optional[str] = None
    ances_data: Optional[str] = None
    host_common_name: Optional[str] = None
    samp_dis_stage: Optional[str] = None
    host_taxid: Optional[str] = None
    host_life_stage: Optional[str] = None
    host_substrate: Optional[str] = None
    host_age: Optional[str] = None
    host_length: Optional[str] = None
    host_dry_mass: Optional[str] = None
    blood_press_diast: Optional[str] = None
    blood_press_syst: Optional[str] = None
    host_color: Optional[str] = None
    host_shape: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    host_body_temp: Optional[str] = None
    host_genotype: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    host_sex: Optional[str] = None
    biol_stat: Optional[str] = None
    genetic_mod: Optional[str] = None
    samp_capt_status: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_body_habitat: Optional[str] = None
    host_body_site: Optional[str] = None
    host_diet: Optional[Union[str, List[str]]] = empty_list()
    host_last_meal: Optional[Union[str, List[str]]] = empty_list()
    host_growth_cond: Optional[str] = None
    host_family_relation: Optional[Union[str, List[str]]] = empty_list()
    host_phenotype: Optional[str] = None
    gravidity: Optional[str] = None
    host_body_product: Optional[str] = None
    samp_name: Optional[str] = None
    host_symbiont: Optional[Union[str, List[str]]] = empty_list()
    host_subspecf_genlin: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.ances_data is not None and not isinstance(self.ances_data, str):
            self.ances_data = str(self.ances_data)

        if self.host_common_name is not None and not isinstance(self.host_common_name, str):
            self.host_common_name = str(self.host_common_name)

        if self.samp_dis_stage is not None and not isinstance(self.samp_dis_stage, str):
            self.samp_dis_stage = str(self.samp_dis_stage)

        if self.host_taxid is not None and not isinstance(self.host_taxid, str):
            self.host_taxid = str(self.host_taxid)

        if self.host_life_stage is not None and not isinstance(self.host_life_stage, str):
            self.host_life_stage = str(self.host_life_stage)

        if self.host_substrate is not None and not isinstance(self.host_substrate, str):
            self.host_substrate = str(self.host_substrate)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_length is not None and not isinstance(self.host_length, str):
            self.host_length = str(self.host_length)

        if self.host_dry_mass is not None and not isinstance(self.host_dry_mass, str):
            self.host_dry_mass = str(self.host_dry_mass)

        if self.blood_press_diast is not None and not isinstance(self.blood_press_diast, str):
            self.blood_press_diast = str(self.blood_press_diast)

        if self.blood_press_syst is not None and not isinstance(self.blood_press_syst, str):
            self.blood_press_syst = str(self.blood_press_syst)

        if self.host_color is not None and not isinstance(self.host_color, str):
            self.host_color = str(self.host_color)

        if self.host_shape is not None and not isinstance(self.host_shape, str):
            self.host_shape = str(self.host_shape)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.host_sex is not None and not isinstance(self.host_sex, str):
            self.host_sex = str(self.host_sex)

        if self.biol_stat is not None and not isinstance(self.biol_stat, str):
            self.biol_stat = str(self.biol_stat)

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if self.samp_capt_status is not None and not isinstance(self.samp_capt_status, str):
            self.samp_capt_status = str(self.samp_capt_status)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_body_habitat is not None and not isinstance(self.host_body_habitat, str):
            self.host_body_habitat = str(self.host_body_habitat)

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if not isinstance(self.host_diet, list):
            self.host_diet = [self.host_diet] if self.host_diet is not None else []
        self.host_diet = [v if isinstance(v, str) else str(v) for v in self.host_diet]

        if not isinstance(self.host_last_meal, list):
            self.host_last_meal = [self.host_last_meal] if self.host_last_meal is not None else []
        self.host_last_meal = [v if isinstance(v, str) else str(v) for v in self.host_last_meal]

        if self.host_growth_cond is not None and not isinstance(self.host_growth_cond, str):
            self.host_growth_cond = str(self.host_growth_cond)

        if not isinstance(self.host_family_relation, list):
            self.host_family_relation = [self.host_family_relation] if self.host_family_relation is not None else []
        self.host_family_relation = [v if isinstance(v, str) else str(v) for v in self.host_family_relation]

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.gravidity is not None and not isinstance(self.gravidity, str):
            self.gravidity = str(self.gravidity)

        if self.host_body_product is not None and not isinstance(self.host_body_product, str):
            self.host_body_product = str(self.host_body_product)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if not isinstance(self.host_symbiont, list):
            self.host_symbiont = [self.host_symbiont] if self.host_symbiont is not None else []
        self.host_symbiont = [v if isinstance(v, str) else str(v) for v in self.host_symbiont]

        if not isinstance(self.host_subspecf_genlin, list):
            self.host_subspecf_genlin = [self.host_subspecf_genlin] if self.host_subspecf_genlin is not None else []
        self.host_subspecf_genlin = [v if isinstance(v, str) else str(v) for v in self.host_subspecf_genlin]

        super().__post_init__(**kwargs)


@dataclass
class MicrobialMatBiofilm(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.MicrobialMatBiofilm
    class_class_curie: ClassVar[str] = "TEMP:MicrobialMatBiofilm"
    class_name: ClassVar[str] = "microbial_mat_biofilm"
    class_model_uri: ClassVar[URIRef] = TEMP.MicrobialMatBiofilm

    depth: Optional[str] = None
    project_name: Optional[str] = None
    elev: Optional[str] = None
    methane: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    diss_oxygen: Optional[str] = None
    glucosidase_act: Optional[str] = None
    diss_org_nitro: Optional[str] = None
    aminopept_act: Optional[str] = None
    bacteria_carb_prod: Optional[str] = None
    biomass: Optional[Union[str, List[str]]] = empty_list()
    bishomohopanol: Optional[str] = None
    bromide: Optional[str] = None
    chlorophyll: Optional[str] = None
    diether_lipids: Optional[Union[str, List[str]]] = empty_list()
    diss_hydrogen: Optional[str] = None
    phaeopigments: Optional[Union[str, List[str]]] = empty_list()
    phosplipid_fatt_acid: Optional[Union[str, List[str]]] = empty_list()
    redox_potential: Optional[str] = None
    salinity: Optional[str] = None
    silicate: Optional[str] = None
    water_content: Optional[str] = None
    turbidity: Optional[str] = None
    org_matter: Optional[str] = None
    org_nitro: Optional[str] = None
    carb_nitro_ratio: Optional[str] = None
    pressure: Optional[str] = None
    alkalinity: Optional[str] = None
    sulfate: Optional[str] = None
    sulfide: Optional[str] = None
    nitrate: Optional[str] = None
    nitrite: Optional[str] = None
    ammonium: Optional[str] = None
    sodium: Optional[str] = None
    chloride: Optional[str] = None
    potassium: Optional[str] = None
    magnesium: Optional[str] = None
    calcium: Optional[str] = None
    diss_org_carb: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    diss_carb_dioxide: Optional[str] = None
    alkyl_diethers: Optional[str] = None
    mean_frict_vel: Optional[str] = None
    mean_peak_frict_vel: Optional[str] = None
    n_alkanes: Optional[Union[str, List[str]]] = empty_list()
    nitro: Optional[str] = None
    phosphate: Optional[str] = None
    org_carb: Optional[str] = None
    part_org_carb: Optional[str] = None
    petroleum_hydrocarb: Optional[str] = None
    tot_carb: Optional[str] = None
    tot_nitro_content: Optional[str] = None
    tot_org_carb: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    ph: Optional[str] = None
    samp_name: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.methane is not None and not isinstance(self.methane, str):
            self.methane = str(self.methane)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.diss_oxygen is not None and not isinstance(self.diss_oxygen, str):
            self.diss_oxygen = str(self.diss_oxygen)

        if self.glucosidase_act is not None and not isinstance(self.glucosidase_act, str):
            self.glucosidase_act = str(self.glucosidase_act)

        if self.diss_org_nitro is not None and not isinstance(self.diss_org_nitro, str):
            self.diss_org_nitro = str(self.diss_org_nitro)

        if self.aminopept_act is not None and not isinstance(self.aminopept_act, str):
            self.aminopept_act = str(self.aminopept_act)

        if self.bacteria_carb_prod is not None and not isinstance(self.bacteria_carb_prod, str):
            self.bacteria_carb_prod = str(self.bacteria_carb_prod)

        if not isinstance(self.biomass, list):
            self.biomass = [self.biomass] if self.biomass is not None else []
        self.biomass = [v if isinstance(v, str) else str(v) for v in self.biomass]

        if self.bishomohopanol is not None and not isinstance(self.bishomohopanol, str):
            self.bishomohopanol = str(self.bishomohopanol)

        if self.bromide is not None and not isinstance(self.bromide, str):
            self.bromide = str(self.bromide)

        if self.chlorophyll is not None and not isinstance(self.chlorophyll, str):
            self.chlorophyll = str(self.chlorophyll)

        if not isinstance(self.diether_lipids, list):
            self.diether_lipids = [self.diether_lipids] if self.diether_lipids is not None else []
        self.diether_lipids = [v if isinstance(v, str) else str(v) for v in self.diether_lipids]

        if self.diss_hydrogen is not None and not isinstance(self.diss_hydrogen, str):
            self.diss_hydrogen = str(self.diss_hydrogen)

        if not isinstance(self.phaeopigments, list):
            self.phaeopigments = [self.phaeopigments] if self.phaeopigments is not None else []
        self.phaeopigments = [v if isinstance(v, str) else str(v) for v in self.phaeopigments]

        if not isinstance(self.phosplipid_fatt_acid, list):
            self.phosplipid_fatt_acid = [self.phosplipid_fatt_acid] if self.phosplipid_fatt_acid is not None else []
        self.phosplipid_fatt_acid = [v if isinstance(v, str) else str(v) for v in self.phosplipid_fatt_acid]

        if self.redox_potential is not None and not isinstance(self.redox_potential, str):
            self.redox_potential = str(self.redox_potential)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.silicate is not None and not isinstance(self.silicate, str):
            self.silicate = str(self.silicate)

        if self.water_content is not None and not isinstance(self.water_content, str):
            self.water_content = str(self.water_content)

        if self.turbidity is not None and not isinstance(self.turbidity, str):
            self.turbidity = str(self.turbidity)

        if self.org_matter is not None and not isinstance(self.org_matter, str):
            self.org_matter = str(self.org_matter)

        if self.org_nitro is not None and not isinstance(self.org_nitro, str):
            self.org_nitro = str(self.org_nitro)

        if self.carb_nitro_ratio is not None and not isinstance(self.carb_nitro_ratio, str):
            self.carb_nitro_ratio = str(self.carb_nitro_ratio)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.sulfate is not None and not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self.sulfide is not None and not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.magnesium is not None and not isinstance(self.magnesium, str):
            self.magnesium = str(self.magnesium)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.diss_org_carb is not None and not isinstance(self.diss_org_carb, str):
            self.diss_org_carb = str(self.diss_org_carb)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.alkyl_diethers is not None and not isinstance(self.alkyl_diethers, str):
            self.alkyl_diethers = str(self.alkyl_diethers)

        if self.mean_frict_vel is not None and not isinstance(self.mean_frict_vel, str):
            self.mean_frict_vel = str(self.mean_frict_vel)

        if self.mean_peak_frict_vel is not None and not isinstance(self.mean_peak_frict_vel, str):
            self.mean_peak_frict_vel = str(self.mean_peak_frict_vel)

        if not isinstance(self.n_alkanes, list):
            self.n_alkanes = [self.n_alkanes] if self.n_alkanes is not None else []
        self.n_alkanes = [v if isinstance(v, str) else str(v) for v in self.n_alkanes]

        if self.nitro is not None and not isinstance(self.nitro, str):
            self.nitro = str(self.nitro)

        if self.phosphate is not None and not isinstance(self.phosphate, str):
            self.phosphate = str(self.phosphate)

        if self.org_carb is not None and not isinstance(self.org_carb, str):
            self.org_carb = str(self.org_carb)

        if self.part_org_carb is not None and not isinstance(self.part_org_carb, str):
            self.part_org_carb = str(self.part_org_carb)

        if self.petroleum_hydrocarb is not None and not isinstance(self.petroleum_hydrocarb, str):
            self.petroleum_hydrocarb = str(self.petroleum_hydrocarb)

        if self.tot_carb is not None and not isinstance(self.tot_carb, str):
            self.tot_carb = str(self.tot_carb)

        if self.tot_nitro_content is not None and not isinstance(self.tot_nitro_content, str):
            self.tot_nitro_content = str(self.tot_nitro_content)

        if self.tot_org_carb is not None and not isinstance(self.tot_org_carb, str):
            self.tot_org_carb = str(self.tot_org_carb)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.ph is not None and not isinstance(self.ph, str):
            self.ph = str(self.ph)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        super().__post_init__(**kwargs)


@dataclass
class MiscellaneousNaturalOrArtificialEnvironment(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.MiscellaneousNaturalOrArtificialEnvironment
    class_class_curie: ClassVar[str] = "TEMP:MiscellaneousNaturalOrArtificialEnvironment"
    class_name: ClassVar[str] = "miscellaneous_natural_or_artificial_environment"
    class_model_uri: ClassVar[URIRef] = TEMP.MiscellaneousNaturalOrArtificialEnvironment

    depth: Optional[str] = None
    project_name: Optional[str] = None
    elev: Optional[str] = None
    alt: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    diss_oxygen: Optional[str] = None
    diss_org_nitro: Optional[str] = None
    biomass: Optional[Union[str, List[str]]] = empty_list()
    bromide: Optional[str] = None
    chlorophyll: Optional[str] = None
    diether_lipids: Optional[Union[str, List[str]]] = empty_list()
    diss_hydrogen: Optional[str] = None
    phosplipid_fatt_acid: Optional[Union[str, List[str]]] = empty_list()
    salinity: Optional[str] = None
    silicate: Optional[str] = None
    water_current: Optional[str] = None
    org_matter: Optional[str] = None
    org_nitro: Optional[str] = None
    pressure: Optional[str] = None
    alkalinity: Optional[str] = None
    sulfate: Optional[str] = None
    sulfide: Optional[str] = None
    nitrate: Optional[str] = None
    nitrite: Optional[str] = None
    ammonium: Optional[str] = None
    sodium: Optional[str] = None
    chloride: Optional[str] = None
    potassium: Optional[str] = None
    calcium: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    density: Optional[str] = None
    diss_carb_dioxide: Optional[str] = None
    nitro: Optional[str] = None
    phosphate: Optional[str] = None
    org_carb: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    ph: Optional[str] = None
    samp_name: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.diss_oxygen is not None and not isinstance(self.diss_oxygen, str):
            self.diss_oxygen = str(self.diss_oxygen)

        if self.diss_org_nitro is not None and not isinstance(self.diss_org_nitro, str):
            self.diss_org_nitro = str(self.diss_org_nitro)

        if not isinstance(self.biomass, list):
            self.biomass = [self.biomass] if self.biomass is not None else []
        self.biomass = [v if isinstance(v, str) else str(v) for v in self.biomass]

        if self.bromide is not None and not isinstance(self.bromide, str):
            self.bromide = str(self.bromide)

        if self.chlorophyll is not None and not isinstance(self.chlorophyll, str):
            self.chlorophyll = str(self.chlorophyll)

        if not isinstance(self.diether_lipids, list):
            self.diether_lipids = [self.diether_lipids] if self.diether_lipids is not None else []
        self.diether_lipids = [v if isinstance(v, str) else str(v) for v in self.diether_lipids]

        if self.diss_hydrogen is not None and not isinstance(self.diss_hydrogen, str):
            self.diss_hydrogen = str(self.diss_hydrogen)

        if not isinstance(self.phosplipid_fatt_acid, list):
            self.phosplipid_fatt_acid = [self.phosplipid_fatt_acid] if self.phosplipid_fatt_acid is not None else []
        self.phosplipid_fatt_acid = [v if isinstance(v, str) else str(v) for v in self.phosplipid_fatt_acid]

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.silicate is not None and not isinstance(self.silicate, str):
            self.silicate = str(self.silicate)

        if self.water_current is not None and not isinstance(self.water_current, str):
            self.water_current = str(self.water_current)

        if self.org_matter is not None and not isinstance(self.org_matter, str):
            self.org_matter = str(self.org_matter)

        if self.org_nitro is not None and not isinstance(self.org_nitro, str):
            self.org_nitro = str(self.org_nitro)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.sulfate is not None and not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self.sulfide is not None and not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.density is not None and not isinstance(self.density, str):
            self.density = str(self.density)

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.nitro is not None and not isinstance(self.nitro, str):
            self.nitro = str(self.nitro)

        if self.phosphate is not None and not isinstance(self.phosphate, str):
            self.phosphate = str(self.phosphate)

        if self.org_carb is not None and not isinstance(self.org_carb, str):
            self.org_carb = str(self.org_carb)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.ph is not None and not isinstance(self.ph, str):
            self.ph = str(self.ph)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        super().__post_init__(**kwargs)


@dataclass
class PlantAssociated(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.PlantAssociated
    class_class_curie: ClassVar[str] = "TEMP:PlantAssociated"
    class_name: ClassVar[str] = "plant_associated"
    class_model_uri: ClassVar[URIRef] = TEMP.PlantAssociated

    depth: Optional[str] = None
    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    elev: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    salinity: Optional[str] = None
    ances_data: Optional[str] = None
    host_common_name: Optional[str] = None
    samp_dis_stage: Optional[str] = None
    host_taxid: Optional[str] = None
    host_life_stage: Optional[str] = None
    host_age: Optional[str] = None
    host_length: Optional[str] = None
    host_dry_mass: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    host_genotype: Optional[str] = None
    air_temp_regm: Optional[Union[str, List[str]]] = empty_list()
    antibiotic_regm: Optional[Union[str, List[str]]] = empty_list()
    chem_mutagen: Optional[Union[str, List[str]]] = empty_list()
    fertilizer_regm: Optional[Union[str, List[str]]] = empty_list()
    fungicide_regm: Optional[Union[str, List[str]]] = empty_list()
    gaseous_environment: Optional[Union[str, List[str]]] = empty_list()
    gravity: Optional[Union[str, List[str]]] = empty_list()
    growth_hormone_regm: Optional[Union[str, List[str]]] = empty_list()
    herbicide_regm: Optional[Union[str, List[str]]] = empty_list()
    host_wet_mass: Optional[str] = None
    humidity_regm: Optional[Union[str, List[str]]] = empty_list()
    light_regm: Optional[str] = None
    mineral_nutr_regm: Optional[Union[str, List[str]]] = empty_list()
    non_min_nutr_regm: Optional[Union[str, List[str]]] = empty_list()
    pesticide_regm: Optional[Union[str, List[str]]] = empty_list()
    radiation_regm: Optional[Union[str, List[str]]] = empty_list()
    rainfall_regm: Optional[Union[str, List[str]]] = empty_list()
    root_med_carbon: Optional[str] = None
    root_med_macronutr: Optional[str] = None
    root_med_micronutr: Optional[str] = None
    root_med_suppl: Optional[str] = None
    root_med_regl: Optional[str] = None
    salt_regm: Optional[Union[str, List[str]]] = empty_list()
    water_temp_regm: Optional[Union[str, List[str]]] = empty_list()
    watering_regm: Optional[Union[str, List[str]]] = empty_list()
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    biol_stat: Optional[str] = None
    genetic_mod: Optional[str] = None
    samp_capt_status: Optional[str] = None
    host_phenotype: Optional[str] = None
    biotic_regm: Optional[str] = None
    climate_environment: Optional[Union[str, List[str]]] = empty_list()
    cult_root_med: Optional[str] = None
    growth_facil: Optional[str] = None
    growth_habit: Optional[str] = None
    mechanical_damage: Optional[Union[str, List[str]]] = empty_list()
    ph_regm: Optional[Union[str, List[str]]] = empty_list()
    plant_growth_med: Optional[str] = None
    plant_product: Optional[str] = None
    plant_sex: Optional[str] = None
    plant_struc: Optional[str] = None
    root_cond: Optional[str] = None
    root_med_ph: Optional[str] = None
    root_med_solid: Optional[str] = None
    season_environment: Optional[Union[str, List[str]]] = empty_list()
    standing_water_regm: Optional[Union[str, List[str]]] = empty_list()
    tiss_cult_growth_med: Optional[str] = None
    samp_name: Optional[str] = None
    host_symbiont: Optional[Union[str, List[str]]] = empty_list()
    host_subspecf_genlin: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.ances_data is not None and not isinstance(self.ances_data, str):
            self.ances_data = str(self.ances_data)

        if self.host_common_name is not None and not isinstance(self.host_common_name, str):
            self.host_common_name = str(self.host_common_name)

        if self.samp_dis_stage is not None and not isinstance(self.samp_dis_stage, str):
            self.samp_dis_stage = str(self.samp_dis_stage)

        if self.host_taxid is not None and not isinstance(self.host_taxid, str):
            self.host_taxid = str(self.host_taxid)

        if self.host_life_stage is not None and not isinstance(self.host_life_stage, str):
            self.host_life_stage = str(self.host_life_stage)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_length is not None and not isinstance(self.host_length, str):
            self.host_length = str(self.host_length)

        if self.host_dry_mass is not None and not isinstance(self.host_dry_mass, str):
            self.host_dry_mass = str(self.host_dry_mass)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if not isinstance(self.air_temp_regm, list):
            self.air_temp_regm = [self.air_temp_regm] if self.air_temp_regm is not None else []
        self.air_temp_regm = [v if isinstance(v, str) else str(v) for v in self.air_temp_regm]

        if not isinstance(self.antibiotic_regm, list):
            self.antibiotic_regm = [self.antibiotic_regm] if self.antibiotic_regm is not None else []
        self.antibiotic_regm = [v if isinstance(v, str) else str(v) for v in self.antibiotic_regm]

        if not isinstance(self.chem_mutagen, list):
            self.chem_mutagen = [self.chem_mutagen] if self.chem_mutagen is not None else []
        self.chem_mutagen = [v if isinstance(v, str) else str(v) for v in self.chem_mutagen]

        if not isinstance(self.fertilizer_regm, list):
            self.fertilizer_regm = [self.fertilizer_regm] if self.fertilizer_regm is not None else []
        self.fertilizer_regm = [v if isinstance(v, str) else str(v) for v in self.fertilizer_regm]

        if not isinstance(self.fungicide_regm, list):
            self.fungicide_regm = [self.fungicide_regm] if self.fungicide_regm is not None else []
        self.fungicide_regm = [v if isinstance(v, str) else str(v) for v in self.fungicide_regm]

        if not isinstance(self.gaseous_environment, list):
            self.gaseous_environment = [self.gaseous_environment] if self.gaseous_environment is not None else []
        self.gaseous_environment = [v if isinstance(v, str) else str(v) for v in self.gaseous_environment]

        if not isinstance(self.gravity, list):
            self.gravity = [self.gravity] if self.gravity is not None else []
        self.gravity = [v if isinstance(v, str) else str(v) for v in self.gravity]

        if not isinstance(self.growth_hormone_regm, list):
            self.growth_hormone_regm = [self.growth_hormone_regm] if self.growth_hormone_regm is not None else []
        self.growth_hormone_regm = [v if isinstance(v, str) else str(v) for v in self.growth_hormone_regm]

        if not isinstance(self.herbicide_regm, list):
            self.herbicide_regm = [self.herbicide_regm] if self.herbicide_regm is not None else []
        self.herbicide_regm = [v if isinstance(v, str) else str(v) for v in self.herbicide_regm]

        if self.host_wet_mass is not None and not isinstance(self.host_wet_mass, str):
            self.host_wet_mass = str(self.host_wet_mass)

        if not isinstance(self.humidity_regm, list):
            self.humidity_regm = [self.humidity_regm] if self.humidity_regm is not None else []
        self.humidity_regm = [v if isinstance(v, str) else str(v) for v in self.humidity_regm]

        if self.light_regm is not None and not isinstance(self.light_regm, str):
            self.light_regm = str(self.light_regm)

        if not isinstance(self.mineral_nutr_regm, list):
            self.mineral_nutr_regm = [self.mineral_nutr_regm] if self.mineral_nutr_regm is not None else []
        self.mineral_nutr_regm = [v if isinstance(v, str) else str(v) for v in self.mineral_nutr_regm]

        if not isinstance(self.non_min_nutr_regm, list):
            self.non_min_nutr_regm = [self.non_min_nutr_regm] if self.non_min_nutr_regm is not None else []
        self.non_min_nutr_regm = [v if isinstance(v, str) else str(v) for v in self.non_min_nutr_regm]

        if not isinstance(self.pesticide_regm, list):
            self.pesticide_regm = [self.pesticide_regm] if self.pesticide_regm is not None else []
        self.pesticide_regm = [v if isinstance(v, str) else str(v) for v in self.pesticide_regm]

        if not isinstance(self.radiation_regm, list):
            self.radiation_regm = [self.radiation_regm] if self.radiation_regm is not None else []
        self.radiation_regm = [v if isinstance(v, str) else str(v) for v in self.radiation_regm]

        if not isinstance(self.rainfall_regm, list):
            self.rainfall_regm = [self.rainfall_regm] if self.rainfall_regm is not None else []
        self.rainfall_regm = [v if isinstance(v, str) else str(v) for v in self.rainfall_regm]

        if self.root_med_carbon is not None and not isinstance(self.root_med_carbon, str):
            self.root_med_carbon = str(self.root_med_carbon)

        if self.root_med_macronutr is not None and not isinstance(self.root_med_macronutr, str):
            self.root_med_macronutr = str(self.root_med_macronutr)

        if self.root_med_micronutr is not None and not isinstance(self.root_med_micronutr, str):
            self.root_med_micronutr = str(self.root_med_micronutr)

        if self.root_med_suppl is not None and not isinstance(self.root_med_suppl, str):
            self.root_med_suppl = str(self.root_med_suppl)

        if self.root_med_regl is not None and not isinstance(self.root_med_regl, str):
            self.root_med_regl = str(self.root_med_regl)

        if not isinstance(self.salt_regm, list):
            self.salt_regm = [self.salt_regm] if self.salt_regm is not None else []
        self.salt_regm = [v if isinstance(v, str) else str(v) for v in self.salt_regm]

        if not isinstance(self.water_temp_regm, list):
            self.water_temp_regm = [self.water_temp_regm] if self.water_temp_regm is not None else []
        self.water_temp_regm = [v if isinstance(v, str) else str(v) for v in self.water_temp_regm]

        if not isinstance(self.watering_regm, list):
            self.watering_regm = [self.watering_regm] if self.watering_regm is not None else []
        self.watering_regm = [v if isinstance(v, str) else str(v) for v in self.watering_regm]

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.biol_stat is not None and not isinstance(self.biol_stat, str):
            self.biol_stat = str(self.biol_stat)

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if self.samp_capt_status is not None and not isinstance(self.samp_capt_status, str):
            self.samp_capt_status = str(self.samp_capt_status)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.biotic_regm is not None and not isinstance(self.biotic_regm, str):
            self.biotic_regm = str(self.biotic_regm)

        if not isinstance(self.climate_environment, list):
            self.climate_environment = [self.climate_environment] if self.climate_environment is not None else []
        self.climate_environment = [v if isinstance(v, str) else str(v) for v in self.climate_environment]

        if self.cult_root_med is not None and not isinstance(self.cult_root_med, str):
            self.cult_root_med = str(self.cult_root_med)

        if self.growth_facil is not None and not isinstance(self.growth_facil, str):
            self.growth_facil = str(self.growth_facil)

        if self.growth_habit is not None and not isinstance(self.growth_habit, str):
            self.growth_habit = str(self.growth_habit)

        if not isinstance(self.mechanical_damage, list):
            self.mechanical_damage = [self.mechanical_damage] if self.mechanical_damage is not None else []
        self.mechanical_damage = [v if isinstance(v, str) else str(v) for v in self.mechanical_damage]

        if not isinstance(self.ph_regm, list):
            self.ph_regm = [self.ph_regm] if self.ph_regm is not None else []
        self.ph_regm = [v if isinstance(v, str) else str(v) for v in self.ph_regm]

        if self.plant_growth_med is not None and not isinstance(self.plant_growth_med, str):
            self.plant_growth_med = str(self.plant_growth_med)

        if self.plant_product is not None and not isinstance(self.plant_product, str):
            self.plant_product = str(self.plant_product)

        if self.plant_sex is not None and not isinstance(self.plant_sex, str):
            self.plant_sex = str(self.plant_sex)

        if self.plant_struc is not None and not isinstance(self.plant_struc, str):
            self.plant_struc = str(self.plant_struc)

        if self.root_cond is not None and not isinstance(self.root_cond, str):
            self.root_cond = str(self.root_cond)

        if self.root_med_ph is not None and not isinstance(self.root_med_ph, str):
            self.root_med_ph = str(self.root_med_ph)

        if self.root_med_solid is not None and not isinstance(self.root_med_solid, str):
            self.root_med_solid = str(self.root_med_solid)

        if not isinstance(self.season_environment, list):
            self.season_environment = [self.season_environment] if self.season_environment is not None else []
        self.season_environment = [v if isinstance(v, str) else str(v) for v in self.season_environment]

        if not isinstance(self.standing_water_regm, list):
            self.standing_water_regm = [self.standing_water_regm] if self.standing_water_regm is not None else []
        self.standing_water_regm = [v if isinstance(v, str) else str(v) for v in self.standing_water_regm]

        if self.tiss_cult_growth_med is not None and not isinstance(self.tiss_cult_growth_med, str):
            self.tiss_cult_growth_med = str(self.tiss_cult_growth_med)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if not isinstance(self.host_symbiont, list):
            self.host_symbiont = [self.host_symbiont] if self.host_symbiont is not None else []
        self.host_symbiont = [v if isinstance(v, str) else str(v) for v in self.host_symbiont]

        if not isinstance(self.host_subspecf_genlin, list):
            self.host_subspecf_genlin = [self.host_subspecf_genlin] if self.host_subspecf_genlin is not None else []
        self.host_subspecf_genlin = [v if isinstance(v, str) else str(v) for v in self.host_subspecf_genlin]

        super().__post_init__(**kwargs)


@dataclass
class Sediment(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.Sediment
    class_class_curie: ClassVar[str] = "TEMP:Sediment"
    class_name: ClassVar[str] = "sediment"
    class_model_uri: ClassVar[URIRef] = TEMP.Sediment

    depth: Optional[str] = None
    project_name: Optional[str] = None
    elev: Optional[str] = None
    methane: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    diss_oxygen: Optional[str] = None
    glucosidase_act: Optional[str] = None
    diss_org_nitro: Optional[str] = None
    aminopept_act: Optional[str] = None
    bacteria_carb_prod: Optional[str] = None
    biomass: Optional[Union[str, List[str]]] = empty_list()
    bishomohopanol: Optional[str] = None
    bromide: Optional[str] = None
    chlorophyll: Optional[str] = None
    diether_lipids: Optional[Union[str, List[str]]] = empty_list()
    diss_hydrogen: Optional[str] = None
    phaeopigments: Optional[Union[str, List[str]]] = empty_list()
    phosplipid_fatt_acid: Optional[Union[str, List[str]]] = empty_list()
    redox_potential: Optional[str] = None
    salinity: Optional[str] = None
    silicate: Optional[str] = None
    water_content: Optional[str] = None
    turbidity: Optional[str] = None
    org_matter: Optional[str] = None
    org_nitro: Optional[str] = None
    particle_class: Optional[Union[str, List[str]]] = empty_list()
    porosity: Optional[str] = None
    carb_nitro_ratio: Optional[str] = None
    pressure: Optional[str] = None
    alkalinity: Optional[str] = None
    sulfate: Optional[str] = None
    sulfide: Optional[str] = None
    nitrate: Optional[str] = None
    nitrite: Optional[str] = None
    ammonium: Optional[str] = None
    sodium: Optional[str] = None
    chloride: Optional[str] = None
    potassium: Optional[str] = None
    magnesium: Optional[str] = None
    calcium: Optional[str] = None
    diss_org_carb: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    density: Optional[str] = None
    diss_carb_dioxide: Optional[str] = None
    alkyl_diethers: Optional[str] = None
    mean_frict_vel: Optional[str] = None
    mean_peak_frict_vel: Optional[str] = None
    n_alkanes: Optional[Union[str, List[str]]] = empty_list()
    nitro: Optional[str] = None
    phosphate: Optional[str] = None
    org_carb: Optional[str] = None
    part_org_carb: Optional[str] = None
    petroleum_hydrocarb: Optional[str] = None
    tot_carb: Optional[str] = None
    tot_nitro_content: Optional[str] = None
    tot_org_carb: Optional[str] = None
    tot_depth_water_col: Optional[str] = None
    tidal_stage: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    ph: Optional[str] = None
    sediment_type: Optional[str] = None
    samp_name: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.methane is not None and not isinstance(self.methane, str):
            self.methane = str(self.methane)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.diss_oxygen is not None and not isinstance(self.diss_oxygen, str):
            self.diss_oxygen = str(self.diss_oxygen)

        if self.glucosidase_act is not None and not isinstance(self.glucosidase_act, str):
            self.glucosidase_act = str(self.glucosidase_act)

        if self.diss_org_nitro is not None and not isinstance(self.diss_org_nitro, str):
            self.diss_org_nitro = str(self.diss_org_nitro)

        if self.aminopept_act is not None and not isinstance(self.aminopept_act, str):
            self.aminopept_act = str(self.aminopept_act)

        if self.bacteria_carb_prod is not None and not isinstance(self.bacteria_carb_prod, str):
            self.bacteria_carb_prod = str(self.bacteria_carb_prod)

        if not isinstance(self.biomass, list):
            self.biomass = [self.biomass] if self.biomass is not None else []
        self.biomass = [v if isinstance(v, str) else str(v) for v in self.biomass]

        if self.bishomohopanol is not None and not isinstance(self.bishomohopanol, str):
            self.bishomohopanol = str(self.bishomohopanol)

        if self.bromide is not None and not isinstance(self.bromide, str):
            self.bromide = str(self.bromide)

        if self.chlorophyll is not None and not isinstance(self.chlorophyll, str):
            self.chlorophyll = str(self.chlorophyll)

        if not isinstance(self.diether_lipids, list):
            self.diether_lipids = [self.diether_lipids] if self.diether_lipids is not None else []
        self.diether_lipids = [v if isinstance(v, str) else str(v) for v in self.diether_lipids]

        if self.diss_hydrogen is not None and not isinstance(self.diss_hydrogen, str):
            self.diss_hydrogen = str(self.diss_hydrogen)

        if not isinstance(self.phaeopigments, list):
            self.phaeopigments = [self.phaeopigments] if self.phaeopigments is not None else []
        self.phaeopigments = [v if isinstance(v, str) else str(v) for v in self.phaeopigments]

        if not isinstance(self.phosplipid_fatt_acid, list):
            self.phosplipid_fatt_acid = [self.phosplipid_fatt_acid] if self.phosplipid_fatt_acid is not None else []
        self.phosplipid_fatt_acid = [v if isinstance(v, str) else str(v) for v in self.phosplipid_fatt_acid]

        if self.redox_potential is not None and not isinstance(self.redox_potential, str):
            self.redox_potential = str(self.redox_potential)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.silicate is not None and not isinstance(self.silicate, str):
            self.silicate = str(self.silicate)

        if self.water_content is not None and not isinstance(self.water_content, str):
            self.water_content = str(self.water_content)

        if self.turbidity is not None and not isinstance(self.turbidity, str):
            self.turbidity = str(self.turbidity)

        if self.org_matter is not None and not isinstance(self.org_matter, str):
            self.org_matter = str(self.org_matter)

        if self.org_nitro is not None and not isinstance(self.org_nitro, str):
            self.org_nitro = str(self.org_nitro)

        if not isinstance(self.particle_class, list):
            self.particle_class = [self.particle_class] if self.particle_class is not None else []
        self.particle_class = [v if isinstance(v, str) else str(v) for v in self.particle_class]

        if self.porosity is not None and not isinstance(self.porosity, str):
            self.porosity = str(self.porosity)

        if self.carb_nitro_ratio is not None and not isinstance(self.carb_nitro_ratio, str):
            self.carb_nitro_ratio = str(self.carb_nitro_ratio)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.sulfate is not None and not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self.sulfide is not None and not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.magnesium is not None and not isinstance(self.magnesium, str):
            self.magnesium = str(self.magnesium)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.diss_org_carb is not None and not isinstance(self.diss_org_carb, str):
            self.diss_org_carb = str(self.diss_org_carb)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.density is not None and not isinstance(self.density, str):
            self.density = str(self.density)

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.alkyl_diethers is not None and not isinstance(self.alkyl_diethers, str):
            self.alkyl_diethers = str(self.alkyl_diethers)

        if self.mean_frict_vel is not None and not isinstance(self.mean_frict_vel, str):
            self.mean_frict_vel = str(self.mean_frict_vel)

        if self.mean_peak_frict_vel is not None and not isinstance(self.mean_peak_frict_vel, str):
            self.mean_peak_frict_vel = str(self.mean_peak_frict_vel)

        if not isinstance(self.n_alkanes, list):
            self.n_alkanes = [self.n_alkanes] if self.n_alkanes is not None else []
        self.n_alkanes = [v if isinstance(v, str) else str(v) for v in self.n_alkanes]

        if self.nitro is not None and not isinstance(self.nitro, str):
            self.nitro = str(self.nitro)

        if self.phosphate is not None and not isinstance(self.phosphate, str):
            self.phosphate = str(self.phosphate)

        if self.org_carb is not None and not isinstance(self.org_carb, str):
            self.org_carb = str(self.org_carb)

        if self.part_org_carb is not None and not isinstance(self.part_org_carb, str):
            self.part_org_carb = str(self.part_org_carb)

        if self.petroleum_hydrocarb is not None and not isinstance(self.petroleum_hydrocarb, str):
            self.petroleum_hydrocarb = str(self.petroleum_hydrocarb)

        if self.tot_carb is not None and not isinstance(self.tot_carb, str):
            self.tot_carb = str(self.tot_carb)

        if self.tot_nitro_content is not None and not isinstance(self.tot_nitro_content, str):
            self.tot_nitro_content = str(self.tot_nitro_content)

        if self.tot_org_carb is not None and not isinstance(self.tot_org_carb, str):
            self.tot_org_carb = str(self.tot_org_carb)

        if self.tot_depth_water_col is not None and not isinstance(self.tot_depth_water_col, str):
            self.tot_depth_water_col = str(self.tot_depth_water_col)

        if self.tidal_stage is not None and not isinstance(self.tidal_stage, str):
            self.tidal_stage = str(self.tidal_stage)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.ph is not None and not isinstance(self.ph, str):
            self.ph = str(self.ph)

        if self.sediment_type is not None and not isinstance(self.sediment_type, str):
            self.sediment_type = str(self.sediment_type)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        super().__post_init__(**kwargs)


@dataclass
class Soil(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.Soil
    class_class_curie: ClassVar[str] = "TEMP:Soil"
    class_name: ClassVar[str] = "soil"
    class_model_uri: ClassVar[URIRef] = TEMP.Soil

    depth: Optional[str] = None
    project_name: Optional[str] = None
    elev: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    water_content: Optional[str] = None
    org_matter: Optional[str] = None
    org_nitro: Optional[str] = None
    cur_vegetation: Optional[str] = None
    cur_vegetation_meth: Optional[str] = None
    previous_land_use: Optional[str] = None
    prev_land_use_meth: Optional[str] = None
    crop_rotation: Optional[str] = None
    flooding: Optional[str] = None
    extreme_event: Optional[str] = None
    horizon_meth: Optional[str] = None
    sieving: Optional[str] = None
    water_cont_soil_meth: Optional[str] = None
    al_sat_meth: Optional[str] = None
    pool_dna_extracts: Optional[str] = None
    store_cond: Optional[str] = None
    link_climate_info: Optional[str] = None
    link_class_info: Optional[str] = None
    local_class: Optional[str] = None
    local_class_meth: Optional[str] = None
    soil_type: Optional[str] = None
    soil_type_meth: Optional[str] = None
    soil_text_measure: Optional[str] = None
    soil_texture_meth: Optional[str] = None
    tot_org_c_meth: Optional[str] = None
    tot_nitro_cont_meth: Optional[str] = None
    micro_biomass_meth: Optional[str] = None
    link_addit_analys: Optional[str] = None
    salinity_meth: Optional[str] = None
    heavy_metals_meth: Optional[str] = None
    tot_nitro_content: Optional[str] = None
    tot_org_carb: Optional[str] = None
    al_sat: Optional[str] = None
    agrochem_addition: Optional[Union[str, List[str]]] = empty_list()
    annual_temp: Optional[str] = None
    season_temp: Optional[str] = None
    annual_precpt: Optional[str] = None
    season_precpt: Optional[str] = None
    slope_gradient: Optional[str] = None
    slope_aspect: Optional[str] = None
    microbial_biomass: Optional[str] = None
    heavy_metals: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    ph: Optional[str] = None
    cur_land_use: Optional[str] = None
    tillage: Optional[Union[str, List[str]]] = empty_list()
    soil_horizon: Optional[str] = None
    fao_class: Optional[str] = None
    profile_position: Optional[str] = None
    drainage_class: Optional[str] = None
    fire: Optional[str] = None
    ph_meth: Optional[str] = None
    samp_name: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.water_content is not None and not isinstance(self.water_content, str):
            self.water_content = str(self.water_content)

        if self.org_matter is not None and not isinstance(self.org_matter, str):
            self.org_matter = str(self.org_matter)

        if self.org_nitro is not None and not isinstance(self.org_nitro, str):
            self.org_nitro = str(self.org_nitro)

        if self.cur_vegetation is not None and not isinstance(self.cur_vegetation, str):
            self.cur_vegetation = str(self.cur_vegetation)

        if self.cur_vegetation_meth is not None and not isinstance(self.cur_vegetation_meth, str):
            self.cur_vegetation_meth = str(self.cur_vegetation_meth)

        if self.previous_land_use is not None and not isinstance(self.previous_land_use, str):
            self.previous_land_use = str(self.previous_land_use)

        if self.prev_land_use_meth is not None and not isinstance(self.prev_land_use_meth, str):
            self.prev_land_use_meth = str(self.prev_land_use_meth)

        if self.crop_rotation is not None and not isinstance(self.crop_rotation, str):
            self.crop_rotation = str(self.crop_rotation)

        if self.flooding is not None and not isinstance(self.flooding, str):
            self.flooding = str(self.flooding)

        if self.extreme_event is not None and not isinstance(self.extreme_event, str):
            self.extreme_event = str(self.extreme_event)

        if self.horizon_meth is not None and not isinstance(self.horizon_meth, str):
            self.horizon_meth = str(self.horizon_meth)

        if self.sieving is not None and not isinstance(self.sieving, str):
            self.sieving = str(self.sieving)

        if self.water_cont_soil_meth is not None and not isinstance(self.water_cont_soil_meth, str):
            self.water_cont_soil_meth = str(self.water_cont_soil_meth)

        if self.al_sat_meth is not None and not isinstance(self.al_sat_meth, str):
            self.al_sat_meth = str(self.al_sat_meth)

        if self.pool_dna_extracts is not None and not isinstance(self.pool_dna_extracts, str):
            self.pool_dna_extracts = str(self.pool_dna_extracts)

        if self.store_cond is not None and not isinstance(self.store_cond, str):
            self.store_cond = str(self.store_cond)

        if self.link_climate_info is not None and not isinstance(self.link_climate_info, str):
            self.link_climate_info = str(self.link_climate_info)

        if self.link_class_info is not None and not isinstance(self.link_class_info, str):
            self.link_class_info = str(self.link_class_info)

        if self.local_class is not None and not isinstance(self.local_class, str):
            self.local_class = str(self.local_class)

        if self.local_class_meth is not None and not isinstance(self.local_class_meth, str):
            self.local_class_meth = str(self.local_class_meth)

        if self.soil_type is not None and not isinstance(self.soil_type, str):
            self.soil_type = str(self.soil_type)

        if self.soil_type_meth is not None and not isinstance(self.soil_type_meth, str):
            self.soil_type_meth = str(self.soil_type_meth)

        if self.soil_text_measure is not None and not isinstance(self.soil_text_measure, str):
            self.soil_text_measure = str(self.soil_text_measure)

        if self.soil_texture_meth is not None and not isinstance(self.soil_texture_meth, str):
            self.soil_texture_meth = str(self.soil_texture_meth)

        if self.tot_org_c_meth is not None and not isinstance(self.tot_org_c_meth, str):
            self.tot_org_c_meth = str(self.tot_org_c_meth)

        if self.tot_nitro_cont_meth is not None and not isinstance(self.tot_nitro_cont_meth, str):
            self.tot_nitro_cont_meth = str(self.tot_nitro_cont_meth)

        if self.micro_biomass_meth is not None and not isinstance(self.micro_biomass_meth, str):
            self.micro_biomass_meth = str(self.micro_biomass_meth)

        if self.link_addit_analys is not None and not isinstance(self.link_addit_analys, str):
            self.link_addit_analys = str(self.link_addit_analys)

        if self.salinity_meth is not None and not isinstance(self.salinity_meth, str):
            self.salinity_meth = str(self.salinity_meth)

        if self.heavy_metals_meth is not None and not isinstance(self.heavy_metals_meth, str):
            self.heavy_metals_meth = str(self.heavy_metals_meth)

        if self.tot_nitro_content is not None and not isinstance(self.tot_nitro_content, str):
            self.tot_nitro_content = str(self.tot_nitro_content)

        if self.tot_org_carb is not None and not isinstance(self.tot_org_carb, str):
            self.tot_org_carb = str(self.tot_org_carb)

        if self.al_sat is not None and not isinstance(self.al_sat, str):
            self.al_sat = str(self.al_sat)

        if not isinstance(self.agrochem_addition, list):
            self.agrochem_addition = [self.agrochem_addition] if self.agrochem_addition is not None else []
        self.agrochem_addition = [v if isinstance(v, str) else str(v) for v in self.agrochem_addition]

        if self.annual_temp is not None and not isinstance(self.annual_temp, str):
            self.annual_temp = str(self.annual_temp)

        if self.season_temp is not None and not isinstance(self.season_temp, str):
            self.season_temp = str(self.season_temp)

        if self.annual_precpt is not None and not isinstance(self.annual_precpt, str):
            self.annual_precpt = str(self.annual_precpt)

        if self.season_precpt is not None and not isinstance(self.season_precpt, str):
            self.season_precpt = str(self.season_precpt)

        if self.slope_gradient is not None and not isinstance(self.slope_gradient, str):
            self.slope_gradient = str(self.slope_gradient)

        if self.slope_aspect is not None and not isinstance(self.slope_aspect, str):
            self.slope_aspect = str(self.slope_aspect)

        if self.microbial_biomass is not None and not isinstance(self.microbial_biomass, str):
            self.microbial_biomass = str(self.microbial_biomass)

        if not isinstance(self.heavy_metals, list):
            self.heavy_metals = [self.heavy_metals] if self.heavy_metals is not None else []
        self.heavy_metals = [v if isinstance(v, str) else str(v) for v in self.heavy_metals]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.ph is not None and not isinstance(self.ph, str):
            self.ph = str(self.ph)

        if self.cur_land_use is not None and not isinstance(self.cur_land_use, str):
            self.cur_land_use = str(self.cur_land_use)

        if not isinstance(self.tillage, list):
            self.tillage = [self.tillage] if self.tillage is not None else []
        self.tillage = [v if isinstance(v, str) else str(v) for v in self.tillage]

        if self.soil_horizon is not None and not isinstance(self.soil_horizon, str):
            self.soil_horizon = str(self.soil_horizon)

        if self.fao_class is not None and not isinstance(self.fao_class, str):
            self.fao_class = str(self.fao_class)

        if self.profile_position is not None and not isinstance(self.profile_position, str):
            self.profile_position = str(self.profile_position)

        if self.drainage_class is not None and not isinstance(self.drainage_class, str):
            self.drainage_class = str(self.drainage_class)

        if self.fire is not None and not isinstance(self.fire, str):
            self.fire = str(self.fire)

        if self.ph_meth is not None and not isinstance(self.ph_meth, str):
            self.ph_meth = str(self.ph_meth)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        super().__post_init__(**kwargs)


@dataclass
class WastewaterSludge(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.WastewaterSludge
    class_class_curie: ClassVar[str] = "TEMP:WastewaterSludge"
    class_name: ClassVar[str] = "wastewater_sludge"
    class_model_uri: ClassVar[URIRef] = TEMP.WastewaterSludge

    depth: Optional[str] = None
    project_name: Optional[str] = None
    tot_nitro: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    suspend_solids: Optional[Union[str, List[str]]] = empty_list()
    salinity: Optional[str] = None
    sewage_type: Optional[str] = None
    pre_treatment: Optional[str] = None
    primary_treatment: Optional[str] = None
    reactor_type: Optional[str] = None
    secondary_treatment: Optional[str] = None
    tertiary_treatment: Optional[str] = None
    wastewater_type: Optional[str] = None
    alkalinity: Optional[str] = None
    nitrate: Optional[str] = None
    sodium: Optional[str] = None
    phosphate: Optional[str] = None
    biochem_oxygen_dem: Optional[str] = None
    chem_oxygen_dem: Optional[str] = None
    efficiency_percent: Optional[str] = None
    emulsions: Optional[Union[str, List[str]]] = empty_list()
    gaseous_substances: Optional[Union[str, List[str]]] = empty_list()
    indust_eff_percent: Optional[str] = None
    inorg_particles: Optional[Union[str, List[str]]] = empty_list()
    org_particles: Optional[Union[str, List[str]]] = empty_list()
    sludge_retent_time: Optional[str] = None
    soluble_inorg_mat: Optional[Union[str, List[str]]] = empty_list()
    soluble_org_mat: Optional[Union[str, List[str]]] = empty_list()
    tot_phosphate: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    ph: Optional[str] = None
    samp_name: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.tot_nitro is not None and not isinstance(self.tot_nitro, str):
            self.tot_nitro = str(self.tot_nitro)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if not isinstance(self.suspend_solids, list):
            self.suspend_solids = [self.suspend_solids] if self.suspend_solids is not None else []
        self.suspend_solids = [v if isinstance(v, str) else str(v) for v in self.suspend_solids]

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.sewage_type is not None and not isinstance(self.sewage_type, str):
            self.sewage_type = str(self.sewage_type)

        if self.pre_treatment is not None and not isinstance(self.pre_treatment, str):
            self.pre_treatment = str(self.pre_treatment)

        if self.primary_treatment is not None and not isinstance(self.primary_treatment, str):
            self.primary_treatment = str(self.primary_treatment)

        if self.reactor_type is not None and not isinstance(self.reactor_type, str):
            self.reactor_type = str(self.reactor_type)

        if self.secondary_treatment is not None and not isinstance(self.secondary_treatment, str):
            self.secondary_treatment = str(self.secondary_treatment)

        if self.tertiary_treatment is not None and not isinstance(self.tertiary_treatment, str):
            self.tertiary_treatment = str(self.tertiary_treatment)

        if self.wastewater_type is not None and not isinstance(self.wastewater_type, str):
            self.wastewater_type = str(self.wastewater_type)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.phosphate is not None and not isinstance(self.phosphate, str):
            self.phosphate = str(self.phosphate)

        if self.biochem_oxygen_dem is not None and not isinstance(self.biochem_oxygen_dem, str):
            self.biochem_oxygen_dem = str(self.biochem_oxygen_dem)

        if self.chem_oxygen_dem is not None and not isinstance(self.chem_oxygen_dem, str):
            self.chem_oxygen_dem = str(self.chem_oxygen_dem)

        if self.efficiency_percent is not None and not isinstance(self.efficiency_percent, str):
            self.efficiency_percent = str(self.efficiency_percent)

        if not isinstance(self.emulsions, list):
            self.emulsions = [self.emulsions] if self.emulsions is not None else []
        self.emulsions = [v if isinstance(v, str) else str(v) for v in self.emulsions]

        if not isinstance(self.gaseous_substances, list):
            self.gaseous_substances = [self.gaseous_substances] if self.gaseous_substances is not None else []
        self.gaseous_substances = [v if isinstance(v, str) else str(v) for v in self.gaseous_substances]

        if self.indust_eff_percent is not None and not isinstance(self.indust_eff_percent, str):
            self.indust_eff_percent = str(self.indust_eff_percent)

        if not isinstance(self.inorg_particles, list):
            self.inorg_particles = [self.inorg_particles] if self.inorg_particles is not None else []
        self.inorg_particles = [v if isinstance(v, str) else str(v) for v in self.inorg_particles]

        if not isinstance(self.org_particles, list):
            self.org_particles = [self.org_particles] if self.org_particles is not None else []
        self.org_particles = [v if isinstance(v, str) else str(v) for v in self.org_particles]

        if self.sludge_retent_time is not None and not isinstance(self.sludge_retent_time, str):
            self.sludge_retent_time = str(self.sludge_retent_time)

        if not isinstance(self.soluble_inorg_mat, list):
            self.soluble_inorg_mat = [self.soluble_inorg_mat] if self.soluble_inorg_mat is not None else []
        self.soluble_inorg_mat = [v if isinstance(v, str) else str(v) for v in self.soluble_inorg_mat]

        if not isinstance(self.soluble_org_mat, list):
            self.soluble_org_mat = [self.soluble_org_mat] if self.soluble_org_mat is not None else []
        self.soluble_org_mat = [v if isinstance(v, str) else str(v) for v in self.soluble_org_mat]

        if self.tot_phosphate is not None and not isinstance(self.tot_phosphate, str):
            self.tot_phosphate = str(self.tot_phosphate)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.ph is not None and not isinstance(self.ph, str):
            self.ph = str(self.ph)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        super().__post_init__(**kwargs)


@dataclass
class Water(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.Water
    class_class_curie: ClassVar[str] = "TEMP:Water"
    class_name: ClassVar[str] = "water"
    class_model_uri: ClassVar[URIRef] = TEMP.Water

    depth: Optional[str] = None
    project_name: Optional[str] = None
    elev: Optional[str] = None
    tot_nitro: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    diss_inorg_phosp: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    tot_phosp: Optional[str] = None
    diss_oxygen: Optional[str] = None
    glucosidase_act: Optional[str] = None
    diss_org_nitro: Optional[str] = None
    aminopept_act: Optional[str] = None
    bacteria_carb_prod: Optional[str] = None
    biomass: Optional[Union[str, List[str]]] = empty_list()
    bishomohopanol: Optional[str] = None
    bromide: Optional[str] = None
    chlorophyll: Optional[str] = None
    diether_lipids: Optional[Union[str, List[str]]] = empty_list()
    diss_hydrogen: Optional[str] = None
    phaeopigments: Optional[Union[str, List[str]]] = empty_list()
    phosplipid_fatt_acid: Optional[Union[str, List[str]]] = empty_list()
    redox_potential: Optional[str] = None
    salinity: Optional[str] = None
    silicate: Optional[str] = None
    turbidity: Optional[str] = None
    water_current: Optional[str] = None
    org_matter: Optional[str] = None
    org_nitro: Optional[str] = None
    alkalinity_method: Optional[str] = None
    carb_nitro_ratio: Optional[str] = None
    pressure: Optional[str] = None
    alkalinity: Optional[str] = None
    sulfate: Optional[str] = None
    sulfide: Optional[str] = None
    nitrate: Optional[str] = None
    nitrite: Optional[str] = None
    ammonium: Optional[str] = None
    sodium: Optional[str] = None
    chloride: Optional[str] = None
    potassium: Optional[str] = None
    magnesium: Optional[str] = None
    calcium: Optional[str] = None
    diss_org_carb: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    density: Optional[str] = None
    diss_carb_dioxide: Optional[str] = None
    alkyl_diethers: Optional[str] = None
    mean_frict_vel: Optional[str] = None
    mean_peak_frict_vel: Optional[str] = None
    n_alkanes: Optional[Union[str, List[str]]] = empty_list()
    nitro: Optional[str] = None
    phosphate: Optional[str] = None
    org_carb: Optional[str] = None
    part_org_carb: Optional[str] = None
    petroleum_hydrocarb: Optional[str] = None
    tot_depth_water_col: Optional[str] = None
    bac_prod: Optional[str] = None
    bac_resp: Optional[str] = None
    conduc: Optional[str] = None
    diss_inorg_nitro: Optional[str] = None
    down_par: Optional[str] = None
    fluor: Optional[str] = None
    light_intensity: Optional[str] = None
    part_org_nitro: Optional[str] = None
    photon_flux: Optional[str] = None
    primary_prod: Optional[str] = None
    size_frac_low: Optional[str] = None
    size_frac_up: Optional[str] = None
    soluble_react_phosp: Optional[str] = None
    suspend_part_matter: Optional[str] = None
    tot_diss_nitro: Optional[str] = None
    tot_inorg_nitro: Optional[str] = None
    tot_part_carb: Optional[str] = None
    tidal_stage: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    ph: Optional[str] = None
    atmospheric_data: Optional[Union[str, List[str]]] = empty_list()
    samp_name: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.tot_nitro is not None and not isinstance(self.tot_nitro, str):
            self.tot_nitro = str(self.tot_nitro)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.diss_inorg_phosp is not None and not isinstance(self.diss_inorg_phosp, str):
            self.diss_inorg_phosp = str(self.diss_inorg_phosp)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.tot_phosp is not None and not isinstance(self.tot_phosp, str):
            self.tot_phosp = str(self.tot_phosp)

        if self.diss_oxygen is not None and not isinstance(self.diss_oxygen, str):
            self.diss_oxygen = str(self.diss_oxygen)

        if self.glucosidase_act is not None and not isinstance(self.glucosidase_act, str):
            self.glucosidase_act = str(self.glucosidase_act)

        if self.diss_org_nitro is not None and not isinstance(self.diss_org_nitro, str):
            self.diss_org_nitro = str(self.diss_org_nitro)

        if self.aminopept_act is not None and not isinstance(self.aminopept_act, str):
            self.aminopept_act = str(self.aminopept_act)

        if self.bacteria_carb_prod is not None and not isinstance(self.bacteria_carb_prod, str):
            self.bacteria_carb_prod = str(self.bacteria_carb_prod)

        if not isinstance(self.biomass, list):
            self.biomass = [self.biomass] if self.biomass is not None else []
        self.biomass = [v if isinstance(v, str) else str(v) for v in self.biomass]

        if self.bishomohopanol is not None and not isinstance(self.bishomohopanol, str):
            self.bishomohopanol = str(self.bishomohopanol)

        if self.bromide is not None and not isinstance(self.bromide, str):
            self.bromide = str(self.bromide)

        if self.chlorophyll is not None and not isinstance(self.chlorophyll, str):
            self.chlorophyll = str(self.chlorophyll)

        if not isinstance(self.diether_lipids, list):
            self.diether_lipids = [self.diether_lipids] if self.diether_lipids is not None else []
        self.diether_lipids = [v if isinstance(v, str) else str(v) for v in self.diether_lipids]

        if self.diss_hydrogen is not None and not isinstance(self.diss_hydrogen, str):
            self.diss_hydrogen = str(self.diss_hydrogen)

        if not isinstance(self.phaeopigments, list):
            self.phaeopigments = [self.phaeopigments] if self.phaeopigments is not None else []
        self.phaeopigments = [v if isinstance(v, str) else str(v) for v in self.phaeopigments]

        if not isinstance(self.phosplipid_fatt_acid, list):
            self.phosplipid_fatt_acid = [self.phosplipid_fatt_acid] if self.phosplipid_fatt_acid is not None else []
        self.phosplipid_fatt_acid = [v if isinstance(v, str) else str(v) for v in self.phosplipid_fatt_acid]

        if self.redox_potential is not None and not isinstance(self.redox_potential, str):
            self.redox_potential = str(self.redox_potential)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.silicate is not None and not isinstance(self.silicate, str):
            self.silicate = str(self.silicate)

        if self.turbidity is not None and not isinstance(self.turbidity, str):
            self.turbidity = str(self.turbidity)

        if self.water_current is not None and not isinstance(self.water_current, str):
            self.water_current = str(self.water_current)

        if self.org_matter is not None and not isinstance(self.org_matter, str):
            self.org_matter = str(self.org_matter)

        if self.org_nitro is not None and not isinstance(self.org_nitro, str):
            self.org_nitro = str(self.org_nitro)

        if self.alkalinity_method is not None and not isinstance(self.alkalinity_method, str):
            self.alkalinity_method = str(self.alkalinity_method)

        if self.carb_nitro_ratio is not None and not isinstance(self.carb_nitro_ratio, str):
            self.carb_nitro_ratio = str(self.carb_nitro_ratio)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.sulfate is not None and not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self.sulfide is not None and not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.magnesium is not None and not isinstance(self.magnesium, str):
            self.magnesium = str(self.magnesium)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.diss_org_carb is not None and not isinstance(self.diss_org_carb, str):
            self.diss_org_carb = str(self.diss_org_carb)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.density is not None and not isinstance(self.density, str):
            self.density = str(self.density)

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.alkyl_diethers is not None and not isinstance(self.alkyl_diethers, str):
            self.alkyl_diethers = str(self.alkyl_diethers)

        if self.mean_frict_vel is not None and not isinstance(self.mean_frict_vel, str):
            self.mean_frict_vel = str(self.mean_frict_vel)

        if self.mean_peak_frict_vel is not None and not isinstance(self.mean_peak_frict_vel, str):
            self.mean_peak_frict_vel = str(self.mean_peak_frict_vel)

        if not isinstance(self.n_alkanes, list):
            self.n_alkanes = [self.n_alkanes] if self.n_alkanes is not None else []
        self.n_alkanes = [v if isinstance(v, str) else str(v) for v in self.n_alkanes]

        if self.nitro is not None and not isinstance(self.nitro, str):
            self.nitro = str(self.nitro)

        if self.phosphate is not None and not isinstance(self.phosphate, str):
            self.phosphate = str(self.phosphate)

        if self.org_carb is not None and not isinstance(self.org_carb, str):
            self.org_carb = str(self.org_carb)

        if self.part_org_carb is not None and not isinstance(self.part_org_carb, str):
            self.part_org_carb = str(self.part_org_carb)

        if self.petroleum_hydrocarb is not None and not isinstance(self.petroleum_hydrocarb, str):
            self.petroleum_hydrocarb = str(self.petroleum_hydrocarb)

        if self.tot_depth_water_col is not None and not isinstance(self.tot_depth_water_col, str):
            self.tot_depth_water_col = str(self.tot_depth_water_col)

        if self.bac_prod is not None and not isinstance(self.bac_prod, str):
            self.bac_prod = str(self.bac_prod)

        if self.bac_resp is not None and not isinstance(self.bac_resp, str):
            self.bac_resp = str(self.bac_resp)

        if self.conduc is not None and not isinstance(self.conduc, str):
            self.conduc = str(self.conduc)

        if self.diss_inorg_nitro is not None and not isinstance(self.diss_inorg_nitro, str):
            self.diss_inorg_nitro = str(self.diss_inorg_nitro)

        if self.down_par is not None and not isinstance(self.down_par, str):
            self.down_par = str(self.down_par)

        if self.fluor is not None and not isinstance(self.fluor, str):
            self.fluor = str(self.fluor)

        if self.light_intensity is not None and not isinstance(self.light_intensity, str):
            self.light_intensity = str(self.light_intensity)

        if self.part_org_nitro is not None and not isinstance(self.part_org_nitro, str):
            self.part_org_nitro = str(self.part_org_nitro)

        if self.photon_flux is not None and not isinstance(self.photon_flux, str):
            self.photon_flux = str(self.photon_flux)

        if self.primary_prod is not None and not isinstance(self.primary_prod, str):
            self.primary_prod = str(self.primary_prod)

        if self.size_frac_low is not None and not isinstance(self.size_frac_low, str):
            self.size_frac_low = str(self.size_frac_low)

        if self.size_frac_up is not None and not isinstance(self.size_frac_up, str):
            self.size_frac_up = str(self.size_frac_up)

        if self.soluble_react_phosp is not None and not isinstance(self.soluble_react_phosp, str):
            self.soluble_react_phosp = str(self.soluble_react_phosp)

        if self.suspend_part_matter is not None and not isinstance(self.suspend_part_matter, str):
            self.suspend_part_matter = str(self.suspend_part_matter)

        if self.tot_diss_nitro is not None and not isinstance(self.tot_diss_nitro, str):
            self.tot_diss_nitro = str(self.tot_diss_nitro)

        if self.tot_inorg_nitro is not None and not isinstance(self.tot_inorg_nitro, str):
            self.tot_inorg_nitro = str(self.tot_inorg_nitro)

        if self.tot_part_carb is not None and not isinstance(self.tot_part_carb, str):
            self.tot_part_carb = str(self.tot_part_carb)

        if self.tidal_stage is not None and not isinstance(self.tidal_stage, str):
            self.tidal_stage = str(self.tidal_stage)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.ph is not None and not isinstance(self.ph, str):
            self.ph = str(self.ph)

        if not isinstance(self.atmospheric_data, list):
            self.atmospheric_data = [self.atmospheric_data] if self.atmospheric_data is not None else []
        self.atmospheric_data = [v if isinstance(v, str) else str(v) for v in self.atmospheric_data]

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        super().__post_init__(**kwargs)


@dataclass
class HumanAssociated(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.HumanAssociated
    class_class_curie: ClassVar[str] = "TEMP:HumanAssociated"
    class_name: ClassVar[str] = "human_associated"
    class_model_uri: ClassVar[URIRef] = TEMP.HumanAssociated

    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    salinity: Optional[str] = None
    host_age: Optional[str] = None
    smoker: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    host_hiv_stat: Optional[str] = None
    diet_last_six_month: Optional[str] = None
    pet_farm_animal: Optional[Union[str, List[str]]] = empty_list()
    travel_out_six_month: Optional[Union[str, List[str]]] = empty_list()
    pulmonary_disord: Optional[Union[str, List[str]]] = empty_list()
    nose_throat_disord: Optional[Union[str, List[str]]] = empty_list()
    blood_blood_disord: Optional[Union[str, List[str]]] = empty_list()
    gestation_state: Optional[str] = None
    maternal_health_stat: Optional[str] = None
    host_body_temp: Optional[str] = None
    foetal_health_stat: Optional[str] = None
    amniotic_fluid_color: Optional[str] = None
    kidney_disord: Optional[Union[str, List[str]]] = empty_list()
    urogenit_tract_disor: Optional[Union[str, List[str]]] = empty_list()
    weight_loss_3_month: Optional[str] = None
    host_body_mass_index: Optional[str] = None
    twin_sibling: Optional[str] = None
    host_pulse: Optional[str] = None
    host_genotype: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    host_sex: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_body_site: Optional[str] = None
    host_diet: Optional[Union[str, List[str]]] = empty_list()
    host_last_meal: Optional[Union[str, List[str]]] = empty_list()
    host_family_relation: Optional[Union[str, List[str]]] = empty_list()
    host_phenotype: Optional[str] = None
    ihmc_medication_code: Optional[Union[str, List[str]]] = empty_list()
    host_body_product: Optional[str] = None
    drug_usage: Optional[Union[str, List[str]]] = empty_list()
    ethnicity: Optional[Union[str, List[str]]] = empty_list()
    host_occupation: Optional[str] = None
    medic_hist_perform: Optional[str] = None
    study_complt_stat: Optional[str] = None
    urine_collect_meth: Optional[str] = None
    samp_name: Optional[str] = None
    host_symbiont: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.smoker is not None and not isinstance(self.smoker, str):
            self.smoker = str(self.smoker)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_hiv_stat is not None and not isinstance(self.host_hiv_stat, str):
            self.host_hiv_stat = str(self.host_hiv_stat)

        if self.diet_last_six_month is not None and not isinstance(self.diet_last_six_month, str):
            self.diet_last_six_month = str(self.diet_last_six_month)

        if not isinstance(self.pet_farm_animal, list):
            self.pet_farm_animal = [self.pet_farm_animal] if self.pet_farm_animal is not None else []
        self.pet_farm_animal = [v if isinstance(v, str) else str(v) for v in self.pet_farm_animal]

        if not isinstance(self.travel_out_six_month, list):
            self.travel_out_six_month = [self.travel_out_six_month] if self.travel_out_six_month is not None else []
        self.travel_out_six_month = [v if isinstance(v, str) else str(v) for v in self.travel_out_six_month]

        if not isinstance(self.pulmonary_disord, list):
            self.pulmonary_disord = [self.pulmonary_disord] if self.pulmonary_disord is not None else []
        self.pulmonary_disord = [v if isinstance(v, str) else str(v) for v in self.pulmonary_disord]

        if not isinstance(self.nose_throat_disord, list):
            self.nose_throat_disord = [self.nose_throat_disord] if self.nose_throat_disord is not None else []
        self.nose_throat_disord = [v if isinstance(v, str) else str(v) for v in self.nose_throat_disord]

        if not isinstance(self.blood_blood_disord, list):
            self.blood_blood_disord = [self.blood_blood_disord] if self.blood_blood_disord is not None else []
        self.blood_blood_disord = [v if isinstance(v, str) else str(v) for v in self.blood_blood_disord]

        if self.gestation_state is not None and not isinstance(self.gestation_state, str):
            self.gestation_state = str(self.gestation_state)

        if self.maternal_health_stat is not None and not isinstance(self.maternal_health_stat, str):
            self.maternal_health_stat = str(self.maternal_health_stat)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if self.foetal_health_stat is not None and not isinstance(self.foetal_health_stat, str):
            self.foetal_health_stat = str(self.foetal_health_stat)

        if self.amniotic_fluid_color is not None and not isinstance(self.amniotic_fluid_color, str):
            self.amniotic_fluid_color = str(self.amniotic_fluid_color)

        if not isinstance(self.kidney_disord, list):
            self.kidney_disord = [self.kidney_disord] if self.kidney_disord is not None else []
        self.kidney_disord = [v if isinstance(v, str) else str(v) for v in self.kidney_disord]

        if not isinstance(self.urogenit_tract_disor, list):
            self.urogenit_tract_disor = [self.urogenit_tract_disor] if self.urogenit_tract_disor is not None else []
        self.urogenit_tract_disor = [v if isinstance(v, str) else str(v) for v in self.urogenit_tract_disor]

        if self.weight_loss_3_month is not None and not isinstance(self.weight_loss_3_month, str):
            self.weight_loss_3_month = str(self.weight_loss_3_month)

        if self.host_body_mass_index is not None and not isinstance(self.host_body_mass_index, str):
            self.host_body_mass_index = str(self.host_body_mass_index)

        if self.twin_sibling is not None and not isinstance(self.twin_sibling, str):
            self.twin_sibling = str(self.twin_sibling)

        if self.host_pulse is not None and not isinstance(self.host_pulse, str):
            self.host_pulse = str(self.host_pulse)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.host_sex is not None and not isinstance(self.host_sex, str):
            self.host_sex = str(self.host_sex)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if not isinstance(self.host_diet, list):
            self.host_diet = [self.host_diet] if self.host_diet is not None else []
        self.host_diet = [v if isinstance(v, str) else str(v) for v in self.host_diet]

        if not isinstance(self.host_last_meal, list):
            self.host_last_meal = [self.host_last_meal] if self.host_last_meal is not None else []
        self.host_last_meal = [v if isinstance(v, str) else str(v) for v in self.host_last_meal]

        if not isinstance(self.host_family_relation, list):
            self.host_family_relation = [self.host_family_relation] if self.host_family_relation is not None else []
        self.host_family_relation = [v if isinstance(v, str) else str(v) for v in self.host_family_relation]

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if not isinstance(self.ihmc_medication_code, list):
            self.ihmc_medication_code = [self.ihmc_medication_code] if self.ihmc_medication_code is not None else []
        self.ihmc_medication_code = [v if isinstance(v, str) else str(v) for v in self.ihmc_medication_code]

        if self.host_body_product is not None and not isinstance(self.host_body_product, str):
            self.host_body_product = str(self.host_body_product)

        if not isinstance(self.drug_usage, list):
            self.drug_usage = [self.drug_usage] if self.drug_usage is not None else []
        self.drug_usage = [v if isinstance(v, str) else str(v) for v in self.drug_usage]

        if not isinstance(self.ethnicity, list):
            self.ethnicity = [self.ethnicity] if self.ethnicity is not None else []
        self.ethnicity = [v if isinstance(v, str) else str(v) for v in self.ethnicity]

        if self.host_occupation is not None and not isinstance(self.host_occupation, str):
            self.host_occupation = str(self.host_occupation)

        if self.medic_hist_perform is not None and not isinstance(self.medic_hist_perform, str):
            self.medic_hist_perform = str(self.medic_hist_perform)

        if self.study_complt_stat is not None and not isinstance(self.study_complt_stat, str):
            self.study_complt_stat = str(self.study_complt_stat)

        if self.urine_collect_meth is not None and not isinstance(self.urine_collect_meth, str):
            self.urine_collect_meth = str(self.urine_collect_meth)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if not isinstance(self.host_symbiont, list):
            self.host_symbiont = [self.host_symbiont] if self.host_symbiont is not None else []
        self.host_symbiont = [v if isinstance(v, str) else str(v) for v in self.host_symbiont]

        super().__post_init__(**kwargs)


@dataclass
class HumanGut(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.HumanGut
    class_class_curie: ClassVar[str] = "TEMP:HumanGut"
    class_name: ClassVar[str] = "human_gut"
    class_model_uri: ClassVar[URIRef] = TEMP.HumanGut

    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    salinity: Optional[str] = None
    host_age: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    host_body_temp: Optional[str] = None
    gastrointest_disord: Optional[Union[str, List[str]]] = empty_list()
    liver_disord: Optional[Union[str, List[str]]] = empty_list()
    host_body_mass_index: Optional[str] = None
    host_pulse: Optional[str] = None
    host_genotype: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    host_sex: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_body_site: Optional[str] = None
    host_diet: Optional[Union[str, List[str]]] = empty_list()
    host_last_meal: Optional[Union[str, List[str]]] = empty_list()
    host_family_relation: Optional[Union[str, List[str]]] = empty_list()
    host_phenotype: Optional[str] = None
    ihmc_medication_code: Optional[Union[str, List[str]]] = empty_list()
    host_body_product: Optional[str] = None
    ethnicity: Optional[Union[str, List[str]]] = empty_list()
    host_occupation: Optional[str] = None
    medic_hist_perform: Optional[str] = None
    special_diet: Optional[Union[str, List[str]]] = empty_list()
    samp_name: Optional[str] = None
    host_symbiont: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if not isinstance(self.gastrointest_disord, list):
            self.gastrointest_disord = [self.gastrointest_disord] if self.gastrointest_disord is not None else []
        self.gastrointest_disord = [v if isinstance(v, str) else str(v) for v in self.gastrointest_disord]

        if not isinstance(self.liver_disord, list):
            self.liver_disord = [self.liver_disord] if self.liver_disord is not None else []
        self.liver_disord = [v if isinstance(v, str) else str(v) for v in self.liver_disord]

        if self.host_body_mass_index is not None and not isinstance(self.host_body_mass_index, str):
            self.host_body_mass_index = str(self.host_body_mass_index)

        if self.host_pulse is not None and not isinstance(self.host_pulse, str):
            self.host_pulse = str(self.host_pulse)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.host_sex is not None and not isinstance(self.host_sex, str):
            self.host_sex = str(self.host_sex)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if not isinstance(self.host_diet, list):
            self.host_diet = [self.host_diet] if self.host_diet is not None else []
        self.host_diet = [v if isinstance(v, str) else str(v) for v in self.host_diet]

        if not isinstance(self.host_last_meal, list):
            self.host_last_meal = [self.host_last_meal] if self.host_last_meal is not None else []
        self.host_last_meal = [v if isinstance(v, str) else str(v) for v in self.host_last_meal]

        if not isinstance(self.host_family_relation, list):
            self.host_family_relation = [self.host_family_relation] if self.host_family_relation is not None else []
        self.host_family_relation = [v if isinstance(v, str) else str(v) for v in self.host_family_relation]

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if not isinstance(self.ihmc_medication_code, list):
            self.ihmc_medication_code = [self.ihmc_medication_code] if self.ihmc_medication_code is not None else []
        self.ihmc_medication_code = [v if isinstance(v, str) else str(v) for v in self.ihmc_medication_code]

        if self.host_body_product is not None and not isinstance(self.host_body_product, str):
            self.host_body_product = str(self.host_body_product)

        if not isinstance(self.ethnicity, list):
            self.ethnicity = [self.ethnicity] if self.ethnicity is not None else []
        self.ethnicity = [v if isinstance(v, str) else str(v) for v in self.ethnicity]

        if self.host_occupation is not None and not isinstance(self.host_occupation, str):
            self.host_occupation = str(self.host_occupation)

        if self.medic_hist_perform is not None and not isinstance(self.medic_hist_perform, str):
            self.medic_hist_perform = str(self.medic_hist_perform)

        if not isinstance(self.special_diet, list):
            self.special_diet = [self.special_diet] if self.special_diet is not None else []
        self.special_diet = [v if isinstance(v, str) else str(v) for v in self.special_diet]

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if not isinstance(self.host_symbiont, list):
            self.host_symbiont = [self.host_symbiont] if self.host_symbiont is not None else []
        self.host_symbiont = [v if isinstance(v, str) else str(v) for v in self.host_symbiont]

        super().__post_init__(**kwargs)


@dataclass
class HumanOral(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.HumanOral
    class_class_curie: ClassVar[str] = "TEMP:HumanOral"
    class_name: ClassVar[str] = "human_oral"
    class_model_uri: ClassVar[URIRef] = TEMP.HumanOral

    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    salinity: Optional[str] = None
    host_age: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    host_body_temp: Optional[str] = None
    nose_throat_disord: Optional[Union[str, List[str]]] = empty_list()
    host_body_mass_index: Optional[str] = None
    host_pulse: Optional[str] = None
    host_genotype: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    host_sex: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_body_site: Optional[str] = None
    host_diet: Optional[Union[str, List[str]]] = empty_list()
    host_last_meal: Optional[Union[str, List[str]]] = empty_list()
    host_family_relation: Optional[Union[str, List[str]]] = empty_list()
    host_phenotype: Optional[str] = None
    ihmc_medication_code: Optional[Union[str, List[str]]] = empty_list()
    host_body_product: Optional[str] = None
    ethnicity: Optional[Union[str, List[str]]] = empty_list()
    host_occupation: Optional[str] = None
    medic_hist_perform: Optional[str] = None
    time_last_toothbrush: Optional[str] = None
    samp_name: Optional[str] = None
    host_symbiont: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if not isinstance(self.nose_throat_disord, list):
            self.nose_throat_disord = [self.nose_throat_disord] if self.nose_throat_disord is not None else []
        self.nose_throat_disord = [v if isinstance(v, str) else str(v) for v in self.nose_throat_disord]

        if self.host_body_mass_index is not None and not isinstance(self.host_body_mass_index, str):
            self.host_body_mass_index = str(self.host_body_mass_index)

        if self.host_pulse is not None and not isinstance(self.host_pulse, str):
            self.host_pulse = str(self.host_pulse)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.host_sex is not None and not isinstance(self.host_sex, str):
            self.host_sex = str(self.host_sex)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if not isinstance(self.host_diet, list):
            self.host_diet = [self.host_diet] if self.host_diet is not None else []
        self.host_diet = [v if isinstance(v, str) else str(v) for v in self.host_diet]

        if not isinstance(self.host_last_meal, list):
            self.host_last_meal = [self.host_last_meal] if self.host_last_meal is not None else []
        self.host_last_meal = [v if isinstance(v, str) else str(v) for v in self.host_last_meal]

        if not isinstance(self.host_family_relation, list):
            self.host_family_relation = [self.host_family_relation] if self.host_family_relation is not None else []
        self.host_family_relation = [v if isinstance(v, str) else str(v) for v in self.host_family_relation]

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if not isinstance(self.ihmc_medication_code, list):
            self.ihmc_medication_code = [self.ihmc_medication_code] if self.ihmc_medication_code is not None else []
        self.ihmc_medication_code = [v if isinstance(v, str) else str(v) for v in self.ihmc_medication_code]

        if self.host_body_product is not None and not isinstance(self.host_body_product, str):
            self.host_body_product = str(self.host_body_product)

        if not isinstance(self.ethnicity, list):
            self.ethnicity = [self.ethnicity] if self.ethnicity is not None else []
        self.ethnicity = [v if isinstance(v, str) else str(v) for v in self.ethnicity]

        if self.host_occupation is not None and not isinstance(self.host_occupation, str):
            self.host_occupation = str(self.host_occupation)

        if self.medic_hist_perform is not None and not isinstance(self.medic_hist_perform, str):
            self.medic_hist_perform = str(self.medic_hist_perform)

        if self.time_last_toothbrush is not None and not isinstance(self.time_last_toothbrush, str):
            self.time_last_toothbrush = str(self.time_last_toothbrush)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if not isinstance(self.host_symbiont, list):
            self.host_symbiont = [self.host_symbiont] if self.host_symbiont is not None else []
        self.host_symbiont = [v if isinstance(v, str) else str(v) for v in self.host_symbiont]

        super().__post_init__(**kwargs)


@dataclass
class HumanSkin(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.HumanSkin
    class_class_curie: ClassVar[str] = "TEMP:HumanSkin"
    class_name: ClassVar[str] = "human_skin"
    class_model_uri: ClassVar[URIRef] = TEMP.HumanSkin

    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    salinity: Optional[str] = None
    host_age: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    host_body_temp: Optional[str] = None
    dermatology_disord: Optional[Union[str, List[str]]] = empty_list()
    host_body_mass_index: Optional[str] = None
    host_pulse: Optional[str] = None
    host_genotype: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    host_sex: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_body_site: Optional[str] = None
    host_diet: Optional[Union[str, List[str]]] = empty_list()
    host_last_meal: Optional[Union[str, List[str]]] = empty_list()
    host_family_relation: Optional[Union[str, List[str]]] = empty_list()
    host_phenotype: Optional[str] = None
    ihmc_medication_code: Optional[Union[str, List[str]]] = empty_list()
    host_body_product: Optional[str] = None
    ethnicity: Optional[Union[str, List[str]]] = empty_list()
    host_occupation: Optional[str] = None
    medic_hist_perform: Optional[str] = None
    time_since_last_wash: Optional[str] = None
    dominant_hand: Optional[str] = None
    samp_name: Optional[str] = None
    host_symbiont: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if not isinstance(self.dermatology_disord, list):
            self.dermatology_disord = [self.dermatology_disord] if self.dermatology_disord is not None else []
        self.dermatology_disord = [v if isinstance(v, str) else str(v) for v in self.dermatology_disord]

        if self.host_body_mass_index is not None and not isinstance(self.host_body_mass_index, str):
            self.host_body_mass_index = str(self.host_body_mass_index)

        if self.host_pulse is not None and not isinstance(self.host_pulse, str):
            self.host_pulse = str(self.host_pulse)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.host_sex is not None and not isinstance(self.host_sex, str):
            self.host_sex = str(self.host_sex)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if not isinstance(self.host_diet, list):
            self.host_diet = [self.host_diet] if self.host_diet is not None else []
        self.host_diet = [v if isinstance(v, str) else str(v) for v in self.host_diet]

        if not isinstance(self.host_last_meal, list):
            self.host_last_meal = [self.host_last_meal] if self.host_last_meal is not None else []
        self.host_last_meal = [v if isinstance(v, str) else str(v) for v in self.host_last_meal]

        if not isinstance(self.host_family_relation, list):
            self.host_family_relation = [self.host_family_relation] if self.host_family_relation is not None else []
        self.host_family_relation = [v if isinstance(v, str) else str(v) for v in self.host_family_relation]

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if not isinstance(self.ihmc_medication_code, list):
            self.ihmc_medication_code = [self.ihmc_medication_code] if self.ihmc_medication_code is not None else []
        self.ihmc_medication_code = [v if isinstance(v, str) else str(v) for v in self.ihmc_medication_code]

        if self.host_body_product is not None and not isinstance(self.host_body_product, str):
            self.host_body_product = str(self.host_body_product)

        if not isinstance(self.ethnicity, list):
            self.ethnicity = [self.ethnicity] if self.ethnicity is not None else []
        self.ethnicity = [v if isinstance(v, str) else str(v) for v in self.ethnicity]

        if self.host_occupation is not None and not isinstance(self.host_occupation, str):
            self.host_occupation = str(self.host_occupation)

        if self.medic_hist_perform is not None and not isinstance(self.medic_hist_perform, str):
            self.medic_hist_perform = str(self.medic_hist_perform)

        if self.time_since_last_wash is not None and not isinstance(self.time_since_last_wash, str):
            self.time_since_last_wash = str(self.time_since_last_wash)

        if self.dominant_hand is not None and not isinstance(self.dominant_hand, str):
            self.dominant_hand = str(self.dominant_hand)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if not isinstance(self.host_symbiont, list):
            self.host_symbiont = [self.host_symbiont] if self.host_symbiont is not None else []
        self.host_symbiont = [v if isinstance(v, str) else str(v) for v in self.host_symbiont]

        super().__post_init__(**kwargs)


@dataclass
class HumanVaginal(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.HumanVaginal
    class_class_curie: ClassVar[str] = "TEMP:HumanVaginal"
    class_name: ClassVar[str] = "human_vaginal"
    class_model_uri: ClassVar[URIRef] = TEMP.HumanVaginal

    host_disease_stat: Optional[Union[str, List[str]]] = empty_list()
    project_name: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_salinity: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    salinity: Optional[str] = None
    host_age: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    host_body_temp: Optional[str] = None
    sexual_act: Optional[str] = None
    birth_control: Optional[str] = None
    hysterectomy: Optional[str] = None
    gynecologic_disord: Optional[Union[str, List[str]]] = empty_list()
    urogenit_disord: Optional[Union[str, List[str]]] = empty_list()
    host_body_mass_index: Optional[str] = None
    host_pulse: Optional[str] = None
    host_genotype: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    host_sex: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_body_site: Optional[str] = None
    host_diet: Optional[Union[str, List[str]]] = empty_list()
    host_last_meal: Optional[Union[str, List[str]]] = empty_list()
    host_family_relation: Optional[Union[str, List[str]]] = empty_list()
    host_phenotype: Optional[str] = None
    ihmc_medication_code: Optional[Union[str, List[str]]] = empty_list()
    host_body_product: Optional[str] = None
    ethnicity: Optional[Union[str, List[str]]] = empty_list()
    host_occupation: Optional[str] = None
    medic_hist_perform: Optional[str] = None
    menarche: Optional[str] = None
    pregnancy: Optional[str] = None
    douche: Optional[str] = None
    menopause: Optional[str] = None
    hrt: Optional[str] = None
    samp_name: Optional[str] = None
    host_symbiont: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if not isinstance(self.host_disease_stat, list):
            self.host_disease_stat = [self.host_disease_stat] if self.host_disease_stat is not None else []
        self.host_disease_stat = [v if isinstance(v, str) else str(v) for v in self.host_disease_stat]

        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_salinity is not None and not isinstance(self.samp_salinity, str):
            self.samp_salinity = str(self.samp_salinity)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if self.sexual_act is not None and not isinstance(self.sexual_act, str):
            self.sexual_act = str(self.sexual_act)

        if self.birth_control is not None and not isinstance(self.birth_control, str):
            self.birth_control = str(self.birth_control)

        if self.hysterectomy is not None and not isinstance(self.hysterectomy, str):
            self.hysterectomy = str(self.hysterectomy)

        if not isinstance(self.gynecologic_disord, list):
            self.gynecologic_disord = [self.gynecologic_disord] if self.gynecologic_disord is not None else []
        self.gynecologic_disord = [v if isinstance(v, str) else str(v) for v in self.gynecologic_disord]

        if not isinstance(self.urogenit_disord, list):
            self.urogenit_disord = [self.urogenit_disord] if self.urogenit_disord is not None else []
        self.urogenit_disord = [v if isinstance(v, str) else str(v) for v in self.urogenit_disord]

        if self.host_body_mass_index is not None and not isinstance(self.host_body_mass_index, str):
            self.host_body_mass_index = str(self.host_body_mass_index)

        if self.host_pulse is not None and not isinstance(self.host_pulse, str):
            self.host_pulse = str(self.host_pulse)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.host_sex is not None and not isinstance(self.host_sex, str):
            self.host_sex = str(self.host_sex)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if not isinstance(self.host_diet, list):
            self.host_diet = [self.host_diet] if self.host_diet is not None else []
        self.host_diet = [v if isinstance(v, str) else str(v) for v in self.host_diet]

        if not isinstance(self.host_last_meal, list):
            self.host_last_meal = [self.host_last_meal] if self.host_last_meal is not None else []
        self.host_last_meal = [v if isinstance(v, str) else str(v) for v in self.host_last_meal]

        if not isinstance(self.host_family_relation, list):
            self.host_family_relation = [self.host_family_relation] if self.host_family_relation is not None else []
        self.host_family_relation = [v if isinstance(v, str) else str(v) for v in self.host_family_relation]

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if not isinstance(self.ihmc_medication_code, list):
            self.ihmc_medication_code = [self.ihmc_medication_code] if self.ihmc_medication_code is not None else []
        self.ihmc_medication_code = [v if isinstance(v, str) else str(v) for v in self.ihmc_medication_code]

        if self.host_body_product is not None and not isinstance(self.host_body_product, str):
            self.host_body_product = str(self.host_body_product)

        if not isinstance(self.ethnicity, list):
            self.ethnicity = [self.ethnicity] if self.ethnicity is not None else []
        self.ethnicity = [v if isinstance(v, str) else str(v) for v in self.ethnicity]

        if self.host_occupation is not None and not isinstance(self.host_occupation, str):
            self.host_occupation = str(self.host_occupation)

        if self.medic_hist_perform is not None and not isinstance(self.medic_hist_perform, str):
            self.medic_hist_perform = str(self.medic_hist_perform)

        if self.menarche is not None and not isinstance(self.menarche, str):
            self.menarche = str(self.menarche)

        if self.pregnancy is not None and not isinstance(self.pregnancy, str):
            self.pregnancy = str(self.pregnancy)

        if self.douche is not None and not isinstance(self.douche, str):
            self.douche = str(self.douche)

        if self.menopause is not None and not isinstance(self.menopause, str):
            self.menopause = str(self.menopause)

        if self.hrt is not None and not isinstance(self.hrt, str):
            self.hrt = str(self.hrt)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if not isinstance(self.host_symbiont, list):
            self.host_symbiont = [self.host_symbiont] if self.host_symbiont is not None else []
        self.host_symbiont = [v if isinstance(v, str) else str(v) for v in self.host_symbiont]

        super().__post_init__(**kwargs)


@dataclass
class Air(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.Air
    class_class_curie: ClassVar[str] = "TEMP:Air"
    class_name: ClassVar[str] = "air"
    class_model_uri: ClassVar[URIRef] = TEMP.Air

    project_name: Optional[str] = None
    elev: Optional[str] = None
    alt: Optional[str] = None
    barometric_press: Optional[str] = None
    carb_dioxide: Optional[str] = None
    carb_monoxide: Optional[str] = None
    humidity: Optional[str] = None
    methane: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    oxygen: Optional[str] = None
    pollutants: Optional[Union[str, List[str]]] = empty_list()
    air_particulate_matter_concentration: Optional[Union[str, List[str]]] = empty_list()
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    solar_irradiance: Optional[str] = None
    temp: Optional[str] = None
    ventilation_rate: Optional[str] = None
    volatile_org_comp: Optional[Union[str, List[str]]] = empty_list()
    samp_store_dur: Optional[str] = None
    wind_speed: Optional[str] = None
    salinity: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    ventilation_type: Optional[str] = None
    wind_direction: Optional[str] = None
    samp_name: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.barometric_press is not None and not isinstance(self.barometric_press, str):
            self.barometric_press = str(self.barometric_press)

        if self.carb_dioxide is not None and not isinstance(self.carb_dioxide, str):
            self.carb_dioxide = str(self.carb_dioxide)

        if self.carb_monoxide is not None and not isinstance(self.carb_monoxide, str):
            self.carb_monoxide = str(self.carb_monoxide)

        if self.humidity is not None and not isinstance(self.humidity, str):
            self.humidity = str(self.humidity)

        if self.methane is not None and not isinstance(self.methane, str):
            self.methane = str(self.methane)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.oxygen is not None and not isinstance(self.oxygen, str):
            self.oxygen = str(self.oxygen)

        if not isinstance(self.pollutants, list):
            self.pollutants = [self.pollutants] if self.pollutants is not None else []
        self.pollutants = [v if isinstance(v, str) else str(v) for v in self.pollutants]

        if not isinstance(self.air_particulate_matter_concentration, list):
            self.air_particulate_matter_concentration = [self.air_particulate_matter_concentration] if self.air_particulate_matter_concentration is not None else []
        self.air_particulate_matter_concentration = [v if isinstance(v, str) else str(v) for v in self.air_particulate_matter_concentration]

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.solar_irradiance is not None and not isinstance(self.solar_irradiance, str):
            self.solar_irradiance = str(self.solar_irradiance)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.ventilation_rate is not None and not isinstance(self.ventilation_rate, str):
            self.ventilation_rate = str(self.ventilation_rate)

        if not isinstance(self.volatile_org_comp, list):
            self.volatile_org_comp = [self.volatile_org_comp] if self.volatile_org_comp is not None else []
        self.volatile_org_comp = [v if isinstance(v, str) else str(v) for v in self.volatile_org_comp]

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.wind_speed is not None and not isinstance(self.wind_speed, str):
            self.wind_speed = str(self.wind_speed)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.ventilation_type is not None and not isinstance(self.ventilation_type, str):
            self.ventilation_type = str(self.ventilation_type)

        if self.wind_direction is not None and not isinstance(self.wind_direction, str):
            self.wind_direction = str(self.wind_direction)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        super().__post_init__(**kwargs)


@dataclass
class BuiltEnvironment(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.BuiltEnvironment
    class_class_curie: ClassVar[str] = "TEMP:BuiltEnvironment"
    class_name: ClassVar[str] = "built_environment"
    class_model_uri: ClassVar[URIRef] = TEMP.BuiltEnvironment

    project_name: Optional[str] = None
    carb_dioxide: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    rel_air_humidity: Optional[str] = None
    abs_air_humidity: Optional[str] = None
    surf_humidity: Optional[str] = None
    temp: Optional[str] = None
    surf_temp: Optional[str] = None
    surf_moisture: Optional[str] = None
    dew_point: Optional[str] = None
    amount_light: Optional[str] = None
    avg_dew_point: Optional[str] = None
    avg_temp: Optional[str] = None
    ceil_thermal_mass: Optional[str] = None
    exp_duct: Optional[str] = None
    built_struc_age: Optional[str] = None
    ceil_area: Optional[str] = None
    door_size: Optional[str] = None
    floor_age: Optional[str] = None
    floor_area: Optional[str] = None
    floor_thermal_mass: Optional[str] = None
    height_carper_fiber: Optional[str] = None
    inside_lux: Optional[str] = None
    room_air_exch_rate: Optional[str] = None
    ext_door: Optional[str] = None
    rel_humidity_out: Optional[str] = None
    room_dim: Optional[str] = None
    room_door_dist: Optional[str] = None
    room_net_area: Optional[str] = None
    room_vol: Optional[str] = None
    samp_time_out: Optional[str] = None
    temp_out: Optional[str] = None
    wall_area: Optional[str] = None
    specific_humidity: Optional[str] = None
    samp_sort_meth: Optional[Union[str, List[str]]] = empty_list()
    occup_density_samp: Optional[str] = None
    address: Optional[str] = None
    adj_room: Optional[str] = None
    exp_pipe: Optional[str] = None
    wall_height: Optional[str] = None
    wall_thermal_mass: Optional[str] = None
    water_feat_size: Optional[str] = None
    window_size: Optional[str] = None
    floor_count: Optional[str] = None
    freq_clean: Optional[str] = None
    freq_cook: Optional[str] = None
    hall_count: Optional[str] = None
    max_occup: Optional[str] = None
    number_plants: Optional[str] = None
    number_pets: Optional[str] = None
    number_resident: Optional[str] = None
    room_architec_elem: Optional[str] = None
    room_count: Optional[str] = None
    room_moist_dam_hist: Optional[str] = None
    room_occup: Optional[str] = None
    room_window_count: Optional[str] = None
    room_hallway: Optional[str] = None
    room_door_share: Optional[str] = None
    room_wall_share: Optional[str] = None
    samp_room_id: Optional[str] = None
    shading_device_mat: Optional[str] = None
    window_open_freq: Optional[str] = None
    built_struc_type: Optional[str] = None
    ventilation_type: Optional[str] = None
    surf_material: Optional[str] = None
    surf_air_cont: Optional[Union[str, List[str]]] = empty_list()
    surf_moisture_ph: Optional[str] = None
    build_occup_type: Optional[Union[str, List[str]]] = empty_list()
    indoor_space: Optional[str] = None
    indoor_surf: Optional[str] = None
    filter_type: Optional[Union[str, List[str]]] = empty_list()
    heat_cool_type: Optional[Union[str, List[str]]] = empty_list()
    substructure_type: Optional[Union[str, List[str]]] = empty_list()
    building_setting: Optional[str] = None
    light_type: Optional[Union[str, List[str]]] = empty_list()
    space_typ_state: Optional[str] = None
    typ_occup_density: Optional[str] = None
    occup_samp: Optional[str] = None
    aero_struc: Optional[str] = None
    arch_struc: Optional[str] = None
    avg_occup: Optional[str] = None
    bathroom_count: Optional[str] = None
    bedroom_count: Optional[str] = None
    built_struc_set: Optional[str] = None
    ceil_cond: Optional[str] = None
    ceil_finish_mat: Optional[str] = None
    ceil_water_mold: Optional[str] = None
    ceil_struc: Optional[str] = None
    ceil_texture: Optional[str] = None
    ceil_type: Optional[str] = None
    cool_syst_id: Optional[str] = None
    date_last_rain: Optional[str] = None
    build_docs: Optional[str] = None
    door_cond: Optional[str] = None
    door_direct: Optional[str] = None
    door_loc: Optional[str] = None
    door_mat: Optional[str] = None
    door_move: Optional[str] = None
    door_water_mold: Optional[str] = None
    door_type: Optional[str] = None
    door_comp_type: Optional[str] = None
    door_type_metal: Optional[str] = None
    door_type_wood: Optional[str] = None
    drawings: Optional[str] = None
    elevator: Optional[str] = None
    escalator: Optional[str] = None
    fireplace_type: Optional[str] = None
    floor_cond: Optional[str] = None
    floor_finish_mat: Optional[str] = None
    floor_water_mold: Optional[str] = None
    floor_struc: Optional[str] = None
    furniture: Optional[str] = None
    gender_restroom: Optional[str] = None
    handidness: Optional[str] = None
    heat_deliv_loc: Optional[str] = None
    heat_sys_deliv_meth: Optional[str] = None
    int_wall_cond: Optional[str] = None
    last_clean: Optional[str] = None
    mech_struc: Optional[str] = None
    occup_document: Optional[str] = None
    ext_wall_orient: Optional[str] = None
    ext_window_orient: Optional[str] = None
    pres_animal_insect: Optional[str] = None
    quad_pos: Optional[str] = None
    rel_samp_loc: Optional[str] = None
    room_condt: Optional[str] = None
    room_loc: Optional[str] = None
    room_samp_pos: Optional[str] = None
    room_type: Optional[str] = None
    room_connected: Optional[str] = None
    samp_weather: Optional[str] = None
    samp_floor: Optional[str] = None
    season: Optional[str] = None
    season_use: Optional[str] = None
    shading_device_cond: Optional[str] = None
    shading_device_loc: Optional[str] = None
    heat_system_id: Optional[str] = None
    shad_dev_water_mold: Optional[str] = None
    shading_device_type: Optional[str] = None
    specific: Optional[str] = None
    train_line: Optional[str] = None
    train_stat_loc: Optional[str] = None
    train_stop_loc: Optional[str] = None
    vis_media: Optional[str] = None
    wall_const_type: Optional[str] = None
    wall_finish_mat: Optional[str] = None
    wall_loc: Optional[str] = None
    wall_water_mold: Optional[str] = None
    wall_surf_treatment: Optional[str] = None
    wall_texture: Optional[str] = None
    water_feat_type: Optional[str] = None
    weekday: Optional[str] = None
    window_cond: Optional[str] = None
    window_cover: Optional[str] = None
    window_horiz_pos: Optional[str] = None
    window_loc: Optional[str] = None
    window_mat: Optional[str] = None
    window_water_mold: Optional[str] = None
    window_status: Optional[str] = None
    window_type: Optional[str] = None
    window_vert_pos: Optional[str] = None
    samp_name: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.carb_dioxide is not None and not isinstance(self.carb_dioxide, str):
            self.carb_dioxide = str(self.carb_dioxide)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.rel_air_humidity is not None and not isinstance(self.rel_air_humidity, str):
            self.rel_air_humidity = str(self.rel_air_humidity)

        if self.abs_air_humidity is not None and not isinstance(self.abs_air_humidity, str):
            self.abs_air_humidity = str(self.abs_air_humidity)

        if self.surf_humidity is not None and not isinstance(self.surf_humidity, str):
            self.surf_humidity = str(self.surf_humidity)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.surf_temp is not None and not isinstance(self.surf_temp, str):
            self.surf_temp = str(self.surf_temp)

        if self.surf_moisture is not None and not isinstance(self.surf_moisture, str):
            self.surf_moisture = str(self.surf_moisture)

        if self.dew_point is not None and not isinstance(self.dew_point, str):
            self.dew_point = str(self.dew_point)

        if self.amount_light is not None and not isinstance(self.amount_light, str):
            self.amount_light = str(self.amount_light)

        if self.avg_dew_point is not None and not isinstance(self.avg_dew_point, str):
            self.avg_dew_point = str(self.avg_dew_point)

        if self.avg_temp is not None and not isinstance(self.avg_temp, str):
            self.avg_temp = str(self.avg_temp)

        if self.ceil_thermal_mass is not None and not isinstance(self.ceil_thermal_mass, str):
            self.ceil_thermal_mass = str(self.ceil_thermal_mass)

        if self.exp_duct is not None and not isinstance(self.exp_duct, str):
            self.exp_duct = str(self.exp_duct)

        if self.built_struc_age is not None and not isinstance(self.built_struc_age, str):
            self.built_struc_age = str(self.built_struc_age)

        if self.ceil_area is not None and not isinstance(self.ceil_area, str):
            self.ceil_area = str(self.ceil_area)

        if self.door_size is not None and not isinstance(self.door_size, str):
            self.door_size = str(self.door_size)

        if self.floor_age is not None and not isinstance(self.floor_age, str):
            self.floor_age = str(self.floor_age)

        if self.floor_area is not None and not isinstance(self.floor_area, str):
            self.floor_area = str(self.floor_area)

        if self.floor_thermal_mass is not None and not isinstance(self.floor_thermal_mass, str):
            self.floor_thermal_mass = str(self.floor_thermal_mass)

        if self.height_carper_fiber is not None and not isinstance(self.height_carper_fiber, str):
            self.height_carper_fiber = str(self.height_carper_fiber)

        if self.inside_lux is not None and not isinstance(self.inside_lux, str):
            self.inside_lux = str(self.inside_lux)

        if self.room_air_exch_rate is not None and not isinstance(self.room_air_exch_rate, str):
            self.room_air_exch_rate = str(self.room_air_exch_rate)

        if self.ext_door is not None and not isinstance(self.ext_door, str):
            self.ext_door = str(self.ext_door)

        if self.rel_humidity_out is not None and not isinstance(self.rel_humidity_out, str):
            self.rel_humidity_out = str(self.rel_humidity_out)

        if self.room_dim is not None and not isinstance(self.room_dim, str):
            self.room_dim = str(self.room_dim)

        if self.room_door_dist is not None and not isinstance(self.room_door_dist, str):
            self.room_door_dist = str(self.room_door_dist)

        if self.room_net_area is not None and not isinstance(self.room_net_area, str):
            self.room_net_area = str(self.room_net_area)

        if self.room_vol is not None and not isinstance(self.room_vol, str):
            self.room_vol = str(self.room_vol)

        if self.samp_time_out is not None and not isinstance(self.samp_time_out, str):
            self.samp_time_out = str(self.samp_time_out)

        if self.temp_out is not None and not isinstance(self.temp_out, str):
            self.temp_out = str(self.temp_out)

        if self.wall_area is not None and not isinstance(self.wall_area, str):
            self.wall_area = str(self.wall_area)

        if self.specific_humidity is not None and not isinstance(self.specific_humidity, str):
            self.specific_humidity = str(self.specific_humidity)

        if not isinstance(self.samp_sort_meth, list):
            self.samp_sort_meth = [self.samp_sort_meth] if self.samp_sort_meth is not None else []
        self.samp_sort_meth = [v if isinstance(v, str) else str(v) for v in self.samp_sort_meth]

        if self.occup_density_samp is not None and not isinstance(self.occup_density_samp, str):
            self.occup_density_samp = str(self.occup_density_samp)

        if self.address is not None and not isinstance(self.address, str):
            self.address = str(self.address)

        if self.adj_room is not None and not isinstance(self.adj_room, str):
            self.adj_room = str(self.adj_room)

        if self.exp_pipe is not None and not isinstance(self.exp_pipe, str):
            self.exp_pipe = str(self.exp_pipe)

        if self.wall_height is not None and not isinstance(self.wall_height, str):
            self.wall_height = str(self.wall_height)

        if self.wall_thermal_mass is not None and not isinstance(self.wall_thermal_mass, str):
            self.wall_thermal_mass = str(self.wall_thermal_mass)

        if self.water_feat_size is not None and not isinstance(self.water_feat_size, str):
            self.water_feat_size = str(self.water_feat_size)

        if self.window_size is not None and not isinstance(self.window_size, str):
            self.window_size = str(self.window_size)

        if self.floor_count is not None and not isinstance(self.floor_count, str):
            self.floor_count = str(self.floor_count)

        if self.freq_clean is not None and not isinstance(self.freq_clean, str):
            self.freq_clean = str(self.freq_clean)

        if self.freq_cook is not None and not isinstance(self.freq_cook, str):
            self.freq_cook = str(self.freq_cook)

        if self.hall_count is not None and not isinstance(self.hall_count, str):
            self.hall_count = str(self.hall_count)

        if self.max_occup is not None and not isinstance(self.max_occup, str):
            self.max_occup = str(self.max_occup)

        if self.number_plants is not None and not isinstance(self.number_plants, str):
            self.number_plants = str(self.number_plants)

        if self.number_pets is not None and not isinstance(self.number_pets, str):
            self.number_pets = str(self.number_pets)

        if self.number_resident is not None and not isinstance(self.number_resident, str):
            self.number_resident = str(self.number_resident)

        if self.room_architec_elem is not None and not isinstance(self.room_architec_elem, str):
            self.room_architec_elem = str(self.room_architec_elem)

        if self.room_count is not None and not isinstance(self.room_count, str):
            self.room_count = str(self.room_count)

        if self.room_moist_dam_hist is not None and not isinstance(self.room_moist_dam_hist, str):
            self.room_moist_dam_hist = str(self.room_moist_dam_hist)

        if self.room_occup is not None and not isinstance(self.room_occup, str):
            self.room_occup = str(self.room_occup)

        if self.room_window_count is not None and not isinstance(self.room_window_count, str):
            self.room_window_count = str(self.room_window_count)

        if self.room_hallway is not None and not isinstance(self.room_hallway, str):
            self.room_hallway = str(self.room_hallway)

        if self.room_door_share is not None and not isinstance(self.room_door_share, str):
            self.room_door_share = str(self.room_door_share)

        if self.room_wall_share is not None and not isinstance(self.room_wall_share, str):
            self.room_wall_share = str(self.room_wall_share)

        if self.samp_room_id is not None and not isinstance(self.samp_room_id, str):
            self.samp_room_id = str(self.samp_room_id)

        if self.shading_device_mat is not None and not isinstance(self.shading_device_mat, str):
            self.shading_device_mat = str(self.shading_device_mat)

        if self.window_open_freq is not None and not isinstance(self.window_open_freq, str):
            self.window_open_freq = str(self.window_open_freq)

        if self.built_struc_type is not None and not isinstance(self.built_struc_type, str):
            self.built_struc_type = str(self.built_struc_type)

        if self.ventilation_type is not None and not isinstance(self.ventilation_type, str):
            self.ventilation_type = str(self.ventilation_type)

        if self.surf_material is not None and not isinstance(self.surf_material, str):
            self.surf_material = str(self.surf_material)

        if not isinstance(self.surf_air_cont, list):
            self.surf_air_cont = [self.surf_air_cont] if self.surf_air_cont is not None else []
        self.surf_air_cont = [v if isinstance(v, str) else str(v) for v in self.surf_air_cont]

        if self.surf_moisture_ph is not None and not isinstance(self.surf_moisture_ph, str):
            self.surf_moisture_ph = str(self.surf_moisture_ph)

        if not isinstance(self.build_occup_type, list):
            self.build_occup_type = [self.build_occup_type] if self.build_occup_type is not None else []
        self.build_occup_type = [v if isinstance(v, str) else str(v) for v in self.build_occup_type]

        if self.indoor_space is not None and not isinstance(self.indoor_space, str):
            self.indoor_space = str(self.indoor_space)

        if self.indoor_surf is not None and not isinstance(self.indoor_surf, str):
            self.indoor_surf = str(self.indoor_surf)

        if not isinstance(self.filter_type, list):
            self.filter_type = [self.filter_type] if self.filter_type is not None else []
        self.filter_type = [v if isinstance(v, str) else str(v) for v in self.filter_type]

        if not isinstance(self.heat_cool_type, list):
            self.heat_cool_type = [self.heat_cool_type] if self.heat_cool_type is not None else []
        self.heat_cool_type = [v if isinstance(v, str) else str(v) for v in self.heat_cool_type]

        if not isinstance(self.substructure_type, list):
            self.substructure_type = [self.substructure_type] if self.substructure_type is not None else []
        self.substructure_type = [v if isinstance(v, str) else str(v) for v in self.substructure_type]

        if self.building_setting is not None and not isinstance(self.building_setting, str):
            self.building_setting = str(self.building_setting)

        if not isinstance(self.light_type, list):
            self.light_type = [self.light_type] if self.light_type is not None else []
        self.light_type = [v if isinstance(v, str) else str(v) for v in self.light_type]

        if self.space_typ_state is not None and not isinstance(self.space_typ_state, str):
            self.space_typ_state = str(self.space_typ_state)

        if self.typ_occup_density is not None and not isinstance(self.typ_occup_density, str):
            self.typ_occup_density = str(self.typ_occup_density)

        if self.occup_samp is not None and not isinstance(self.occup_samp, str):
            self.occup_samp = str(self.occup_samp)

        if self.aero_struc is not None and not isinstance(self.aero_struc, str):
            self.aero_struc = str(self.aero_struc)

        if self.arch_struc is not None and not isinstance(self.arch_struc, str):
            self.arch_struc = str(self.arch_struc)

        if self.avg_occup is not None and not isinstance(self.avg_occup, str):
            self.avg_occup = str(self.avg_occup)

        if self.bathroom_count is not None and not isinstance(self.bathroom_count, str):
            self.bathroom_count = str(self.bathroom_count)

        if self.bedroom_count is not None and not isinstance(self.bedroom_count, str):
            self.bedroom_count = str(self.bedroom_count)

        if self.built_struc_set is not None and not isinstance(self.built_struc_set, str):
            self.built_struc_set = str(self.built_struc_set)

        if self.ceil_cond is not None and not isinstance(self.ceil_cond, str):
            self.ceil_cond = str(self.ceil_cond)

        if self.ceil_finish_mat is not None and not isinstance(self.ceil_finish_mat, str):
            self.ceil_finish_mat = str(self.ceil_finish_mat)

        if self.ceil_water_mold is not None and not isinstance(self.ceil_water_mold, str):
            self.ceil_water_mold = str(self.ceil_water_mold)

        if self.ceil_struc is not None and not isinstance(self.ceil_struc, str):
            self.ceil_struc = str(self.ceil_struc)

        if self.ceil_texture is not None and not isinstance(self.ceil_texture, str):
            self.ceil_texture = str(self.ceil_texture)

        if self.ceil_type is not None and not isinstance(self.ceil_type, str):
            self.ceil_type = str(self.ceil_type)

        if self.cool_syst_id is not None and not isinstance(self.cool_syst_id, str):
            self.cool_syst_id = str(self.cool_syst_id)

        if self.date_last_rain is not None and not isinstance(self.date_last_rain, str):
            self.date_last_rain = str(self.date_last_rain)

        if self.build_docs is not None and not isinstance(self.build_docs, str):
            self.build_docs = str(self.build_docs)

        if self.door_cond is not None and not isinstance(self.door_cond, str):
            self.door_cond = str(self.door_cond)

        if self.door_direct is not None and not isinstance(self.door_direct, str):
            self.door_direct = str(self.door_direct)

        if self.door_loc is not None and not isinstance(self.door_loc, str):
            self.door_loc = str(self.door_loc)

        if self.door_mat is not None and not isinstance(self.door_mat, str):
            self.door_mat = str(self.door_mat)

        if self.door_move is not None and not isinstance(self.door_move, str):
            self.door_move = str(self.door_move)

        if self.door_water_mold is not None and not isinstance(self.door_water_mold, str):
            self.door_water_mold = str(self.door_water_mold)

        if self.door_type is not None and not isinstance(self.door_type, str):
            self.door_type = str(self.door_type)

        if self.door_comp_type is not None and not isinstance(self.door_comp_type, str):
            self.door_comp_type = str(self.door_comp_type)

        if self.door_type_metal is not None and not isinstance(self.door_type_metal, str):
            self.door_type_metal = str(self.door_type_metal)

        if self.door_type_wood is not None and not isinstance(self.door_type_wood, str):
            self.door_type_wood = str(self.door_type_wood)

        if self.drawings is not None and not isinstance(self.drawings, str):
            self.drawings = str(self.drawings)

        if self.elevator is not None and not isinstance(self.elevator, str):
            self.elevator = str(self.elevator)

        if self.escalator is not None and not isinstance(self.escalator, str):
            self.escalator = str(self.escalator)

        if self.fireplace_type is not None and not isinstance(self.fireplace_type, str):
            self.fireplace_type = str(self.fireplace_type)

        if self.floor_cond is not None and not isinstance(self.floor_cond, str):
            self.floor_cond = str(self.floor_cond)

        if self.floor_finish_mat is not None and not isinstance(self.floor_finish_mat, str):
            self.floor_finish_mat = str(self.floor_finish_mat)

        if self.floor_water_mold is not None and not isinstance(self.floor_water_mold, str):
            self.floor_water_mold = str(self.floor_water_mold)

        if self.floor_struc is not None and not isinstance(self.floor_struc, str):
            self.floor_struc = str(self.floor_struc)

        if self.furniture is not None and not isinstance(self.furniture, str):
            self.furniture = str(self.furniture)

        if self.gender_restroom is not None and not isinstance(self.gender_restroom, str):
            self.gender_restroom = str(self.gender_restroom)

        if self.handidness is not None and not isinstance(self.handidness, str):
            self.handidness = str(self.handidness)

        if self.heat_deliv_loc is not None and not isinstance(self.heat_deliv_loc, str):
            self.heat_deliv_loc = str(self.heat_deliv_loc)

        if self.heat_sys_deliv_meth is not None and not isinstance(self.heat_sys_deliv_meth, str):
            self.heat_sys_deliv_meth = str(self.heat_sys_deliv_meth)

        if self.int_wall_cond is not None and not isinstance(self.int_wall_cond, str):
            self.int_wall_cond = str(self.int_wall_cond)

        if self.last_clean is not None and not isinstance(self.last_clean, str):
            self.last_clean = str(self.last_clean)

        if self.mech_struc is not None and not isinstance(self.mech_struc, str):
            self.mech_struc = str(self.mech_struc)

        if self.occup_document is not None and not isinstance(self.occup_document, str):
            self.occup_document = str(self.occup_document)

        if self.ext_wall_orient is not None and not isinstance(self.ext_wall_orient, str):
            self.ext_wall_orient = str(self.ext_wall_orient)

        if self.ext_window_orient is not None and not isinstance(self.ext_window_orient, str):
            self.ext_window_orient = str(self.ext_window_orient)

        if self.pres_animal_insect is not None and not isinstance(self.pres_animal_insect, str):
            self.pres_animal_insect = str(self.pres_animal_insect)

        if self.quad_pos is not None and not isinstance(self.quad_pos, str):
            self.quad_pos = str(self.quad_pos)

        if self.rel_samp_loc is not None and not isinstance(self.rel_samp_loc, str):
            self.rel_samp_loc = str(self.rel_samp_loc)

        if self.room_condt is not None and not isinstance(self.room_condt, str):
            self.room_condt = str(self.room_condt)

        if self.room_loc is not None and not isinstance(self.room_loc, str):
            self.room_loc = str(self.room_loc)

        if self.room_samp_pos is not None and not isinstance(self.room_samp_pos, str):
            self.room_samp_pos = str(self.room_samp_pos)

        if self.room_type is not None and not isinstance(self.room_type, str):
            self.room_type = str(self.room_type)

        if self.room_connected is not None and not isinstance(self.room_connected, str):
            self.room_connected = str(self.room_connected)

        if self.samp_weather is not None and not isinstance(self.samp_weather, str):
            self.samp_weather = str(self.samp_weather)

        if self.samp_floor is not None and not isinstance(self.samp_floor, str):
            self.samp_floor = str(self.samp_floor)

        if self.season is not None and not isinstance(self.season, str):
            self.season = str(self.season)

        if self.season_use is not None and not isinstance(self.season_use, str):
            self.season_use = str(self.season_use)

        if self.shading_device_cond is not None and not isinstance(self.shading_device_cond, str):
            self.shading_device_cond = str(self.shading_device_cond)

        if self.shading_device_loc is not None and not isinstance(self.shading_device_loc, str):
            self.shading_device_loc = str(self.shading_device_loc)

        if self.heat_system_id is not None and not isinstance(self.heat_system_id, str):
            self.heat_system_id = str(self.heat_system_id)

        if self.shad_dev_water_mold is not None and not isinstance(self.shad_dev_water_mold, str):
            self.shad_dev_water_mold = str(self.shad_dev_water_mold)

        if self.shading_device_type is not None and not isinstance(self.shading_device_type, str):
            self.shading_device_type = str(self.shading_device_type)

        if self.specific is not None and not isinstance(self.specific, str):
            self.specific = str(self.specific)

        if self.train_line is not None and not isinstance(self.train_line, str):
            self.train_line = str(self.train_line)

        if self.train_stat_loc is not None and not isinstance(self.train_stat_loc, str):
            self.train_stat_loc = str(self.train_stat_loc)

        if self.train_stop_loc is not None and not isinstance(self.train_stop_loc, str):
            self.train_stop_loc = str(self.train_stop_loc)

        if self.vis_media is not None and not isinstance(self.vis_media, str):
            self.vis_media = str(self.vis_media)

        if self.wall_const_type is not None and not isinstance(self.wall_const_type, str):
            self.wall_const_type = str(self.wall_const_type)

        if self.wall_finish_mat is not None and not isinstance(self.wall_finish_mat, str):
            self.wall_finish_mat = str(self.wall_finish_mat)

        if self.wall_loc is not None and not isinstance(self.wall_loc, str):
            self.wall_loc = str(self.wall_loc)

        if self.wall_water_mold is not None and not isinstance(self.wall_water_mold, str):
            self.wall_water_mold = str(self.wall_water_mold)

        if self.wall_surf_treatment is not None and not isinstance(self.wall_surf_treatment, str):
            self.wall_surf_treatment = str(self.wall_surf_treatment)

        if self.wall_texture is not None and not isinstance(self.wall_texture, str):
            self.wall_texture = str(self.wall_texture)

        if self.water_feat_type is not None and not isinstance(self.water_feat_type, str):
            self.water_feat_type = str(self.water_feat_type)

        if self.weekday is not None and not isinstance(self.weekday, str):
            self.weekday = str(self.weekday)

        if self.window_cond is not None and not isinstance(self.window_cond, str):
            self.window_cond = str(self.window_cond)

        if self.window_cover is not None and not isinstance(self.window_cover, str):
            self.window_cover = str(self.window_cover)

        if self.window_horiz_pos is not None and not isinstance(self.window_horiz_pos, str):
            self.window_horiz_pos = str(self.window_horiz_pos)

        if self.window_loc is not None and not isinstance(self.window_loc, str):
            self.window_loc = str(self.window_loc)

        if self.window_mat is not None and not isinstance(self.window_mat, str):
            self.window_mat = str(self.window_mat)

        if self.window_water_mold is not None and not isinstance(self.window_water_mold, str):
            self.window_water_mold = str(self.window_water_mold)

        if self.window_status is not None and not isinstance(self.window_status, str):
            self.window_status = str(self.window_status)

        if self.window_type is not None and not isinstance(self.window_type, str):
            self.window_type = str(self.window_type)

        if self.window_vert_pos is not None and not isinstance(self.window_vert_pos, str):
            self.window_vert_pos = str(self.window_vert_pos)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        super().__post_init__(**kwargs)


@dataclass
class HydrocarbonResourcesCores(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.HydrocarbonResourcesCores
    class_class_curie: ClassVar[str] = "TEMP:HydrocarbonResourcesCores"
    class_name: ClassVar[str] = "hydrocarbon_resources_cores"
    class_model_uri: ClassVar[URIRef] = TEMP.HydrocarbonResourcesCores

    project_name: Optional[str] = None
    elev: Optional[str] = None
    org_count_qpcr_info: Optional[str] = None
    tot_nitro: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    tot_iron: Optional[str] = None
    diss_inorg_phosp: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    tot_phosp: Optional[str] = None
    tan: Optional[str] = None
    viscosity: Optional[str] = None
    pour_point: Optional[str] = None
    saturates_pc: Optional[str] = None
    aromatics_pc: Optional[str] = None
    resins_pc: Optional[str] = None
    asphaltenes_pc: Optional[str] = None
    diss_iron: Optional[str] = None
    suspend_solids: Optional[Union[str, List[str]]] = empty_list()
    vfa: Optional[str] = None
    benzene: Optional[str] = None
    toluene: Optional[str] = None
    ethylbenzene: Optional[str] = None
    xylene: Optional[str] = None
    api: Optional[str] = None
    salinity: Optional[str] = None
    porosity: Optional[str] = None
    basin: Optional[str] = None
    field: Optional[str] = None
    samp_well_name: Optional[str] = None
    win: Optional[str] = None
    alkalinity_method: Optional[str] = None
    additional_info: Optional[str] = None
    reservoir: Optional[str] = None
    hcr_temp: Optional[str] = None
    tvdss_of_hcr_temp: Optional[str] = None
    hcr_pressure: Optional[str] = None
    tvdss_of_hcr_press: Optional[str] = None
    permeability: Optional[str] = None
    owc_tvdss: Optional[str] = None
    hcr_fw_salinity: Optional[str] = None
    sulfate_fw: Optional[str] = None
    vfa_fw: Optional[str] = None
    samp_tvdss: Optional[str] = None
    samp_transport_cond: Optional[str] = None
    pressure: Optional[str] = None
    samp_md: Optional[str] = None
    tot_sulfur: Optional[str] = None
    alkalinity: Optional[str] = None
    sulfate: Optional[str] = None
    sulfide: Optional[str] = None
    nitrate: Optional[str] = None
    nitrite: Optional[str] = None
    ammonium: Optional[str] = None
    sodium: Optional[str] = None
    chloride: Optional[str] = None
    potassium: Optional[str] = None
    magnesium: Optional[str] = None
    calcium: Optional[str] = None
    diss_org_carb: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    density: Optional[str] = None
    diss_carb_dioxide: Optional[str] = None
    diss_oxygen_fluid: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    samp_store_loc: Optional[str] = None
    hcr: Optional[str] = None
    hc_produced: Optional[str] = None
    lithology: Optional[str] = None
    depos_env: Optional[str] = None
    hcr_geol_age: Optional[str] = None
    sr_kerog_type: Optional[str] = None
    sr_lithology: Optional[str] = None
    sr_dep_env: Optional[str] = None
    sr_geol_age: Optional[str] = None
    samp_type: Optional[str] = None
    samp_subtype: Optional[str] = None
    ph: Optional[str] = None
    samp_name: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.org_count_qpcr_info is not None and not isinstance(self.org_count_qpcr_info, str):
            self.org_count_qpcr_info = str(self.org_count_qpcr_info)

        if self.tot_nitro is not None and not isinstance(self.tot_nitro, str):
            self.tot_nitro = str(self.tot_nitro)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.tot_iron is not None and not isinstance(self.tot_iron, str):
            self.tot_iron = str(self.tot_iron)

        if self.diss_inorg_phosp is not None and not isinstance(self.diss_inorg_phosp, str):
            self.diss_inorg_phosp = str(self.diss_inorg_phosp)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.tot_phosp is not None and not isinstance(self.tot_phosp, str):
            self.tot_phosp = str(self.tot_phosp)

        if self.tan is not None and not isinstance(self.tan, str):
            self.tan = str(self.tan)

        if self.viscosity is not None and not isinstance(self.viscosity, str):
            self.viscosity = str(self.viscosity)

        if self.pour_point is not None and not isinstance(self.pour_point, str):
            self.pour_point = str(self.pour_point)

        if self.saturates_pc is not None and not isinstance(self.saturates_pc, str):
            self.saturates_pc = str(self.saturates_pc)

        if self.aromatics_pc is not None and not isinstance(self.aromatics_pc, str):
            self.aromatics_pc = str(self.aromatics_pc)

        if self.resins_pc is not None and not isinstance(self.resins_pc, str):
            self.resins_pc = str(self.resins_pc)

        if self.asphaltenes_pc is not None and not isinstance(self.asphaltenes_pc, str):
            self.asphaltenes_pc = str(self.asphaltenes_pc)

        if self.diss_iron is not None and not isinstance(self.diss_iron, str):
            self.diss_iron = str(self.diss_iron)

        if not isinstance(self.suspend_solids, list):
            self.suspend_solids = [self.suspend_solids] if self.suspend_solids is not None else []
        self.suspend_solids = [v if isinstance(v, str) else str(v) for v in self.suspend_solids]

        if self.vfa is not None and not isinstance(self.vfa, str):
            self.vfa = str(self.vfa)

        if self.benzene is not None and not isinstance(self.benzene, str):
            self.benzene = str(self.benzene)

        if self.toluene is not None and not isinstance(self.toluene, str):
            self.toluene = str(self.toluene)

        if self.ethylbenzene is not None and not isinstance(self.ethylbenzene, str):
            self.ethylbenzene = str(self.ethylbenzene)

        if self.xylene is not None and not isinstance(self.xylene, str):
            self.xylene = str(self.xylene)

        if self.api is not None and not isinstance(self.api, str):
            self.api = str(self.api)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.porosity is not None and not isinstance(self.porosity, str):
            self.porosity = str(self.porosity)

        if self.basin is not None and not isinstance(self.basin, str):
            self.basin = str(self.basin)

        if self.field is not None and not isinstance(self.field, str):
            self.field = str(self.field)

        if self.samp_well_name is not None and not isinstance(self.samp_well_name, str):
            self.samp_well_name = str(self.samp_well_name)

        if self.win is not None and not isinstance(self.win, str):
            self.win = str(self.win)

        if self.alkalinity_method is not None and not isinstance(self.alkalinity_method, str):
            self.alkalinity_method = str(self.alkalinity_method)

        if self.additional_info is not None and not isinstance(self.additional_info, str):
            self.additional_info = str(self.additional_info)

        if self.reservoir is not None and not isinstance(self.reservoir, str):
            self.reservoir = str(self.reservoir)

        if self.hcr_temp is not None and not isinstance(self.hcr_temp, str):
            self.hcr_temp = str(self.hcr_temp)

        if self.tvdss_of_hcr_temp is not None and not isinstance(self.tvdss_of_hcr_temp, str):
            self.tvdss_of_hcr_temp = str(self.tvdss_of_hcr_temp)

        if self.hcr_pressure is not None and not isinstance(self.hcr_pressure, str):
            self.hcr_pressure = str(self.hcr_pressure)

        if self.tvdss_of_hcr_press is not None and not isinstance(self.tvdss_of_hcr_press, str):
            self.tvdss_of_hcr_press = str(self.tvdss_of_hcr_press)

        if self.permeability is not None and not isinstance(self.permeability, str):
            self.permeability = str(self.permeability)

        if self.owc_tvdss is not None and not isinstance(self.owc_tvdss, str):
            self.owc_tvdss = str(self.owc_tvdss)

        if self.hcr_fw_salinity is not None and not isinstance(self.hcr_fw_salinity, str):
            self.hcr_fw_salinity = str(self.hcr_fw_salinity)

        if self.sulfate_fw is not None and not isinstance(self.sulfate_fw, str):
            self.sulfate_fw = str(self.sulfate_fw)

        if self.vfa_fw is not None and not isinstance(self.vfa_fw, str):
            self.vfa_fw = str(self.vfa_fw)

        if self.samp_tvdss is not None and not isinstance(self.samp_tvdss, str):
            self.samp_tvdss = str(self.samp_tvdss)

        if self.samp_transport_cond is not None and not isinstance(self.samp_transport_cond, str):
            self.samp_transport_cond = str(self.samp_transport_cond)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.samp_md is not None and not isinstance(self.samp_md, str):
            self.samp_md = str(self.samp_md)

        if self.tot_sulfur is not None and not isinstance(self.tot_sulfur, str):
            self.tot_sulfur = str(self.tot_sulfur)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.sulfate is not None and not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self.sulfide is not None and not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.magnesium is not None and not isinstance(self.magnesium, str):
            self.magnesium = str(self.magnesium)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.diss_org_carb is not None and not isinstance(self.diss_org_carb, str):
            self.diss_org_carb = str(self.diss_org_carb)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.density is not None and not isinstance(self.density, str):
            self.density = str(self.density)

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.diss_oxygen_fluid is not None and not isinstance(self.diss_oxygen_fluid, str):
            self.diss_oxygen_fluid = str(self.diss_oxygen_fluid)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.hcr is not None and not isinstance(self.hcr, str):
            self.hcr = str(self.hcr)

        if self.hc_produced is not None and not isinstance(self.hc_produced, str):
            self.hc_produced = str(self.hc_produced)

        if self.lithology is not None and not isinstance(self.lithology, str):
            self.lithology = str(self.lithology)

        if self.depos_env is not None and not isinstance(self.depos_env, str):
            self.depos_env = str(self.depos_env)

        if self.hcr_geol_age is not None and not isinstance(self.hcr_geol_age, str):
            self.hcr_geol_age = str(self.hcr_geol_age)

        if self.sr_kerog_type is not None and not isinstance(self.sr_kerog_type, str):
            self.sr_kerog_type = str(self.sr_kerog_type)

        if self.sr_lithology is not None and not isinstance(self.sr_lithology, str):
            self.sr_lithology = str(self.sr_lithology)

        if self.sr_dep_env is not None and not isinstance(self.sr_dep_env, str):
            self.sr_dep_env = str(self.sr_dep_env)

        if self.sr_geol_age is not None and not isinstance(self.sr_geol_age, str):
            self.sr_geol_age = str(self.sr_geol_age)

        if self.samp_type is not None and not isinstance(self.samp_type, str):
            self.samp_type = str(self.samp_type)

        if self.samp_subtype is not None and not isinstance(self.samp_subtype, str):
            self.samp_subtype = str(self.samp_subtype)

        if self.ph is not None and not isinstance(self.ph, str):
            self.ph = str(self.ph)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        super().__post_init__(**kwargs)


@dataclass
class HydrocarbonResourcesFluidsSwabs(YAMLRoot):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.HydrocarbonResourcesFluidsSwabs
    class_class_curie: ClassVar[str] = "TEMP:HydrocarbonResourcesFluidsSwabs"
    class_name: ClassVar[str] = "hydrocarbon_resources_fluids_swabs"
    class_model_uri: ClassVar[URIRef] = TEMP.HydrocarbonResourcesFluidsSwabs

    project_name: Optional[str] = None
    org_count_qpcr_info: Optional[str] = None
    tot_nitro: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    tot_iron: Optional[str] = None
    diss_inorg_phosp: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    tot_phosp: Optional[str] = None
    tan: Optional[str] = None
    viscosity: Optional[str] = None
    pour_point: Optional[str] = None
    saturates_pc: Optional[str] = None
    aromatics_pc: Optional[str] = None
    resins_pc: Optional[str] = None
    asphaltenes_pc: Optional[str] = None
    samp_loc_corr_rate: Optional[str] = None
    diss_iron: Optional[str] = None
    suspend_solids: Optional[Union[str, List[str]]] = empty_list()
    vfa: Optional[str] = None
    benzene: Optional[str] = None
    toluene: Optional[str] = None
    ethylbenzene: Optional[str] = None
    xylene: Optional[str] = None
    api: Optional[str] = None
    salinity: Optional[str] = None
    basin: Optional[str] = None
    field: Optional[str] = None
    samp_well_name: Optional[str] = None
    win: Optional[str] = None
    alkalinity_method: Optional[str] = None
    additional_info: Optional[str] = None
    reservoir: Optional[str] = None
    hcr_temp: Optional[str] = None
    tvdss_of_hcr_temp: Optional[str] = None
    hcr_pressure: Optional[str] = None
    tvdss_of_hcr_press: Optional[str] = None
    hcr_fw_salinity: Optional[str] = None
    sulfate_fw: Optional[str] = None
    vfa_fw: Optional[str] = None
    samp_transport_cond: Optional[str] = None
    pressure: Optional[str] = None
    tot_sulfur: Optional[str] = None
    alkalinity: Optional[str] = None
    sulfate: Optional[str] = None
    sulfide: Optional[str] = None
    nitrate: Optional[str] = None
    nitrite: Optional[str] = None
    ammonium: Optional[str] = None
    sodium: Optional[str] = None
    chloride: Optional[str] = None
    potassium: Optional[str] = None
    magnesium: Optional[str] = None
    calcium: Optional[str] = None
    diss_org_carb: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    density: Optional[str] = None
    diss_carb_dioxide: Optional[str] = None
    diss_oxygen_fluid: Optional[str] = None
    prod_rate: Optional[str] = None
    water_prod_rate: Optional[str] = None
    water_cut: Optional[str] = None
    iwf: Optional[str] = None
    biocide_admin_method: Optional[str] = None
    chem_treat_method: Optional[str] = None
    samp_preserv: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[str] = None
    samp_store_loc: Optional[str] = None
    hcr: Optional[str] = None
    hc_produced: Optional[str] = None
    lithology: Optional[str] = None
    depos_env: Optional[str] = None
    hcr_geol_age: Optional[str] = None
    samp_type: Optional[str] = None
    samp_subtype: Optional[str] = None
    ph: Optional[str] = None
    prod_start_date: Optional[str] = None
    add_recov_method: Optional[str] = None
    iw_bt_date_well: Optional[str] = None
    biocide: Optional[str] = None
    chem_treatment: Optional[str] = None
    samp_collect_point: Optional[str] = None
    samp_name: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self.project_name is not None and not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.org_count_qpcr_info is not None and not isinstance(self.org_count_qpcr_info, str):
            self.org_count_qpcr_info = str(self.org_count_qpcr_info)

        if self.tot_nitro is not None and not isinstance(self.tot_nitro, str):
            self.tot_nitro = str(self.tot_nitro)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.tot_iron is not None and not isinstance(self.tot_iron, str):
            self.tot_iron = str(self.tot_iron)

        if self.diss_inorg_phosp is not None and not isinstance(self.diss_inorg_phosp, str):
            self.diss_inorg_phosp = str(self.diss_inorg_phosp)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.tot_phosp is not None and not isinstance(self.tot_phosp, str):
            self.tot_phosp = str(self.tot_phosp)

        if self.tan is not None and not isinstance(self.tan, str):
            self.tan = str(self.tan)

        if self.viscosity is not None and not isinstance(self.viscosity, str):
            self.viscosity = str(self.viscosity)

        if self.pour_point is not None and not isinstance(self.pour_point, str):
            self.pour_point = str(self.pour_point)

        if self.saturates_pc is not None and not isinstance(self.saturates_pc, str):
            self.saturates_pc = str(self.saturates_pc)

        if self.aromatics_pc is not None and not isinstance(self.aromatics_pc, str):
            self.aromatics_pc = str(self.aromatics_pc)

        if self.resins_pc is not None and not isinstance(self.resins_pc, str):
            self.resins_pc = str(self.resins_pc)

        if self.asphaltenes_pc is not None and not isinstance(self.asphaltenes_pc, str):
            self.asphaltenes_pc = str(self.asphaltenes_pc)

        if self.samp_loc_corr_rate is not None and not isinstance(self.samp_loc_corr_rate, str):
            self.samp_loc_corr_rate = str(self.samp_loc_corr_rate)

        if self.diss_iron is not None and not isinstance(self.diss_iron, str):
            self.diss_iron = str(self.diss_iron)

        if not isinstance(self.suspend_solids, list):
            self.suspend_solids = [self.suspend_solids] if self.suspend_solids is not None else []
        self.suspend_solids = [v if isinstance(v, str) else str(v) for v in self.suspend_solids]

        if self.vfa is not None and not isinstance(self.vfa, str):
            self.vfa = str(self.vfa)

        if self.benzene is not None and not isinstance(self.benzene, str):
            self.benzene = str(self.benzene)

        if self.toluene is not None and not isinstance(self.toluene, str):
            self.toluene = str(self.toluene)

        if self.ethylbenzene is not None and not isinstance(self.ethylbenzene, str):
            self.ethylbenzene = str(self.ethylbenzene)

        if self.xylene is not None and not isinstance(self.xylene, str):
            self.xylene = str(self.xylene)

        if self.api is not None and not isinstance(self.api, str):
            self.api = str(self.api)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.basin is not None and not isinstance(self.basin, str):
            self.basin = str(self.basin)

        if self.field is not None and not isinstance(self.field, str):
            self.field = str(self.field)

        if self.samp_well_name is not None and not isinstance(self.samp_well_name, str):
            self.samp_well_name = str(self.samp_well_name)

        if self.win is not None and not isinstance(self.win, str):
            self.win = str(self.win)

        if self.alkalinity_method is not None and not isinstance(self.alkalinity_method, str):
            self.alkalinity_method = str(self.alkalinity_method)

        if self.additional_info is not None and not isinstance(self.additional_info, str):
            self.additional_info = str(self.additional_info)

        if self.reservoir is not None and not isinstance(self.reservoir, str):
            self.reservoir = str(self.reservoir)

        if self.hcr_temp is not None and not isinstance(self.hcr_temp, str):
            self.hcr_temp = str(self.hcr_temp)

        if self.tvdss_of_hcr_temp is not None and not isinstance(self.tvdss_of_hcr_temp, str):
            self.tvdss_of_hcr_temp = str(self.tvdss_of_hcr_temp)

        if self.hcr_pressure is not None and not isinstance(self.hcr_pressure, str):
            self.hcr_pressure = str(self.hcr_pressure)

        if self.tvdss_of_hcr_press is not None and not isinstance(self.tvdss_of_hcr_press, str):
            self.tvdss_of_hcr_press = str(self.tvdss_of_hcr_press)

        if self.hcr_fw_salinity is not None and not isinstance(self.hcr_fw_salinity, str):
            self.hcr_fw_salinity = str(self.hcr_fw_salinity)

        if self.sulfate_fw is not None and not isinstance(self.sulfate_fw, str):
            self.sulfate_fw = str(self.sulfate_fw)

        if self.vfa_fw is not None and not isinstance(self.vfa_fw, str):
            self.vfa_fw = str(self.vfa_fw)

        if self.samp_transport_cond is not None and not isinstance(self.samp_transport_cond, str):
            self.samp_transport_cond = str(self.samp_transport_cond)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.tot_sulfur is not None and not isinstance(self.tot_sulfur, str):
            self.tot_sulfur = str(self.tot_sulfur)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.sulfate is not None and not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self.sulfide is not None and not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.magnesium is not None and not isinstance(self.magnesium, str):
            self.magnesium = str(self.magnesium)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.diss_org_carb is not None and not isinstance(self.diss_org_carb, str):
            self.diss_org_carb = str(self.diss_org_carb)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.density is not None and not isinstance(self.density, str):
            self.density = str(self.density)

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.diss_oxygen_fluid is not None and not isinstance(self.diss_oxygen_fluid, str):
            self.diss_oxygen_fluid = str(self.diss_oxygen_fluid)

        if self.prod_rate is not None and not isinstance(self.prod_rate, str):
            self.prod_rate = str(self.prod_rate)

        if self.water_prod_rate is not None and not isinstance(self.water_prod_rate, str):
            self.water_prod_rate = str(self.water_prod_rate)

        if self.water_cut is not None and not isinstance(self.water_cut, str):
            self.water_cut = str(self.water_cut)

        if self.iwf is not None and not isinstance(self.iwf, str):
            self.iwf = str(self.iwf)

        if self.biocide_admin_method is not None and not isinstance(self.biocide_admin_method, str):
            self.biocide_admin_method = str(self.biocide_admin_method)

        if self.chem_treat_method is not None and not isinstance(self.chem_treat_method, str):
            self.chem_treat_method = str(self.chem_treat_method)

        if self.samp_preserv is not None and not isinstance(self.samp_preserv, str):
            self.samp_preserv = str(self.samp_preserv)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, str):
            self.oxy_stat_samp = str(self.oxy_stat_samp)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.hcr is not None and not isinstance(self.hcr, str):
            self.hcr = str(self.hcr)

        if self.hc_produced is not None and not isinstance(self.hc_produced, str):
            self.hc_produced = str(self.hc_produced)

        if self.lithology is not None and not isinstance(self.lithology, str):
            self.lithology = str(self.lithology)

        if self.depos_env is not None and not isinstance(self.depos_env, str):
            self.depos_env = str(self.depos_env)

        if self.hcr_geol_age is not None and not isinstance(self.hcr_geol_age, str):
            self.hcr_geol_age = str(self.hcr_geol_age)

        if self.samp_type is not None and not isinstance(self.samp_type, str):
            self.samp_type = str(self.samp_type)

        if self.samp_subtype is not None and not isinstance(self.samp_subtype, str):
            self.samp_subtype = str(self.samp_subtype)

        if self.ph is not None and not isinstance(self.ph, str):
            self.ph = str(self.ph)

        if self.prod_start_date is not None and not isinstance(self.prod_start_date, str):
            self.prod_start_date = str(self.prod_start_date)

        if self.add_recov_method is not None and not isinstance(self.add_recov_method, str):
            self.add_recov_method = str(self.add_recov_method)

        if self.iw_bt_date_well is not None and not isinstance(self.iw_bt_date_well, str):
            self.iw_bt_date_well = str(self.iw_bt_date_well)

        if self.biocide is not None and not isinstance(self.biocide, str):
            self.biocide = str(self.biocide)

        if self.chem_treatment is not None and not isinstance(self.chem_treatment, str):
            self.chem_treatment = str(self.chem_treatment)

        if self.samp_collect_point is not None and not isinstance(self.samp_collect_point, str):
            self.samp_collect_point = str(self.samp_collect_point)

        if self.samp_name is not None and not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        super().__post_init__(**kwargs)


class MimsSoil(Soil):
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = TEMP.MimsSoil
    class_class_curie: ClassVar[str] = "TEMP:MimsSoil"
    class_name: ClassVar[str] = "mims_soil"
    class_model_uri: ClassVar[URIRef] = TEMP.MimsSoil


# Enumerations


# Slots
class slots:
    pass

slots.mims_soil_set = Slot(uri=TEMP.mims_soil_set, name="mims_soil_set", curie=TEMP.curie('mims_soil_set'),
                   model_uri=TEMP.mims_soil_set, domain=Database, range=Optional[Union[Union[dict, "MimsSoil"], List[Union[dict, "MimsSoil"]]]])

slots.samp_size = Slot(uri=MIXS['0000001'], name="samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.samp_size, domain=None, range=Optional[str])

slots.samp_collec_device = Slot(uri=MIXS['0000002'], name="samp_collec_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.samp_collec_device, domain=None, range=Optional[str])

slots.isol_growth_condt = Slot(uri=MIXS['0000003'], name="isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=TEMP.isol_growth_condt, domain=None, range=Optional[str])

slots.contam_screen_input = Slot(uri=MIXS['0000005'], name="contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=TEMP.contam_screen_input, domain=None, range=Optional[str])

slots.wga_amp_kit = Slot(uri=MIXS['0000006'], name="wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=TEMP.wga_amp_kit, domain=None, range=Optional[str])

slots.experimental_factor = Slot(uri=MIXS['0000008'], name="experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=TEMP.experimental_factor, domain=None, range=Optional[str])

slots.lat_lon = Slot(uri=MIXS['0000009'], name="lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.lat_lon, domain=None, range=Optional[str])

slots.geo_loc_name = Slot(uri=MIXS['0000010'], name="geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.geo_loc_name, domain=None, range=Optional[str])

slots.collection_date = Slot(uri=MIXS['0000011'], name="collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.collection_date, domain=None, range=Optional[str])

slots.env_broad_scale = Slot(uri=MIXS['0000012'], name="env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.env_broad_scale, domain=None, range=Optional[str])

slots.env_local_scale = Slot(uri=MIXS['0000013'], name="env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.env_local_scale, domain=None, range=Optional[str])

slots.env_medium = Slot(uri=MIXS['0000014'], name="env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.env_medium, domain=None, range=Optional[str])

slots.rel_to_oxygen = Slot(uri=MIXS['0000015'], name="rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=TEMP.rel_to_oxygen, domain=None, range=Optional[str])

slots.samp_mat_process = Slot(uri=MIXS['0000016'], name="samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=TEMP.samp_mat_process, domain=None, range=Optional[str])

slots.size_frac = Slot(uri=MIXS['0000017'], name="size_frac", curie=MIXS.curie('0000017'),
                   model_uri=TEMP.size_frac, domain=None, range=Optional[str])

slots.depth = Slot(uri=MIXS['0000018'], name="depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.depth, domain=None, range=Optional[str])

slots.subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=TEMP.subspecf_gen_lin, domain=None, range=Optional[str])

slots.ploidy = Slot(uri=MIXS['0000021'], name="ploidy", curie=MIXS.curie('0000021'),
                   model_uri=TEMP.ploidy, domain=None, range=Optional[str])

slots.num_replicons = Slot(uri=MIXS['0000022'], name="num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=TEMP.num_replicons, domain=None, range=Optional[str])

slots.extrachrom_elements = Slot(uri=MIXS['0000023'], name="extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=TEMP.extrachrom_elements, domain=None, range=Optional[str])

slots.estimated_size = Slot(uri=MIXS['0000024'], name="estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=TEMP.estimated_size, domain=None, range=Optional[str])

slots.ref_biomaterial = Slot(uri=MIXS['0000025'], name="ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=TEMP.ref_biomaterial, domain=None, range=Optional[str])

slots.source_mat_id = Slot(uri=MIXS['0000026'], name="source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=TEMP.source_mat_id, domain=None, range=Optional[Union[str, List[str]]])

slots.pathogenicity = Slot(uri=MIXS['0000027'], name="pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=TEMP.pathogenicity, domain=None, range=Optional[str])

slots.biotic_relationship = Slot(uri=MIXS['0000028'], name="biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=TEMP.biotic_relationship, domain=None, range=Optional[str])

slots.specific_host = Slot(uri=MIXS['0000029'], name="specific_host", curie=MIXS.curie('0000029'),
                   model_uri=TEMP.specific_host, domain=None, range=Optional[str])

slots.host_spec_range = Slot(uri=MIXS['0000030'], name="host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=TEMP.host_spec_range, domain=None, range=Optional[Union[str, List[str]]])

slots.host_disease_stat = Slot(uri=MIXS['0000031'], name="host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.host_disease_stat, domain=None, range=Optional[Union[str, List[str]]])

slots.trophic_level = Slot(uri=MIXS['0000032'], name="trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=TEMP.trophic_level, domain=None, range=Optional[str])

slots.propagation = Slot(uri=MIXS['0000033'], name="propagation", curie=MIXS.curie('0000033'),
                   model_uri=TEMP.propagation, domain=None, range=Optional[str])

slots.encoded_traits = Slot(uri=MIXS['0000034'], name="encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=TEMP.encoded_traits, domain=None, range=Optional[str])

slots.source_uvig = Slot(uri=MIXS['0000035'], name="source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=TEMP.source_uvig, domain=None, range=Optional[str])

slots.virus_enrich_appr = Slot(uri=MIXS['0000036'], name="virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=TEMP.virus_enrich_appr, domain=None, range=Optional[str])

slots.nucl_acid_ext = Slot(uri=MIXS['0000037'], name="nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.nucl_acid_ext, domain=None, range=Optional[str])

slots.nucl_acid_amp = Slot(uri=MIXS['0000038'], name="nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=TEMP.nucl_acid_amp, domain=None, range=Optional[str])

slots.lib_size = Slot(uri=MIXS['0000039'], name="lib_size", curie=MIXS.curie('0000039'),
                   model_uri=TEMP.lib_size, domain=None, range=Optional[str])

slots.lib_reads_seqd = Slot(uri=MIXS['0000040'], name="lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=TEMP.lib_reads_seqd, domain=None, range=Optional[str])

slots.lib_layout = Slot(uri=MIXS['0000041'], name="lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=TEMP.lib_layout, domain=None, range=Optional[str])

slots.lib_vector = Slot(uri=MIXS['0000042'], name="lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=TEMP.lib_vector, domain=None, range=Optional[str])

slots.lib_screen = Slot(uri=MIXS['0000043'], name="lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=TEMP.lib_screen, domain=None, range=Optional[str])

slots.target_gene = Slot(uri=MIXS['0000044'], name="target_gene", curie=MIXS.curie('0000044'),
                   model_uri=TEMP.target_gene, domain=None, range=Optional[str])

slots.target_subfragment = Slot(uri=MIXS['0000045'], name="target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=TEMP.target_subfragment, domain=None, range=Optional[str])

slots.pcr_primers = Slot(uri=MIXS['0000046'], name="pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=TEMP.pcr_primers, domain=None, range=Optional[str])

slots.mid = Slot(uri=MIXS['0000047'], name="mid", curie=MIXS.curie('0000047'),
                   model_uri=TEMP.mid, domain=None, range=Optional[str])

slots.adapters = Slot(uri=MIXS['0000048'], name="adapters", curie=MIXS.curie('0000048'),
                   model_uri=TEMP.adapters, domain=None, range=Optional[str])

slots.pcr_cond = Slot(uri=MIXS['0000049'], name="pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=TEMP.pcr_cond, domain=None, range=Optional[str])

slots.seq_meth = Slot(uri=MIXS['0000050'], name="seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.seq_meth, domain=None, range=Optional[str])

slots.seq_quality_check = Slot(uri=MIXS['0000051'], name="seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=TEMP.seq_quality_check, domain=None, range=Optional[str])

slots.chimera_check = Slot(uri=MIXS['0000052'], name="chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=TEMP.chimera_check, domain=None, range=Optional[str])

slots.tax_ident = Slot(uri=MIXS['0000053'], name="tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=TEMP.tax_ident, domain=None, range=Optional[str])

slots.single_cell_lysis_prot = Slot(uri=MIXS['0000054'], name="single_cell_lysis_prot", curie=MIXS.curie('0000054'),
                   model_uri=TEMP.single_cell_lysis_prot, domain=None, range=Optional[str])

slots.wga_amp_appr = Slot(uri=MIXS['0000055'], name="wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=TEMP.wga_amp_appr, domain=None, range=Optional[str])

slots.assembly_qual = Slot(uri=MIXS['0000056'], name="assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=TEMP.assembly_qual, domain=None, range=Optional[str])

slots.assembly_name = Slot(uri=MIXS['0000057'], name="assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=TEMP.assembly_name, domain=None, range=Optional[str])

slots.assembly_software = Slot(uri=MIXS['0000058'], name="assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=TEMP.assembly_software, domain=None, range=Optional[str])

slots.annot = Slot(uri=MIXS['0000059'], name="annot", curie=MIXS.curie('0000059'),
                   model_uri=TEMP.annot, domain=None, range=Optional[str])

slots.number_contig = Slot(uri=MIXS['0000060'], name="number_contig", curie=MIXS.curie('0000060'),
                   model_uri=TEMP.number_contig, domain=None, range=Optional[str])

slots.feat_pred = Slot(uri=MIXS['0000061'], name="feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=TEMP.feat_pred, domain=None, range=Optional[str])

slots.ref_db = Slot(uri=MIXS['0000062'], name="ref_db", curie=MIXS.curie('0000062'),
                   model_uri=TEMP.ref_db, domain=None, range=Optional[str])

slots.sim_search_meth = Slot(uri=MIXS['0000063'], name="sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=TEMP.sim_search_meth, domain=None, range=Optional[str])

slots.tax_class = Slot(uri=MIXS['0000064'], name="tax_class", curie=MIXS.curie('0000064'),
                   model_uri=TEMP.tax_class, domain=None, range=Optional[str])

slots.x_16s_recover = Slot(uri=MIXS['0000065'], name="x_16s_recover", curie=MIXS.curie('0000065'),
                   model_uri=TEMP.x_16s_recover, domain=None, range=Optional[str])

slots.x_16s_recover_software = Slot(uri=MIXS['0000066'], name="x_16s_recover_software", curie=MIXS.curie('0000066'),
                   model_uri=TEMP.x_16s_recover_software, domain=None, range=Optional[str])

slots.trnas = Slot(uri=MIXS['0000067'], name="trnas", curie=MIXS.curie('0000067'),
                   model_uri=TEMP.trnas, domain=None, range=Optional[str])

slots.trna_ext_software = Slot(uri=MIXS['0000068'], name="trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=TEMP.trna_ext_software, domain=None, range=Optional[str])

slots.compl_score = Slot(uri=MIXS['0000069'], name="compl_score", curie=MIXS.curie('0000069'),
                   model_uri=TEMP.compl_score, domain=None, range=Optional[str])

slots.compl_software = Slot(uri=MIXS['0000070'], name="compl_software", curie=MIXS.curie('0000070'),
                   model_uri=TEMP.compl_software, domain=None, range=Optional[str])

slots.compl_appr = Slot(uri=MIXS['0000071'], name="compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=TEMP.compl_appr, domain=None, range=Optional[str])

slots.contam_score = Slot(uri=MIXS['0000072'], name="contam_score", curie=MIXS.curie('0000072'),
                   model_uri=TEMP.contam_score, domain=None, range=Optional[str])

slots.contam_screen_param = Slot(uri=MIXS['0000073'], name="contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=TEMP.contam_screen_param, domain=None, range=Optional[str])

slots.decontam_software = Slot(uri=MIXS['0000074'], name="decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=TEMP.decontam_software, domain=None, range=Optional[str])

slots.sort_tech = Slot(uri=MIXS['0000075'], name="sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=TEMP.sort_tech, domain=None, range=Optional[str])

slots.single_cell_lysis_appr = Slot(uri=MIXS['0000076'], name="single_cell_lysis_appr", curie=MIXS.curie('0000076'),
                   model_uri=TEMP.single_cell_lysis_appr, domain=None, range=Optional[str])

slots.bin_param = Slot(uri=MIXS['0000077'], name="bin_param", curie=MIXS.curie('0000077'),
                   model_uri=TEMP.bin_param, domain=None, range=Optional[str])

slots.bin_software = Slot(uri=MIXS['0000078'], name="bin_software", curie=MIXS.curie('0000078'),
                   model_uri=TEMP.bin_software, domain=None, range=Optional[str])

slots.reassembly_bin = Slot(uri=MIXS['0000079'], name="reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=TEMP.reassembly_bin, domain=None, range=Optional[str])

slots.mag_cov_software = Slot(uri=MIXS['0000080'], name="mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=TEMP.mag_cov_software, domain=None, range=Optional[str])

slots.vir_ident_software = Slot(uri=MIXS['0000081'], name="vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=TEMP.vir_ident_software, domain=None, range=Optional[str])

slots.pred_genome_type = Slot(uri=MIXS['0000082'], name="pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=TEMP.pred_genome_type, domain=None, range=Optional[str])

slots.pred_genome_struc = Slot(uri=MIXS['0000083'], name="pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=TEMP.pred_genome_struc, domain=None, range=Optional[str])

slots.detec_type = Slot(uri=MIXS['0000084'], name="detec_type", curie=MIXS.curie('0000084'),
                   model_uri=TEMP.detec_type, domain=None, range=Optional[str])

slots.otu_class_appr = Slot(uri=MIXS['0000085'], name="otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=TEMP.otu_class_appr, domain=None, range=Optional[str])

slots.otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=TEMP.otu_seq_comp_appr, domain=None, range=Optional[str])

slots.otu_db = Slot(uri=MIXS['0000087'], name="otu_db", curie=MIXS.curie('0000087'),
                   model_uri=TEMP.otu_db, domain=None, range=Optional[str])

slots.host_pred_appr = Slot(uri=MIXS['0000088'], name="host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=TEMP.host_pred_appr, domain=None, range=Optional[str])

slots.host_pred_est_acc = Slot(uri=MIXS['0000089'], name="host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=TEMP.host_pred_est_acc, domain=None, range=Optional[str])

slots.sop = Slot(uri=MIXS['0000090'], name="sop", curie=MIXS.curie('0000090'),
                   model_uri=TEMP.sop, domain=None, range=Optional[Union[str, List[str]]])

slots.associated_resource = Slot(uri=MIXS['0000091'], name="associated_resource", curie=MIXS.curie('0000091'),
                   model_uri=TEMP.associated_resource, domain=None, range=Optional[Union[str, List[str]]])

slots.project_name = Slot(uri=MIXS['0000092'], name="project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.project_name, domain=None, range=Optional[str])

slots.elev = Slot(uri=MIXS['0000093'], name="elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.elev, domain=None, range=Optional[str])

slots.alt = Slot(uri=MIXS['0000094'], name="alt", curie=MIXS.curie('0000094'),
                   model_uri=TEMP.alt, domain=None, range=Optional[str])

slots.samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.samp_vol_we_dna_ext, domain=None, range=Optional[str])

slots.temp = Slot(uri=MIXS['0000113'], name="temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.temp, domain=None, range=Optional[str])

slots.samp_name = Slot(uri=MIXS['0001107'], name="samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.samp_name, domain=None, range=Optional[str])

slots.samp_collec_method = Slot(uri=MIXS['0001225'], name="samp_collec_method", curie=MIXS.curie('0001225'),
                   model_uri=TEMP.samp_collec_method, domain=None, range=Optional[str])

slots.samp_taxon_id = Slot(uri=MIXS['0001320'], name="samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=TEMP.samp_taxon_id, domain=None, range=Optional[str])

slots.neg_cont_type = Slot(uri=MIXS['0001321'], name="neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=TEMP.neg_cont_type, domain=None, range=Optional[str])

slots.pos_cont_type = Slot(uri=MIXS['0001322'], name="pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=TEMP.pos_cont_type, domain=None, range=Optional[str])

slots.samp_collect_device = Slot(uri=TEMP.samp_collect_device, name="samp_collect_device", curie=TEMP.curie('samp_collect_device'),
                   model_uri=TEMP.samp_collect_device, domain=None, range=Optional[str])

slots.soil_depth = Slot(uri=MIXS['0000018'], name="soil_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.soil_depth, domain=Soil, range=Optional[str])

slots.assembly_quality = Slot(uri=TEMP.assembly_quality, name="assembly_quality", curie=TEMP.curie('assembly_quality'),
                   model_uri=TEMP.assembly_quality, domain=None, range=Optional[str])

slots.url = Slot(uri=TEMP.url, name="url", curie=TEMP.curie('url'),
                   model_uri=TEMP.url, domain=None, range=Optional[str])

slots.barometric_press = Slot(uri=TEMP.barometric_press, name="barometric_press", curie=TEMP.curie('barometric_press'),
                   model_uri=TEMP.barometric_press, domain=None, range=Optional[str])

slots.carb_dioxide = Slot(uri=TEMP.carb_dioxide, name="carb_dioxide", curie=TEMP.curie('carb_dioxide'),
                   model_uri=TEMP.carb_dioxide, domain=None, range=Optional[str])

slots.carb_monoxide = Slot(uri=TEMP.carb_monoxide, name="carb_monoxide", curie=TEMP.curie('carb_monoxide'),
                   model_uri=TEMP.carb_monoxide, domain=None, range=Optional[str])

slots.org_count_qpcr_info = Slot(uri=TEMP.org_count_qpcr_info, name="org_count_qpcr_info", curie=TEMP.curie('org_count_qpcr_info'),
                   model_uri=TEMP.org_count_qpcr_info, domain=None, range=Optional[str])

slots.humidity = Slot(uri=TEMP.humidity, name="humidity", curie=TEMP.curie('humidity'),
                   model_uri=TEMP.humidity, domain=None, range=Optional[str])

slots.methane = Slot(uri=TEMP.methane, name="methane", curie=TEMP.curie('methane'),
                   model_uri=TEMP.methane, domain=None, range=Optional[str])

slots.tot_nitro = Slot(uri=TEMP.tot_nitro, name="tot_nitro", curie=TEMP.curie('tot_nitro'),
                   model_uri=TEMP.tot_nitro, domain=None, range=Optional[str])

slots.organism_count = Slot(uri=TEMP.organism_count, name="organism_count", curie=TEMP.curie('organism_count'),
                   model_uri=TEMP.organism_count, domain=None, range=Optional[str])

slots.spikein_count = Slot(uri=TEMP.spikein_count, name="spikein_count", curie=TEMP.curie('spikein_count'),
                   model_uri=TEMP.spikein_count, domain=None, range=Optional[str])

slots.oxygen = Slot(uri=TEMP.oxygen, name="oxygen", curie=TEMP.curie('oxygen'),
                   model_uri=TEMP.oxygen, domain=None, range=Optional[str])

slots.tot_iron = Slot(uri=TEMP.tot_iron, name="tot_iron", curie=TEMP.curie('tot_iron'),
                   model_uri=TEMP.tot_iron, domain=None, range=Optional[str])

slots.diss_inorg_phosp = Slot(uri=TEMP.diss_inorg_phosp, name="diss_inorg_phosp", curie=TEMP.curie('diss_inorg_phosp'),
                   model_uri=TEMP.diss_inorg_phosp, domain=None, range=Optional[str])

slots.pollutants = Slot(uri=TEMP.pollutants, name="pollutants", curie=TEMP.curie('pollutants'),
                   model_uri=TEMP.pollutants, domain=None, range=Optional[str])

slots.air_particulate_matter_concentration = Slot(uri=TEMP.air_particulate_matter_concentration, name="air_particulate_matter_concentration", curie=TEMP.curie('air_particulate_matter_concentration'),
                   model_uri=TEMP.air_particulate_matter_concentration, domain=None, range=Optional[str])

slots.air_PM_concen = Slot(uri=TEMP.air_PM_concen, name="air_PM_concen", curie=TEMP.curie('air_PM_concen'),
                   model_uri=TEMP.air_PM_concen, domain=None, range=Optional[str])

slots.samp_salinity = Slot(uri=TEMP.samp_salinity, name="samp_salinity", curie=TEMP.curie('samp_salinity'),
                   model_uri=TEMP.samp_salinity, domain=None, range=Optional[str])

slots.samp_stor_temp = Slot(uri=TEMP.samp_stor_temp, name="samp_stor_temp", curie=TEMP.curie('samp_stor_temp'),
                   model_uri=TEMP.samp_stor_temp, domain=None, range=Optional[str])

slots.samp_store_temp = Slot(uri=TEMP.samp_store_temp, name="samp_store_temp", curie=TEMP.curie('samp_store_temp'),
                   model_uri=TEMP.samp_store_temp, domain=None, range=Optional[str])

slots.solar_irradiance = Slot(uri=TEMP.solar_irradiance, name="solar_irradiance", curie=TEMP.curie('solar_irradiance'),
                   model_uri=TEMP.solar_irradiance, domain=None, range=Optional[str])

slots.ventilation_rate = Slot(uri=TEMP.ventilation_rate, name="ventilation_rate", curie=TEMP.curie('ventilation_rate'),
                   model_uri=TEMP.ventilation_rate, domain=None, range=Optional[str])

slots.volatile_org_comp = Slot(uri=TEMP.volatile_org_comp, name="volatile_org_comp", curie=TEMP.curie('volatile_org_comp'),
                   model_uri=TEMP.volatile_org_comp, domain=None, range=Optional[str])

slots.samp_store_dur = Slot(uri=TEMP.samp_store_dur, name="samp_store_dur", curie=TEMP.curie('samp_store_dur'),
                   model_uri=TEMP.samp_store_dur, domain=None, range=Optional[str])

slots.samp_stor_dur = Slot(uri=TEMP.samp_stor_dur, name="samp_stor_dur", curie=TEMP.curie('samp_stor_dur'),
                   model_uri=TEMP.samp_stor_dur, domain=None, range=Optional[str])

slots.tot_phosp = Slot(uri=TEMP.tot_phosp, name="tot_phosp", curie=TEMP.curie('tot_phosp'),
                   model_uri=TEMP.tot_phosp, domain=None, range=Optional[str])

slots.wind_speed = Slot(uri=TEMP.wind_speed, name="wind_speed", curie=TEMP.curie('wind_speed'),
                   model_uri=TEMP.wind_speed, domain=None, range=Optional[str])

slots.diss_oxygen = Slot(uri=TEMP.diss_oxygen, name="diss_oxygen", curie=TEMP.curie('diss_oxygen'),
                   model_uri=TEMP.diss_oxygen, domain=None, range=Optional[str])

slots.tan = Slot(uri=TEMP.tan, name="tan", curie=TEMP.curie('tan'),
                   model_uri=TEMP.tan, domain=None, range=Optional[str])

slots.rel_air_humidity = Slot(uri=TEMP.rel_air_humidity, name="rel_air_humidity", curie=TEMP.curie('rel_air_humidity'),
                   model_uri=TEMP.rel_air_humidity, domain=None, range=Optional[str])

slots.abs_air_humidity = Slot(uri=TEMP.abs_air_humidity, name="abs_air_humidity", curie=TEMP.curie('abs_air_humidity'),
                   model_uri=TEMP.abs_air_humidity, domain=None, range=Optional[str])

slots.surf_humidity = Slot(uri=TEMP.surf_humidity, name="surf_humidity", curie=TEMP.curie('surf_humidity'),
                   model_uri=TEMP.surf_humidity, domain=None, range=Optional[str])

slots.air_temp = Slot(uri=MIXS['0000113'], name="air_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.air_temp, domain=Air, range=Optional[str])

slots.surf_temp = Slot(uri=TEMP.surf_temp, name="surf_temp", curie=TEMP.curie('surf_temp'),
                   model_uri=TEMP.surf_temp, domain=None, range=Optional[str])

slots.viscosity = Slot(uri=TEMP.viscosity, name="viscosity", curie=TEMP.curie('viscosity'),
                   model_uri=TEMP.viscosity, domain=None, range=Optional[str])

slots.pour_point = Slot(uri=TEMP.pour_point, name="pour_point", curie=TEMP.curie('pour_point'),
                   model_uri=TEMP.pour_point, domain=None, range=Optional[str])

slots.surf_moisture = Slot(uri=TEMP.surf_moisture, name="surf_moisture", curie=TEMP.curie('surf_moisture'),
                   model_uri=TEMP.surf_moisture, domain=None, range=Optional[str])

slots.dew_point = Slot(uri=TEMP.dew_point, name="dew_point", curie=TEMP.curie('dew_point'),
                   model_uri=TEMP.dew_point, domain=None, range=Optional[str])

slots.saturates_pc = Slot(uri=TEMP.saturates_pc, name="saturates_pc", curie=TEMP.curie('saturates_pc'),
                   model_uri=TEMP.saturates_pc, domain=None, range=Optional[str])

slots.aromatics_pc = Slot(uri=TEMP.aromatics_pc, name="aromatics_pc", curie=TEMP.curie('aromatics_pc'),
                   model_uri=TEMP.aromatics_pc, domain=None, range=Optional[str])

slots.resins_pc = Slot(uri=TEMP.resins_pc, name="resins_pc", curie=TEMP.curie('resins_pc'),
                   model_uri=TEMP.resins_pc, domain=None, range=Optional[str])

slots.asphaltenes_pc = Slot(uri=TEMP.asphaltenes_pc, name="asphaltenes_pc", curie=TEMP.curie('asphaltenes_pc'),
                   model_uri=TEMP.asphaltenes_pc, domain=None, range=Optional[str])

slots.samp_loc_corr_rate = Slot(uri=TEMP.samp_loc_corr_rate, name="samp_loc_corr_rate", curie=TEMP.curie('samp_loc_corr_rate'),
                   model_uri=TEMP.samp_loc_corr_rate, domain=None, range=Optional[str])

slots.glucosidase_act = Slot(uri=TEMP.glucosidase_act, name="glucosidase_act", curie=TEMP.curie('glucosidase_act'),
                   model_uri=TEMP.glucosidase_act, domain=None, range=Optional[str])

slots.diss_iron = Slot(uri=TEMP.diss_iron, name="diss_iron", curie=TEMP.curie('diss_iron'),
                   model_uri=TEMP.diss_iron, domain=None, range=Optional[str])

slots.amount_light = Slot(uri=TEMP.amount_light, name="amount_light", curie=TEMP.curie('amount_light'),
                   model_uri=TEMP.amount_light, domain=None, range=Optional[str])

slots.avg_dew_point = Slot(uri=TEMP.avg_dew_point, name="avg_dew_point", curie=TEMP.curie('avg_dew_point'),
                   model_uri=TEMP.avg_dew_point, domain=None, range=Optional[str])

slots.avg_temp = Slot(uri=TEMP.avg_temp, name="avg_temp", curie=TEMP.curie('avg_temp'),
                   model_uri=TEMP.avg_temp, domain=None, range=Optional[str])

slots.ceil_thermal_mass = Slot(uri=TEMP.ceil_thermal_mass, name="ceil_thermal_mass", curie=TEMP.curie('ceil_thermal_mass'),
                   model_uri=TEMP.ceil_thermal_mass, domain=None, range=Optional[str])

slots.exp_duct = Slot(uri=TEMP.exp_duct, name="exp_duct", curie=TEMP.curie('exp_duct'),
                   model_uri=TEMP.exp_duct, domain=None, range=Optional[str])

slots.built_struc_age = Slot(uri=TEMP.built_struc_age, name="built_struc_age", curie=TEMP.curie('built_struc_age'),
                   model_uri=TEMP.built_struc_age, domain=None, range=Optional[str])

slots.ceil_area = Slot(uri=TEMP.ceil_area, name="ceil_area", curie=TEMP.curie('ceil_area'),
                   model_uri=TEMP.ceil_area, domain=None, range=Optional[str])

slots.suspend_solids = Slot(uri=TEMP.suspend_solids, name="suspend_solids", curie=TEMP.curie('suspend_solids'),
                   model_uri=TEMP.suspend_solids, domain=None, range=Optional[str])

slots.vfa = Slot(uri=TEMP.vfa, name="vfa", curie=TEMP.curie('vfa'),
                   model_uri=TEMP.vfa, domain=None, range=Optional[str])

slots.benzene = Slot(uri=TEMP.benzene, name="benzene", curie=TEMP.curie('benzene'),
                   model_uri=TEMP.benzene, domain=None, range=Optional[str])

slots.toluene = Slot(uri=TEMP.toluene, name="toluene", curie=TEMP.curie('toluene'),
                   model_uri=TEMP.toluene, domain=None, range=Optional[str])

slots.ethylbenzene = Slot(uri=TEMP.ethylbenzene, name="ethylbenzene", curie=TEMP.curie('ethylbenzene'),
                   model_uri=TEMP.ethylbenzene, domain=None, range=Optional[str])

slots.xylene = Slot(uri=TEMP.xylene, name="xylene", curie=TEMP.curie('xylene'),
                   model_uri=TEMP.xylene, domain=None, range=Optional[str])

slots.api = Slot(uri=TEMP.api, name="api", curie=TEMP.curie('api'),
                   model_uri=TEMP.api, domain=None, range=Optional[str])

slots.door_size = Slot(uri=TEMP.door_size, name="door_size", curie=TEMP.curie('door_size'),
                   model_uri=TEMP.door_size, domain=None, range=Optional[str])

slots.diss_org_nitro = Slot(uri=TEMP.diss_org_nitro, name="diss_org_nitro", curie=TEMP.curie('diss_org_nitro'),
                   model_uri=TEMP.diss_org_nitro, domain=None, range=Optional[str])

slots.floor_age = Slot(uri=TEMP.floor_age, name="floor_age", curie=TEMP.curie('floor_age'),
                   model_uri=TEMP.floor_age, domain=None, range=Optional[str])

slots.floor_area = Slot(uri=TEMP.floor_area, name="floor_area", curie=TEMP.curie('floor_area'),
                   model_uri=TEMP.floor_area, domain=None, range=Optional[str])

slots.floor_thermal_mass = Slot(uri=TEMP.floor_thermal_mass, name="floor_thermal_mass", curie=TEMP.curie('floor_thermal_mass'),
                   model_uri=TEMP.floor_thermal_mass, domain=None, range=Optional[str])

slots.height_carper_fiber = Slot(uri=TEMP.height_carper_fiber, name="height_carper_fiber", curie=TEMP.curie('height_carper_fiber'),
                   model_uri=TEMP.height_carper_fiber, domain=None, range=Optional[str])

slots.inside_lux = Slot(uri=TEMP.inside_lux, name="inside_lux", curie=TEMP.curie('inside_lux'),
                   model_uri=TEMP.inside_lux, domain=None, range=Optional[str])

slots.room_air_exch_rate = Slot(uri=TEMP.room_air_exch_rate, name="room_air_exch_rate", curie=TEMP.curie('room_air_exch_rate'),
                   model_uri=TEMP.room_air_exch_rate, domain=None, range=Optional[str])

slots.ext_door = Slot(uri=TEMP.ext_door, name="ext_door", curie=TEMP.curie('ext_door'),
                   model_uri=TEMP.ext_door, domain=None, range=Optional[str])

slots.aminopept_act = Slot(uri=TEMP.aminopept_act, name="aminopept_act", curie=TEMP.curie('aminopept_act'),
                   model_uri=TEMP.aminopept_act, domain=None, range=Optional[str])

slots.bacteria_carb_prod = Slot(uri=TEMP.bacteria_carb_prod, name="bacteria_carb_prod", curie=TEMP.curie('bacteria_carb_prod'),
                   model_uri=TEMP.bacteria_carb_prod, domain=None, range=Optional[str])

slots.biomass = Slot(uri=TEMP.biomass, name="biomass", curie=TEMP.curie('biomass'),
                   model_uri=TEMP.biomass, domain=None, range=Optional[str])

slots.bishomohopanol = Slot(uri=TEMP.bishomohopanol, name="bishomohopanol", curie=TEMP.curie('bishomohopanol'),
                   model_uri=TEMP.bishomohopanol, domain=None, range=Optional[str])

slots.bromide = Slot(uri=TEMP.bromide, name="bromide", curie=TEMP.curie('bromide'),
                   model_uri=TEMP.bromide, domain=None, range=Optional[str])

slots.chlorophyll = Slot(uri=TEMP.chlorophyll, name="chlorophyll", curie=TEMP.curie('chlorophyll'),
                   model_uri=TEMP.chlorophyll, domain=None, range=Optional[str])

slots.diether_lipids = Slot(uri=TEMP.diether_lipids, name="diether_lipids", curie=TEMP.curie('diether_lipids'),
                   model_uri=TEMP.diether_lipids, domain=None, range=Optional[str])

slots.diss_hydrogen = Slot(uri=TEMP.diss_hydrogen, name="diss_hydrogen", curie=TEMP.curie('diss_hydrogen'),
                   model_uri=TEMP.diss_hydrogen, domain=None, range=Optional[str])

slots.phaeopigments = Slot(uri=TEMP.phaeopigments, name="phaeopigments", curie=TEMP.curie('phaeopigments'),
                   model_uri=TEMP.phaeopigments, domain=None, range=Optional[str])

slots.phosplipid_fatt_acid = Slot(uri=TEMP.phosplipid_fatt_acid, name="phosplipid_fatt_acid", curie=TEMP.curie('phosplipid_fatt_acid'),
                   model_uri=TEMP.phosplipid_fatt_acid, domain=None, range=Optional[str])

slots.redox_potential = Slot(uri=TEMP.redox_potential, name="redox_potential", curie=TEMP.curie('redox_potential'),
                   model_uri=TEMP.redox_potential, domain=None, range=Optional[str])

slots.salinity = Slot(uri=TEMP.salinity, name="salinity", curie=TEMP.curie('salinity'),
                   model_uri=TEMP.salinity, domain=None, range=Optional[str])

slots.silicate = Slot(uri=TEMP.silicate, name="silicate", curie=TEMP.curie('silicate'),
                   model_uri=TEMP.silicate, domain=None, range=Optional[str])

slots.water_content = Slot(uri=TEMP.water_content, name="water_content", curie=TEMP.curie('water_content'),
                   model_uri=TEMP.water_content, domain=None, range=Optional[str])

slots.rel_humidity_out = Slot(uri=TEMP.rel_humidity_out, name="rel_humidity_out", curie=TEMP.curie('rel_humidity_out'),
                   model_uri=TEMP.rel_humidity_out, domain=None, range=Optional[str])

slots.turbidity = Slot(uri=TEMP.turbidity, name="turbidity", curie=TEMP.curie('turbidity'),
                   model_uri=TEMP.turbidity, domain=None, range=Optional[str])

slots.room_dim = Slot(uri=TEMP.room_dim, name="room_dim", curie=TEMP.curie('room_dim'),
                   model_uri=TEMP.room_dim, domain=None, range=Optional[str])

slots.room_door_dist = Slot(uri=TEMP.room_door_dist, name="room_door_dist", curie=TEMP.curie('room_door_dist'),
                   model_uri=TEMP.room_door_dist, domain=None, range=Optional[str])

slots.room_net_area = Slot(uri=TEMP.room_net_area, name="room_net_area", curie=TEMP.curie('room_net_area'),
                   model_uri=TEMP.room_net_area, domain=None, range=Optional[str])

slots.room_vol = Slot(uri=TEMP.room_vol, name="room_vol", curie=TEMP.curie('room_vol'),
                   model_uri=TEMP.room_vol, domain=None, range=Optional[str])

slots.samp_time_out = Slot(uri=TEMP.samp_time_out, name="samp_time_out", curie=TEMP.curie('samp_time_out'),
                   model_uri=TEMP.samp_time_out, domain=None, range=Optional[str])

slots.temp_out = Slot(uri=TEMP.temp_out, name="temp_out", curie=TEMP.curie('temp_out'),
                   model_uri=TEMP.temp_out, domain=None, range=Optional[str])

slots.wall_area = Slot(uri=TEMP.wall_area, name="wall_area", curie=TEMP.curie('wall_area'),
                   model_uri=TEMP.wall_area, domain=None, range=Optional[str])

slots.water_current = Slot(uri=TEMP.water_current, name="water_current", curie=TEMP.curie('water_current'),
                   model_uri=TEMP.water_current, domain=None, range=Optional[str])

slots.org_matter = Slot(uri=TEMP.org_matter, name="org_matter", curie=TEMP.curie('org_matter'),
                   model_uri=TEMP.org_matter, domain=None, range=Optional[str])

slots.org_nitro = Slot(uri=TEMP.org_nitro, name="org_nitro", curie=TEMP.curie('org_nitro'),
                   model_uri=TEMP.org_nitro, domain=None, range=Optional[str])

slots.particle_class = Slot(uri=TEMP.particle_class, name="particle_class", curie=TEMP.curie('particle_class'),
                   model_uri=TEMP.particle_class, domain=None, range=Optional[str])

slots.porosity = Slot(uri=TEMP.porosity, name="porosity", curie=TEMP.curie('porosity'),
                   model_uri=TEMP.porosity, domain=None, range=Optional[str])

slots.specific_humidity = Slot(uri=TEMP.specific_humidity, name="specific_humidity", curie=TEMP.curie('specific_humidity'),
                   model_uri=TEMP.specific_humidity, domain=None, range=Optional[str])

slots.sewage_type = Slot(uri=TEMP.sewage_type, name="sewage_type", curie=TEMP.curie('sewage_type'),
                   model_uri=TEMP.sewage_type, domain=None, range=Optional[str])

slots.samp_sort_meth = Slot(uri=TEMP.samp_sort_meth, name="samp_sort_meth", curie=TEMP.curie('samp_sort_meth'),
                   model_uri=TEMP.samp_sort_meth, domain=None, range=Optional[str])

slots.occup_density_samp = Slot(uri=TEMP.occup_density_samp, name="occup_density_samp", curie=TEMP.curie('occup_density_samp'),
                   model_uri=TEMP.occup_density_samp, domain=None, range=Optional[str])

slots.address = Slot(uri=TEMP.address, name="address", curie=TEMP.curie('address'),
                   model_uri=TEMP.address, domain=None, range=Optional[str])

slots.adj_room = Slot(uri=TEMP.adj_room, name="adj_room", curie=TEMP.curie('adj_room'),
                   model_uri=TEMP.adj_room, domain=None, range=Optional[str])

slots.exp_pipe = Slot(uri=TEMP.exp_pipe, name="exp_pipe", curie=TEMP.curie('exp_pipe'),
                   model_uri=TEMP.exp_pipe, domain=None, range=Optional[str])

slots.wall_height = Slot(uri=TEMP.wall_height, name="wall_height", curie=TEMP.curie('wall_height'),
                   model_uri=TEMP.wall_height, domain=None, range=Optional[str])

slots.wall_thermal_mass = Slot(uri=TEMP.wall_thermal_mass, name="wall_thermal_mass", curie=TEMP.curie('wall_thermal_mass'),
                   model_uri=TEMP.wall_thermal_mass, domain=None, range=Optional[str])

slots.water_feat_size = Slot(uri=TEMP.water_feat_size, name="water_feat_size", curie=TEMP.curie('water_feat_size'),
                   model_uri=TEMP.water_feat_size, domain=None, range=Optional[str])

slots.window_size = Slot(uri=TEMP.window_size, name="window_size", curie=TEMP.curie('window_size'),
                   model_uri=TEMP.window_size, domain=None, range=Optional[str])

slots.floor_count = Slot(uri=TEMP.floor_count, name="floor_count", curie=TEMP.curie('floor_count'),
                   model_uri=TEMP.floor_count, domain=None, range=Optional[str])

slots.freq_clean = Slot(uri=TEMP.freq_clean, name="freq_clean", curie=TEMP.curie('freq_clean'),
                   model_uri=TEMP.freq_clean, domain=None, range=Optional[str])

slots.freq_cook = Slot(uri=TEMP.freq_cook, name="freq_cook", curie=TEMP.curie('freq_cook'),
                   model_uri=TEMP.freq_cook, domain=None, range=Optional[str])

slots.hall_count = Slot(uri=TEMP.hall_count, name="hall_count", curie=TEMP.curie('hall_count'),
                   model_uri=TEMP.hall_count, domain=None, range=Optional[str])

slots.max_occup = Slot(uri=TEMP.max_occup, name="max_occup", curie=TEMP.curie('max_occup'),
                   model_uri=TEMP.max_occup, domain=None, range=Optional[str])

slots.number_plants = Slot(uri=TEMP.number_plants, name="number_plants", curie=TEMP.curie('number_plants'),
                   model_uri=TEMP.number_plants, domain=None, range=Optional[str])

slots.number_pets = Slot(uri=TEMP.number_pets, name="number_pets", curie=TEMP.curie('number_pets'),
                   model_uri=TEMP.number_pets, domain=None, range=Optional[str])

slots.number_resident = Slot(uri=TEMP.number_resident, name="number_resident", curie=TEMP.curie('number_resident'),
                   model_uri=TEMP.number_resident, domain=None, range=Optional[str])

slots.room_architec_elem = Slot(uri=TEMP.room_architec_elem, name="room_architec_elem", curie=TEMP.curie('room_architec_elem'),
                   model_uri=TEMP.room_architec_elem, domain=None, range=Optional[str])

slots.room_count = Slot(uri=TEMP.room_count, name="room_count", curie=TEMP.curie('room_count'),
                   model_uri=TEMP.room_count, domain=None, range=Optional[str])

slots.room_moist_dam_hist = Slot(uri=TEMP.room_moist_dam_hist, name="room_moist_dam_hist", curie=TEMP.curie('room_moist_dam_hist'),
                   model_uri=TEMP.room_moist_dam_hist, domain=None, range=Optional[str])

slots.room_occup = Slot(uri=TEMP.room_occup, name="room_occup", curie=TEMP.curie('room_occup'),
                   model_uri=TEMP.room_occup, domain=None, range=Optional[str])

slots.room_window_count = Slot(uri=TEMP.room_window_count, name="room_window_count", curie=TEMP.curie('room_window_count'),
                   model_uri=TEMP.room_window_count, domain=None, range=Optional[str])

slots.room_hallway = Slot(uri=TEMP.room_hallway, name="room_hallway", curie=TEMP.curie('room_hallway'),
                   model_uri=TEMP.room_hallway, domain=None, range=Optional[str])

slots.room_door_share = Slot(uri=TEMP.room_door_share, name="room_door_share", curie=TEMP.curie('room_door_share'),
                   model_uri=TEMP.room_door_share, domain=None, range=Optional[str])

slots.room_wall_share = Slot(uri=TEMP.room_wall_share, name="room_wall_share", curie=TEMP.curie('room_wall_share'),
                   model_uri=TEMP.room_wall_share, domain=None, range=Optional[str])

slots.samp_room_id = Slot(uri=TEMP.samp_room_id, name="samp_room_id", curie=TEMP.curie('samp_room_id'),
                   model_uri=TEMP.samp_room_id, domain=None, range=Optional[str])

slots.shading_device_mat = Slot(uri=TEMP.shading_device_mat, name="shading_device_mat", curie=TEMP.curie('shading_device_mat'),
                   model_uri=TEMP.shading_device_mat, domain=None, range=Optional[str])

slots.window_open_freq = Slot(uri=TEMP.window_open_freq, name="window_open_freq", curie=TEMP.curie('window_open_freq'),
                   model_uri=TEMP.window_open_freq, domain=None, range=Optional[str])

slots.ances_data = Slot(uri=TEMP.ances_data, name="ances_data", curie=TEMP.curie('ances_data'),
                   model_uri=TEMP.ances_data, domain=None, range=Optional[str])

slots.host_common_name = Slot(uri=TEMP.host_common_name, name="host_common_name", curie=TEMP.curie('host_common_name'),
                   model_uri=TEMP.host_common_name, domain=None, range=Optional[str])

slots.samp_dis_stage = Slot(uri=TEMP.samp_dis_stage, name="samp_dis_stage", curie=TEMP.curie('samp_dis_stage'),
                   model_uri=TEMP.samp_dis_stage, domain=None, range=Optional[str])

slots.host_taxid = Slot(uri=TEMP.host_taxid, name="host_taxid", curie=TEMP.curie('host_taxid'),
                   model_uri=TEMP.host_taxid, domain=None, range=Optional[str])

slots.host_life_stage = Slot(uri=TEMP.host_life_stage, name="host_life_stage", curie=TEMP.curie('host_life_stage'),
                   model_uri=TEMP.host_life_stage, domain=None, range=Optional[str])

slots.host_substrate = Slot(uri=TEMP.host_substrate, name="host_substrate", curie=TEMP.curie('host_substrate'),
                   model_uri=TEMP.host_substrate, domain=None, range=Optional[str])

slots.host_infra_specific_name = Slot(uri=TEMP.host_infra_specific_name, name="host_infra_specific_name", curie=TEMP.curie('host_infra_specific_name'),
                   model_uri=TEMP.host_infra_specific_name, domain=None, range=Optional[str])

slots.host_infra_specific_rank = Slot(uri=TEMP.host_infra_specific_rank, name="host_infra_specific_rank", curie=TEMP.curie('host_infra_specific_rank'),
                   model_uri=TEMP.host_infra_specific_rank, domain=None, range=Optional[str])

slots.host_age = Slot(uri=TEMP.host_age, name="host_age", curie=TEMP.curie('host_age'),
                   model_uri=TEMP.host_age, domain=None, range=Optional[str])

slots.host_length = Slot(uri=TEMP.host_length, name="host_length", curie=TEMP.curie('host_length'),
                   model_uri=TEMP.host_length, domain=None, range=Optional[str])

slots.host_dry_mass = Slot(uri=TEMP.host_dry_mass, name="host_dry_mass", curie=TEMP.curie('host_dry_mass'),
                   model_uri=TEMP.host_dry_mass, domain=None, range=Optional[str])

slots.blood_press_diast = Slot(uri=TEMP.blood_press_diast, name="blood_press_diast", curie=TEMP.curie('blood_press_diast'),
                   model_uri=TEMP.blood_press_diast, domain=None, range=Optional[str])

slots.blood_press_syst = Slot(uri=TEMP.blood_press_syst, name="blood_press_syst", curie=TEMP.curie('blood_press_syst'),
                   model_uri=TEMP.blood_press_syst, domain=None, range=Optional[str])

slots.host_color = Slot(uri=TEMP.host_color, name="host_color", curie=TEMP.curie('host_color'),
                   model_uri=TEMP.host_color, domain=None, range=Optional[str])

slots.host_shape = Slot(uri=TEMP.host_shape, name="host_shape", curie=TEMP.curie('host_shape'),
                   model_uri=TEMP.host_shape, domain=None, range=Optional[str])

slots.smoker = Slot(uri=TEMP.smoker, name="smoker", curie=TEMP.curie('smoker'),
                   model_uri=TEMP.smoker, domain=None, range=Optional[str])

slots.host_tot_mass = Slot(uri=TEMP.host_tot_mass, name="host_tot_mass", curie=TEMP.curie('host_tot_mass'),
                   model_uri=TEMP.host_tot_mass, domain=None, range=Optional[str])

slots.host_height = Slot(uri=TEMP.host_height, name="host_height", curie=TEMP.curie('host_height'),
                   model_uri=TEMP.host_height, domain=None, range=Optional[str])

slots.host_hiv_stat = Slot(uri=TEMP.host_hiv_stat, name="host_hiv_stat", curie=TEMP.curie('host_hiv_stat'),
                   model_uri=TEMP.host_hiv_stat, domain=None, range=Optional[str])

slots.diet_last_six_month = Slot(uri=TEMP.diet_last_six_month, name="diet_last_six_month", curie=TEMP.curie('diet_last_six_month'),
                   model_uri=TEMP.diet_last_six_month, domain=None, range=Optional[str])

slots.pet_farm_animal = Slot(uri=TEMP.pet_farm_animal, name="pet_farm_animal", curie=TEMP.curie('pet_farm_animal'),
                   model_uri=TEMP.pet_farm_animal, domain=None, range=Optional[str])

slots.travel_out_six_month = Slot(uri=TEMP.travel_out_six_month, name="travel_out_six_month", curie=TEMP.curie('travel_out_six_month'),
                   model_uri=TEMP.travel_out_six_month, domain=None, range=Optional[str])

slots.pulmonary_disord = Slot(uri=TEMP.pulmonary_disord, name="pulmonary_disord", curie=TEMP.curie('pulmonary_disord'),
                   model_uri=TEMP.pulmonary_disord, domain=None, range=Optional[str])

slots.nose_throat_disord = Slot(uri=TEMP.nose_throat_disord, name="nose_throat_disord", curie=TEMP.curie('nose_throat_disord'),
                   model_uri=TEMP.nose_throat_disord, domain=None, range=Optional[str])

slots.blood_blood_disord = Slot(uri=TEMP.blood_blood_disord, name="blood_blood_disord", curie=TEMP.curie('blood_blood_disord'),
                   model_uri=TEMP.blood_blood_disord, domain=None, range=Optional[str])

slots.gestation_state = Slot(uri=TEMP.gestation_state, name="gestation_state", curie=TEMP.curie('gestation_state'),
                   model_uri=TEMP.gestation_state, domain=None, range=Optional[str])

slots.maternal_health_stat = Slot(uri=TEMP.maternal_health_stat, name="maternal_health_stat", curie=TEMP.curie('maternal_health_stat'),
                   model_uri=TEMP.maternal_health_stat, domain=None, range=Optional[str])

slots.host_body_temp = Slot(uri=TEMP.host_body_temp, name="host_body_temp", curie=TEMP.curie('host_body_temp'),
                   model_uri=TEMP.host_body_temp, domain=None, range=Optional[str])

slots.foetal_health_stat = Slot(uri=TEMP.foetal_health_stat, name="foetal_health_stat", curie=TEMP.curie('foetal_health_stat'),
                   model_uri=TEMP.foetal_health_stat, domain=None, range=Optional[str])

slots.amniotic_fluid_color = Slot(uri=TEMP.amniotic_fluid_color, name="amniotic_fluid_color", curie=TEMP.curie('amniotic_fluid_color'),
                   model_uri=TEMP.amniotic_fluid_color, domain=None, range=Optional[str])

slots.kidney_disord = Slot(uri=TEMP.kidney_disord, name="kidney_disord", curie=TEMP.curie('kidney_disord'),
                   model_uri=TEMP.kidney_disord, domain=None, range=Optional[str])

slots.urogenit_tract_disor = Slot(uri=TEMP.urogenit_tract_disor, name="urogenit_tract_disor", curie=TEMP.curie('urogenit_tract_disor'),
                   model_uri=TEMP.urogenit_tract_disor, domain=None, range=Optional[str])

slots.gastrointest_disord = Slot(uri=TEMP.gastrointest_disord, name="gastrointest_disord", curie=TEMP.curie('gastrointest_disord'),
                   model_uri=TEMP.gastrointest_disord, domain=None, range=Optional[str])

slots.liver_disord = Slot(uri=TEMP.liver_disord, name="liver_disord", curie=TEMP.curie('liver_disord'),
                   model_uri=TEMP.liver_disord, domain=None, range=Optional[str])

slots.dermatology_disord = Slot(uri=TEMP.dermatology_disord, name="dermatology_disord", curie=TEMP.curie('dermatology_disord'),
                   model_uri=TEMP.dermatology_disord, domain=None, range=Optional[str])

slots.sexual_act = Slot(uri=TEMP.sexual_act, name="sexual_act", curie=TEMP.curie('sexual_act'),
                   model_uri=TEMP.sexual_act, domain=None, range=Optional[str])

slots.birth_control = Slot(uri=TEMP.birth_control, name="birth_control", curie=TEMP.curie('birth_control'),
                   model_uri=TEMP.birth_control, domain=None, range=Optional[str])

slots.hysterectomy = Slot(uri=TEMP.hysterectomy, name="hysterectomy", curie=TEMP.curie('hysterectomy'),
                   model_uri=TEMP.hysterectomy, domain=None, range=Optional[str])

slots.gynecologic_disord = Slot(uri=TEMP.gynecologic_disord, name="gynecologic_disord", curie=TEMP.curie('gynecologic_disord'),
                   model_uri=TEMP.gynecologic_disord, domain=None, range=Optional[str])

slots.urogenit_disord = Slot(uri=TEMP.urogenit_disord, name="urogenit_disord", curie=TEMP.curie('urogenit_disord'),
                   model_uri=TEMP.urogenit_disord, domain=None, range=Optional[str])

slots.basin = Slot(uri=TEMP.basin, name="basin", curie=TEMP.curie('basin'),
                   model_uri=TEMP.basin, domain=None, range=Optional[str])

slots.field = Slot(uri=TEMP.field, name="field", curie=TEMP.curie('field'),
                   model_uri=TEMP.field, domain=None, range=Optional[str])

slots.weight_loss_3_month = Slot(uri=TEMP.weight_loss_3_month, name="weight_loss_3_month", curie=TEMP.curie('weight_loss_3_month'),
                   model_uri=TEMP.weight_loss_3_month, domain=None, range=Optional[str])

slots.samp_well_name = Slot(uri=TEMP.samp_well_name, name="samp_well_name", curie=TEMP.curie('samp_well_name'),
                   model_uri=TEMP.samp_well_name, domain=None, range=Optional[str])

slots.win = Slot(uri=TEMP.win, name="win", curie=TEMP.curie('win'),
                   model_uri=TEMP.win, domain=None, range=Optional[str])

slots.alkalinity_method = Slot(uri=TEMP.alkalinity_method, name="alkalinity_method", curie=TEMP.curie('alkalinity_method'),
                   model_uri=TEMP.alkalinity_method, domain=None, range=Optional[str])

slots.additional_info = Slot(uri=TEMP.additional_info, name="additional_info", curie=TEMP.curie('additional_info'),
                   model_uri=TEMP.additional_info, domain=None, range=Optional[str])

slots.reservoir = Slot(uri=TEMP.reservoir, name="reservoir", curie=TEMP.curie('reservoir'),
                   model_uri=TEMP.reservoir, domain=None, range=Optional[str])

slots.carb_nitro_ratio = Slot(uri=TEMP.carb_nitro_ratio, name="carb_nitro_ratio", curie=TEMP.curie('carb_nitro_ratio'),
                   model_uri=TEMP.carb_nitro_ratio, domain=None, range=Optional[str])

slots.cur_vegetation = Slot(uri=TEMP.cur_vegetation, name="cur_vegetation", curie=TEMP.curie('cur_vegetation'),
                   model_uri=TEMP.cur_vegetation, domain=None, range=Optional[str])

slots.cur_vegetation_meth = Slot(uri=TEMP.cur_vegetation_meth, name="cur_vegetation_meth", curie=TEMP.curie('cur_vegetation_meth'),
                   model_uri=TEMP.cur_vegetation_meth, domain=None, range=Optional[str])

slots.previous_land_use = Slot(uri=TEMP.previous_land_use, name="previous_land_use", curie=TEMP.curie('previous_land_use'),
                   model_uri=TEMP.previous_land_use, domain=None, range=Optional[str])

slots.previous_land_use_meth = Slot(uri=TEMP.previous_land_use_meth, name="previous_land_use_meth", curie=TEMP.curie('previous_land_use_meth'),
                   model_uri=TEMP.previous_land_use_meth, domain=None, range=Optional[str])

slots.prev_land_use_meth = Slot(uri=TEMP.prev_land_use_meth, name="prev_land_use_meth", curie=TEMP.curie('prev_land_use_meth'),
                   model_uri=TEMP.prev_land_use_meth, domain=None, range=Optional[str])

slots.host_body_mass_index = Slot(uri=TEMP.host_body_mass_index, name="host_body_mass_index", curie=TEMP.curie('host_body_mass_index'),
                   model_uri=TEMP.host_body_mass_index, domain=None, range=Optional[str])

slots.crop_rotation = Slot(uri=TEMP.crop_rotation, name="crop_rotation", curie=TEMP.curie('crop_rotation'),
                   model_uri=TEMP.crop_rotation, domain=None, range=Optional[str])

slots.flooding = Slot(uri=TEMP.flooding, name="flooding", curie=TEMP.curie('flooding'),
                   model_uri=TEMP.flooding, domain=None, range=Optional[str])

slots.extreme_event = Slot(uri=TEMP.extreme_event, name="extreme_event", curie=TEMP.curie('extreme_event'),
                   model_uri=TEMP.extreme_event, domain=None, range=Optional[str])

slots.horizon_meth = Slot(uri=TEMP.horizon_meth, name="horizon_meth", curie=TEMP.curie('horizon_meth'),
                   model_uri=TEMP.horizon_meth, domain=None, range=Optional[str])

slots.sieving = Slot(uri=TEMP.sieving, name="sieving", curie=TEMP.curie('sieving'),
                   model_uri=TEMP.sieving, domain=None, range=Optional[str])

slots.water_cont_soil_meth = Slot(uri=TEMP.water_cont_soil_meth, name="water_cont_soil_meth", curie=TEMP.curie('water_cont_soil_meth'),
                   model_uri=TEMP.water_cont_soil_meth, domain=None, range=Optional[str])

slots.al_sat_meth = Slot(uri=TEMP.al_sat_meth, name="al_sat_meth", curie=TEMP.curie('al_sat_meth'),
                   model_uri=TEMP.al_sat_meth, domain=None, range=Optional[str])

slots.pool_dna_extracts = Slot(uri=TEMP.pool_dna_extracts, name="pool_dna_extracts", curie=TEMP.curie('pool_dna_extracts'),
                   model_uri=TEMP.pool_dna_extracts, domain=None, range=Optional[str])

slots.twin_sibling = Slot(uri=TEMP.twin_sibling, name="twin_sibling", curie=TEMP.curie('twin_sibling'),
                   model_uri=TEMP.twin_sibling, domain=None, range=Optional[str])

slots.store_cond = Slot(uri=TEMP.store_cond, name="store_cond", curie=TEMP.curie('store_cond'),
                   model_uri=TEMP.store_cond, domain=None, range=Optional[str])

slots.link_climate_info = Slot(uri=TEMP.link_climate_info, name="link_climate_info", curie=TEMP.curie('link_climate_info'),
                   model_uri=TEMP.link_climate_info, domain=None, range=Optional[str])

slots.link_class_info = Slot(uri=TEMP.link_class_info, name="link_class_info", curie=TEMP.curie('link_class_info'),
                   model_uri=TEMP.link_class_info, domain=None, range=Optional[str])

slots.local_class = Slot(uri=TEMP.local_class, name="local_class", curie=TEMP.curie('local_class'),
                   model_uri=TEMP.local_class, domain=None, range=Optional[str])

slots.local_class_meth = Slot(uri=TEMP.local_class_meth, name="local_class_meth", curie=TEMP.curie('local_class_meth'),
                   model_uri=TEMP.local_class_meth, domain=None, range=Optional[str])

slots.soil_type = Slot(uri=TEMP.soil_type, name="soil_type", curie=TEMP.curie('soil_type'),
                   model_uri=TEMP.soil_type, domain=None, range=Optional[str])

slots.host_pulse = Slot(uri=TEMP.host_pulse, name="host_pulse", curie=TEMP.curie('host_pulse'),
                   model_uri=TEMP.host_pulse, domain=None, range=Optional[str])

slots.soil_type_meth = Slot(uri=TEMP.soil_type_meth, name="soil_type_meth", curie=TEMP.curie('soil_type_meth'),
                   model_uri=TEMP.soil_type_meth, domain=None, range=Optional[str])

slots.texture = Slot(uri=TEMP.texture, name="texture", curie=TEMP.curie('texture'),
                   model_uri=TEMP.texture, domain=None, range=Optional[str])

slots.soil_text_measure = Slot(uri=TEMP.soil_text_measure, name="soil_text_measure", curie=TEMP.curie('soil_text_measure'),
                   model_uri=TEMP.soil_text_measure, domain=None, range=Optional[str])

slots.texture_meth = Slot(uri=TEMP.texture_meth, name="texture_meth", curie=TEMP.curie('texture_meth'),
                   model_uri=TEMP.texture_meth, domain=None, range=Optional[str])

slots.soil_texture_meth = Slot(uri=TEMP.soil_texture_meth, name="soil_texture_meth", curie=TEMP.curie('soil_texture_meth'),
                   model_uri=TEMP.soil_texture_meth, domain=None, range=Optional[str])

slots.tot_org_c_meth = Slot(uri=TEMP.tot_org_c_meth, name="tot_org_c_meth", curie=TEMP.curie('tot_org_c_meth'),
                   model_uri=TEMP.tot_org_c_meth, domain=None, range=Optional[str])

slots.tot_n_meth = Slot(uri=TEMP.tot_n_meth, name="tot_n_meth", curie=TEMP.curie('tot_n_meth'),
                   model_uri=TEMP.tot_n_meth, domain=None, range=Optional[str])

slots.tot_nitro_cont_meth = Slot(uri=TEMP.tot_nitro_cont_meth, name="tot_nitro_cont_meth", curie=TEMP.curie('tot_nitro_cont_meth'),
                   model_uri=TEMP.tot_nitro_cont_meth, domain=None, range=Optional[str])

slots.microbial_biomass_meth = Slot(uri=TEMP.microbial_biomass_meth, name="microbial_biomass_meth", curie=TEMP.curie('microbial_biomass_meth'),
                   model_uri=TEMP.microbial_biomass_meth, domain=None, range=Optional[str])

slots.micro_biomass_meth = Slot(uri=TEMP.micro_biomass_meth, name="micro_biomass_meth", curie=TEMP.curie('micro_biomass_meth'),
                   model_uri=TEMP.micro_biomass_meth, domain=None, range=Optional[str])

slots.link_addit_analys = Slot(uri=TEMP.link_addit_analys, name="link_addit_analys", curie=TEMP.curie('link_addit_analys'),
                   model_uri=TEMP.link_addit_analys, domain=None, range=Optional[str])

slots.salinity_meth = Slot(uri=TEMP.salinity_meth, name="salinity_meth", curie=TEMP.curie('salinity_meth'),
                   model_uri=TEMP.salinity_meth, domain=None, range=Optional[str])

slots.heavy_metals_meth = Slot(uri=TEMP.heavy_metals_meth, name="heavy_metals_meth", curie=TEMP.curie('heavy_metals_meth'),
                   model_uri=TEMP.heavy_metals_meth, domain=None, range=Optional[str])

slots.pre_treatment = Slot(uri=TEMP.pre_treatment, name="pre_treatment", curie=TEMP.curie('pre_treatment'),
                   model_uri=TEMP.pre_treatment, domain=None, range=Optional[str])

slots.primary_treatment = Slot(uri=TEMP.primary_treatment, name="primary_treatment", curie=TEMP.curie('primary_treatment'),
                   model_uri=TEMP.primary_treatment, domain=None, range=Optional[str])

slots.reactor_type = Slot(uri=TEMP.reactor_type, name="reactor_type", curie=TEMP.curie('reactor_type'),
                   model_uri=TEMP.reactor_type, domain=None, range=Optional[str])

slots.secondary_treatment = Slot(uri=TEMP.secondary_treatment, name="secondary_treatment", curie=TEMP.curie('secondary_treatment'),
                   model_uri=TEMP.secondary_treatment, domain=None, range=Optional[str])

slots.tertiary_treatment = Slot(uri=TEMP.tertiary_treatment, name="tertiary_treatment", curie=TEMP.curie('tertiary_treatment'),
                   model_uri=TEMP.tertiary_treatment, domain=None, range=Optional[str])

slots.wastewater_type = Slot(uri=TEMP.wastewater_type, name="wastewater_type", curie=TEMP.curie('wastewater_type'),
                   model_uri=TEMP.wastewater_type, domain=None, range=Optional[str])

slots.host_genotype = Slot(uri=TEMP.host_genotype, name="host_genotype", curie=TEMP.curie('host_genotype'),
                   model_uri=TEMP.host_genotype, domain=None, range=Optional[str])

slots.hcr_temp = Slot(uri=TEMP.hcr_temp, name="hcr_temp", curie=TEMP.curie('hcr_temp'),
                   model_uri=TEMP.hcr_temp, domain=None, range=Optional[str])

slots.tvdss_of_hcr_temp = Slot(uri=TEMP.tvdss_of_hcr_temp, name="tvdss_of_hcr_temp", curie=TEMP.curie('tvdss_of_hcr_temp'),
                   model_uri=TEMP.tvdss_of_hcr_temp, domain=None, range=Optional[str])

slots.hcr_pressure = Slot(uri=TEMP.hcr_pressure, name="hcr_pressure", curie=TEMP.curie('hcr_pressure'),
                   model_uri=TEMP.hcr_pressure, domain=None, range=Optional[str])

slots.tvdss_of_hcr_press = Slot(uri=TEMP.tvdss_of_hcr_press, name="tvdss_of_hcr_press", curie=TEMP.curie('tvdss_of_hcr_press'),
                   model_uri=TEMP.tvdss_of_hcr_press, domain=None, range=Optional[str])

slots.permeability = Slot(uri=TEMP.permeability, name="permeability", curie=TEMP.curie('permeability'),
                   model_uri=TEMP.permeability, domain=None, range=Optional[str])

slots.owc_tvdss = Slot(uri=TEMP.owc_tvdss, name="owc_tvdss", curie=TEMP.curie('owc_tvdss'),
                   model_uri=TEMP.owc_tvdss, domain=None, range=Optional[str])

slots.hcr_fw_salinity = Slot(uri=TEMP.hcr_fw_salinity, name="hcr_fw_salinity", curie=TEMP.curie('hcr_fw_salinity'),
                   model_uri=TEMP.hcr_fw_salinity, domain=None, range=Optional[str])

slots.sulfate_fw = Slot(uri=TEMP.sulfate_fw, name="sulfate_fw", curie=TEMP.curie('sulfate_fw'),
                   model_uri=TEMP.sulfate_fw, domain=None, range=Optional[str])

slots.vfa_fw = Slot(uri=TEMP.vfa_fw, name="vfa_fw", curie=TEMP.curie('vfa_fw'),
                   model_uri=TEMP.vfa_fw, domain=None, range=Optional[str])

slots.samp_tvdss = Slot(uri=TEMP.samp_tvdss, name="samp_tvdss", curie=TEMP.curie('samp_tvdss'),
                   model_uri=TEMP.samp_tvdss, domain=None, range=Optional[str])

slots.samp_transport_cond = Slot(uri=TEMP.samp_transport_cond, name="samp_transport_cond", curie=TEMP.curie('samp_transport_cond'),
                   model_uri=TEMP.samp_transport_cond, domain=None, range=Optional[str])

slots.pressure = Slot(uri=TEMP.pressure, name="pressure", curie=TEMP.curie('pressure'),
                   model_uri=TEMP.pressure, domain=None, range=Optional[str])

slots.samp_md = Slot(uri=TEMP.samp_md, name="samp_md", curie=TEMP.curie('samp_md'),
                   model_uri=TEMP.samp_md, domain=None, range=Optional[str])

slots.tot_sulfur = Slot(uri=TEMP.tot_sulfur, name="tot_sulfur", curie=TEMP.curie('tot_sulfur'),
                   model_uri=TEMP.tot_sulfur, domain=None, range=Optional[str])

slots.alkalinity = Slot(uri=TEMP.alkalinity, name="alkalinity", curie=TEMP.curie('alkalinity'),
                   model_uri=TEMP.alkalinity, domain=None, range=Optional[str])

slots.sulfate = Slot(uri=TEMP.sulfate, name="sulfate", curie=TEMP.curie('sulfate'),
                   model_uri=TEMP.sulfate, domain=None, range=Optional[str])

slots.sulfide = Slot(uri=TEMP.sulfide, name="sulfide", curie=TEMP.curie('sulfide'),
                   model_uri=TEMP.sulfide, domain=None, range=Optional[str])

slots.nitrate = Slot(uri=TEMP.nitrate, name="nitrate", curie=TEMP.curie('nitrate'),
                   model_uri=TEMP.nitrate, domain=None, range=Optional[str])

slots.nitrite = Slot(uri=TEMP.nitrite, name="nitrite", curie=TEMP.curie('nitrite'),
                   model_uri=TEMP.nitrite, domain=None, range=Optional[str])

slots.ammonium = Slot(uri=TEMP.ammonium, name="ammonium", curie=TEMP.curie('ammonium'),
                   model_uri=TEMP.ammonium, domain=None, range=Optional[str])

slots.sodium = Slot(uri=TEMP.sodium, name="sodium", curie=TEMP.curie('sodium'),
                   model_uri=TEMP.sodium, domain=None, range=Optional[str])

slots.chloride = Slot(uri=TEMP.chloride, name="chloride", curie=TEMP.curie('chloride'),
                   model_uri=TEMP.chloride, domain=None, range=Optional[str])

slots.potassium = Slot(uri=TEMP.potassium, name="potassium", curie=TEMP.curie('potassium'),
                   model_uri=TEMP.potassium, domain=None, range=Optional[str])

slots.magnesium = Slot(uri=TEMP.magnesium, name="magnesium", curie=TEMP.curie('magnesium'),
                   model_uri=TEMP.magnesium, domain=None, range=Optional[str])

slots.calcium = Slot(uri=TEMP.calcium, name="calcium", curie=TEMP.curie('calcium'),
                   model_uri=TEMP.calcium, domain=None, range=Optional[str])

slots.diss_org_carb = Slot(uri=TEMP.diss_org_carb, name="diss_org_carb", curie=TEMP.curie('diss_org_carb'),
                   model_uri=TEMP.diss_org_carb, domain=None, range=Optional[str])

slots.diss_inorg_carb = Slot(uri=TEMP.diss_inorg_carb, name="diss_inorg_carb", curie=TEMP.curie('diss_inorg_carb'),
                   model_uri=TEMP.diss_inorg_carb, domain=None, range=Optional[str])

slots.density = Slot(uri=TEMP.density, name="density", curie=TEMP.curie('density'),
                   model_uri=TEMP.density, domain=None, range=Optional[str])

slots.diss_carb_dioxide = Slot(uri=TEMP.diss_carb_dioxide, name="diss_carb_dioxide", curie=TEMP.curie('diss_carb_dioxide'),
                   model_uri=TEMP.diss_carb_dioxide, domain=None, range=Optional[str])

slots.diss_oxygen_fluid = Slot(uri=TEMP.diss_oxygen_fluid, name="diss_oxygen_fluid", curie=TEMP.curie('diss_oxygen_fluid'),
                   model_uri=TEMP.diss_oxygen_fluid, domain=None, range=Optional[str])

slots.prod_rate = Slot(uri=TEMP.prod_rate, name="prod_rate", curie=TEMP.curie('prod_rate'),
                   model_uri=TEMP.prod_rate, domain=None, range=Optional[str])

slots.water_prod_rate = Slot(uri=TEMP.water_prod_rate, name="water_prod_rate", curie=TEMP.curie('water_prod_rate'),
                   model_uri=TEMP.water_prod_rate, domain=None, range=Optional[str])

slots.water_cut = Slot(uri=TEMP.water_cut, name="water_cut", curie=TEMP.curie('water_cut'),
                   model_uri=TEMP.water_cut, domain=None, range=Optional[str])

slots.iwf = Slot(uri=TEMP.iwf, name="iwf", curie=TEMP.curie('iwf'),
                   model_uri=TEMP.iwf, domain=None, range=Optional[str])

slots.biocide_admin_method = Slot(uri=TEMP.biocide_admin_method, name="biocide_admin_method", curie=TEMP.curie('biocide_admin_method'),
                   model_uri=TEMP.biocide_admin_method, domain=None, range=Optional[str])

slots.chem_treat_method = Slot(uri=TEMP.chem_treat_method, name="chem_treat_method", curie=TEMP.curie('chem_treat_method'),
                   model_uri=TEMP.chem_treat_method, domain=None, range=Optional[str])

slots.samp_preserv = Slot(uri=TEMP.samp_preserv, name="samp_preserv", curie=TEMP.curie('samp_preserv'),
                   model_uri=TEMP.samp_preserv, domain=None, range=Optional[str])

slots.alkyl_diethers = Slot(uri=TEMP.alkyl_diethers, name="alkyl_diethers", curie=TEMP.curie('alkyl_diethers'),
                   model_uri=TEMP.alkyl_diethers, domain=None, range=Optional[str])

slots.mean_frict_vel = Slot(uri=TEMP.mean_frict_vel, name="mean_frict_vel", curie=TEMP.curie('mean_frict_vel'),
                   model_uri=TEMP.mean_frict_vel, domain=None, range=Optional[str])

slots.mean_peak_frict_vel = Slot(uri=TEMP.mean_peak_frict_vel, name="mean_peak_frict_vel", curie=TEMP.curie('mean_peak_frict_vel'),
                   model_uri=TEMP.mean_peak_frict_vel, domain=None, range=Optional[str])

slots.n_alkanes = Slot(uri=TEMP.n_alkanes, name="n_alkanes", curie=TEMP.curie('n_alkanes'),
                   model_uri=TEMP.n_alkanes, domain=None, range=Optional[str])

slots.nitro = Slot(uri=TEMP.nitro, name="nitro", curie=TEMP.curie('nitro'),
                   model_uri=TEMP.nitro, domain=None, range=Optional[str])

slots.phosphate = Slot(uri=TEMP.phosphate, name="phosphate", curie=TEMP.curie('phosphate'),
                   model_uri=TEMP.phosphate, domain=None, range=Optional[str])

slots.org_carb = Slot(uri=TEMP.org_carb, name="org_carb", curie=TEMP.curie('org_carb'),
                   model_uri=TEMP.org_carb, domain=None, range=Optional[str])

slots.part_org_carb = Slot(uri=TEMP.part_org_carb, name="part_org_carb", curie=TEMP.curie('part_org_carb'),
                   model_uri=TEMP.part_org_carb, domain=None, range=Optional[str])

slots.petroleum_hydrocarb = Slot(uri=TEMP.petroleum_hydrocarb, name="petroleum_hydrocarb", curie=TEMP.curie('petroleum_hydrocarb'),
                   model_uri=TEMP.petroleum_hydrocarb, domain=None, range=Optional[str])

slots.tot_car = Slot(uri=TEMP.tot_car, name="tot_car", curie=TEMP.curie('tot_car'),
                   model_uri=TEMP.tot_car, domain=None, range=Optional[str])

slots.tot_carb = Slot(uri=TEMP.tot_carb, name="tot_carb", curie=TEMP.curie('tot_carb'),
                   model_uri=TEMP.tot_carb, domain=None, range=Optional[str])

slots.tot_nitro_content = Slot(uri=TEMP.tot_nitro_content, name="tot_nitro_content", curie=TEMP.curie('tot_nitro_content'),
                   model_uri=TEMP.tot_nitro_content, domain=None, range=Optional[str])

slots.tot_org_carb = Slot(uri=TEMP.tot_org_carb, name="tot_org_carb", curie=TEMP.curie('tot_org_carb'),
                   model_uri=TEMP.tot_org_carb, domain=None, range=Optional[str])

slots.air_temp_regm = Slot(uri=TEMP.air_temp_regm, name="air_temp_regm", curie=TEMP.curie('air_temp_regm'),
                   model_uri=TEMP.air_temp_regm, domain=None, range=Optional[str])

slots.antibiotic_regm = Slot(uri=TEMP.antibiotic_regm, name="antibiotic_regm", curie=TEMP.curie('antibiotic_regm'),
                   model_uri=TEMP.antibiotic_regm, domain=None, range=Optional[str])

slots.chem_mutagen = Slot(uri=TEMP.chem_mutagen, name="chem_mutagen", curie=TEMP.curie('chem_mutagen'),
                   model_uri=TEMP.chem_mutagen, domain=None, range=Optional[str])

slots.fertilizer_regm = Slot(uri=TEMP.fertilizer_regm, name="fertilizer_regm", curie=TEMP.curie('fertilizer_regm'),
                   model_uri=TEMP.fertilizer_regm, domain=None, range=Optional[str])

slots.fungicide_regm = Slot(uri=TEMP.fungicide_regm, name="fungicide_regm", curie=TEMP.curie('fungicide_regm'),
                   model_uri=TEMP.fungicide_regm, domain=None, range=Optional[str])

slots.gaseous_environment = Slot(uri=TEMP.gaseous_environment, name="gaseous_environment", curie=TEMP.curie('gaseous_environment'),
                   model_uri=TEMP.gaseous_environment, domain=None, range=Optional[str])

slots.gravity = Slot(uri=TEMP.gravity, name="gravity", curie=TEMP.curie('gravity'),
                   model_uri=TEMP.gravity, domain=None, range=Optional[str])

slots.growth_hormone_regm = Slot(uri=TEMP.growth_hormone_regm, name="growth_hormone_regm", curie=TEMP.curie('growth_hormone_regm'),
                   model_uri=TEMP.growth_hormone_regm, domain=None, range=Optional[str])

slots.herbicide_regm = Slot(uri=TEMP.herbicide_regm, name="herbicide_regm", curie=TEMP.curie('herbicide_regm'),
                   model_uri=TEMP.herbicide_regm, domain=None, range=Optional[str])

slots.host_wet_mass = Slot(uri=TEMP.host_wet_mass, name="host_wet_mass", curie=TEMP.curie('host_wet_mass'),
                   model_uri=TEMP.host_wet_mass, domain=None, range=Optional[str])

slots.humidity_regm = Slot(uri=TEMP.humidity_regm, name="humidity_regm", curie=TEMP.curie('humidity_regm'),
                   model_uri=TEMP.humidity_regm, domain=None, range=Optional[str])

slots.light_regm = Slot(uri=TEMP.light_regm, name="light_regm", curie=TEMP.curie('light_regm'),
                   model_uri=TEMP.light_regm, domain=None, range=Optional[str])

slots.mineral_nutr_regm = Slot(uri=TEMP.mineral_nutr_regm, name="mineral_nutr_regm", curie=TEMP.curie('mineral_nutr_regm'),
                   model_uri=TEMP.mineral_nutr_regm, domain=None, range=Optional[str])

slots.non_mineral_nutr_regm = Slot(uri=TEMP.non_mineral_nutr_regm, name="non_mineral_nutr_regm", curie=TEMP.curie('non_mineral_nutr_regm'),
                   model_uri=TEMP.non_mineral_nutr_regm, domain=None, range=Optional[str])

slots.non_min_nutr_regm = Slot(uri=TEMP.non_min_nutr_regm, name="non_min_nutr_regm", curie=TEMP.curie('non_min_nutr_regm'),
                   model_uri=TEMP.non_min_nutr_regm, domain=None, range=Optional[str])

slots.pesticide_regm = Slot(uri=TEMP.pesticide_regm, name="pesticide_regm", curie=TEMP.curie('pesticide_regm'),
                   model_uri=TEMP.pesticide_regm, domain=None, range=Optional[str])

slots.radiation_regm = Slot(uri=TEMP.radiation_regm, name="radiation_regm", curie=TEMP.curie('radiation_regm'),
                   model_uri=TEMP.radiation_regm, domain=None, range=Optional[str])

slots.rainfall_regm = Slot(uri=TEMP.rainfall_regm, name="rainfall_regm", curie=TEMP.curie('rainfall_regm'),
                   model_uri=TEMP.rainfall_regm, domain=None, range=Optional[str])

slots.root_med_carbon = Slot(uri=TEMP.root_med_carbon, name="root_med_carbon", curie=TEMP.curie('root_med_carbon'),
                   model_uri=TEMP.root_med_carbon, domain=None, range=Optional[str])

slots.root_med_macronutr = Slot(uri=TEMP.root_med_macronutr, name="root_med_macronutr", curie=TEMP.curie('root_med_macronutr'),
                   model_uri=TEMP.root_med_macronutr, domain=None, range=Optional[str])

slots.root_med_micronutr = Slot(uri=TEMP.root_med_micronutr, name="root_med_micronutr", curie=TEMP.curie('root_med_micronutr'),
                   model_uri=TEMP.root_med_micronutr, domain=None, range=Optional[str])

slots.root_med_suppl = Slot(uri=TEMP.root_med_suppl, name="root_med_suppl", curie=TEMP.curie('root_med_suppl'),
                   model_uri=TEMP.root_med_suppl, domain=None, range=Optional[str])

slots.root_med_regl = Slot(uri=TEMP.root_med_regl, name="root_med_regl", curie=TEMP.curie('root_med_regl'),
                   model_uri=TEMP.root_med_regl, domain=None, range=Optional[str])

slots.salt_regm = Slot(uri=TEMP.salt_regm, name="salt_regm", curie=TEMP.curie('salt_regm'),
                   model_uri=TEMP.salt_regm, domain=None, range=Optional[str])

slots.water_temp_regm = Slot(uri=TEMP.water_temp_regm, name="water_temp_regm", curie=TEMP.curie('water_temp_regm'),
                   model_uri=TEMP.water_temp_regm, domain=None, range=Optional[str])

slots.watering_regm = Slot(uri=TEMP.watering_regm, name="watering_regm", curie=TEMP.curie('watering_regm'),
                   model_uri=TEMP.watering_regm, domain=None, range=Optional[str])

slots.al_sat = Slot(uri=TEMP.al_sat, name="al_sat", curie=TEMP.curie('al_sat'),
                   model_uri=TEMP.al_sat, domain=None, range=Optional[str])

slots.tot_depth_water_col = Slot(uri=TEMP.tot_depth_water_col, name="tot_depth_water_col", curie=TEMP.curie('tot_depth_water_col'),
                   model_uri=TEMP.tot_depth_water_col, domain=None, range=Optional[str])

slots.agrochem_addition = Slot(uri=TEMP.agrochem_addition, name="agrochem_addition", curie=TEMP.curie('agrochem_addition'),
                   model_uri=TEMP.agrochem_addition, domain=None, range=Optional[str])

slots.annual_temp = Slot(uri=TEMP.annual_temp, name="annual_temp", curie=TEMP.curie('annual_temp'),
                   model_uri=TEMP.annual_temp, domain=None, range=Optional[str])

slots.season_temp = Slot(uri=TEMP.season_temp, name="season_temp", curie=TEMP.curie('season_temp'),
                   model_uri=TEMP.season_temp, domain=None, range=Optional[str])

slots.annual_precpt = Slot(uri=TEMP.annual_precpt, name="annual_precpt", curie=TEMP.curie('annual_precpt'),
                   model_uri=TEMP.annual_precpt, domain=None, range=Optional[str])

slots.season_precpt = Slot(uri=TEMP.season_precpt, name="season_precpt", curie=TEMP.curie('season_precpt'),
                   model_uri=TEMP.season_precpt, domain=None, range=Optional[str])

slots.slope_gradient = Slot(uri=TEMP.slope_gradient, name="slope_gradient", curie=TEMP.curie('slope_gradient'),
                   model_uri=TEMP.slope_gradient, domain=None, range=Optional[str])

slots.slope_aspect = Slot(uri=TEMP.slope_aspect, name="slope_aspect", curie=TEMP.curie('slope_aspect'),
                   model_uri=TEMP.slope_aspect, domain=None, range=Optional[str])

slots.microbial_biomass = Slot(uri=TEMP.microbial_biomass, name="microbial_biomass", curie=TEMP.curie('microbial_biomass'),
                   model_uri=TEMP.microbial_biomass, domain=None, range=Optional[str])

slots.heavy_metals = Slot(uri=TEMP.heavy_metals, name="heavy_metals", curie=TEMP.curie('heavy_metals'),
                   model_uri=TEMP.heavy_metals, domain=None, range=Optional[str])

slots.biochem_oxygen_dem = Slot(uri=TEMP.biochem_oxygen_dem, name="biochem_oxygen_dem", curie=TEMP.curie('biochem_oxygen_dem'),
                   model_uri=TEMP.biochem_oxygen_dem, domain=None, range=Optional[str])

slots.chem_oxygen_dem = Slot(uri=TEMP.chem_oxygen_dem, name="chem_oxygen_dem", curie=TEMP.curie('chem_oxygen_dem'),
                   model_uri=TEMP.chem_oxygen_dem, domain=None, range=Optional[str])

slots.efficiency_percent = Slot(uri=TEMP.efficiency_percent, name="efficiency_percent", curie=TEMP.curie('efficiency_percent'),
                   model_uri=TEMP.efficiency_percent, domain=None, range=Optional[str])

slots.emulsions = Slot(uri=TEMP.emulsions, name="emulsions", curie=TEMP.curie('emulsions'),
                   model_uri=TEMP.emulsions, domain=None, range=Optional[str])

slots.gaseous_substances = Slot(uri=TEMP.gaseous_substances, name="gaseous_substances", curie=TEMP.curie('gaseous_substances'),
                   model_uri=TEMP.gaseous_substances, domain=None, range=Optional[str])

slots.indust_eff_percent = Slot(uri=TEMP.indust_eff_percent, name="indust_eff_percent", curie=TEMP.curie('indust_eff_percent'),
                   model_uri=TEMP.indust_eff_percent, domain=None, range=Optional[str])

slots.inorg_particles = Slot(uri=TEMP.inorg_particles, name="inorg_particles", curie=TEMP.curie('inorg_particles'),
                   model_uri=TEMP.inorg_particles, domain=None, range=Optional[str])

slots.org_particles = Slot(uri=TEMP.org_particles, name="org_particles", curie=TEMP.curie('org_particles'),
                   model_uri=TEMP.org_particles, domain=None, range=Optional[str])

slots.sludge_retent_time = Slot(uri=TEMP.sludge_retent_time, name="sludge_retent_time", curie=TEMP.curie('sludge_retent_time'),
                   model_uri=TEMP.sludge_retent_time, domain=None, range=Optional[str])

slots.soluble_inorg_mat = Slot(uri=TEMP.soluble_inorg_mat, name="soluble_inorg_mat", curie=TEMP.curie('soluble_inorg_mat'),
                   model_uri=TEMP.soluble_inorg_mat, domain=None, range=Optional[str])

slots.soluble_org_mat = Slot(uri=TEMP.soluble_org_mat, name="soluble_org_mat", curie=TEMP.curie('soluble_org_mat'),
                   model_uri=TEMP.soluble_org_mat, domain=None, range=Optional[str])

slots.bac_prod = Slot(uri=TEMP.bac_prod, name="bac_prod", curie=TEMP.curie('bac_prod'),
                   model_uri=TEMP.bac_prod, domain=None, range=Optional[str])

slots.bac_resp = Slot(uri=TEMP.bac_resp, name="bac_resp", curie=TEMP.curie('bac_resp'),
                   model_uri=TEMP.bac_resp, domain=None, range=Optional[str])

slots.tot_phos = Slot(uri=TEMP.tot_phos, name="tot_phos", curie=TEMP.curie('tot_phos'),
                   model_uri=TEMP.tot_phos, domain=None, range=Optional[str])

slots.tot_phosphate = Slot(uri=TEMP.tot_phosphate, name="tot_phosphate", curie=TEMP.curie('tot_phosphate'),
                   model_uri=TEMP.tot_phosphate, domain=None, range=Optional[str])

slots.conduc = Slot(uri=TEMP.conduc, name="conduc", curie=TEMP.curie('conduc'),
                   model_uri=TEMP.conduc, domain=None, range=Optional[str])

slots.diss_inorg_nitro = Slot(uri=TEMP.diss_inorg_nitro, name="diss_inorg_nitro", curie=TEMP.curie('diss_inorg_nitro'),
                   model_uri=TEMP.diss_inorg_nitro, domain=None, range=Optional[str])

slots.down_par = Slot(uri=TEMP.down_par, name="down_par", curie=TEMP.curie('down_par'),
                   model_uri=TEMP.down_par, domain=None, range=Optional[str])

slots.fluor = Slot(uri=TEMP.fluor, name="fluor", curie=TEMP.curie('fluor'),
                   model_uri=TEMP.fluor, domain=None, range=Optional[str])

slots.light_intensity = Slot(uri=TEMP.light_intensity, name="light_intensity", curie=TEMP.curie('light_intensity'),
                   model_uri=TEMP.light_intensity, domain=None, range=Optional[str])

slots.part_org_nitro = Slot(uri=TEMP.part_org_nitro, name="part_org_nitro", curie=TEMP.curie('part_org_nitro'),
                   model_uri=TEMP.part_org_nitro, domain=None, range=Optional[str])

slots.built_struc_type = Slot(uri=TEMP.built_struc_type, name="built_struc_type", curie=TEMP.curie('built_struc_type'),
                   model_uri=TEMP.built_struc_type, domain=None, range=Optional[str])

slots.photon_flux = Slot(uri=TEMP.photon_flux, name="photon_flux", curie=TEMP.curie('photon_flux'),
                   model_uri=TEMP.photon_flux, domain=None, range=Optional[str])

slots.primary_prod = Slot(uri=TEMP.primary_prod, name="primary_prod", curie=TEMP.curie('primary_prod'),
                   model_uri=TEMP.primary_prod, domain=None, range=Optional[str])

slots.size_frac_low = Slot(uri=TEMP.size_frac_low, name="size_frac_low", curie=TEMP.curie('size_frac_low'),
                   model_uri=TEMP.size_frac_low, domain=None, range=Optional[str])

slots.size_frac_up = Slot(uri=TEMP.size_frac_up, name="size_frac_up", curie=TEMP.curie('size_frac_up'),
                   model_uri=TEMP.size_frac_up, domain=None, range=Optional[str])

slots.soluble_react_phosp = Slot(uri=TEMP.soluble_react_phosp, name="soluble_react_phosp", curie=TEMP.curie('soluble_react_phosp'),
                   model_uri=TEMP.soluble_react_phosp, domain=None, range=Optional[str])

slots.suspend_part_matter = Slot(uri=TEMP.suspend_part_matter, name="suspend_part_matter", curie=TEMP.curie('suspend_part_matter'),
                   model_uri=TEMP.suspend_part_matter, domain=None, range=Optional[str])

slots.tot_diss_nitro = Slot(uri=TEMP.tot_diss_nitro, name="tot_diss_nitro", curie=TEMP.curie('tot_diss_nitro'),
                   model_uri=TEMP.tot_diss_nitro, domain=None, range=Optional[str])

slots.tot_inorg_nitro = Slot(uri=TEMP.tot_inorg_nitro, name="tot_inorg_nitro", curie=TEMP.curie('tot_inorg_nitro'),
                   model_uri=TEMP.tot_inorg_nitro, domain=None, range=Optional[str])

slots.tot_part_carb = Slot(uri=TEMP.tot_part_carb, name="tot_part_carb", curie=TEMP.curie('tot_part_carb'),
                   model_uri=TEMP.tot_part_carb, domain=None, range=Optional[str])

slots.tidal_stage = Slot(uri=TEMP.tidal_stage, name="tidal_stage", curie=TEMP.curie('tidal_stage'),
                   model_uri=TEMP.tidal_stage, domain=None, range=Optional[str])

slots.chem_administration = Slot(uri=TEMP.chem_administration, name="chem_administration", curie=TEMP.curie('chem_administration'),
                   model_uri=TEMP.chem_administration, domain=None, range=Optional[str])

slots.misc_param = Slot(uri=TEMP.misc_param, name="misc_param", curie=TEMP.curie('misc_param'),
                   model_uri=TEMP.misc_param, domain=None, range=Optional[str])

slots.oxy_stat_samp = Slot(uri=TEMP.oxy_stat_samp, name="oxy_stat_samp", curie=TEMP.curie('oxy_stat_samp'),
                   model_uri=TEMP.oxy_stat_samp, domain=None, range=Optional[str])

slots.perturbation = Slot(uri=TEMP.perturbation, name="perturbation", curie=TEMP.curie('perturbation'),
                   model_uri=TEMP.perturbation, domain=None, range=Optional[str])

slots.samp_store_loc = Slot(uri=TEMP.samp_store_loc, name="samp_store_loc", curie=TEMP.curie('samp_store_loc'),
                   model_uri=TEMP.samp_store_loc, domain=None, range=Optional[str])

slots.samp_stor_loc = Slot(uri=TEMP.samp_stor_loc, name="samp_stor_loc", curie=TEMP.curie('samp_stor_loc'),
                   model_uri=TEMP.samp_stor_loc, domain=None, range=Optional[str])

slots.ventilation_type = Slot(uri=TEMP.ventilation_type, name="ventilation_type", curie=TEMP.curie('ventilation_type'),
                   model_uri=TEMP.ventilation_type, domain=None, range=Optional[str])

slots.wind_direction = Slot(uri=TEMP.wind_direction, name="wind_direction", curie=TEMP.curie('wind_direction'),
                   model_uri=TEMP.wind_direction, domain=None, range=Optional[str])

slots.surf_material = Slot(uri=TEMP.surf_material, name="surf_material", curie=TEMP.curie('surf_material'),
                   model_uri=TEMP.surf_material, domain=None, range=Optional[str])

slots.surf_air_cont = Slot(uri=TEMP.surf_air_cont, name="surf_air_cont", curie=TEMP.curie('surf_air_cont'),
                   model_uri=TEMP.surf_air_cont, domain=None, range=Optional[str])

slots.surf_moisture_ph = Slot(uri=TEMP.surf_moisture_ph, name="surf_moisture_ph", curie=TEMP.curie('surf_moisture_ph'),
                   model_uri=TEMP.surf_moisture_ph, domain=None, range=Optional[str])

slots.build_occup_type = Slot(uri=TEMP.build_occup_type, name="build_occup_type", curie=TEMP.curie('build_occup_type'),
                   model_uri=TEMP.build_occup_type, domain=None, range=Optional[str])

slots.indoor_space = Slot(uri=TEMP.indoor_space, name="indoor_space", curie=TEMP.curie('indoor_space'),
                   model_uri=TEMP.indoor_space, domain=None, range=Optional[str])

slots.indoor_surf = Slot(uri=TEMP.indoor_surf, name="indoor_surf", curie=TEMP.curie('indoor_surf'),
                   model_uri=TEMP.indoor_surf, domain=None, range=Optional[str])

slots.filter_type = Slot(uri=TEMP.filter_type, name="filter_type", curie=TEMP.curie('filter_type'),
                   model_uri=TEMP.filter_type, domain=None, range=Optional[str])

slots.heat_cool_type = Slot(uri=TEMP.heat_cool_type, name="heat_cool_type", curie=TEMP.curie('heat_cool_type'),
                   model_uri=TEMP.heat_cool_type, domain=None, range=Optional[str])

slots.substructure_type = Slot(uri=TEMP.substructure_type, name="substructure_type", curie=TEMP.curie('substructure_type'),
                   model_uri=TEMP.substructure_type, domain=None, range=Optional[str])

slots.building_setting = Slot(uri=TEMP.building_setting, name="building_setting", curie=TEMP.curie('building_setting'),
                   model_uri=TEMP.building_setting, domain=None, range=Optional[str])

slots.light_type = Slot(uri=TEMP.light_type, name="light_type", curie=TEMP.curie('light_type'),
                   model_uri=TEMP.light_type, domain=None, range=Optional[str])

slots.space_typ_state = Slot(uri=TEMP.space_typ_state, name="space_typ_state", curie=TEMP.curie('space_typ_state'),
                   model_uri=TEMP.space_typ_state, domain=None, range=Optional[str])

slots.typ_occup_density = Slot(uri=TEMP.typ_occup_density, name="typ_occup_density", curie=TEMP.curie('typ_occup_density'),
                   model_uri=TEMP.typ_occup_density, domain=None, range=Optional[str])

slots.occup_samp = Slot(uri=TEMP.occup_samp, name="occup_samp", curie=TEMP.curie('occup_samp'),
                   model_uri=TEMP.occup_samp, domain=None, range=Optional[str])

slots.aero_struc = Slot(uri=TEMP.aero_struc, name="aero_struc", curie=TEMP.curie('aero_struc'),
                   model_uri=TEMP.aero_struc, domain=None, range=Optional[str])

slots.arch_struc = Slot(uri=TEMP.arch_struc, name="arch_struc", curie=TEMP.curie('arch_struc'),
                   model_uri=TEMP.arch_struc, domain=None, range=Optional[str])

slots.avg_occup = Slot(uri=TEMP.avg_occup, name="avg_occup", curie=TEMP.curie('avg_occup'),
                   model_uri=TEMP.avg_occup, domain=None, range=Optional[str])

slots.bathroom_count = Slot(uri=TEMP.bathroom_count, name="bathroom_count", curie=TEMP.curie('bathroom_count'),
                   model_uri=TEMP.bathroom_count, domain=None, range=Optional[str])

slots.bedroom_count = Slot(uri=TEMP.bedroom_count, name="bedroom_count", curie=TEMP.curie('bedroom_count'),
                   model_uri=TEMP.bedroom_count, domain=None, range=Optional[str])

slots.built_struc_set = Slot(uri=TEMP.built_struc_set, name="built_struc_set", curie=TEMP.curie('built_struc_set'),
                   model_uri=TEMP.built_struc_set, domain=None, range=Optional[str])

slots.ceil_cond = Slot(uri=TEMP.ceil_cond, name="ceil_cond", curie=TEMP.curie('ceil_cond'),
                   model_uri=TEMP.ceil_cond, domain=None, range=Optional[str])

slots.ceil_finish_mat = Slot(uri=TEMP.ceil_finish_mat, name="ceil_finish_mat", curie=TEMP.curie('ceil_finish_mat'),
                   model_uri=TEMP.ceil_finish_mat, domain=None, range=Optional[str])

slots.ceil_water_mold = Slot(uri=TEMP.ceil_water_mold, name="ceil_water_mold", curie=TEMP.curie('ceil_water_mold'),
                   model_uri=TEMP.ceil_water_mold, domain=None, range=Optional[str])

slots.ceil_struc = Slot(uri=TEMP.ceil_struc, name="ceil_struc", curie=TEMP.curie('ceil_struc'),
                   model_uri=TEMP.ceil_struc, domain=None, range=Optional[str])

slots.ceil_texture = Slot(uri=TEMP.ceil_texture, name="ceil_texture", curie=TEMP.curie('ceil_texture'),
                   model_uri=TEMP.ceil_texture, domain=None, range=Optional[str])

slots.ceil_type = Slot(uri=TEMP.ceil_type, name="ceil_type", curie=TEMP.curie('ceil_type'),
                   model_uri=TEMP.ceil_type, domain=None, range=Optional[str])

slots.cool_syst_id = Slot(uri=TEMP.cool_syst_id, name="cool_syst_id", curie=TEMP.curie('cool_syst_id'),
                   model_uri=TEMP.cool_syst_id, domain=None, range=Optional[str])

slots.date_last_rain = Slot(uri=TEMP.date_last_rain, name="date_last_rain", curie=TEMP.curie('date_last_rain'),
                   model_uri=TEMP.date_last_rain, domain=None, range=Optional[str])

slots.build_docs = Slot(uri=TEMP.build_docs, name="build_docs", curie=TEMP.curie('build_docs'),
                   model_uri=TEMP.build_docs, domain=None, range=Optional[str])

slots.door_cond = Slot(uri=TEMP.door_cond, name="door_cond", curie=TEMP.curie('door_cond'),
                   model_uri=TEMP.door_cond, domain=None, range=Optional[str])

slots.door_direct = Slot(uri=TEMP.door_direct, name="door_direct", curie=TEMP.curie('door_direct'),
                   model_uri=TEMP.door_direct, domain=None, range=Optional[str])

slots.door_loc = Slot(uri=TEMP.door_loc, name="door_loc", curie=TEMP.curie('door_loc'),
                   model_uri=TEMP.door_loc, domain=None, range=Optional[str])

slots.door_mat = Slot(uri=TEMP.door_mat, name="door_mat", curie=TEMP.curie('door_mat'),
                   model_uri=TEMP.door_mat, domain=None, range=Optional[str])

slots.door_move = Slot(uri=TEMP.door_move, name="door_move", curie=TEMP.curie('door_move'),
                   model_uri=TEMP.door_move, domain=None, range=Optional[str])

slots.door_water_mold = Slot(uri=TEMP.door_water_mold, name="door_water_mold", curie=TEMP.curie('door_water_mold'),
                   model_uri=TEMP.door_water_mold, domain=None, range=Optional[str])

slots.door_type = Slot(uri=TEMP.door_type, name="door_type", curie=TEMP.curie('door_type'),
                   model_uri=TEMP.door_type, domain=None, range=Optional[str])

slots.door_comp_type = Slot(uri=TEMP.door_comp_type, name="door_comp_type", curie=TEMP.curie('door_comp_type'),
                   model_uri=TEMP.door_comp_type, domain=None, range=Optional[str])

slots.door_type_metal = Slot(uri=TEMP.door_type_metal, name="door_type_metal", curie=TEMP.curie('door_type_metal'),
                   model_uri=TEMP.door_type_metal, domain=None, range=Optional[str])

slots.door_type_wood = Slot(uri=TEMP.door_type_wood, name="door_type_wood", curie=TEMP.curie('door_type_wood'),
                   model_uri=TEMP.door_type_wood, domain=None, range=Optional[str])

slots.drawings = Slot(uri=TEMP.drawings, name="drawings", curie=TEMP.curie('drawings'),
                   model_uri=TEMP.drawings, domain=None, range=Optional[str])

slots.elevator = Slot(uri=TEMP.elevator, name="elevator", curie=TEMP.curie('elevator'),
                   model_uri=TEMP.elevator, domain=None, range=Optional[str])

slots.escalator = Slot(uri=TEMP.escalator, name="escalator", curie=TEMP.curie('escalator'),
                   model_uri=TEMP.escalator, domain=None, range=Optional[str])

slots.fireplace_type = Slot(uri=TEMP.fireplace_type, name="fireplace_type", curie=TEMP.curie('fireplace_type'),
                   model_uri=TEMP.fireplace_type, domain=None, range=Optional[str])

slots.floor_cond = Slot(uri=TEMP.floor_cond, name="floor_cond", curie=TEMP.curie('floor_cond'),
                   model_uri=TEMP.floor_cond, domain=None, range=Optional[str])

slots.floor_finish_mat = Slot(uri=TEMP.floor_finish_mat, name="floor_finish_mat", curie=TEMP.curie('floor_finish_mat'),
                   model_uri=TEMP.floor_finish_mat, domain=None, range=Optional[str])

slots.floor_water_mold = Slot(uri=TEMP.floor_water_mold, name="floor_water_mold", curie=TEMP.curie('floor_water_mold'),
                   model_uri=TEMP.floor_water_mold, domain=None, range=Optional[str])

slots.floor_struc = Slot(uri=TEMP.floor_struc, name="floor_struc", curie=TEMP.curie('floor_struc'),
                   model_uri=TEMP.floor_struc, domain=None, range=Optional[str])

slots.furniture = Slot(uri=TEMP.furniture, name="furniture", curie=TEMP.curie('furniture'),
                   model_uri=TEMP.furniture, domain=None, range=Optional[str])

slots.gender_restroom = Slot(uri=TEMP.gender_restroom, name="gender_restroom", curie=TEMP.curie('gender_restroom'),
                   model_uri=TEMP.gender_restroom, domain=None, range=Optional[str])

slots.handidness = Slot(uri=TEMP.handidness, name="handidness", curie=TEMP.curie('handidness'),
                   model_uri=TEMP.handidness, domain=None, range=Optional[str])

slots.heat_deliv_loc = Slot(uri=TEMP.heat_deliv_loc, name="heat_deliv_loc", curie=TEMP.curie('heat_deliv_loc'),
                   model_uri=TEMP.heat_deliv_loc, domain=None, range=Optional[str])

slots.host_sex = Slot(uri=TEMP.host_sex, name="host_sex", curie=TEMP.curie('host_sex'),
                   model_uri=TEMP.host_sex, domain=None, range=Optional[str])

slots.heat_sys_deliv_meth = Slot(uri=TEMP.heat_sys_deliv_meth, name="heat_sys_deliv_meth", curie=TEMP.curie('heat_sys_deliv_meth'),
                   model_uri=TEMP.heat_sys_deliv_meth, domain=None, range=Optional[str])

slots.int_wall_cond = Slot(uri=TEMP.int_wall_cond, name="int_wall_cond", curie=TEMP.curie('int_wall_cond'),
                   model_uri=TEMP.int_wall_cond, domain=None, range=Optional[str])

slots.last_clean = Slot(uri=TEMP.last_clean, name="last_clean", curie=TEMP.curie('last_clean'),
                   model_uri=TEMP.last_clean, domain=None, range=Optional[str])

slots.mech_struc = Slot(uri=TEMP.mech_struc, name="mech_struc", curie=TEMP.curie('mech_struc'),
                   model_uri=TEMP.mech_struc, domain=None, range=Optional[str])

slots.occup_document = Slot(uri=TEMP.occup_document, name="occup_document", curie=TEMP.curie('occup_document'),
                   model_uri=TEMP.occup_document, domain=None, range=Optional[str])

slots.ext_wall_orient = Slot(uri=TEMP.ext_wall_orient, name="ext_wall_orient", curie=TEMP.curie('ext_wall_orient'),
                   model_uri=TEMP.ext_wall_orient, domain=None, range=Optional[str])

slots.ext_window_orient = Slot(uri=TEMP.ext_window_orient, name="ext_window_orient", curie=TEMP.curie('ext_window_orient'),
                   model_uri=TEMP.ext_window_orient, domain=None, range=Optional[str])

slots.pres_animal_insect = Slot(uri=TEMP.pres_animal_insect, name="pres_animal_insect", curie=TEMP.curie('pres_animal_insect'),
                   model_uri=TEMP.pres_animal_insect, domain=None, range=Optional[str])

slots.quad_pos = Slot(uri=TEMP.quad_pos, name="quad_pos", curie=TEMP.curie('quad_pos'),
                   model_uri=TEMP.quad_pos, domain=None, range=Optional[str])

slots.rel_samp_loc = Slot(uri=TEMP.rel_samp_loc, name="rel_samp_loc", curie=TEMP.curie('rel_samp_loc'),
                   model_uri=TEMP.rel_samp_loc, domain=None, range=Optional[str])

slots.room_condt = Slot(uri=TEMP.room_condt, name="room_condt", curie=TEMP.curie('room_condt'),
                   model_uri=TEMP.room_condt, domain=None, range=Optional[str])

slots.room_loc = Slot(uri=TEMP.room_loc, name="room_loc", curie=TEMP.curie('room_loc'),
                   model_uri=TEMP.room_loc, domain=None, range=Optional[str])

slots.room_samp_pos = Slot(uri=TEMP.room_samp_pos, name="room_samp_pos", curie=TEMP.curie('room_samp_pos'),
                   model_uri=TEMP.room_samp_pos, domain=None, range=Optional[str])

slots.room_type = Slot(uri=TEMP.room_type, name="room_type", curie=TEMP.curie('room_type'),
                   model_uri=TEMP.room_type, domain=None, range=Optional[str])

slots.room_connected = Slot(uri=TEMP.room_connected, name="room_connected", curie=TEMP.curie('room_connected'),
                   model_uri=TEMP.room_connected, domain=None, range=Optional[str])

slots.samp_weather = Slot(uri=TEMP.samp_weather, name="samp_weather", curie=TEMP.curie('samp_weather'),
                   model_uri=TEMP.samp_weather, domain=None, range=Optional[str])

slots.samp_floor = Slot(uri=TEMP.samp_floor, name="samp_floor", curie=TEMP.curie('samp_floor'),
                   model_uri=TEMP.samp_floor, domain=None, range=Optional[str])

slots.season = Slot(uri=TEMP.season, name="season", curie=TEMP.curie('season'),
                   model_uri=TEMP.season, domain=None, range=Optional[str])

slots.season_use = Slot(uri=TEMP.season_use, name="season_use", curie=TEMP.curie('season_use'),
                   model_uri=TEMP.season_use, domain=None, range=Optional[str])

slots.shading_device_cond = Slot(uri=TEMP.shading_device_cond, name="shading_device_cond", curie=TEMP.curie('shading_device_cond'),
                   model_uri=TEMP.shading_device_cond, domain=None, range=Optional[str])

slots.shading_device_loc = Slot(uri=TEMP.shading_device_loc, name="shading_device_loc", curie=TEMP.curie('shading_device_loc'),
                   model_uri=TEMP.shading_device_loc, domain=None, range=Optional[str])

slots.heat_system_id = Slot(uri=TEMP.heat_system_id, name="heat_system_id", curie=TEMP.curie('heat_system_id'),
                   model_uri=TEMP.heat_system_id, domain=None, range=Optional[str])

slots.shad_dev_water_mold = Slot(uri=TEMP.shad_dev_water_mold, name="shad_dev_water_mold", curie=TEMP.curie('shad_dev_water_mold'),
                   model_uri=TEMP.shad_dev_water_mold, domain=None, range=Optional[str])

slots.shading_device_type = Slot(uri=TEMP.shading_device_type, name="shading_device_type", curie=TEMP.curie('shading_device_type'),
                   model_uri=TEMP.shading_device_type, domain=None, range=Optional[str])

slots.specific = Slot(uri=TEMP.specific, name="specific", curie=TEMP.curie('specific'),
                   model_uri=TEMP.specific, domain=None, range=Optional[str])

slots.train_line = Slot(uri=TEMP.train_line, name="train_line", curie=TEMP.curie('train_line'),
                   model_uri=TEMP.train_line, domain=None, range=Optional[str])

slots.train_stat_loc = Slot(uri=TEMP.train_stat_loc, name="train_stat_loc", curie=TEMP.curie('train_stat_loc'),
                   model_uri=TEMP.train_stat_loc, domain=None, range=Optional[str])

slots.train_stop_loc = Slot(uri=TEMP.train_stop_loc, name="train_stop_loc", curie=TEMP.curie('train_stop_loc'),
                   model_uri=TEMP.train_stop_loc, domain=None, range=Optional[str])

slots.vis_media = Slot(uri=TEMP.vis_media, name="vis_media", curie=TEMP.curie('vis_media'),
                   model_uri=TEMP.vis_media, domain=None, range=Optional[str])

slots.wall_const_type = Slot(uri=TEMP.wall_const_type, name="wall_const_type", curie=TEMP.curie('wall_const_type'),
                   model_uri=TEMP.wall_const_type, domain=None, range=Optional[str])

slots.wall_finish_mat = Slot(uri=TEMP.wall_finish_mat, name="wall_finish_mat", curie=TEMP.curie('wall_finish_mat'),
                   model_uri=TEMP.wall_finish_mat, domain=None, range=Optional[str])

slots.wall_loc = Slot(uri=TEMP.wall_loc, name="wall_loc", curie=TEMP.curie('wall_loc'),
                   model_uri=TEMP.wall_loc, domain=None, range=Optional[str])

slots.wall_water_mold = Slot(uri=TEMP.wall_water_mold, name="wall_water_mold", curie=TEMP.curie('wall_water_mold'),
                   model_uri=TEMP.wall_water_mold, domain=None, range=Optional[str])

slots.wall_surf_treatment = Slot(uri=TEMP.wall_surf_treatment, name="wall_surf_treatment", curie=TEMP.curie('wall_surf_treatment'),
                   model_uri=TEMP.wall_surf_treatment, domain=None, range=Optional[str])

slots.wall_texture = Slot(uri=TEMP.wall_texture, name="wall_texture", curie=TEMP.curie('wall_texture'),
                   model_uri=TEMP.wall_texture, domain=None, range=Optional[str])

slots.water_feat_type = Slot(uri=TEMP.water_feat_type, name="water_feat_type", curie=TEMP.curie('water_feat_type'),
                   model_uri=TEMP.water_feat_type, domain=None, range=Optional[str])

slots.weekday = Slot(uri=TEMP.weekday, name="weekday", curie=TEMP.curie('weekday'),
                   model_uri=TEMP.weekday, domain=None, range=Optional[str])

slots.window_cond = Slot(uri=TEMP.window_cond, name="window_cond", curie=TEMP.curie('window_cond'),
                   model_uri=TEMP.window_cond, domain=None, range=Optional[str])

slots.window_cover = Slot(uri=TEMP.window_cover, name="window_cover", curie=TEMP.curie('window_cover'),
                   model_uri=TEMP.window_cover, domain=None, range=Optional[str])

slots.window_horiz_pos = Slot(uri=TEMP.window_horiz_pos, name="window_horiz_pos", curie=TEMP.curie('window_horiz_pos'),
                   model_uri=TEMP.window_horiz_pos, domain=None, range=Optional[str])

slots.window_loc = Slot(uri=TEMP.window_loc, name="window_loc", curie=TEMP.curie('window_loc'),
                   model_uri=TEMP.window_loc, domain=None, range=Optional[str])

slots.window_mat = Slot(uri=TEMP.window_mat, name="window_mat", curie=TEMP.curie('window_mat'),
                   model_uri=TEMP.window_mat, domain=None, range=Optional[str])

slots.window_water_mold = Slot(uri=TEMP.window_water_mold, name="window_water_mold", curie=TEMP.curie('window_water_mold'),
                   model_uri=TEMP.window_water_mold, domain=None, range=Optional[str])

slots.window_status = Slot(uri=TEMP.window_status, name="window_status", curie=TEMP.curie('window_status'),
                   model_uri=TEMP.window_status, domain=None, range=Optional[str])

slots.window_type = Slot(uri=TEMP.window_type, name="window_type", curie=TEMP.curie('window_type'),
                   model_uri=TEMP.window_type, domain=None, range=Optional[str])

slots.window_vert_pos = Slot(uri=TEMP.window_vert_pos, name="window_vert_pos", curie=TEMP.curie('window_vert_pos'),
                   model_uri=TEMP.window_vert_pos, domain=None, range=Optional[str])

slots.biol_stat = Slot(uri=TEMP.biol_stat, name="biol_stat", curie=TEMP.curie('biol_stat'),
                   model_uri=TEMP.biol_stat, domain=None, range=Optional[str])

slots.genetic_mod = Slot(uri=TEMP.genetic_mod, name="genetic_mod", curie=TEMP.curie('genetic_mod'),
                   model_uri=TEMP.genetic_mod, domain=None, range=Optional[str])

slots.samp_capt_status = Slot(uri=TEMP.samp_capt_status, name="samp_capt_status", curie=TEMP.curie('samp_capt_status'),
                   model_uri=TEMP.samp_capt_status, domain=None, range=Optional[str])

slots.host_subject_id = Slot(uri=TEMP.host_subject_id, name="host_subject_id", curie=TEMP.curie('host_subject_id'),
                   model_uri=TEMP.host_subject_id, domain=None, range=Optional[str])

slots.host_body_habitat = Slot(uri=TEMP.host_body_habitat, name="host_body_habitat", curie=TEMP.curie('host_body_habitat'),
                   model_uri=TEMP.host_body_habitat, domain=None, range=Optional[str])

slots.host_body_site = Slot(uri=TEMP.host_body_site, name="host_body_site", curie=TEMP.curie('host_body_site'),
                   model_uri=TEMP.host_body_site, domain=None, range=Optional[str])

slots.host_body_product = Slot(uri=TEMP.host_body_product, name="host_body_product", curie=TEMP.curie('host_body_product'),
                   model_uri=TEMP.host_body_product, domain=None, range=Optional[str])

slots.host_diet = Slot(uri=TEMP.host_diet, name="host_diet", curie=TEMP.curie('host_diet'),
                   model_uri=TEMP.host_diet, domain=None, range=Optional[str])

slots.host_last_meal = Slot(uri=TEMP.host_last_meal, name="host_last_meal", curie=TEMP.curie('host_last_meal'),
                   model_uri=TEMP.host_last_meal, domain=None, range=Optional[str])

slots.host_growth_cond = Slot(uri=TEMP.host_growth_cond, name="host_growth_cond", curie=TEMP.curie('host_growth_cond'),
                   model_uri=TEMP.host_growth_cond, domain=None, range=Optional[str])

slots.host_family_relation = Slot(uri=TEMP.host_family_relation, name="host_family_relation", curie=TEMP.curie('host_family_relation'),
                   model_uri=TEMP.host_family_relation, domain=None, range=Optional[str])

slots.host_family_relationship = Slot(uri=TEMP.host_family_relationship, name="host_family_relationship", curie=TEMP.curie('host_family_relationship'),
                   model_uri=TEMP.host_family_relationship, domain=None, range=Optional[str])

slots.host_phenotype = Slot(uri=TEMP.host_phenotype, name="host_phenotype", curie=TEMP.curie('host_phenotype'),
                   model_uri=TEMP.host_phenotype, domain=None, range=Optional[str])

slots.gravidity = Slot(uri=TEMP.gravidity, name="gravidity", curie=TEMP.curie('gravidity'),
                   model_uri=TEMP.gravidity, domain=None, range=Optional[str])

slots.ihmc_medication_code = Slot(uri=TEMP.ihmc_medication_code, name="ihmc_medication_code", curie=TEMP.curie('ihmc_medication_code'),
                   model_uri=TEMP.ihmc_medication_code, domain=None, range=Optional[str])

slots.drug_usage = Slot(uri=TEMP.drug_usage, name="drug_usage", curie=TEMP.curie('drug_usage'),
                   model_uri=TEMP.drug_usage, domain=None, range=Optional[str])

slots.ethnicity = Slot(uri=TEMP.ethnicity, name="ethnicity", curie=TEMP.curie('ethnicity'),
                   model_uri=TEMP.ethnicity, domain=None, range=Optional[str])

slots.host_occupation = Slot(uri=TEMP.host_occupation, name="host_occupation", curie=TEMP.curie('host_occupation'),
                   model_uri=TEMP.host_occupation, domain=None, range=Optional[str])

slots.medic_hist_perform = Slot(uri=TEMP.medic_hist_perform, name="medic_hist_perform", curie=TEMP.curie('medic_hist_perform'),
                   model_uri=TEMP.medic_hist_perform, domain=None, range=Optional[str])

slots.study_complt_stat = Slot(uri=TEMP.study_complt_stat, name="study_complt_stat", curie=TEMP.curie('study_complt_stat'),
                   model_uri=TEMP.study_complt_stat, domain=None, range=Optional[str])

slots.urine_collect_meth = Slot(uri=TEMP.urine_collect_meth, name="urine_collect_meth", curie=TEMP.curie('urine_collect_meth'),
                   model_uri=TEMP.urine_collect_meth, domain=None, range=Optional[str])

slots.special_diet = Slot(uri=TEMP.special_diet, name="special_diet", curie=TEMP.curie('special_diet'),
                   model_uri=TEMP.special_diet, domain=None, range=Optional[str])

slots.time_last_toothbrush = Slot(uri=TEMP.time_last_toothbrush, name="time_last_toothbrush", curie=TEMP.curie('time_last_toothbrush'),
                   model_uri=TEMP.time_last_toothbrush, domain=None, range=Optional[str])

slots.time_since_last_wash = Slot(uri=TEMP.time_since_last_wash, name="time_since_last_wash", curie=TEMP.curie('time_since_last_wash'),
                   model_uri=TEMP.time_since_last_wash, domain=None, range=Optional[str])

slots.dominant_hand = Slot(uri=TEMP.dominant_hand, name="dominant_hand", curie=TEMP.curie('dominant_hand'),
                   model_uri=TEMP.dominant_hand, domain=None, range=Optional[str])

slots.menarche = Slot(uri=TEMP.menarche, name="menarche", curie=TEMP.curie('menarche'),
                   model_uri=TEMP.menarche, domain=None, range=Optional[str])

slots.pregnancy = Slot(uri=TEMP.pregnancy, name="pregnancy", curie=TEMP.curie('pregnancy'),
                   model_uri=TEMP.pregnancy, domain=None, range=Optional[str])

slots.douche = Slot(uri=TEMP.douche, name="douche", curie=TEMP.curie('douche'),
                   model_uri=TEMP.douche, domain=None, range=Optional[str])

slots.menopause = Slot(uri=TEMP.menopause, name="menopause", curie=TEMP.curie('menopause'),
                   model_uri=TEMP.menopause, domain=None, range=Optional[str])

slots.hrt = Slot(uri=TEMP.hrt, name="hrt", curie=TEMP.curie('hrt'),
                   model_uri=TEMP.hrt, domain=None, range=Optional[str])

slots.hcr = Slot(uri=TEMP.hcr, name="hcr", curie=TEMP.curie('hcr'),
                   model_uri=TEMP.hcr, domain=None, range=Optional[str])

slots.hc_produced = Slot(uri=TEMP.hc_produced, name="hc_produced", curie=TEMP.curie('hc_produced'),
                   model_uri=TEMP.hc_produced, domain=None, range=Optional[str])

slots.lithology = Slot(uri=TEMP.lithology, name="lithology", curie=TEMP.curie('lithology'),
                   model_uri=TEMP.lithology, domain=None, range=Optional[str])

slots.depos_env = Slot(uri=TEMP.depos_env, name="depos_env", curie=TEMP.curie('depos_env'),
                   model_uri=TEMP.depos_env, domain=None, range=Optional[str])

slots.hcr_geol_age = Slot(uri=TEMP.hcr_geol_age, name="hcr_geol_age", curie=TEMP.curie('hcr_geol_age'),
                   model_uri=TEMP.hcr_geol_age, domain=None, range=Optional[str])

slots.sr_kerog_type = Slot(uri=TEMP.sr_kerog_type, name="sr_kerog_type", curie=TEMP.curie('sr_kerog_type'),
                   model_uri=TEMP.sr_kerog_type, domain=None, range=Optional[str])

slots.sr_lithology = Slot(uri=TEMP.sr_lithology, name="sr_lithology", curie=TEMP.curie('sr_lithology'),
                   model_uri=TEMP.sr_lithology, domain=None, range=Optional[str])

slots.sr_dep_env = Slot(uri=TEMP.sr_dep_env, name="sr_dep_env", curie=TEMP.curie('sr_dep_env'),
                   model_uri=TEMP.sr_dep_env, domain=None, range=Optional[str])

slots.sr_geol_age = Slot(uri=TEMP.sr_geol_age, name="sr_geol_age", curie=TEMP.curie('sr_geol_age'),
                   model_uri=TEMP.sr_geol_age, domain=None, range=Optional[str])

slots.samp_type = Slot(uri=TEMP.samp_type, name="samp_type", curie=TEMP.curie('samp_type'),
                   model_uri=TEMP.samp_type, domain=None, range=Optional[str])

slots.samp_subtype = Slot(uri=TEMP.samp_subtype, name="samp_subtype", curie=TEMP.curie('samp_subtype'),
                   model_uri=TEMP.samp_subtype, domain=None, range=Optional[str])

slots.ph = Slot(uri=TEMP.ph, name="ph", curie=TEMP.curie('ph'),
                   model_uri=TEMP.ph, domain=None, range=Optional[str])

slots.prod_start_date = Slot(uri=TEMP.prod_start_date, name="prod_start_date", curie=TEMP.curie('prod_start_date'),
                   model_uri=TEMP.prod_start_date, domain=None, range=Optional[str])

slots.add_recov_method = Slot(uri=TEMP.add_recov_method, name="add_recov_method", curie=TEMP.curie('add_recov_method'),
                   model_uri=TEMP.add_recov_method, domain=None, range=Optional[str])

slots.iw_bt_date_well = Slot(uri=TEMP.iw_bt_date_well, name="iw_bt_date_well", curie=TEMP.curie('iw_bt_date_well'),
                   model_uri=TEMP.iw_bt_date_well, domain=None, range=Optional[str])

slots.biocide = Slot(uri=TEMP.biocide, name="biocide", curie=TEMP.curie('biocide'),
                   model_uri=TEMP.biocide, domain=None, range=Optional[str])

slots.chem_treatment = Slot(uri=TEMP.chem_treatment, name="chem_treatment", curie=TEMP.curie('chem_treatment'),
                   model_uri=TEMP.chem_treatment, domain=None, range=Optional[str])

slots.samp_collect_point = Slot(uri=TEMP.samp_collect_point, name="samp_collect_point", curie=TEMP.curie('samp_collect_point'),
                   model_uri=TEMP.samp_collect_point, domain=None, range=Optional[str])

slots.biotic_regm = Slot(uri=TEMP.biotic_regm, name="biotic_regm", curie=TEMP.curie('biotic_regm'),
                   model_uri=TEMP.biotic_regm, domain=None, range=Optional[str])

slots.climate_environment = Slot(uri=TEMP.climate_environment, name="climate_environment", curie=TEMP.curie('climate_environment'),
                   model_uri=TEMP.climate_environment, domain=None, range=Optional[str])

slots.cult_root_med = Slot(uri=TEMP.cult_root_med, name="cult_root_med", curie=TEMP.curie('cult_root_med'),
                   model_uri=TEMP.cult_root_med, domain=None, range=Optional[str])

slots.growth_facil = Slot(uri=TEMP.growth_facil, name="growth_facil", curie=TEMP.curie('growth_facil'),
                   model_uri=TEMP.growth_facil, domain=None, range=Optional[str])

slots.growth_habit = Slot(uri=TEMP.growth_habit, name="growth_habit", curie=TEMP.curie('growth_habit'),
                   model_uri=TEMP.growth_habit, domain=None, range=Optional[str])

slots.mechanical_damage = Slot(uri=TEMP.mechanical_damage, name="mechanical_damage", curie=TEMP.curie('mechanical_damage'),
                   model_uri=TEMP.mechanical_damage, domain=None, range=Optional[str])

slots.ph_regm = Slot(uri=TEMP.ph_regm, name="ph_regm", curie=TEMP.curie('ph_regm'),
                   model_uri=TEMP.ph_regm, domain=None, range=Optional[str])

slots.plant_growth_med = Slot(uri=TEMP.plant_growth_med, name="plant_growth_med", curie=TEMP.curie('plant_growth_med'),
                   model_uri=TEMP.plant_growth_med, domain=None, range=Optional[str])

slots.plant_product = Slot(uri=TEMP.plant_product, name="plant_product", curie=TEMP.curie('plant_product'),
                   model_uri=TEMP.plant_product, domain=None, range=Optional[str])

slots.plant_sex = Slot(uri=TEMP.plant_sex, name="plant_sex", curie=TEMP.curie('plant_sex'),
                   model_uri=TEMP.plant_sex, domain=None, range=Optional[str])

slots.plant_struc = Slot(uri=TEMP.plant_struc, name="plant_struc", curie=TEMP.curie('plant_struc'),
                   model_uri=TEMP.plant_struc, domain=None, range=Optional[str])

slots.root_cond = Slot(uri=TEMP.root_cond, name="root_cond", curie=TEMP.curie('root_cond'),
                   model_uri=TEMP.root_cond, domain=None, range=Optional[str])

slots.root_med_ph = Slot(uri=TEMP.root_med_ph, name="root_med_ph", curie=TEMP.curie('root_med_ph'),
                   model_uri=TEMP.root_med_ph, domain=None, range=Optional[str])

slots.root_med_solid = Slot(uri=TEMP.root_med_solid, name="root_med_solid", curie=TEMP.curie('root_med_solid'),
                   model_uri=TEMP.root_med_solid, domain=None, range=Optional[str])

slots.season_environment = Slot(uri=TEMP.season_environment, name="season_environment", curie=TEMP.curie('season_environment'),
                   model_uri=TEMP.season_environment, domain=None, range=Optional[str])

slots.standing_water_regm = Slot(uri=TEMP.standing_water_regm, name="standing_water_regm", curie=TEMP.curie('standing_water_regm'),
                   model_uri=TEMP.standing_water_regm, domain=None, range=Optional[str])

slots.tiss_cult_growth_med = Slot(uri=TEMP.tiss_cult_growth_med, name="tiss_cult_growth_med", curie=TEMP.curie('tiss_cult_growth_med'),
                   model_uri=TEMP.tiss_cult_growth_med, domain=None, range=Optional[str])

slots.sediment_type = Slot(uri=TEMP.sediment_type, name="sediment_type", curie=TEMP.curie('sediment_type'),
                   model_uri=TEMP.sediment_type, domain=None, range=Optional[str])

slots.cur_land_use = Slot(uri=TEMP.cur_land_use, name="cur_land_use", curie=TEMP.curie('cur_land_use'),
                   model_uri=TEMP.cur_land_use, domain=None, range=Optional[str])

slots.tillage = Slot(uri=TEMP.tillage, name="tillage", curie=TEMP.curie('tillage'),
                   model_uri=TEMP.tillage, domain=None, range=Optional[str])

slots.horizon = Slot(uri=TEMP.horizon, name="horizon", curie=TEMP.curie('horizon'),
                   model_uri=TEMP.horizon, domain=None, range=Optional[str])

slots.soil_horizon = Slot(uri=TEMP.soil_horizon, name="soil_horizon", curie=TEMP.curie('soil_horizon'),
                   model_uri=TEMP.soil_horizon, domain=None, range=Optional[str])

slots.fao_class = Slot(uri=TEMP.fao_class, name="fao_class", curie=TEMP.curie('fao_class'),
                   model_uri=TEMP.fao_class, domain=None, range=Optional[str])

slots.profile_position = Slot(uri=TEMP.profile_position, name="profile_position", curie=TEMP.curie('profile_position'),
                   model_uri=TEMP.profile_position, domain=None, range=Optional[str])

slots.drainage_class = Slot(uri=TEMP.drainage_class, name="drainage_class", curie=TEMP.curie('drainage_class'),
                   model_uri=TEMP.drainage_class, domain=None, range=Optional[str])

slots.fire = Slot(uri=TEMP.fire, name="fire", curie=TEMP.curie('fire'),
                   model_uri=TEMP.fire, domain=None, range=Optional[str])

slots.atmospheric_data = Slot(uri=TEMP.atmospheric_data, name="atmospheric_data", curie=TEMP.curie('atmospheric_data'),
                   model_uri=TEMP.atmospheric_data, domain=None, range=Optional[str])

slots.ph_meth = Slot(uri=TEMP.ph_meth, name="ph_meth", curie=TEMP.curie('ph_meth'),
                   model_uri=TEMP.ph_meth, domain=None, range=Optional[str])

slots.sample_name = Slot(uri=TEMP.sample_name, name="sample_name", curie=TEMP.curie('sample_name'),
                   model_uri=TEMP.sample_name, domain=None, range=Optional[str])

slots.growth_medium = Slot(uri=TEMP.growth_medium, name="growth_medium", curie=TEMP.curie('growth_medium'),
                   model_uri=TEMP.growth_medium, domain=None, range=Optional[str])

slots.farm_water_source = Slot(uri=TEMP.farm_water_source, name="farm_water_source", curie=TEMP.curie('farm_water_source'),
                   model_uri=TEMP.farm_water_source, domain=None, range=Optional[str])

slots.plant_water_method = Slot(uri=TEMP.plant_water_method, name="plant_water_method", curie=TEMP.curie('plant_water_method'),
                   model_uri=TEMP.plant_water_method, domain=None, range=Optional[str])

slots.animal_feed_equip = Slot(uri=TEMP.animal_feed_equip, name="animal_feed_equip", curie=TEMP.curie('animal_feed_equip'),
                   model_uri=TEMP.animal_feed_equip, domain=None, range=Optional[str])

slots.animal_intrusion = Slot(uri=TEMP.animal_intrusion, name="animal_intrusion", curie=TEMP.curie('animal_intrusion'),
                   model_uri=TEMP.animal_intrusion, domain=None, range=Optional[str])

slots.anim_water_method = Slot(uri=TEMP.anim_water_method, name="anim_water_method", curie=TEMP.curie('anim_water_method'),
                   model_uri=TEMP.anim_water_method, domain=None, range=Optional[str])

slots.crop_yield = Slot(uri=TEMP.crop_yield, name="crop_yield", curie=TEMP.curie('crop_yield'),
                   model_uri=TEMP.crop_yield, domain=None, range=Optional[str])

slots.cult_result = Slot(uri=TEMP.cult_result, name="cult_result", curie=TEMP.curie('cult_result'),
                   model_uri=TEMP.cult_result, domain=None, range=Optional[str])

slots.cult_result_org = Slot(uri=TEMP.cult_result_org, name="cult_result_org", curie=TEMP.curie('cult_result_org'),
                   model_uri=TEMP.cult_result_org, domain=None, range=Optional[str])

slots.cult_target = Slot(uri=TEMP.cult_target, name="cult_target", curie=TEMP.curie('cult_target'),
                   model_uri=TEMP.cult_target, domain=None, range=Optional[str])

slots.plant_part_maturity = Slot(uri=TEMP.plant_part_maturity, name="plant_part_maturity", curie=TEMP.curie('plant_part_maturity'),
                   model_uri=TEMP.plant_part_maturity, domain=None, range=Optional[str])

slots.adjacent_environment = Slot(uri=TEMP.adjacent_environment, name="adjacent_environment", curie=TEMP.curie('adjacent_environment'),
                   model_uri=TEMP.adjacent_environment, domain=None, range=Optional[str])

slots.water_source_adjac = Slot(uri=TEMP.water_source_adjac, name="water_source_adjac", curie=TEMP.curie('water_source_adjac'),
                   model_uri=TEMP.water_source_adjac, domain=None, range=Optional[str])

slots.farm_equip_shared = Slot(uri=TEMP.farm_equip_shared, name="farm_equip_shared", curie=TEMP.curie('farm_equip_shared'),
                   model_uri=TEMP.farm_equip_shared, domain=None, range=Optional[str])

slots.farm_equip_san = Slot(uri=TEMP.farm_equip_san, name="farm_equip_san", curie=TEMP.curie('farm_equip_san'),
                   model_uri=TEMP.farm_equip_san, domain=None, range=Optional[str])

slots.farm_equip_san_freq = Slot(uri=TEMP.farm_equip_san_freq, name="farm_equip_san_freq", curie=TEMP.curie('farm_equip_san_freq'),
                   model_uri=TEMP.farm_equip_san_freq, domain=None, range=Optional[str])

slots.farm_equip = Slot(uri=TEMP.farm_equip, name="farm_equip", curie=TEMP.curie('farm_equip'),
                   model_uri=TEMP.farm_equip, domain=None, range=Optional[str])

slots.fertilizer_admin = Slot(uri=TEMP.fertilizer_admin, name="fertilizer_admin", curie=TEMP.curie('fertilizer_admin'),
                   model_uri=TEMP.fertilizer_admin, domain=None, range=Optional[str])

slots.fertilizer_date = Slot(uri=TEMP.fertilizer_date, name="fertilizer_date", curie=TEMP.curie('fertilizer_date'),
                   model_uri=TEMP.fertilizer_date, domain=None, range=Optional[str])

slots.animal_group_size = Slot(uri=TEMP.animal_group_size, name="animal_group_size", curie=TEMP.curie('animal_group_size'),
                   model_uri=TEMP.animal_group_size, domain=None, range=Optional[str])

slots.animal_diet = Slot(uri=TEMP.animal_diet, name="animal_diet", curie=TEMP.curie('animal_diet'),
                   model_uri=TEMP.animal_diet, domain=None, range=Optional[str])

slots.food_contact_surf = Slot(uri=TEMP.food_contact_surf, name="food_contact_surf", curie=TEMP.curie('food_contact_surf'),
                   model_uri=TEMP.food_contact_surf, domain=None, range=Optional[str])

slots.food_contain_wrap = Slot(uri=TEMP.food_contain_wrap, name="food_contain_wrap", curie=TEMP.curie('food_contain_wrap'),
                   model_uri=TEMP.food_contain_wrap, domain=None, range=Optional[str])

slots.food_harvest_proc = Slot(uri=TEMP.food_harvest_proc, name="food_harvest_proc", curie=TEMP.curie('food_harvest_proc'),
                   model_uri=TEMP.food_harvest_proc, domain=None, range=Optional[str])

slots.food_pack_medium = Slot(uri=TEMP.food_pack_medium, name="food_pack_medium", curie=TEMP.curie('food_pack_medium'),
                   model_uri=TEMP.food_pack_medium, domain=None, range=Optional[str])

slots.food_preserv_proc = Slot(uri=TEMP.food_preserv_proc, name="food_preserv_proc", curie=TEMP.curie('food_preserv_proc'),
                   model_uri=TEMP.food_preserv_proc, domain=None, range=Optional[str])

slots.food_prod_char = Slot(uri=TEMP.food_prod_char, name="food_prod_char", curie=TEMP.curie('food_prod_char'),
                   model_uri=TEMP.food_prod_char, domain=None, range=Optional[str])

slots.food_trav_mode = Slot(uri=TEMP.food_trav_mode, name="food_trav_mode", curie=TEMP.curie('food_trav_mode'),
                   model_uri=TEMP.food_trav_mode, domain=None, range=Optional[str])

slots.food_trav_vehic = Slot(uri=TEMP.food_trav_vehic, name="food_trav_vehic", curie=TEMP.curie('food_trav_vehic'),
                   model_uri=TEMP.food_trav_vehic, domain=None, range=Optional[str])

slots.Food_source = Slot(uri=TEMP.Food_source, name="Food_source", curie=TEMP.curie('Food_source'),
                   model_uri=TEMP.Food_source, domain=None, range=Optional[str])

slots.food_source = Slot(uri=TEMP.food_source, name="food_source", curie=TEMP.curie('food_source'),
                   model_uri=TEMP.food_source, domain=None, range=Optional[str])

slots.food_treat_proc = Slot(uri=TEMP.food_treat_proc, name="food_treat_proc", curie=TEMP.curie('food_treat_proc'),
                   model_uri=TEMP.food_treat_proc, domain=None, range=Optional[str])

slots.extr_weather_event = Slot(uri=TEMP.extr_weather_event, name="extr_weather_event", curie=TEMP.curie('extr_weather_event'),
                   model_uri=TEMP.extr_weather_event, domain=None, range=Optional[str])

slots.date_extr_weath = Slot(uri=TEMP.date_extr_weath, name="date_extr_weath", curie=TEMP.curie('date_extr_weath'),
                   model_uri=TEMP.date_extr_weath, domain=None, range=Optional[str])

slots.intended_consumer = Slot(uri=TEMP.intended_consumer, name="intended_consumer", curie=TEMP.curie('intended_consumer'),
                   model_uri=TEMP.intended_consumer, domain=None, range=Optional[str])

slots.library_prep_kit = Slot(uri=TEMP.library_prep_kit, name="library_prep_kit", curie=TEMP.curie('library_prep_kit'),
                   model_uri=TEMP.library_prep_kit, domain=None, range=Optional[str])

slots.air_flow_impede = Slot(uri=TEMP.air_flow_impede, name="air_flow_impede", curie=TEMP.curie('air_flow_impede'),
                   model_uri=TEMP.air_flow_impede, domain=None, range=Optional[str])

slots.lot_number = Slot(uri=TEMP.lot_number, name="lot_number", curie=TEMP.curie('lot_number'),
                   model_uri=TEMP.lot_number, domain=None, range=Optional[str])

slots.season_humidity = Slot(uri=TEMP.season_humidity, name="season_humidity", curie=TEMP.curie('season_humidity'),
                   model_uri=TEMP.season_humidity, domain=None, range=Optional[str])

slots.part_plant_animal = Slot(uri=TEMP.part_plant_animal, name="part_plant_animal", curie=TEMP.curie('part_plant_animal'),
                   model_uri=TEMP.part_plant_animal, domain=None, range=Optional[str])

slots.plant_reprod_crop = Slot(uri=TEMP.plant_reprod_crop, name="plant_reprod_crop", curie=TEMP.curie('plant_reprod_crop'),
                   model_uri=TEMP.plant_reprod_crop, domain=None, range=Optional[str])

slots.samp_purpose = Slot(uri=TEMP.samp_purpose, name="samp_purpose", curie=TEMP.curie('samp_purpose'),
                   model_uri=TEMP.samp_purpose, domain=None, range=Optional[str])

slots.repository_name = Slot(uri=TEMP.repository_name, name="repository_name", curie=TEMP.curie('repository_name'),
                   model_uri=TEMP.repository_name, domain=None, range=Optional[str])

slots.samp_pooling = Slot(uri=TEMP.samp_pooling, name="samp_pooling", curie=TEMP.curie('samp_pooling'),
                   model_uri=TEMP.samp_pooling, domain=None, range=Optional[str])

slots.samp_source_mat_cat = Slot(uri=TEMP.samp_source_mat_cat, name="samp_source_mat_cat", curie=TEMP.curie('samp_source_mat_cat'),
                   model_uri=TEMP.samp_source_mat_cat, domain=None, range=Optional[str])

slots.sequencing_kit = Slot(uri=TEMP.sequencing_kit, name="sequencing_kit", curie=TEMP.curie('sequencing_kit'),
                   model_uri=TEMP.sequencing_kit, domain=None, range=Optional[str])

slots.sequencing_location = Slot(uri=TEMP.sequencing_location, name="sequencing_location", curie=TEMP.curie('sequencing_location'),
                   model_uri=TEMP.sequencing_location, domain=None, range=Optional[str])

slots.serovar_or_serotype = Slot(uri=TEMP.serovar_or_serotype, name="serovar_or_serotype", curie=TEMP.curie('serovar_or_serotype'),
                   model_uri=TEMP.serovar_or_serotype, domain=None, range=Optional[str])

slots.soil_conductivity = Slot(uri=TEMP.soil_conductivity, name="soil_conductivity", curie=TEMP.curie('soil_conductivity'),
                   model_uri=TEMP.soil_conductivity, domain=None, range=Optional[str])

slots.soil_cover = Slot(uri=TEMP.soil_cover, name="soil_cover", curie=TEMP.curie('soil_cover'),
                   model_uri=TEMP.soil_cover, domain=None, range=Optional[str])

slots.soil_pH = Slot(uri=TEMP.soil_pH, name="soil_pH", curie=TEMP.curie('soil_pH'),
                   model_uri=TEMP.soil_pH, domain=None, range=Optional[str])

slots.rel_location = Slot(uri=TEMP.rel_location, name="rel_location", curie=TEMP.curie('rel_location'),
                   model_uri=TEMP.rel_location, domain=None, range=Optional[str])

slots.soil_porosity = Slot(uri=TEMP.soil_porosity, name="soil_porosity", curie=TEMP.curie('soil_porosity'),
                   model_uri=TEMP.soil_porosity, domain=None, range=Optional[str])

slots.soil_temp = Slot(uri=MIXS['0000113'], name="soil_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.soil_temp, domain=Soil, range=Optional[str])

slots.soil_texture_class = Slot(uri=TEMP.soil_texture_class, name="soil_texture_class", curie=TEMP.curie('soil_texture_class'),
                   model_uri=TEMP.soil_texture_class, domain=None, range=Optional[str])

slots.spikein_org = Slot(uri=TEMP.spikein_org, name="spikein_org", curie=TEMP.curie('spikein_org'),
                   model_uri=TEMP.spikein_org, domain=None, range=Optional[str])

slots.spikein_serovar = Slot(uri=TEMP.spikein_serovar, name="spikein_serovar", curie=TEMP.curie('spikein_serovar'),
                   model_uri=TEMP.spikein_serovar, domain=None, range=Optional[str])

slots.spikein_growth_med = Slot(uri=TEMP.spikein_growth_med, name="spikein_growth_med", curie=TEMP.curie('spikein_growth_med'),
                   model_uri=TEMP.spikein_growth_med, domain=None, range=Optional[str])

slots.spikein_strain = Slot(uri=TEMP.spikein_strain, name="spikein_strain", curie=TEMP.curie('spikein_strain'),
                   model_uri=TEMP.spikein_strain, domain=None, range=Optional[str])

slots.spikein_antibiotic = Slot(uri=TEMP.spikein_antibiotic, name="spikein_antibiotic", curie=TEMP.curie('spikein_antibiotic'),
                   model_uri=TEMP.spikein_antibiotic, domain=None, range=Optional[str])

slots.spikein_metal = Slot(uri=TEMP.spikein_metal, name="spikein_metal", curie=TEMP.curie('spikein_metal'),
                   model_uri=TEMP.spikein_metal, domain=None, range=Optional[str])

slots.timepoint = Slot(uri=TEMP.timepoint, name="timepoint", curie=TEMP.curie('timepoint'),
                   model_uri=TEMP.timepoint, domain=None, range=Optional[str])

slots.water_frequency = Slot(uri=TEMP.water_frequency, name="water_frequency", curie=TEMP.curie('water_frequency'),
                   model_uri=TEMP.water_frequency, domain=None, range=Optional[str])

slots.water_pH = Slot(uri=TEMP.water_pH, name="water_pH", curie=TEMP.curie('water_pH'),
                   model_uri=TEMP.water_pH, domain=None, range=Optional[str])

slots.water_source_shared = Slot(uri=TEMP.water_source_shared, name="water_source_shared", curie=TEMP.curie('water_source_shared'),
                   model_uri=TEMP.water_source_shared, domain=None, range=Optional[str])

slots.enrichment_protocol = Slot(uri=TEMP.enrichment_protocol, name="enrichment_protocol", curie=TEMP.curie('enrichment_protocol'),
                   model_uri=TEMP.enrichment_protocol, domain=None, range=Optional[str])

slots.food_quality_date = Slot(uri=TEMP.food_quality_date, name="food_quality_date", curie=TEMP.curie('food_quality_date'),
                   model_uri=TEMP.food_quality_date, domain=None, range=Optional[str])

slots.IFSAC_category = Slot(uri=TEMP.IFSAC_category, name="IFSAC_category", curie=TEMP.curie('IFSAC_category'),
                   model_uri=TEMP.IFSAC_category, domain=None, range=Optional[str])

slots.animal_housing = Slot(uri=TEMP.animal_housing, name="animal_housing", curie=TEMP.curie('animal_housing'),
                   model_uri=TEMP.animal_housing, domain=None, range=Optional[str])

slots.cult_isol_date = Slot(uri=TEMP.cult_isol_date, name="cult_isol_date", curie=TEMP.curie('cult_isol_date'),
                   model_uri=TEMP.cult_isol_date, domain=None, range=Optional[str])

slots.food_clean_proc = Slot(uri=TEMP.food_clean_proc, name="food_clean_proc", curie=TEMP.curie('food_clean_proc'),
                   model_uri=TEMP.food_clean_proc, domain=None, range=Optional[str])

slots.coll_site_geo_feat = Slot(uri=TEMP.coll_site_geo_feat, name="coll_site_geo_feat", curie=TEMP.curie('coll_site_geo_feat'),
                   model_uri=TEMP.coll_site_geo_feat, domain=None, range=Optional[str])

slots.Food_Product_type = Slot(uri=TEMP.Food_Product_type, name="Food_Product_type", curie=TEMP.curie('Food_Product_type'),
                   model_uri=TEMP.Food_Product_type, domain=None, range=Optional[str])

slots.food_product_type = Slot(uri=TEMP.food_product_type, name="food_product_type", curie=TEMP.curie('food_product_type'),
                   model_uri=TEMP.food_product_type, domain=None, range=Optional[str])

slots.ferm_chem_add = Slot(uri=TEMP.ferm_chem_add, name="ferm_chem_add", curie=TEMP.curie('ferm_chem_add'),
                   model_uri=TEMP.ferm_chem_add, domain=None, range=Optional[str])

slots.ferm_chem_add_perc = Slot(uri=TEMP.ferm_chem_add_perc, name="ferm_chem_add_perc", curie=TEMP.curie('ferm_chem_add_perc'),
                   model_uri=TEMP.ferm_chem_add_perc, domain=None, range=Optional[str])

slots.ferm_headspace_oxy = Slot(uri=TEMP.ferm_headspace_oxy, name="ferm_headspace_oxy", curie=TEMP.curie('ferm_headspace_oxy'),
                   model_uri=TEMP.ferm_headspace_oxy, domain=None, range=Optional[str])

slots.ferm_medium = Slot(uri=TEMP.ferm_medium, name="ferm_medium", curie=TEMP.curie('ferm_medium'),
                   model_uri=TEMP.ferm_medium, domain=None, range=Optional[str])

slots.ferm_pH = Slot(uri=TEMP.ferm_pH, name="ferm_pH", curie=TEMP.curie('ferm_pH'),
                   model_uri=TEMP.ferm_pH, domain=None, range=Optional[str])

slots.ferm_rel_humidity = Slot(uri=TEMP.ferm_rel_humidity, name="ferm_rel_humidity", curie=TEMP.curie('ferm_rel_humidity'),
                   model_uri=TEMP.ferm_rel_humidity, domain=None, range=Optional[str])

slots.ferm_temp = Slot(uri=TEMP.ferm_temp, name="ferm_temp", curie=TEMP.curie('ferm_temp'),
                   model_uri=TEMP.ferm_temp, domain=None, range=Optional[str])

slots.ferm_time = Slot(uri=TEMP.ferm_time, name="ferm_time", curie=TEMP.curie('ferm_time'),
                   model_uri=TEMP.ferm_time, domain=None, range=Optional[str])

slots.ferm_vessel = Slot(uri=TEMP.ferm_vessel, name="ferm_vessel", curie=TEMP.curie('ferm_vessel'),
                   model_uri=TEMP.ferm_vessel, domain=None, range=Optional[str])

slots.bacterial_density = Slot(uri=TEMP.bacterial_density, name="bacterial_density", curie=TEMP.curie('bacterial_density'),
                   model_uri=TEMP.bacterial_density, domain=None, range=Optional[str])

slots.cons_food_stor_dur = Slot(uri=TEMP.cons_food_stor_dur, name="cons_food_stor_dur", curie=TEMP.curie('cons_food_stor_dur'),
                   model_uri=TEMP.cons_food_stor_dur, domain=None, range=Optional[str])

slots.cons_food_stor_temp = Slot(uri=TEMP.cons_food_stor_temp, name="cons_food_stor_temp", curie=TEMP.curie('cons_food_stor_temp'),
                   model_uri=TEMP.cons_food_stor_temp, domain=None, range=Optional[str])

slots.cons_purch_date = Slot(uri=TEMP.cons_purch_date, name="cons_purch_date", curie=TEMP.curie('cons_purch_date'),
                   model_uri=TEMP.cons_purch_date, domain=None, range=Optional[str])

slots.cons_qty_purchased = Slot(uri=TEMP.cons_qty_purchased, name="cons_qty_purchased", curie=TEMP.curie('cons_qty_purchased'),
                   model_uri=TEMP.cons_qty_purchased, domain=None, range=Optional[str])

slots.dietary_claim_use = Slot(uri=TEMP.dietary_claim_use, name="dietary_claim_use", curie=TEMP.curie('dietary_claim_use'),
                   model_uri=TEMP.dietary_claim_use, domain=None, range=Optional[str])

slots.food_additive = Slot(uri=TEMP.food_additive, name="food_additive", curie=TEMP.curie('food_additive'),
                   model_uri=TEMP.food_additive, domain=None, range=Optional[str])

slots.food_allergen_label = Slot(uri=TEMP.food_allergen_label, name="food_allergen_label", curie=TEMP.curie('food_allergen_label'),
                   model_uri=TEMP.food_allergen_label, domain=None, range=Optional[str])

slots.food_cooking_proc = Slot(uri=TEMP.food_cooking_proc, name="food_cooking_proc", curie=TEMP.curie('food_cooking_proc'),
                   model_uri=TEMP.food_cooking_proc, domain=None, range=Optional[str])

slots.food_dis_point = Slot(uri=TEMP.food_dis_point, name="food_dis_point", curie=TEMP.curie('food_dis_point'),
                   model_uri=TEMP.food_dis_point, domain=None, range=Optional[str])

slots.food_dis_point_city = Slot(uri=TEMP.food_dis_point_city, name="food_dis_point_city", curie=TEMP.curie('food_dis_point_city'),
                   model_uri=TEMP.food_dis_point_city, domain=None, range=Optional[str])

slots.food_ingredient = Slot(uri=TEMP.food_ingredient, name="food_ingredient", curie=TEMP.curie('food_ingredient'),
                   model_uri=TEMP.food_ingredient, domain=None, range=Optional[str])

slots.food_name_status = Slot(uri=TEMP.food_name_status, name="food_name_status", curie=TEMP.curie('food_name_status'),
                   model_uri=TEMP.food_name_status, domain=None, range=Optional[str])

slots.food_origin = Slot(uri=TEMP.food_origin, name="food_origin", curie=TEMP.curie('food_origin'),
                   model_uri=TEMP.food_origin, domain=None, range=Optional[str])

slots.food_pack_capacity = Slot(uri=TEMP.food_pack_capacity, name="food_pack_capacity", curie=TEMP.curie('food_pack_capacity'),
                   model_uri=TEMP.food_pack_capacity, domain=None, range=Optional[str])

slots.food_pack_integrity = Slot(uri=TEMP.food_pack_integrity, name="food_pack_integrity", curie=TEMP.curie('food_pack_integrity'),
                   model_uri=TEMP.food_pack_integrity, domain=None, range=Optional[str])

slots.food_prior_contact = Slot(uri=TEMP.food_prior_contact, name="food_prior_contact", curie=TEMP.curie('food_prior_contact'),
                   model_uri=TEMP.food_prior_contact, domain=None, range=Optional[str])

slots.food_prod = Slot(uri=TEMP.food_prod, name="food_prod", curie=TEMP.curie('food_prod'),
                   model_uri=TEMP.food_prod, domain=None, range=Optional[str])

slots.food_prod_synonym = Slot(uri=TEMP.food_prod_synonym, name="food_prod_synonym", curie=TEMP.curie('food_prod_synonym'),
                   model_uri=TEMP.food_prod_synonym, domain=None, range=Optional[str])

slots.food_product_qual = Slot(uri=TEMP.food_product_qual, name="food_product_qual", curie=TEMP.curie('food_product_qual'),
                   model_uri=TEMP.food_product_qual, domain=None, range=Optional[str])

slots.food_trace_list = Slot(uri=TEMP.food_trace_list, name="food_trace_list", curie=TEMP.curie('food_trace_list'),
                   model_uri=TEMP.food_trace_list, domain=None, range=Optional[str])

slots.HACCP_term = Slot(uri=TEMP.HACCP_term, name="HACCP_term", curie=TEMP.curie('HACCP_term'),
                   model_uri=TEMP.HACCP_term, domain=None, range=Optional[str])

slots.microb_cult_med = Slot(uri=TEMP.microb_cult_med, name="microb_cult_med", curie=TEMP.curie('microb_cult_med'),
                   model_uri=TEMP.microb_cult_med, domain=None, range=Optional[str])

slots.microb_start = Slot(uri=TEMP.microb_start, name="microb_start", curie=TEMP.curie('microb_start'),
                   model_uri=TEMP.microb_start, domain=None, range=Optional[str])

slots.microb_start_count = Slot(uri=TEMP.microb_start_count, name="microb_start_count", curie=TEMP.curie('microb_start_count'),
                   model_uri=TEMP.microb_start_count, domain=None, range=Optional[str])

slots.microb_start_inoc = Slot(uri=TEMP.microb_start_inoc, name="microb_start_inoc", curie=TEMP.curie('microb_start_inoc'),
                   model_uri=TEMP.microb_start_inoc, domain=None, range=Optional[str])

slots.microb_start_prep = Slot(uri=TEMP.microb_start_prep, name="microb_start_prep", curie=TEMP.curie('microb_start_prep'),
                   model_uri=TEMP.microb_start_prep, domain=None, range=Optional[str])

slots.microb_start_source = Slot(uri=TEMP.microb_start_source, name="microb_start_source", curie=TEMP.curie('microb_start_source'),
                   model_uri=TEMP.microb_start_source, domain=None, range=Optional[str])

slots.microb_start_taxID = Slot(uri=TEMP.microb_start_taxID, name="microb_start_taxID", curie=TEMP.curie('microb_start_taxID'),
                   model_uri=TEMP.microb_start_taxID, domain=None, range=Optional[str])

slots.nucl_acid_ext_kit = Slot(uri=TEMP.nucl_acid_ext_kit, name="nucl_acid_ext_kit", curie=TEMP.curie('nucl_acid_ext_kit'),
                   model_uri=TEMP.nucl_acid_ext_kit, domain=None, range=Optional[str])

slots.num_samp_collect = Slot(uri=TEMP.num_samp_collect, name="num_samp_collect", curie=TEMP.curie('num_samp_collect'),
                   model_uri=TEMP.num_samp_collect, domain=None, range=Optional[str])

slots.samp_collect_method = Slot(uri=TEMP.samp_collect_method, name="samp_collect_method", curie=TEMP.curie('samp_collect_method'),
                   model_uri=TEMP.samp_collect_method, domain=None, range=Optional[str])

slots.sample_collec_method = Slot(uri=TEMP.sample_collec_method, name="sample_collec_method", curie=TEMP.curie('sample_collec_method'),
                   model_uri=TEMP.sample_collec_method, domain=None, range=Optional[str])

slots.samp_rep_biol = Slot(uri=TEMP.samp_rep_biol, name="samp_rep_biol", curie=TEMP.curie('samp_rep_biol'),
                   model_uri=TEMP.samp_rep_biol, domain=None, range=Optional[str])

slots.samp_rep_tech = Slot(uri=TEMP.samp_rep_tech, name="samp_rep_tech", curie=TEMP.curie('samp_rep_tech'),
                   model_uri=TEMP.samp_rep_tech, domain=None, range=Optional[str])

slots.samp_stor_device = Slot(uri=TEMP.samp_stor_device, name="samp_stor_device", curie=TEMP.curie('samp_stor_device'),
                   model_uri=TEMP.samp_stor_device, domain=None, range=Optional[str])

slots.samp_stor_media = Slot(uri=TEMP.samp_stor_media, name="samp_stor_media", curie=TEMP.curie('samp_stor_media'),
                   model_uri=TEMP.samp_stor_media, domain=None, range=Optional[str])

slots.samp_transport_cont = Slot(uri=TEMP.samp_transport_cont, name="samp_transport_cont", curie=TEMP.curie('samp_transport_cont'),
                   model_uri=TEMP.samp_transport_cont, domain=None, range=Optional[str])

slots.samp_transport_dur = Slot(uri=TEMP.samp_transport_dur, name="samp_transport_dur", curie=TEMP.curie('samp_transport_dur'),
                   model_uri=TEMP.samp_transport_dur, domain=None, range=Optional[str])

slots.samp_transport_temp = Slot(uri=TEMP.samp_transport_temp, name="samp_transport_temp", curie=TEMP.curie('samp_transport_temp'),
                   model_uri=TEMP.samp_transport_temp, domain=None, range=Optional[str])

slots.spec_intended_cons = Slot(uri=TEMP.spec_intended_cons, name="spec_intended_cons", curie=TEMP.curie('spec_intended_cons'),
                   model_uri=TEMP.spec_intended_cons, domain=None, range=Optional[str])

slots.spikein_AMR = Slot(uri=TEMP.spikein_AMR, name="spikein_AMR", curie=TEMP.curie('spikein_AMR'),
                   model_uri=TEMP.spikein_AMR, domain=None, range=Optional[str])

slots.study_design = Slot(uri=TEMP.study_design, name="study_design", curie=TEMP.curie('study_design'),
                   model_uri=TEMP.study_design, domain=None, range=Optional[str])

slots.study_inc_dur = Slot(uri=TEMP.study_inc_dur, name="study_inc_dur", curie=TEMP.curie('study_inc_dur'),
                   model_uri=TEMP.study_inc_dur, domain=None, range=Optional[str])

slots.study_inc_temp = Slot(uri=TEMP.study_inc_temp, name="study_inc_temp", curie=TEMP.curie('study_inc_temp'),
                   model_uri=TEMP.study_inc_temp, domain=None, range=Optional[str])

slots.study_timecourse = Slot(uri=TEMP.study_timecourse, name="study_timecourse", curie=TEMP.curie('study_timecourse'),
                   model_uri=TEMP.study_timecourse, domain=None, range=Optional[str])

slots.study_tmnt = Slot(uri=TEMP.study_tmnt, name="study_tmnt", curie=TEMP.curie('study_tmnt'),
                   model_uri=TEMP.study_tmnt, domain=None, range=Optional[str])

slots.animal_am = Slot(uri=TEMP.animal_am, name="animal_am", curie=TEMP.curie('animal_am'),
                   model_uri=TEMP.animal_am, domain=None, range=Optional[str])

slots.animal_am_dur = Slot(uri=TEMP.animal_am_dur, name="animal_am_dur", curie=TEMP.curie('animal_am_dur'),
                   model_uri=TEMP.animal_am_dur, domain=None, range=Optional[str])

slots.animal_am_freq = Slot(uri=TEMP.animal_am_freq, name="animal_am_freq", curie=TEMP.curie('animal_am_freq'),
                   model_uri=TEMP.animal_am_freq, domain=None, range=Optional[str])

slots.animal_am_route = Slot(uri=TEMP.animal_am_route, name="animal_am_route", curie=TEMP.curie('animal_am_route'),
                   model_uri=TEMP.animal_am_route, domain=None, range=Optional[str])

slots.animal_am_use = Slot(uri=TEMP.animal_am_use, name="animal_am_use", curie=TEMP.curie('animal_am_use'),
                   model_uri=TEMP.animal_am_use, domain=None, range=Optional[str])

slots.animal_body_cond = Slot(uri=TEMP.animal_body_cond, name="animal_body_cond", curie=TEMP.curie('animal_body_cond'),
                   model_uri=TEMP.animal_body_cond, domain=None, range=Optional[str])

slots.animal_sex = Slot(uri=TEMP.animal_sex, name="animal_sex", curie=TEMP.curie('animal_sex'),
                   model_uri=TEMP.animal_sex, domain=None, range=Optional[str])

slots.food_source_age = Slot(uri=TEMP.food_source_age, name="food_source_age", curie=TEMP.curie('food_source_age'),
                   model_uri=TEMP.food_source_age, domain=None, range=Optional[str])

slots.facility_type = Slot(uri=TEMP.facility_type, name="facility_type", curie=TEMP.curie('facility_type'),
                   model_uri=TEMP.facility_type, domain=None, range=Optional[str])

slots.hygienic_area = Slot(uri=TEMP.hygienic_area, name="hygienic_area", curie=TEMP.curie('hygienic_area'),
                   model_uri=TEMP.hygienic_area, domain=None, range=Optional[str])

slots.env_monitoring_zone = Slot(uri=TEMP.env_monitoring_zone, name="env_monitoring_zone", curie=TEMP.curie('env_monitoring_zone'),
                   model_uri=TEMP.env_monitoring_zone, domain=None, range=Optional[str])

slots.area_samp_size = Slot(uri=TEMP.area_samp_size, name="area_samp_size", curie=TEMP.curie('area_samp_size'),
                   model_uri=TEMP.area_samp_size, domain=None, range=Optional[str])

slots.samp_surf_moisture = Slot(uri=TEMP.samp_surf_moisture, name="samp_surf_moisture", curie=TEMP.curie('samp_surf_moisture'),
                   model_uri=TEMP.samp_surf_moisture, domain=None, range=Optional[str])

slots.samp_loc_condition = Slot(uri=TEMP.samp_loc_condition, name="samp_loc_condition", curie=TEMP.curie('samp_loc_condition'),
                   model_uri=TEMP.samp_loc_condition, domain=None, range=Optional[str])

slots.biocide_used = Slot(uri=TEMP.biocide_used, name="biocide_used", curie=TEMP.curie('biocide_used'),
                   model_uri=TEMP.biocide_used, domain=None, range=Optional[str])

slots.ster_meth_samp_room = Slot(uri=TEMP.ster_meth_samp_room, name="ster_meth_samp_room", curie=TEMP.curie('ster_meth_samp_room'),
                   model_uri=TEMP.ster_meth_samp_room, domain=None, range=Optional[str])

slots.photosynt_activ = Slot(uri=TEMP.photosynt_activ, name="photosynt_activ", curie=TEMP.curie('photosynt_activ'),
                   model_uri=TEMP.photosynt_activ, domain=None, range=Optional[str])

slots.host_symbiont = Slot(uri=TEMP.host_symbiont, name="host_symbiont", curie=TEMP.curie('host_symbiont'),
                   model_uri=TEMP.host_symbiont, domain=None, range=Optional[str])

slots.association_duration = Slot(uri=TEMP.association_duration, name="association_duration", curie=TEMP.curie('association_duration'),
                   model_uri=TEMP.association_duration, domain=None, range=Optional[str])

slots.sym_life_cycle_type = Slot(uri=TEMP.sym_life_cycle_type, name="sym_life_cycle_type", curie=TEMP.curie('sym_life_cycle_type'),
                   model_uri=TEMP.sym_life_cycle_type, domain=None, range=Optional[str])

slots.symbiont_host_role = Slot(uri=TEMP.symbiont_host_role, name="symbiont_host_role", curie=TEMP.curie('symbiont_host_role'),
                   model_uri=TEMP.symbiont_host_role, domain=None, range=Optional[str])

slots.host_number = Slot(uri=TEMP.host_number, name="host_number", curie=TEMP.curie('host_number'),
                   model_uri=TEMP.host_number, domain=None, range=Optional[str])

slots.host_of_host_taxid = Slot(uri=TEMP.host_of_host_taxid, name="host_of_host_taxid", curie=TEMP.curie('host_of_host_taxid'),
                   model_uri=TEMP.host_of_host_taxid, domain=None, range=Optional[str])

slots.type_of_symbiosis = Slot(uri=TEMP.type_of_symbiosis, name="type_of_symbiosis", curie=TEMP.curie('type_of_symbiosis'),
                   model_uri=TEMP.type_of_symbiosis, domain=None, range=Optional[str])

slots.host_specificity = Slot(uri=TEMP.host_specificity, name="host_specificity", curie=TEMP.curie('host_specificity'),
                   model_uri=TEMP.host_specificity, domain=None, range=Optional[str])

slots.host_of_host_coinf = Slot(uri=TEMP.host_of_host_coinf, name="host_of_host_coinf", curie=TEMP.curie('host_of_host_coinf'),
                   model_uri=TEMP.host_of_host_coinf, domain=None, range=Optional[str])

slots.mode_transmission = Slot(uri=TEMP.mode_transmission, name="mode_transmission", curie=TEMP.curie('mode_transmission'),
                   model_uri=TEMP.mode_transmission, domain=None, range=Optional[str])

slots.host_cellular_loc = Slot(uri=TEMP.host_cellular_loc, name="host_cellular_loc", curie=TEMP.curie('host_cellular_loc'),
                   model_uri=TEMP.host_cellular_loc, domain=None, range=Optional[str])

slots.host_dependence = Slot(uri=TEMP.host_dependence, name="host_dependence", curie=TEMP.curie('host_dependence'),
                   model_uri=TEMP.host_dependence, domain=None, range=Optional[str])

slots.route_transmission = Slot(uri=TEMP.route_transmission, name="route_transmission", curie=TEMP.curie('route_transmission'),
                   model_uri=TEMP.route_transmission, domain=None, range=Optional[str])

slots.samp_store_sol = Slot(uri=TEMP.samp_store_sol, name="samp_store_sol", curie=TEMP.curie('samp_store_sol'),
                   model_uri=TEMP.samp_store_sol, domain=None, range=Optional[str])

slots.host_subspecf_genlin = Slot(uri=TEMP.host_subspecf_genlin, name="host_subspecf_genlin", curie=TEMP.curie('host_subspecf_genlin'),
                   model_uri=TEMP.host_subspecf_genlin, domain=None, range=Optional[str])

slots.host_of_host_disease = Slot(uri=TEMP.host_of_host_disease, name="host_of_host_disease", curie=TEMP.curie('host_of_host_disease'),
                   model_uri=TEMP.host_of_host_disease, domain=None, range=Optional[str])

slots.host_of_host_name = Slot(uri=TEMP.host_of_host_name, name="host_of_host_name", curie=TEMP.curie('host_of_host_name'),
                   model_uri=TEMP.host_of_host_name, domain=None, range=Optional[str])

slots.host_of_host_env_loc = Slot(uri=TEMP.host_of_host_env_loc, name="host_of_host_env_loc", curie=TEMP.curie('host_of_host_env_loc'),
                   model_uri=TEMP.host_of_host_env_loc, domain=None, range=Optional[str])

slots.host_of_host_env_med = Slot(uri=TEMP.host_of_host_env_med, name="host_of_host_env_med", curie=TEMP.curie('host_of_host_env_med'),
                   model_uri=TEMP.host_of_host_env_med, domain=None, range=Optional[str])

slots.host_of_host_sub_id = Slot(uri=TEMP.host_of_host_sub_id, name="host_of_host_sub_id", curie=TEMP.curie('host_of_host_sub_id'),
                   model_uri=TEMP.host_of_host_sub_id, domain=None, range=Optional[str])

slots.host_of_host_fam_rel = Slot(uri=TEMP.host_of_host_fam_rel, name="host_of_host_fam_rel", curie=TEMP.curie('host_of_host_fam_rel'),
                   model_uri=TEMP.host_of_host_fam_rel, domain=None, range=Optional[str])

slots.host_of_host_infname = Slot(uri=TEMP.host_of_host_infname, name="host_of_host_infname", curie=TEMP.curie('host_of_host_infname'),
                   model_uri=TEMP.host_of_host_infname, domain=None, range=Optional[str])

slots.host_of_host_infrank = Slot(uri=TEMP.host_of_host_infrank, name="host_of_host_infrank", curie=TEMP.curie('host_of_host_infrank'),
                   model_uri=TEMP.host_of_host_infrank, domain=None, range=Optional[str])

slots.host_of_host_geno = Slot(uri=TEMP.host_of_host_geno, name="host_of_host_geno", curie=TEMP.curie('host_of_host_geno'),
                   model_uri=TEMP.host_of_host_geno, domain=None, range=Optional[str])

slots.host_of_host_pheno = Slot(uri=TEMP.host_of_host_pheno, name="host_of_host_pheno", curie=TEMP.curie('host_of_host_pheno'),
                   model_uri=TEMP.host_of_host_pheno, domain=None, range=Optional[str])

slots.host_of_host_gravid = Slot(uri=TEMP.host_of_host_gravid, name="host_of_host_gravid", curie=TEMP.curie('host_of_host_gravid'),
                   model_uri=TEMP.host_of_host_gravid, domain=None, range=Optional[str])

slots.host_of_host_totmass = Slot(uri=TEMP.host_of_host_totmass, name="host_of_host_totmass", curie=TEMP.curie('host_of_host_totmass'),
                   model_uri=TEMP.host_of_host_totmass, domain=None, range=Optional[str])

slots.photosynt_activ_meth = Slot(uri=TEMP.photosynt_activ_meth, name="photosynt_activ_meth", curie=TEMP.curie('photosynt_activ_meth'),
                   model_uri=TEMP.photosynt_activ_meth, domain=None, range=Optional[str])

slots.prod_label_claims = Slot(uri=TEMP.prod_label_claims, name="prod_label_claims", curie=TEMP.curie('prod_label_claims'),
                   model_uri=TEMP.prod_label_claims, domain=None, range=Optional[str])

slots.migs_eu_samp_size = Slot(uri=MIXS['0000001'], name="migs_eu_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.migs_eu_samp_size, domain=MigsEu, range=Optional[str])

slots.migs_eu_samp_collec_device = Slot(uri=MIXS['0000002'], name="migs_eu_samp_collec_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.migs_eu_samp_collec_device, domain=MigsEu, range=Optional[str])

slots.migs_eu_isol_growth_condt = Slot(uri=MIXS['0000003'], name="migs_eu_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=TEMP.migs_eu_isol_growth_condt, domain=MigsEu, range=Optional[str])

slots.migs_eu_contam_screen_input = Slot(uri=MIXS['0000005'], name="migs_eu_contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=TEMP.migs_eu_contam_screen_input, domain=MigsEu, range=Optional[str])

slots.migs_eu_wga_amp_kit = Slot(uri=MIXS['0000006'], name="migs_eu_wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=TEMP.migs_eu_wga_amp_kit, domain=MigsEu, range=Optional[str])

slots.migs_eu_experimental_factor = Slot(uri=MIXS['0000008'], name="migs_eu_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=TEMP.migs_eu_experimental_factor, domain=MigsEu, range=Optional[str])

slots.migs_eu_lat_lon = Slot(uri=MIXS['0000009'], name="migs_eu_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.migs_eu_lat_lon, domain=MigsEu, range=Optional[str])

slots.migs_eu_geo_loc_name = Slot(uri=MIXS['0000010'], name="migs_eu_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.migs_eu_geo_loc_name, domain=MigsEu, range=Optional[str])

slots.migs_eu_collection_date = Slot(uri=MIXS['0000011'], name="migs_eu_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.migs_eu_collection_date, domain=MigsEu, range=Optional[str])

slots.migs_eu_env_broad_scale = Slot(uri=MIXS['0000012'], name="migs_eu_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.migs_eu_env_broad_scale, domain=MigsEu, range=Optional[str])

slots.migs_eu_env_local_scale = Slot(uri=MIXS['0000013'], name="migs_eu_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.migs_eu_env_local_scale, domain=MigsEu, range=Optional[str])

slots.migs_eu_env_medium = Slot(uri=MIXS['0000014'], name="migs_eu_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.migs_eu_env_medium, domain=MigsEu, range=Optional[str])

slots.migs_eu_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="migs_eu_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=TEMP.migs_eu_rel_to_oxygen, domain=MigsEu, range=Optional[str])

slots.migs_eu_samp_mat_process = Slot(uri=MIXS['0000016'], name="migs_eu_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=TEMP.migs_eu_samp_mat_process, domain=MigsEu, range=Optional[str])

slots.migs_eu_size_frac = Slot(uri=MIXS['0000017'], name="migs_eu_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=TEMP.migs_eu_size_frac, domain=MigsEu, range=Optional[str])

slots.migs_eu_depth = Slot(uri=MIXS['0000018'], name="migs_eu_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.migs_eu_depth, domain=MigsEu, range=Optional[str])

slots.migs_eu_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="migs_eu_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=TEMP.migs_eu_subspecf_gen_lin, domain=MigsEu, range=Optional[str])

slots.migs_eu_ploidy = Slot(uri=MIXS['0000021'], name="migs_eu_ploidy", curie=MIXS.curie('0000021'),
                   model_uri=TEMP.migs_eu_ploidy, domain=MigsEu, range=Optional[str])

slots.migs_eu_num_replicons = Slot(uri=MIXS['0000022'], name="migs_eu_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=TEMP.migs_eu_num_replicons, domain=MigsEu, range=Optional[str])

slots.migs_eu_extrachrom_elements = Slot(uri=MIXS['0000023'], name="migs_eu_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=TEMP.migs_eu_extrachrom_elements, domain=MigsEu, range=Optional[str])

slots.migs_eu_estimated_size = Slot(uri=MIXS['0000024'], name="migs_eu_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=TEMP.migs_eu_estimated_size, domain=MigsEu, range=Optional[str])

slots.migs_eu_ref_biomaterial = Slot(uri=MIXS['0000025'], name="migs_eu_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=TEMP.migs_eu_ref_biomaterial, domain=MigsEu, range=Optional[str])

slots.migs_eu_source_mat_id = Slot(uri=MIXS['0000026'], name="migs_eu_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=TEMP.migs_eu_source_mat_id, domain=MigsEu, range=Optional[Union[str, List[str]]])

slots.migs_eu_pathogenicity = Slot(uri=MIXS['0000027'], name="migs_eu_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=TEMP.migs_eu_pathogenicity, domain=MigsEu, range=Optional[str])

slots.migs_eu_biotic_relationship = Slot(uri=MIXS['0000028'], name="migs_eu_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=TEMP.migs_eu_biotic_relationship, domain=MigsEu, range=Optional[str])

slots.migs_eu_specific_host = Slot(uri=MIXS['0000029'], name="migs_eu_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=TEMP.migs_eu_specific_host, domain=MigsEu, range=Optional[str])

slots.migs_eu_host_spec_range = Slot(uri=MIXS['0000030'], name="migs_eu_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=TEMP.migs_eu_host_spec_range, domain=MigsEu, range=Optional[Union[str, List[str]]])

slots.migs_eu_host_disease_stat = Slot(uri=MIXS['0000031'], name="migs_eu_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.migs_eu_host_disease_stat, domain=MigsEu, range=Optional[Union[str, List[str]]])

slots.migs_eu_trophic_level = Slot(uri=MIXS['0000032'], name="migs_eu_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=TEMP.migs_eu_trophic_level, domain=MigsEu, range=Optional[str])

slots.migs_eu_propagation = Slot(uri=MIXS['0000033'], name="migs_eu_propagation", curie=MIXS.curie('0000033'),
                   model_uri=TEMP.migs_eu_propagation, domain=MigsEu, range=Optional[str])

slots.migs_eu_encoded_traits = Slot(uri=MIXS['0000034'], name="migs_eu_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=TEMP.migs_eu_encoded_traits, domain=MigsEu, range=Optional[str])

slots.migs_eu_source_uvig = Slot(uri=MIXS['0000035'], name="migs_eu_source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=TEMP.migs_eu_source_uvig, domain=MigsEu, range=Optional[str])

slots.migs_eu_virus_enrich_appr = Slot(uri=MIXS['0000036'], name="migs_eu_virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=TEMP.migs_eu_virus_enrich_appr, domain=MigsEu, range=Optional[str])

slots.migs_eu_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="migs_eu_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.migs_eu_nucl_acid_ext, domain=MigsEu, range=Optional[str])

slots.migs_eu_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="migs_eu_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=TEMP.migs_eu_nucl_acid_amp, domain=MigsEu, range=Optional[str])

slots.migs_eu_lib_size = Slot(uri=MIXS['0000039'], name="migs_eu_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=TEMP.migs_eu_lib_size, domain=MigsEu, range=Optional[str])

slots.migs_eu_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="migs_eu_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=TEMP.migs_eu_lib_reads_seqd, domain=MigsEu, range=Optional[str])

slots.migs_eu_lib_layout = Slot(uri=MIXS['0000041'], name="migs_eu_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=TEMP.migs_eu_lib_layout, domain=MigsEu, range=Optional[str])

slots.migs_eu_lib_vector = Slot(uri=MIXS['0000042'], name="migs_eu_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=TEMP.migs_eu_lib_vector, domain=MigsEu, range=Optional[str])

slots.migs_eu_lib_screen = Slot(uri=MIXS['0000043'], name="migs_eu_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=TEMP.migs_eu_lib_screen, domain=MigsEu, range=Optional[str])

slots.migs_eu_target_gene = Slot(uri=MIXS['0000044'], name="migs_eu_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=TEMP.migs_eu_target_gene, domain=MigsEu, range=Optional[str])

slots.migs_eu_target_subfragment = Slot(uri=MIXS['0000045'], name="migs_eu_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=TEMP.migs_eu_target_subfragment, domain=MigsEu, range=Optional[str])

slots.migs_eu_pcr_primers = Slot(uri=MIXS['0000046'], name="migs_eu_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=TEMP.migs_eu_pcr_primers, domain=MigsEu, range=Optional[str])

slots.migs_eu_mid = Slot(uri=MIXS['0000047'], name="migs_eu_mid", curie=MIXS.curie('0000047'),
                   model_uri=TEMP.migs_eu_mid, domain=MigsEu, range=Optional[str])

slots.migs_eu_adapters = Slot(uri=MIXS['0000048'], name="migs_eu_adapters", curie=MIXS.curie('0000048'),
                   model_uri=TEMP.migs_eu_adapters, domain=MigsEu, range=Optional[str])

slots.migs_eu_pcr_cond = Slot(uri=MIXS['0000049'], name="migs_eu_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=TEMP.migs_eu_pcr_cond, domain=MigsEu, range=Optional[str])

slots.migs_eu_seq_meth = Slot(uri=MIXS['0000050'], name="migs_eu_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.migs_eu_seq_meth, domain=MigsEu, range=Optional[str])

slots.migs_eu_seq_quality_check = Slot(uri=MIXS['0000051'], name="migs_eu_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=TEMP.migs_eu_seq_quality_check, domain=MigsEu, range=Optional[str])

slots.migs_eu_chimera_check = Slot(uri=MIXS['0000052'], name="migs_eu_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=TEMP.migs_eu_chimera_check, domain=MigsEu, range=Optional[str])

slots.migs_eu_tax_ident = Slot(uri=MIXS['0000053'], name="migs_eu_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=TEMP.migs_eu_tax_ident, domain=MigsEu, range=Optional[str])

slots.migs_eu_single_cell_lysis_prot = Slot(uri=MIXS['0000054'], name="migs_eu_single_cell_lysis_prot", curie=MIXS.curie('0000054'),
                   model_uri=TEMP.migs_eu_single_cell_lysis_prot, domain=MigsEu, range=Optional[str])

slots.migs_eu_wga_amp_appr = Slot(uri=MIXS['0000055'], name="migs_eu_wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=TEMP.migs_eu_wga_amp_appr, domain=MigsEu, range=Optional[str])

slots.migs_eu_assembly_qual = Slot(uri=MIXS['0000056'], name="migs_eu_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=TEMP.migs_eu_assembly_qual, domain=MigsEu, range=Optional[str])

slots.migs_eu_assembly_name = Slot(uri=MIXS['0000057'], name="migs_eu_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=TEMP.migs_eu_assembly_name, domain=MigsEu, range=Optional[str])

slots.migs_eu_assembly_software = Slot(uri=MIXS['0000058'], name="migs_eu_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=TEMP.migs_eu_assembly_software, domain=MigsEu, range=Optional[str])

slots.migs_eu_annot = Slot(uri=MIXS['0000059'], name="migs_eu_annot", curie=MIXS.curie('0000059'),
                   model_uri=TEMP.migs_eu_annot, domain=MigsEu, range=Optional[str])

slots.migs_eu_number_contig = Slot(uri=MIXS['0000060'], name="migs_eu_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=TEMP.migs_eu_number_contig, domain=MigsEu, range=Optional[str])

slots.migs_eu_feat_pred = Slot(uri=MIXS['0000061'], name="migs_eu_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=TEMP.migs_eu_feat_pred, domain=MigsEu, range=Optional[str])

slots.migs_eu_ref_db = Slot(uri=MIXS['0000062'], name="migs_eu_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=TEMP.migs_eu_ref_db, domain=MigsEu, range=Optional[str])

slots.migs_eu_sim_search_meth = Slot(uri=MIXS['0000063'], name="migs_eu_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=TEMP.migs_eu_sim_search_meth, domain=MigsEu, range=Optional[str])

slots.migs_eu_tax_class = Slot(uri=MIXS['0000064'], name="migs_eu_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=TEMP.migs_eu_tax_class, domain=MigsEu, range=Optional[str])

slots.migs_eu_x_16s_recover = Slot(uri=MIXS['0000065'], name="migs_eu_x_16s_recover", curie=MIXS.curie('0000065'),
                   model_uri=TEMP.migs_eu_x_16s_recover, domain=MigsEu, range=Optional[str])

slots.migs_eu_x_16s_recover_software = Slot(uri=MIXS['0000066'], name="migs_eu_x_16s_recover_software", curie=MIXS.curie('0000066'),
                   model_uri=TEMP.migs_eu_x_16s_recover_software, domain=MigsEu, range=Optional[str])

slots.migs_eu_trnas = Slot(uri=MIXS['0000067'], name="migs_eu_trnas", curie=MIXS.curie('0000067'),
                   model_uri=TEMP.migs_eu_trnas, domain=MigsEu, range=Optional[str])

slots.migs_eu_trna_ext_software = Slot(uri=MIXS['0000068'], name="migs_eu_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=TEMP.migs_eu_trna_ext_software, domain=MigsEu, range=Optional[str])

slots.migs_eu_compl_score = Slot(uri=MIXS['0000069'], name="migs_eu_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=TEMP.migs_eu_compl_score, domain=MigsEu, range=Optional[str])

slots.migs_eu_compl_software = Slot(uri=MIXS['0000070'], name="migs_eu_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=TEMP.migs_eu_compl_software, domain=MigsEu, range=Optional[str])

slots.migs_eu_compl_appr = Slot(uri=MIXS['0000071'], name="migs_eu_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=TEMP.migs_eu_compl_appr, domain=MigsEu, range=Optional[str])

slots.migs_eu_contam_score = Slot(uri=MIXS['0000072'], name="migs_eu_contam_score", curie=MIXS.curie('0000072'),
                   model_uri=TEMP.migs_eu_contam_score, domain=MigsEu, range=Optional[str])

slots.migs_eu_contam_screen_param = Slot(uri=MIXS['0000073'], name="migs_eu_contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=TEMP.migs_eu_contam_screen_param, domain=MigsEu, range=Optional[str])

slots.migs_eu_decontam_software = Slot(uri=MIXS['0000074'], name="migs_eu_decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=TEMP.migs_eu_decontam_software, domain=MigsEu, range=Optional[str])

slots.migs_eu_sort_tech = Slot(uri=MIXS['0000075'], name="migs_eu_sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=TEMP.migs_eu_sort_tech, domain=MigsEu, range=Optional[str])

slots.migs_eu_single_cell_lysis_appr = Slot(uri=MIXS['0000076'], name="migs_eu_single_cell_lysis_appr", curie=MIXS.curie('0000076'),
                   model_uri=TEMP.migs_eu_single_cell_lysis_appr, domain=MigsEu, range=Optional[str])

slots.migs_eu_bin_param = Slot(uri=MIXS['0000077'], name="migs_eu_bin_param", curie=MIXS.curie('0000077'),
                   model_uri=TEMP.migs_eu_bin_param, domain=MigsEu, range=Optional[str])

slots.migs_eu_bin_software = Slot(uri=MIXS['0000078'], name="migs_eu_bin_software", curie=MIXS.curie('0000078'),
                   model_uri=TEMP.migs_eu_bin_software, domain=MigsEu, range=Optional[str])

slots.migs_eu_reassembly_bin = Slot(uri=MIXS['0000079'], name="migs_eu_reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=TEMP.migs_eu_reassembly_bin, domain=MigsEu, range=Optional[str])

slots.migs_eu_mag_cov_software = Slot(uri=MIXS['0000080'], name="migs_eu_mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=TEMP.migs_eu_mag_cov_software, domain=MigsEu, range=Optional[str])

slots.migs_eu_vir_ident_software = Slot(uri=MIXS['0000081'], name="migs_eu_vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=TEMP.migs_eu_vir_ident_software, domain=MigsEu, range=Optional[str])

slots.migs_eu_pred_genome_type = Slot(uri=MIXS['0000082'], name="migs_eu_pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=TEMP.migs_eu_pred_genome_type, domain=MigsEu, range=Optional[str])

slots.migs_eu_pred_genome_struc = Slot(uri=MIXS['0000083'], name="migs_eu_pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=TEMP.migs_eu_pred_genome_struc, domain=MigsEu, range=Optional[str])

slots.migs_eu_detec_type = Slot(uri=MIXS['0000084'], name="migs_eu_detec_type", curie=MIXS.curie('0000084'),
                   model_uri=TEMP.migs_eu_detec_type, domain=MigsEu, range=Optional[str])

slots.migs_eu_otu_class_appr = Slot(uri=MIXS['0000085'], name="migs_eu_otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=TEMP.migs_eu_otu_class_appr, domain=MigsEu, range=Optional[str])

slots.migs_eu_otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="migs_eu_otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=TEMP.migs_eu_otu_seq_comp_appr, domain=MigsEu, range=Optional[str])

slots.migs_eu_otu_db = Slot(uri=MIXS['0000087'], name="migs_eu_otu_db", curie=MIXS.curie('0000087'),
                   model_uri=TEMP.migs_eu_otu_db, domain=MigsEu, range=Optional[str])

slots.migs_eu_host_pred_appr = Slot(uri=MIXS['0000088'], name="migs_eu_host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=TEMP.migs_eu_host_pred_appr, domain=MigsEu, range=Optional[str])

slots.migs_eu_host_pred_est_acc = Slot(uri=MIXS['0000089'], name="migs_eu_host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=TEMP.migs_eu_host_pred_est_acc, domain=MigsEu, range=Optional[str])

slots.migs_eu_sop = Slot(uri=MIXS['0000090'], name="migs_eu_sop", curie=MIXS.curie('0000090'),
                   model_uri=TEMP.migs_eu_sop, domain=MigsEu, range=Optional[Union[str, List[str]]])

slots.migs_eu_associated_resource = Slot(uri=MIXS['0000091'], name="migs_eu_associated_resource", curie=MIXS.curie('0000091'),
                   model_uri=TEMP.migs_eu_associated_resource, domain=MigsEu, range=Optional[Union[str, List[str]]])

slots.migs_eu_project_name = Slot(uri=MIXS['0000092'], name="migs_eu_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.migs_eu_project_name, domain=MigsEu, range=Optional[str])

slots.migs_eu_elev = Slot(uri=MIXS['0000093'], name="migs_eu_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.migs_eu_elev, domain=MigsEu, range=Optional[str])

slots.migs_eu_alt = Slot(uri=MIXS['0000094'], name="migs_eu_alt", curie=MIXS.curie('0000094'),
                   model_uri=TEMP.migs_eu_alt, domain=MigsEu, range=Optional[str])

slots.migs_eu_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="migs_eu_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.migs_eu_samp_vol_we_dna_ext, domain=MigsEu, range=Optional[str])

slots.migs_eu_temp = Slot(uri=MIXS['0000113'], name="migs_eu_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.migs_eu_temp, domain=MigsEu, range=Optional[str])

slots.migs_eu_samp_name = Slot(uri=MIXS['0001107'], name="migs_eu_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.migs_eu_samp_name, domain=MigsEu, range=Optional[str])

slots.migs_eu_samp_collec_method = Slot(uri=MIXS['0001225'], name="migs_eu_samp_collec_method", curie=MIXS.curie('0001225'),
                   model_uri=TEMP.migs_eu_samp_collec_method, domain=MigsEu, range=Optional[str])

slots.migs_eu_samp_taxon_id = Slot(uri=MIXS['0001320'], name="migs_eu_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=TEMP.migs_eu_samp_taxon_id, domain=MigsEu, range=Optional[str])

slots.migs_eu_neg_cont_type = Slot(uri=MIXS['0001321'], name="migs_eu_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=TEMP.migs_eu_neg_cont_type, domain=MigsEu, range=Optional[str])

slots.migs_eu_pos_cont_type = Slot(uri=MIXS['0001322'], name="migs_eu_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=TEMP.migs_eu_pos_cont_type, domain=MigsEu, range=Optional[str])

slots.migs_ba_samp_size = Slot(uri=MIXS['0000001'], name="migs_ba_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.migs_ba_samp_size, domain=MigsBa, range=Optional[str])

slots.migs_ba_samp_collec_device = Slot(uri=MIXS['0000002'], name="migs_ba_samp_collec_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.migs_ba_samp_collec_device, domain=MigsBa, range=Optional[str])

slots.migs_ba_isol_growth_condt = Slot(uri=MIXS['0000003'], name="migs_ba_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=TEMP.migs_ba_isol_growth_condt, domain=MigsBa, range=Optional[str])

slots.migs_ba_contam_screen_input = Slot(uri=MIXS['0000005'], name="migs_ba_contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=TEMP.migs_ba_contam_screen_input, domain=MigsBa, range=Optional[str])

slots.migs_ba_wga_amp_kit = Slot(uri=MIXS['0000006'], name="migs_ba_wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=TEMP.migs_ba_wga_amp_kit, domain=MigsBa, range=Optional[str])

slots.migs_ba_experimental_factor = Slot(uri=MIXS['0000008'], name="migs_ba_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=TEMP.migs_ba_experimental_factor, domain=MigsBa, range=Optional[str])

slots.migs_ba_lat_lon = Slot(uri=MIXS['0000009'], name="migs_ba_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.migs_ba_lat_lon, domain=MigsBa, range=Optional[str])

slots.migs_ba_geo_loc_name = Slot(uri=MIXS['0000010'], name="migs_ba_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.migs_ba_geo_loc_name, domain=MigsBa, range=Optional[str])

slots.migs_ba_collection_date = Slot(uri=MIXS['0000011'], name="migs_ba_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.migs_ba_collection_date, domain=MigsBa, range=Optional[str])

slots.migs_ba_env_broad_scale = Slot(uri=MIXS['0000012'], name="migs_ba_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.migs_ba_env_broad_scale, domain=MigsBa, range=Optional[str])

slots.migs_ba_env_local_scale = Slot(uri=MIXS['0000013'], name="migs_ba_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.migs_ba_env_local_scale, domain=MigsBa, range=Optional[str])

slots.migs_ba_env_medium = Slot(uri=MIXS['0000014'], name="migs_ba_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.migs_ba_env_medium, domain=MigsBa, range=Optional[str])

slots.migs_ba_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="migs_ba_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=TEMP.migs_ba_rel_to_oxygen, domain=MigsBa, range=Optional[str])

slots.migs_ba_samp_mat_process = Slot(uri=MIXS['0000016'], name="migs_ba_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=TEMP.migs_ba_samp_mat_process, domain=MigsBa, range=Optional[str])

slots.migs_ba_size_frac = Slot(uri=MIXS['0000017'], name="migs_ba_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=TEMP.migs_ba_size_frac, domain=MigsBa, range=Optional[str])

slots.migs_ba_depth = Slot(uri=MIXS['0000018'], name="migs_ba_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.migs_ba_depth, domain=MigsBa, range=Optional[str])

slots.migs_ba_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="migs_ba_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=TEMP.migs_ba_subspecf_gen_lin, domain=MigsBa, range=Optional[str])

slots.migs_ba_ploidy = Slot(uri=MIXS['0000021'], name="migs_ba_ploidy", curie=MIXS.curie('0000021'),
                   model_uri=TEMP.migs_ba_ploidy, domain=MigsBa, range=Optional[str])

slots.migs_ba_num_replicons = Slot(uri=MIXS['0000022'], name="migs_ba_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=TEMP.migs_ba_num_replicons, domain=MigsBa, range=Optional[str])

slots.migs_ba_extrachrom_elements = Slot(uri=MIXS['0000023'], name="migs_ba_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=TEMP.migs_ba_extrachrom_elements, domain=MigsBa, range=Optional[str])

slots.migs_ba_estimated_size = Slot(uri=MIXS['0000024'], name="migs_ba_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=TEMP.migs_ba_estimated_size, domain=MigsBa, range=Optional[str])

slots.migs_ba_ref_biomaterial = Slot(uri=MIXS['0000025'], name="migs_ba_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=TEMP.migs_ba_ref_biomaterial, domain=MigsBa, range=Optional[str])

slots.migs_ba_source_mat_id = Slot(uri=MIXS['0000026'], name="migs_ba_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=TEMP.migs_ba_source_mat_id, domain=MigsBa, range=Optional[Union[str, List[str]]])

slots.migs_ba_pathogenicity = Slot(uri=MIXS['0000027'], name="migs_ba_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=TEMP.migs_ba_pathogenicity, domain=MigsBa, range=Optional[str])

slots.migs_ba_biotic_relationship = Slot(uri=MIXS['0000028'], name="migs_ba_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=TEMP.migs_ba_biotic_relationship, domain=MigsBa, range=Optional[str])

slots.migs_ba_specific_host = Slot(uri=MIXS['0000029'], name="migs_ba_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=TEMP.migs_ba_specific_host, domain=MigsBa, range=Optional[str])

slots.migs_ba_host_spec_range = Slot(uri=MIXS['0000030'], name="migs_ba_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=TEMP.migs_ba_host_spec_range, domain=MigsBa, range=Optional[Union[str, List[str]]])

slots.migs_ba_host_disease_stat = Slot(uri=MIXS['0000031'], name="migs_ba_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.migs_ba_host_disease_stat, domain=MigsBa, range=Optional[Union[str, List[str]]])

slots.migs_ba_trophic_level = Slot(uri=MIXS['0000032'], name="migs_ba_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=TEMP.migs_ba_trophic_level, domain=MigsBa, range=Optional[str])

slots.migs_ba_propagation = Slot(uri=MIXS['0000033'], name="migs_ba_propagation", curie=MIXS.curie('0000033'),
                   model_uri=TEMP.migs_ba_propagation, domain=MigsBa, range=Optional[str])

slots.migs_ba_encoded_traits = Slot(uri=MIXS['0000034'], name="migs_ba_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=TEMP.migs_ba_encoded_traits, domain=MigsBa, range=Optional[str])

slots.migs_ba_source_uvig = Slot(uri=MIXS['0000035'], name="migs_ba_source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=TEMP.migs_ba_source_uvig, domain=MigsBa, range=Optional[str])

slots.migs_ba_virus_enrich_appr = Slot(uri=MIXS['0000036'], name="migs_ba_virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=TEMP.migs_ba_virus_enrich_appr, domain=MigsBa, range=Optional[str])

slots.migs_ba_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="migs_ba_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.migs_ba_nucl_acid_ext, domain=MigsBa, range=Optional[str])

slots.migs_ba_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="migs_ba_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=TEMP.migs_ba_nucl_acid_amp, domain=MigsBa, range=Optional[str])

slots.migs_ba_lib_size = Slot(uri=MIXS['0000039'], name="migs_ba_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=TEMP.migs_ba_lib_size, domain=MigsBa, range=Optional[str])

slots.migs_ba_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="migs_ba_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=TEMP.migs_ba_lib_reads_seqd, domain=MigsBa, range=Optional[str])

slots.migs_ba_lib_layout = Slot(uri=MIXS['0000041'], name="migs_ba_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=TEMP.migs_ba_lib_layout, domain=MigsBa, range=Optional[str])

slots.migs_ba_lib_vector = Slot(uri=MIXS['0000042'], name="migs_ba_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=TEMP.migs_ba_lib_vector, domain=MigsBa, range=Optional[str])

slots.migs_ba_lib_screen = Slot(uri=MIXS['0000043'], name="migs_ba_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=TEMP.migs_ba_lib_screen, domain=MigsBa, range=Optional[str])

slots.migs_ba_target_gene = Slot(uri=MIXS['0000044'], name="migs_ba_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=TEMP.migs_ba_target_gene, domain=MigsBa, range=Optional[str])

slots.migs_ba_target_subfragment = Slot(uri=MIXS['0000045'], name="migs_ba_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=TEMP.migs_ba_target_subfragment, domain=MigsBa, range=Optional[str])

slots.migs_ba_pcr_primers = Slot(uri=MIXS['0000046'], name="migs_ba_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=TEMP.migs_ba_pcr_primers, domain=MigsBa, range=Optional[str])

slots.migs_ba_mid = Slot(uri=MIXS['0000047'], name="migs_ba_mid", curie=MIXS.curie('0000047'),
                   model_uri=TEMP.migs_ba_mid, domain=MigsBa, range=Optional[str])

slots.migs_ba_adapters = Slot(uri=MIXS['0000048'], name="migs_ba_adapters", curie=MIXS.curie('0000048'),
                   model_uri=TEMP.migs_ba_adapters, domain=MigsBa, range=Optional[str])

slots.migs_ba_pcr_cond = Slot(uri=MIXS['0000049'], name="migs_ba_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=TEMP.migs_ba_pcr_cond, domain=MigsBa, range=Optional[str])

slots.migs_ba_seq_meth = Slot(uri=MIXS['0000050'], name="migs_ba_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.migs_ba_seq_meth, domain=MigsBa, range=Optional[str])

slots.migs_ba_seq_quality_check = Slot(uri=MIXS['0000051'], name="migs_ba_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=TEMP.migs_ba_seq_quality_check, domain=MigsBa, range=Optional[str])

slots.migs_ba_chimera_check = Slot(uri=MIXS['0000052'], name="migs_ba_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=TEMP.migs_ba_chimera_check, domain=MigsBa, range=Optional[str])

slots.migs_ba_tax_ident = Slot(uri=MIXS['0000053'], name="migs_ba_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=TEMP.migs_ba_tax_ident, domain=MigsBa, range=Optional[str])

slots.migs_ba_single_cell_lysis_prot = Slot(uri=MIXS['0000054'], name="migs_ba_single_cell_lysis_prot", curie=MIXS.curie('0000054'),
                   model_uri=TEMP.migs_ba_single_cell_lysis_prot, domain=MigsBa, range=Optional[str])

slots.migs_ba_wga_amp_appr = Slot(uri=MIXS['0000055'], name="migs_ba_wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=TEMP.migs_ba_wga_amp_appr, domain=MigsBa, range=Optional[str])

slots.migs_ba_assembly_qual = Slot(uri=MIXS['0000056'], name="migs_ba_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=TEMP.migs_ba_assembly_qual, domain=MigsBa, range=Optional[str])

slots.migs_ba_assembly_name = Slot(uri=MIXS['0000057'], name="migs_ba_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=TEMP.migs_ba_assembly_name, domain=MigsBa, range=Optional[str])

slots.migs_ba_assembly_software = Slot(uri=MIXS['0000058'], name="migs_ba_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=TEMP.migs_ba_assembly_software, domain=MigsBa, range=Optional[str])

slots.migs_ba_annot = Slot(uri=MIXS['0000059'], name="migs_ba_annot", curie=MIXS.curie('0000059'),
                   model_uri=TEMP.migs_ba_annot, domain=MigsBa, range=Optional[str])

slots.migs_ba_number_contig = Slot(uri=MIXS['0000060'], name="migs_ba_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=TEMP.migs_ba_number_contig, domain=MigsBa, range=Optional[str])

slots.migs_ba_feat_pred = Slot(uri=MIXS['0000061'], name="migs_ba_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=TEMP.migs_ba_feat_pred, domain=MigsBa, range=Optional[str])

slots.migs_ba_ref_db = Slot(uri=MIXS['0000062'], name="migs_ba_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=TEMP.migs_ba_ref_db, domain=MigsBa, range=Optional[str])

slots.migs_ba_sim_search_meth = Slot(uri=MIXS['0000063'], name="migs_ba_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=TEMP.migs_ba_sim_search_meth, domain=MigsBa, range=Optional[str])

slots.migs_ba_tax_class = Slot(uri=MIXS['0000064'], name="migs_ba_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=TEMP.migs_ba_tax_class, domain=MigsBa, range=Optional[str])

slots.migs_ba_x_16s_recover = Slot(uri=MIXS['0000065'], name="migs_ba_x_16s_recover", curie=MIXS.curie('0000065'),
                   model_uri=TEMP.migs_ba_x_16s_recover, domain=MigsBa, range=Optional[str])

slots.migs_ba_x_16s_recover_software = Slot(uri=MIXS['0000066'], name="migs_ba_x_16s_recover_software", curie=MIXS.curie('0000066'),
                   model_uri=TEMP.migs_ba_x_16s_recover_software, domain=MigsBa, range=Optional[str])

slots.migs_ba_trnas = Slot(uri=MIXS['0000067'], name="migs_ba_trnas", curie=MIXS.curie('0000067'),
                   model_uri=TEMP.migs_ba_trnas, domain=MigsBa, range=Optional[str])

slots.migs_ba_trna_ext_software = Slot(uri=MIXS['0000068'], name="migs_ba_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=TEMP.migs_ba_trna_ext_software, domain=MigsBa, range=Optional[str])

slots.migs_ba_compl_score = Slot(uri=MIXS['0000069'], name="migs_ba_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=TEMP.migs_ba_compl_score, domain=MigsBa, range=Optional[str])

slots.migs_ba_compl_software = Slot(uri=MIXS['0000070'], name="migs_ba_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=TEMP.migs_ba_compl_software, domain=MigsBa, range=Optional[str])

slots.migs_ba_compl_appr = Slot(uri=MIXS['0000071'], name="migs_ba_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=TEMP.migs_ba_compl_appr, domain=MigsBa, range=Optional[str])

slots.migs_ba_contam_score = Slot(uri=MIXS['0000072'], name="migs_ba_contam_score", curie=MIXS.curie('0000072'),
                   model_uri=TEMP.migs_ba_contam_score, domain=MigsBa, range=Optional[str])

slots.migs_ba_contam_screen_param = Slot(uri=MIXS['0000073'], name="migs_ba_contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=TEMP.migs_ba_contam_screen_param, domain=MigsBa, range=Optional[str])

slots.migs_ba_decontam_software = Slot(uri=MIXS['0000074'], name="migs_ba_decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=TEMP.migs_ba_decontam_software, domain=MigsBa, range=Optional[str])

slots.migs_ba_sort_tech = Slot(uri=MIXS['0000075'], name="migs_ba_sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=TEMP.migs_ba_sort_tech, domain=MigsBa, range=Optional[str])

slots.migs_ba_single_cell_lysis_appr = Slot(uri=MIXS['0000076'], name="migs_ba_single_cell_lysis_appr", curie=MIXS.curie('0000076'),
                   model_uri=TEMP.migs_ba_single_cell_lysis_appr, domain=MigsBa, range=Optional[str])

slots.migs_ba_bin_param = Slot(uri=MIXS['0000077'], name="migs_ba_bin_param", curie=MIXS.curie('0000077'),
                   model_uri=TEMP.migs_ba_bin_param, domain=MigsBa, range=Optional[str])

slots.migs_ba_bin_software = Slot(uri=MIXS['0000078'], name="migs_ba_bin_software", curie=MIXS.curie('0000078'),
                   model_uri=TEMP.migs_ba_bin_software, domain=MigsBa, range=Optional[str])

slots.migs_ba_reassembly_bin = Slot(uri=MIXS['0000079'], name="migs_ba_reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=TEMP.migs_ba_reassembly_bin, domain=MigsBa, range=Optional[str])

slots.migs_ba_mag_cov_software = Slot(uri=MIXS['0000080'], name="migs_ba_mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=TEMP.migs_ba_mag_cov_software, domain=MigsBa, range=Optional[str])

slots.migs_ba_vir_ident_software = Slot(uri=MIXS['0000081'], name="migs_ba_vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=TEMP.migs_ba_vir_ident_software, domain=MigsBa, range=Optional[str])

slots.migs_ba_pred_genome_type = Slot(uri=MIXS['0000082'], name="migs_ba_pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=TEMP.migs_ba_pred_genome_type, domain=MigsBa, range=Optional[str])

slots.migs_ba_pred_genome_struc = Slot(uri=MIXS['0000083'], name="migs_ba_pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=TEMP.migs_ba_pred_genome_struc, domain=MigsBa, range=Optional[str])

slots.migs_ba_detec_type = Slot(uri=MIXS['0000084'], name="migs_ba_detec_type", curie=MIXS.curie('0000084'),
                   model_uri=TEMP.migs_ba_detec_type, domain=MigsBa, range=Optional[str])

slots.migs_ba_otu_class_appr = Slot(uri=MIXS['0000085'], name="migs_ba_otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=TEMP.migs_ba_otu_class_appr, domain=MigsBa, range=Optional[str])

slots.migs_ba_otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="migs_ba_otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=TEMP.migs_ba_otu_seq_comp_appr, domain=MigsBa, range=Optional[str])

slots.migs_ba_otu_db = Slot(uri=MIXS['0000087'], name="migs_ba_otu_db", curie=MIXS.curie('0000087'),
                   model_uri=TEMP.migs_ba_otu_db, domain=MigsBa, range=Optional[str])

slots.migs_ba_host_pred_appr = Slot(uri=MIXS['0000088'], name="migs_ba_host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=TEMP.migs_ba_host_pred_appr, domain=MigsBa, range=Optional[str])

slots.migs_ba_host_pred_est_acc = Slot(uri=MIXS['0000089'], name="migs_ba_host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=TEMP.migs_ba_host_pred_est_acc, domain=MigsBa, range=Optional[str])

slots.migs_ba_sop = Slot(uri=MIXS['0000090'], name="migs_ba_sop", curie=MIXS.curie('0000090'),
                   model_uri=TEMP.migs_ba_sop, domain=MigsBa, range=Optional[Union[str, List[str]]])

slots.migs_ba_associated_resource = Slot(uri=MIXS['0000091'], name="migs_ba_associated_resource", curie=MIXS.curie('0000091'),
                   model_uri=TEMP.migs_ba_associated_resource, domain=MigsBa, range=Optional[Union[str, List[str]]])

slots.migs_ba_project_name = Slot(uri=MIXS['0000092'], name="migs_ba_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.migs_ba_project_name, domain=MigsBa, range=Optional[str])

slots.migs_ba_elev = Slot(uri=MIXS['0000093'], name="migs_ba_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.migs_ba_elev, domain=MigsBa, range=Optional[str])

slots.migs_ba_alt = Slot(uri=MIXS['0000094'], name="migs_ba_alt", curie=MIXS.curie('0000094'),
                   model_uri=TEMP.migs_ba_alt, domain=MigsBa, range=Optional[str])

slots.migs_ba_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="migs_ba_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.migs_ba_samp_vol_we_dna_ext, domain=MigsBa, range=Optional[str])

slots.migs_ba_temp = Slot(uri=MIXS['0000113'], name="migs_ba_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.migs_ba_temp, domain=MigsBa, range=Optional[str])

slots.migs_ba_samp_name = Slot(uri=MIXS['0001107'], name="migs_ba_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.migs_ba_samp_name, domain=MigsBa, range=Optional[str])

slots.migs_ba_samp_collec_method = Slot(uri=MIXS['0001225'], name="migs_ba_samp_collec_method", curie=MIXS.curie('0001225'),
                   model_uri=TEMP.migs_ba_samp_collec_method, domain=MigsBa, range=Optional[str])

slots.migs_ba_samp_taxon_id = Slot(uri=MIXS['0001320'], name="migs_ba_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=TEMP.migs_ba_samp_taxon_id, domain=MigsBa, range=Optional[str])

slots.migs_ba_neg_cont_type = Slot(uri=MIXS['0001321'], name="migs_ba_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=TEMP.migs_ba_neg_cont_type, domain=MigsBa, range=Optional[str])

slots.migs_ba_pos_cont_type = Slot(uri=MIXS['0001322'], name="migs_ba_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=TEMP.migs_ba_pos_cont_type, domain=MigsBa, range=Optional[str])

slots.migs_pl_samp_size = Slot(uri=MIXS['0000001'], name="migs_pl_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.migs_pl_samp_size, domain=MigsPl, range=Optional[str])

slots.migs_pl_samp_collec_device = Slot(uri=MIXS['0000002'], name="migs_pl_samp_collec_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.migs_pl_samp_collec_device, domain=MigsPl, range=Optional[str])

slots.migs_pl_isol_growth_condt = Slot(uri=MIXS['0000003'], name="migs_pl_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=TEMP.migs_pl_isol_growth_condt, domain=MigsPl, range=Optional[str])

slots.migs_pl_contam_screen_input = Slot(uri=MIXS['0000005'], name="migs_pl_contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=TEMP.migs_pl_contam_screen_input, domain=MigsPl, range=Optional[str])

slots.migs_pl_wga_amp_kit = Slot(uri=MIXS['0000006'], name="migs_pl_wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=TEMP.migs_pl_wga_amp_kit, domain=MigsPl, range=Optional[str])

slots.migs_pl_experimental_factor = Slot(uri=MIXS['0000008'], name="migs_pl_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=TEMP.migs_pl_experimental_factor, domain=MigsPl, range=Optional[str])

slots.migs_pl_lat_lon = Slot(uri=MIXS['0000009'], name="migs_pl_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.migs_pl_lat_lon, domain=MigsPl, range=Optional[str])

slots.migs_pl_geo_loc_name = Slot(uri=MIXS['0000010'], name="migs_pl_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.migs_pl_geo_loc_name, domain=MigsPl, range=Optional[str])

slots.migs_pl_collection_date = Slot(uri=MIXS['0000011'], name="migs_pl_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.migs_pl_collection_date, domain=MigsPl, range=Optional[str])

slots.migs_pl_env_broad_scale = Slot(uri=MIXS['0000012'], name="migs_pl_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.migs_pl_env_broad_scale, domain=MigsPl, range=Optional[str])

slots.migs_pl_env_local_scale = Slot(uri=MIXS['0000013'], name="migs_pl_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.migs_pl_env_local_scale, domain=MigsPl, range=Optional[str])

slots.migs_pl_env_medium = Slot(uri=MIXS['0000014'], name="migs_pl_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.migs_pl_env_medium, domain=MigsPl, range=Optional[str])

slots.migs_pl_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="migs_pl_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=TEMP.migs_pl_rel_to_oxygen, domain=MigsPl, range=Optional[str])

slots.migs_pl_samp_mat_process = Slot(uri=MIXS['0000016'], name="migs_pl_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=TEMP.migs_pl_samp_mat_process, domain=MigsPl, range=Optional[str])

slots.migs_pl_size_frac = Slot(uri=MIXS['0000017'], name="migs_pl_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=TEMP.migs_pl_size_frac, domain=MigsPl, range=Optional[str])

slots.migs_pl_depth = Slot(uri=MIXS['0000018'], name="migs_pl_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.migs_pl_depth, domain=MigsPl, range=Optional[str])

slots.migs_pl_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="migs_pl_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=TEMP.migs_pl_subspecf_gen_lin, domain=MigsPl, range=Optional[str])

slots.migs_pl_ploidy = Slot(uri=MIXS['0000021'], name="migs_pl_ploidy", curie=MIXS.curie('0000021'),
                   model_uri=TEMP.migs_pl_ploidy, domain=MigsPl, range=Optional[str])

slots.migs_pl_num_replicons = Slot(uri=MIXS['0000022'], name="migs_pl_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=TEMP.migs_pl_num_replicons, domain=MigsPl, range=Optional[str])

slots.migs_pl_extrachrom_elements = Slot(uri=MIXS['0000023'], name="migs_pl_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=TEMP.migs_pl_extrachrom_elements, domain=MigsPl, range=Optional[str])

slots.migs_pl_estimated_size = Slot(uri=MIXS['0000024'], name="migs_pl_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=TEMP.migs_pl_estimated_size, domain=MigsPl, range=Optional[str])

slots.migs_pl_ref_biomaterial = Slot(uri=MIXS['0000025'], name="migs_pl_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=TEMP.migs_pl_ref_biomaterial, domain=MigsPl, range=Optional[str])

slots.migs_pl_source_mat_id = Slot(uri=MIXS['0000026'], name="migs_pl_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=TEMP.migs_pl_source_mat_id, domain=MigsPl, range=Optional[Union[str, List[str]]])

slots.migs_pl_pathogenicity = Slot(uri=MIXS['0000027'], name="migs_pl_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=TEMP.migs_pl_pathogenicity, domain=MigsPl, range=Optional[str])

slots.migs_pl_biotic_relationship = Slot(uri=MIXS['0000028'], name="migs_pl_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=TEMP.migs_pl_biotic_relationship, domain=MigsPl, range=Optional[str])

slots.migs_pl_specific_host = Slot(uri=MIXS['0000029'], name="migs_pl_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=TEMP.migs_pl_specific_host, domain=MigsPl, range=Optional[str])

slots.migs_pl_host_spec_range = Slot(uri=MIXS['0000030'], name="migs_pl_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=TEMP.migs_pl_host_spec_range, domain=MigsPl, range=Optional[Union[str, List[str]]])

slots.migs_pl_host_disease_stat = Slot(uri=MIXS['0000031'], name="migs_pl_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.migs_pl_host_disease_stat, domain=MigsPl, range=Optional[Union[str, List[str]]])

slots.migs_pl_trophic_level = Slot(uri=MIXS['0000032'], name="migs_pl_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=TEMP.migs_pl_trophic_level, domain=MigsPl, range=Optional[str])

slots.migs_pl_propagation = Slot(uri=MIXS['0000033'], name="migs_pl_propagation", curie=MIXS.curie('0000033'),
                   model_uri=TEMP.migs_pl_propagation, domain=MigsPl, range=Optional[str])

slots.migs_pl_encoded_traits = Slot(uri=MIXS['0000034'], name="migs_pl_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=TEMP.migs_pl_encoded_traits, domain=MigsPl, range=Optional[str])

slots.migs_pl_source_uvig = Slot(uri=MIXS['0000035'], name="migs_pl_source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=TEMP.migs_pl_source_uvig, domain=MigsPl, range=Optional[str])

slots.migs_pl_virus_enrich_appr = Slot(uri=MIXS['0000036'], name="migs_pl_virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=TEMP.migs_pl_virus_enrich_appr, domain=MigsPl, range=Optional[str])

slots.migs_pl_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="migs_pl_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.migs_pl_nucl_acid_ext, domain=MigsPl, range=Optional[str])

slots.migs_pl_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="migs_pl_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=TEMP.migs_pl_nucl_acid_amp, domain=MigsPl, range=Optional[str])

slots.migs_pl_lib_size = Slot(uri=MIXS['0000039'], name="migs_pl_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=TEMP.migs_pl_lib_size, domain=MigsPl, range=Optional[str])

slots.migs_pl_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="migs_pl_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=TEMP.migs_pl_lib_reads_seqd, domain=MigsPl, range=Optional[str])

slots.migs_pl_lib_layout = Slot(uri=MIXS['0000041'], name="migs_pl_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=TEMP.migs_pl_lib_layout, domain=MigsPl, range=Optional[str])

slots.migs_pl_lib_vector = Slot(uri=MIXS['0000042'], name="migs_pl_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=TEMP.migs_pl_lib_vector, domain=MigsPl, range=Optional[str])

slots.migs_pl_lib_screen = Slot(uri=MIXS['0000043'], name="migs_pl_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=TEMP.migs_pl_lib_screen, domain=MigsPl, range=Optional[str])

slots.migs_pl_target_gene = Slot(uri=MIXS['0000044'], name="migs_pl_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=TEMP.migs_pl_target_gene, domain=MigsPl, range=Optional[str])

slots.migs_pl_target_subfragment = Slot(uri=MIXS['0000045'], name="migs_pl_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=TEMP.migs_pl_target_subfragment, domain=MigsPl, range=Optional[str])

slots.migs_pl_pcr_primers = Slot(uri=MIXS['0000046'], name="migs_pl_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=TEMP.migs_pl_pcr_primers, domain=MigsPl, range=Optional[str])

slots.migs_pl_mid = Slot(uri=MIXS['0000047'], name="migs_pl_mid", curie=MIXS.curie('0000047'),
                   model_uri=TEMP.migs_pl_mid, domain=MigsPl, range=Optional[str])

slots.migs_pl_adapters = Slot(uri=MIXS['0000048'], name="migs_pl_adapters", curie=MIXS.curie('0000048'),
                   model_uri=TEMP.migs_pl_adapters, domain=MigsPl, range=Optional[str])

slots.migs_pl_pcr_cond = Slot(uri=MIXS['0000049'], name="migs_pl_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=TEMP.migs_pl_pcr_cond, domain=MigsPl, range=Optional[str])

slots.migs_pl_seq_meth = Slot(uri=MIXS['0000050'], name="migs_pl_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.migs_pl_seq_meth, domain=MigsPl, range=Optional[str])

slots.migs_pl_seq_quality_check = Slot(uri=MIXS['0000051'], name="migs_pl_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=TEMP.migs_pl_seq_quality_check, domain=MigsPl, range=Optional[str])

slots.migs_pl_chimera_check = Slot(uri=MIXS['0000052'], name="migs_pl_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=TEMP.migs_pl_chimera_check, domain=MigsPl, range=Optional[str])

slots.migs_pl_tax_ident = Slot(uri=MIXS['0000053'], name="migs_pl_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=TEMP.migs_pl_tax_ident, domain=MigsPl, range=Optional[str])

slots.migs_pl_single_cell_lysis_prot = Slot(uri=MIXS['0000054'], name="migs_pl_single_cell_lysis_prot", curie=MIXS.curie('0000054'),
                   model_uri=TEMP.migs_pl_single_cell_lysis_prot, domain=MigsPl, range=Optional[str])

slots.migs_pl_wga_amp_appr = Slot(uri=MIXS['0000055'], name="migs_pl_wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=TEMP.migs_pl_wga_amp_appr, domain=MigsPl, range=Optional[str])

slots.migs_pl_assembly_qual = Slot(uri=MIXS['0000056'], name="migs_pl_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=TEMP.migs_pl_assembly_qual, domain=MigsPl, range=Optional[str])

slots.migs_pl_assembly_name = Slot(uri=MIXS['0000057'], name="migs_pl_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=TEMP.migs_pl_assembly_name, domain=MigsPl, range=Optional[str])

slots.migs_pl_assembly_software = Slot(uri=MIXS['0000058'], name="migs_pl_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=TEMP.migs_pl_assembly_software, domain=MigsPl, range=Optional[str])

slots.migs_pl_annot = Slot(uri=MIXS['0000059'], name="migs_pl_annot", curie=MIXS.curie('0000059'),
                   model_uri=TEMP.migs_pl_annot, domain=MigsPl, range=Optional[str])

slots.migs_pl_number_contig = Slot(uri=MIXS['0000060'], name="migs_pl_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=TEMP.migs_pl_number_contig, domain=MigsPl, range=Optional[str])

slots.migs_pl_feat_pred = Slot(uri=MIXS['0000061'], name="migs_pl_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=TEMP.migs_pl_feat_pred, domain=MigsPl, range=Optional[str])

slots.migs_pl_ref_db = Slot(uri=MIXS['0000062'], name="migs_pl_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=TEMP.migs_pl_ref_db, domain=MigsPl, range=Optional[str])

slots.migs_pl_sim_search_meth = Slot(uri=MIXS['0000063'], name="migs_pl_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=TEMP.migs_pl_sim_search_meth, domain=MigsPl, range=Optional[str])

slots.migs_pl_tax_class = Slot(uri=MIXS['0000064'], name="migs_pl_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=TEMP.migs_pl_tax_class, domain=MigsPl, range=Optional[str])

slots.migs_pl_x_16s_recover = Slot(uri=MIXS['0000065'], name="migs_pl_x_16s_recover", curie=MIXS.curie('0000065'),
                   model_uri=TEMP.migs_pl_x_16s_recover, domain=MigsPl, range=Optional[str])

slots.migs_pl_x_16s_recover_software = Slot(uri=MIXS['0000066'], name="migs_pl_x_16s_recover_software", curie=MIXS.curie('0000066'),
                   model_uri=TEMP.migs_pl_x_16s_recover_software, domain=MigsPl, range=Optional[str])

slots.migs_pl_trnas = Slot(uri=MIXS['0000067'], name="migs_pl_trnas", curie=MIXS.curie('0000067'),
                   model_uri=TEMP.migs_pl_trnas, domain=MigsPl, range=Optional[str])

slots.migs_pl_trna_ext_software = Slot(uri=MIXS['0000068'], name="migs_pl_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=TEMP.migs_pl_trna_ext_software, domain=MigsPl, range=Optional[str])

slots.migs_pl_compl_score = Slot(uri=MIXS['0000069'], name="migs_pl_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=TEMP.migs_pl_compl_score, domain=MigsPl, range=Optional[str])

slots.migs_pl_compl_software = Slot(uri=MIXS['0000070'], name="migs_pl_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=TEMP.migs_pl_compl_software, domain=MigsPl, range=Optional[str])

slots.migs_pl_compl_appr = Slot(uri=MIXS['0000071'], name="migs_pl_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=TEMP.migs_pl_compl_appr, domain=MigsPl, range=Optional[str])

slots.migs_pl_contam_score = Slot(uri=MIXS['0000072'], name="migs_pl_contam_score", curie=MIXS.curie('0000072'),
                   model_uri=TEMP.migs_pl_contam_score, domain=MigsPl, range=Optional[str])

slots.migs_pl_contam_screen_param = Slot(uri=MIXS['0000073'], name="migs_pl_contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=TEMP.migs_pl_contam_screen_param, domain=MigsPl, range=Optional[str])

slots.migs_pl_decontam_software = Slot(uri=MIXS['0000074'], name="migs_pl_decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=TEMP.migs_pl_decontam_software, domain=MigsPl, range=Optional[str])

slots.migs_pl_sort_tech = Slot(uri=MIXS['0000075'], name="migs_pl_sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=TEMP.migs_pl_sort_tech, domain=MigsPl, range=Optional[str])

slots.migs_pl_single_cell_lysis_appr = Slot(uri=MIXS['0000076'], name="migs_pl_single_cell_lysis_appr", curie=MIXS.curie('0000076'),
                   model_uri=TEMP.migs_pl_single_cell_lysis_appr, domain=MigsPl, range=Optional[str])

slots.migs_pl_bin_param = Slot(uri=MIXS['0000077'], name="migs_pl_bin_param", curie=MIXS.curie('0000077'),
                   model_uri=TEMP.migs_pl_bin_param, domain=MigsPl, range=Optional[str])

slots.migs_pl_bin_software = Slot(uri=MIXS['0000078'], name="migs_pl_bin_software", curie=MIXS.curie('0000078'),
                   model_uri=TEMP.migs_pl_bin_software, domain=MigsPl, range=Optional[str])

slots.migs_pl_reassembly_bin = Slot(uri=MIXS['0000079'], name="migs_pl_reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=TEMP.migs_pl_reassembly_bin, domain=MigsPl, range=Optional[str])

slots.migs_pl_mag_cov_software = Slot(uri=MIXS['0000080'], name="migs_pl_mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=TEMP.migs_pl_mag_cov_software, domain=MigsPl, range=Optional[str])

slots.migs_pl_vir_ident_software = Slot(uri=MIXS['0000081'], name="migs_pl_vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=TEMP.migs_pl_vir_ident_software, domain=MigsPl, range=Optional[str])

slots.migs_pl_pred_genome_type = Slot(uri=MIXS['0000082'], name="migs_pl_pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=TEMP.migs_pl_pred_genome_type, domain=MigsPl, range=Optional[str])

slots.migs_pl_pred_genome_struc = Slot(uri=MIXS['0000083'], name="migs_pl_pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=TEMP.migs_pl_pred_genome_struc, domain=MigsPl, range=Optional[str])

slots.migs_pl_detec_type = Slot(uri=MIXS['0000084'], name="migs_pl_detec_type", curie=MIXS.curie('0000084'),
                   model_uri=TEMP.migs_pl_detec_type, domain=MigsPl, range=Optional[str])

slots.migs_pl_otu_class_appr = Slot(uri=MIXS['0000085'], name="migs_pl_otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=TEMP.migs_pl_otu_class_appr, domain=MigsPl, range=Optional[str])

slots.migs_pl_otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="migs_pl_otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=TEMP.migs_pl_otu_seq_comp_appr, domain=MigsPl, range=Optional[str])

slots.migs_pl_otu_db = Slot(uri=MIXS['0000087'], name="migs_pl_otu_db", curie=MIXS.curie('0000087'),
                   model_uri=TEMP.migs_pl_otu_db, domain=MigsPl, range=Optional[str])

slots.migs_pl_host_pred_appr = Slot(uri=MIXS['0000088'], name="migs_pl_host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=TEMP.migs_pl_host_pred_appr, domain=MigsPl, range=Optional[str])

slots.migs_pl_host_pred_est_acc = Slot(uri=MIXS['0000089'], name="migs_pl_host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=TEMP.migs_pl_host_pred_est_acc, domain=MigsPl, range=Optional[str])

slots.migs_pl_sop = Slot(uri=MIXS['0000090'], name="migs_pl_sop", curie=MIXS.curie('0000090'),
                   model_uri=TEMP.migs_pl_sop, domain=MigsPl, range=Optional[Union[str, List[str]]])

slots.migs_pl_associated_resource = Slot(uri=MIXS['0000091'], name="migs_pl_associated_resource", curie=MIXS.curie('0000091'),
                   model_uri=TEMP.migs_pl_associated_resource, domain=MigsPl, range=Optional[Union[str, List[str]]])

slots.migs_pl_project_name = Slot(uri=MIXS['0000092'], name="migs_pl_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.migs_pl_project_name, domain=MigsPl, range=Optional[str])

slots.migs_pl_elev = Slot(uri=MIXS['0000093'], name="migs_pl_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.migs_pl_elev, domain=MigsPl, range=Optional[str])

slots.migs_pl_alt = Slot(uri=MIXS['0000094'], name="migs_pl_alt", curie=MIXS.curie('0000094'),
                   model_uri=TEMP.migs_pl_alt, domain=MigsPl, range=Optional[str])

slots.migs_pl_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="migs_pl_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.migs_pl_samp_vol_we_dna_ext, domain=MigsPl, range=Optional[str])

slots.migs_pl_temp = Slot(uri=MIXS['0000113'], name="migs_pl_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.migs_pl_temp, domain=MigsPl, range=Optional[str])

slots.migs_pl_samp_name = Slot(uri=MIXS['0001107'], name="migs_pl_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.migs_pl_samp_name, domain=MigsPl, range=Optional[str])

slots.migs_pl_samp_collec_method = Slot(uri=MIXS['0001225'], name="migs_pl_samp_collec_method", curie=MIXS.curie('0001225'),
                   model_uri=TEMP.migs_pl_samp_collec_method, domain=MigsPl, range=Optional[str])

slots.migs_pl_samp_taxon_id = Slot(uri=MIXS['0001320'], name="migs_pl_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=TEMP.migs_pl_samp_taxon_id, domain=MigsPl, range=Optional[str])

slots.migs_pl_neg_cont_type = Slot(uri=MIXS['0001321'], name="migs_pl_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=TEMP.migs_pl_neg_cont_type, domain=MigsPl, range=Optional[str])

slots.migs_pl_pos_cont_type = Slot(uri=MIXS['0001322'], name="migs_pl_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=TEMP.migs_pl_pos_cont_type, domain=MigsPl, range=Optional[str])

slots.migs_vi_samp_size = Slot(uri=MIXS['0000001'], name="migs_vi_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.migs_vi_samp_size, domain=MigsVi, range=Optional[str])

slots.migs_vi_samp_collec_device = Slot(uri=MIXS['0000002'], name="migs_vi_samp_collec_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.migs_vi_samp_collec_device, domain=MigsVi, range=Optional[str])

slots.migs_vi_isol_growth_condt = Slot(uri=MIXS['0000003'], name="migs_vi_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=TEMP.migs_vi_isol_growth_condt, domain=MigsVi, range=Optional[str])

slots.migs_vi_contam_screen_input = Slot(uri=MIXS['0000005'], name="migs_vi_contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=TEMP.migs_vi_contam_screen_input, domain=MigsVi, range=Optional[str])

slots.migs_vi_wga_amp_kit = Slot(uri=MIXS['0000006'], name="migs_vi_wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=TEMP.migs_vi_wga_amp_kit, domain=MigsVi, range=Optional[str])

slots.migs_vi_experimental_factor = Slot(uri=MIXS['0000008'], name="migs_vi_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=TEMP.migs_vi_experimental_factor, domain=MigsVi, range=Optional[str])

slots.migs_vi_lat_lon = Slot(uri=MIXS['0000009'], name="migs_vi_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.migs_vi_lat_lon, domain=MigsVi, range=Optional[str])

slots.migs_vi_geo_loc_name = Slot(uri=MIXS['0000010'], name="migs_vi_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.migs_vi_geo_loc_name, domain=MigsVi, range=Optional[str])

slots.migs_vi_collection_date = Slot(uri=MIXS['0000011'], name="migs_vi_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.migs_vi_collection_date, domain=MigsVi, range=Optional[str])

slots.migs_vi_env_broad_scale = Slot(uri=MIXS['0000012'], name="migs_vi_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.migs_vi_env_broad_scale, domain=MigsVi, range=Optional[str])

slots.migs_vi_env_local_scale = Slot(uri=MIXS['0000013'], name="migs_vi_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.migs_vi_env_local_scale, domain=MigsVi, range=Optional[str])

slots.migs_vi_env_medium = Slot(uri=MIXS['0000014'], name="migs_vi_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.migs_vi_env_medium, domain=MigsVi, range=Optional[str])

slots.migs_vi_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="migs_vi_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=TEMP.migs_vi_rel_to_oxygen, domain=MigsVi, range=Optional[str])

slots.migs_vi_samp_mat_process = Slot(uri=MIXS['0000016'], name="migs_vi_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=TEMP.migs_vi_samp_mat_process, domain=MigsVi, range=Optional[str])

slots.migs_vi_size_frac = Slot(uri=MIXS['0000017'], name="migs_vi_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=TEMP.migs_vi_size_frac, domain=MigsVi, range=Optional[str])

slots.migs_vi_depth = Slot(uri=MIXS['0000018'], name="migs_vi_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.migs_vi_depth, domain=MigsVi, range=Optional[str])

slots.migs_vi_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="migs_vi_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=TEMP.migs_vi_subspecf_gen_lin, domain=MigsVi, range=Optional[str])

slots.migs_vi_ploidy = Slot(uri=MIXS['0000021'], name="migs_vi_ploidy", curie=MIXS.curie('0000021'),
                   model_uri=TEMP.migs_vi_ploidy, domain=MigsVi, range=Optional[str])

slots.migs_vi_num_replicons = Slot(uri=MIXS['0000022'], name="migs_vi_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=TEMP.migs_vi_num_replicons, domain=MigsVi, range=Optional[str])

slots.migs_vi_extrachrom_elements = Slot(uri=MIXS['0000023'], name="migs_vi_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=TEMP.migs_vi_extrachrom_elements, domain=MigsVi, range=Optional[str])

slots.migs_vi_estimated_size = Slot(uri=MIXS['0000024'], name="migs_vi_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=TEMP.migs_vi_estimated_size, domain=MigsVi, range=Optional[str])

slots.migs_vi_ref_biomaterial = Slot(uri=MIXS['0000025'], name="migs_vi_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=TEMP.migs_vi_ref_biomaterial, domain=MigsVi, range=Optional[str])

slots.migs_vi_source_mat_id = Slot(uri=MIXS['0000026'], name="migs_vi_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=TEMP.migs_vi_source_mat_id, domain=MigsVi, range=Optional[Union[str, List[str]]])

slots.migs_vi_pathogenicity = Slot(uri=MIXS['0000027'], name="migs_vi_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=TEMP.migs_vi_pathogenicity, domain=MigsVi, range=Optional[str])

slots.migs_vi_biotic_relationship = Slot(uri=MIXS['0000028'], name="migs_vi_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=TEMP.migs_vi_biotic_relationship, domain=MigsVi, range=Optional[str])

slots.migs_vi_specific_host = Slot(uri=MIXS['0000029'], name="migs_vi_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=TEMP.migs_vi_specific_host, domain=MigsVi, range=Optional[str])

slots.migs_vi_host_spec_range = Slot(uri=MIXS['0000030'], name="migs_vi_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=TEMP.migs_vi_host_spec_range, domain=MigsVi, range=Optional[Union[str, List[str]]])

slots.migs_vi_host_disease_stat = Slot(uri=MIXS['0000031'], name="migs_vi_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.migs_vi_host_disease_stat, domain=MigsVi, range=Optional[Union[str, List[str]]])

slots.migs_vi_trophic_level = Slot(uri=MIXS['0000032'], name="migs_vi_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=TEMP.migs_vi_trophic_level, domain=MigsVi, range=Optional[str])

slots.migs_vi_propagation = Slot(uri=MIXS['0000033'], name="migs_vi_propagation", curie=MIXS.curie('0000033'),
                   model_uri=TEMP.migs_vi_propagation, domain=MigsVi, range=Optional[str])

slots.migs_vi_encoded_traits = Slot(uri=MIXS['0000034'], name="migs_vi_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=TEMP.migs_vi_encoded_traits, domain=MigsVi, range=Optional[str])

slots.migs_vi_source_uvig = Slot(uri=MIXS['0000035'], name="migs_vi_source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=TEMP.migs_vi_source_uvig, domain=MigsVi, range=Optional[str])

slots.migs_vi_virus_enrich_appr = Slot(uri=MIXS['0000036'], name="migs_vi_virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=TEMP.migs_vi_virus_enrich_appr, domain=MigsVi, range=Optional[str])

slots.migs_vi_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="migs_vi_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.migs_vi_nucl_acid_ext, domain=MigsVi, range=Optional[str])

slots.migs_vi_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="migs_vi_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=TEMP.migs_vi_nucl_acid_amp, domain=MigsVi, range=Optional[str])

slots.migs_vi_lib_size = Slot(uri=MIXS['0000039'], name="migs_vi_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=TEMP.migs_vi_lib_size, domain=MigsVi, range=Optional[str])

slots.migs_vi_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="migs_vi_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=TEMP.migs_vi_lib_reads_seqd, domain=MigsVi, range=Optional[str])

slots.migs_vi_lib_layout = Slot(uri=MIXS['0000041'], name="migs_vi_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=TEMP.migs_vi_lib_layout, domain=MigsVi, range=Optional[str])

slots.migs_vi_lib_vector = Slot(uri=MIXS['0000042'], name="migs_vi_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=TEMP.migs_vi_lib_vector, domain=MigsVi, range=Optional[str])

slots.migs_vi_lib_screen = Slot(uri=MIXS['0000043'], name="migs_vi_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=TEMP.migs_vi_lib_screen, domain=MigsVi, range=Optional[str])

slots.migs_vi_target_gene = Slot(uri=MIXS['0000044'], name="migs_vi_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=TEMP.migs_vi_target_gene, domain=MigsVi, range=Optional[str])

slots.migs_vi_target_subfragment = Slot(uri=MIXS['0000045'], name="migs_vi_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=TEMP.migs_vi_target_subfragment, domain=MigsVi, range=Optional[str])

slots.migs_vi_pcr_primers = Slot(uri=MIXS['0000046'], name="migs_vi_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=TEMP.migs_vi_pcr_primers, domain=MigsVi, range=Optional[str])

slots.migs_vi_mid = Slot(uri=MIXS['0000047'], name="migs_vi_mid", curie=MIXS.curie('0000047'),
                   model_uri=TEMP.migs_vi_mid, domain=MigsVi, range=Optional[str])

slots.migs_vi_adapters = Slot(uri=MIXS['0000048'], name="migs_vi_adapters", curie=MIXS.curie('0000048'),
                   model_uri=TEMP.migs_vi_adapters, domain=MigsVi, range=Optional[str])

slots.migs_vi_pcr_cond = Slot(uri=MIXS['0000049'], name="migs_vi_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=TEMP.migs_vi_pcr_cond, domain=MigsVi, range=Optional[str])

slots.migs_vi_seq_meth = Slot(uri=MIXS['0000050'], name="migs_vi_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.migs_vi_seq_meth, domain=MigsVi, range=Optional[str])

slots.migs_vi_seq_quality_check = Slot(uri=MIXS['0000051'], name="migs_vi_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=TEMP.migs_vi_seq_quality_check, domain=MigsVi, range=Optional[str])

slots.migs_vi_chimera_check = Slot(uri=MIXS['0000052'], name="migs_vi_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=TEMP.migs_vi_chimera_check, domain=MigsVi, range=Optional[str])

slots.migs_vi_tax_ident = Slot(uri=MIXS['0000053'], name="migs_vi_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=TEMP.migs_vi_tax_ident, domain=MigsVi, range=Optional[str])

slots.migs_vi_single_cell_lysis_prot = Slot(uri=MIXS['0000054'], name="migs_vi_single_cell_lysis_prot", curie=MIXS.curie('0000054'),
                   model_uri=TEMP.migs_vi_single_cell_lysis_prot, domain=MigsVi, range=Optional[str])

slots.migs_vi_wga_amp_appr = Slot(uri=MIXS['0000055'], name="migs_vi_wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=TEMP.migs_vi_wga_amp_appr, domain=MigsVi, range=Optional[str])

slots.migs_vi_assembly_qual = Slot(uri=MIXS['0000056'], name="migs_vi_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=TEMP.migs_vi_assembly_qual, domain=MigsVi, range=Optional[str])

slots.migs_vi_assembly_name = Slot(uri=MIXS['0000057'], name="migs_vi_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=TEMP.migs_vi_assembly_name, domain=MigsVi, range=Optional[str])

slots.migs_vi_assembly_software = Slot(uri=MIXS['0000058'], name="migs_vi_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=TEMP.migs_vi_assembly_software, domain=MigsVi, range=Optional[str])

slots.migs_vi_annot = Slot(uri=MIXS['0000059'], name="migs_vi_annot", curie=MIXS.curie('0000059'),
                   model_uri=TEMP.migs_vi_annot, domain=MigsVi, range=Optional[str])

slots.migs_vi_number_contig = Slot(uri=MIXS['0000060'], name="migs_vi_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=TEMP.migs_vi_number_contig, domain=MigsVi, range=Optional[str])

slots.migs_vi_feat_pred = Slot(uri=MIXS['0000061'], name="migs_vi_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=TEMP.migs_vi_feat_pred, domain=MigsVi, range=Optional[str])

slots.migs_vi_ref_db = Slot(uri=MIXS['0000062'], name="migs_vi_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=TEMP.migs_vi_ref_db, domain=MigsVi, range=Optional[str])

slots.migs_vi_sim_search_meth = Slot(uri=MIXS['0000063'], name="migs_vi_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=TEMP.migs_vi_sim_search_meth, domain=MigsVi, range=Optional[str])

slots.migs_vi_tax_class = Slot(uri=MIXS['0000064'], name="migs_vi_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=TEMP.migs_vi_tax_class, domain=MigsVi, range=Optional[str])

slots.migs_vi_x_16s_recover = Slot(uri=MIXS['0000065'], name="migs_vi_x_16s_recover", curie=MIXS.curie('0000065'),
                   model_uri=TEMP.migs_vi_x_16s_recover, domain=MigsVi, range=Optional[str])

slots.migs_vi_x_16s_recover_software = Slot(uri=MIXS['0000066'], name="migs_vi_x_16s_recover_software", curie=MIXS.curie('0000066'),
                   model_uri=TEMP.migs_vi_x_16s_recover_software, domain=MigsVi, range=Optional[str])

slots.migs_vi_trnas = Slot(uri=MIXS['0000067'], name="migs_vi_trnas", curie=MIXS.curie('0000067'),
                   model_uri=TEMP.migs_vi_trnas, domain=MigsVi, range=Optional[str])

slots.migs_vi_trna_ext_software = Slot(uri=MIXS['0000068'], name="migs_vi_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=TEMP.migs_vi_trna_ext_software, domain=MigsVi, range=Optional[str])

slots.migs_vi_compl_score = Slot(uri=MIXS['0000069'], name="migs_vi_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=TEMP.migs_vi_compl_score, domain=MigsVi, range=Optional[str])

slots.migs_vi_compl_software = Slot(uri=MIXS['0000070'], name="migs_vi_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=TEMP.migs_vi_compl_software, domain=MigsVi, range=Optional[str])

slots.migs_vi_compl_appr = Slot(uri=MIXS['0000071'], name="migs_vi_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=TEMP.migs_vi_compl_appr, domain=MigsVi, range=Optional[str])

slots.migs_vi_contam_score = Slot(uri=MIXS['0000072'], name="migs_vi_contam_score", curie=MIXS.curie('0000072'),
                   model_uri=TEMP.migs_vi_contam_score, domain=MigsVi, range=Optional[str])

slots.migs_vi_contam_screen_param = Slot(uri=MIXS['0000073'], name="migs_vi_contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=TEMP.migs_vi_contam_screen_param, domain=MigsVi, range=Optional[str])

slots.migs_vi_decontam_software = Slot(uri=MIXS['0000074'], name="migs_vi_decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=TEMP.migs_vi_decontam_software, domain=MigsVi, range=Optional[str])

slots.migs_vi_sort_tech = Slot(uri=MIXS['0000075'], name="migs_vi_sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=TEMP.migs_vi_sort_tech, domain=MigsVi, range=Optional[str])

slots.migs_vi_single_cell_lysis_appr = Slot(uri=MIXS['0000076'], name="migs_vi_single_cell_lysis_appr", curie=MIXS.curie('0000076'),
                   model_uri=TEMP.migs_vi_single_cell_lysis_appr, domain=MigsVi, range=Optional[str])

slots.migs_vi_bin_param = Slot(uri=MIXS['0000077'], name="migs_vi_bin_param", curie=MIXS.curie('0000077'),
                   model_uri=TEMP.migs_vi_bin_param, domain=MigsVi, range=Optional[str])

slots.migs_vi_bin_software = Slot(uri=MIXS['0000078'], name="migs_vi_bin_software", curie=MIXS.curie('0000078'),
                   model_uri=TEMP.migs_vi_bin_software, domain=MigsVi, range=Optional[str])

slots.migs_vi_reassembly_bin = Slot(uri=MIXS['0000079'], name="migs_vi_reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=TEMP.migs_vi_reassembly_bin, domain=MigsVi, range=Optional[str])

slots.migs_vi_mag_cov_software = Slot(uri=MIXS['0000080'], name="migs_vi_mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=TEMP.migs_vi_mag_cov_software, domain=MigsVi, range=Optional[str])

slots.migs_vi_vir_ident_software = Slot(uri=MIXS['0000081'], name="migs_vi_vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=TEMP.migs_vi_vir_ident_software, domain=MigsVi, range=Optional[str])

slots.migs_vi_pred_genome_type = Slot(uri=MIXS['0000082'], name="migs_vi_pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=TEMP.migs_vi_pred_genome_type, domain=MigsVi, range=Optional[str])

slots.migs_vi_pred_genome_struc = Slot(uri=MIXS['0000083'], name="migs_vi_pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=TEMP.migs_vi_pred_genome_struc, domain=MigsVi, range=Optional[str])

slots.migs_vi_detec_type = Slot(uri=MIXS['0000084'], name="migs_vi_detec_type", curie=MIXS.curie('0000084'),
                   model_uri=TEMP.migs_vi_detec_type, domain=MigsVi, range=Optional[str])

slots.migs_vi_otu_class_appr = Slot(uri=MIXS['0000085'], name="migs_vi_otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=TEMP.migs_vi_otu_class_appr, domain=MigsVi, range=Optional[str])

slots.migs_vi_otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="migs_vi_otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=TEMP.migs_vi_otu_seq_comp_appr, domain=MigsVi, range=Optional[str])

slots.migs_vi_otu_db = Slot(uri=MIXS['0000087'], name="migs_vi_otu_db", curie=MIXS.curie('0000087'),
                   model_uri=TEMP.migs_vi_otu_db, domain=MigsVi, range=Optional[str])

slots.migs_vi_host_pred_appr = Slot(uri=MIXS['0000088'], name="migs_vi_host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=TEMP.migs_vi_host_pred_appr, domain=MigsVi, range=Optional[str])

slots.migs_vi_host_pred_est_acc = Slot(uri=MIXS['0000089'], name="migs_vi_host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=TEMP.migs_vi_host_pred_est_acc, domain=MigsVi, range=Optional[str])

slots.migs_vi_sop = Slot(uri=MIXS['0000090'], name="migs_vi_sop", curie=MIXS.curie('0000090'),
                   model_uri=TEMP.migs_vi_sop, domain=MigsVi, range=Optional[Union[str, List[str]]])

slots.migs_vi_associated_resource = Slot(uri=MIXS['0000091'], name="migs_vi_associated_resource", curie=MIXS.curie('0000091'),
                   model_uri=TEMP.migs_vi_associated_resource, domain=MigsVi, range=Optional[Union[str, List[str]]])

slots.migs_vi_project_name = Slot(uri=MIXS['0000092'], name="migs_vi_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.migs_vi_project_name, domain=MigsVi, range=Optional[str])

slots.migs_vi_elev = Slot(uri=MIXS['0000093'], name="migs_vi_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.migs_vi_elev, domain=MigsVi, range=Optional[str])

slots.migs_vi_alt = Slot(uri=MIXS['0000094'], name="migs_vi_alt", curie=MIXS.curie('0000094'),
                   model_uri=TEMP.migs_vi_alt, domain=MigsVi, range=Optional[str])

slots.migs_vi_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="migs_vi_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.migs_vi_samp_vol_we_dna_ext, domain=MigsVi, range=Optional[str])

slots.migs_vi_temp = Slot(uri=MIXS['0000113'], name="migs_vi_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.migs_vi_temp, domain=MigsVi, range=Optional[str])

slots.migs_vi_samp_name = Slot(uri=MIXS['0001107'], name="migs_vi_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.migs_vi_samp_name, domain=MigsVi, range=Optional[str])

slots.migs_vi_samp_collec_method = Slot(uri=MIXS['0001225'], name="migs_vi_samp_collec_method", curie=MIXS.curie('0001225'),
                   model_uri=TEMP.migs_vi_samp_collec_method, domain=MigsVi, range=Optional[str])

slots.migs_vi_samp_taxon_id = Slot(uri=MIXS['0001320'], name="migs_vi_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=TEMP.migs_vi_samp_taxon_id, domain=MigsVi, range=Optional[str])

slots.migs_vi_neg_cont_type = Slot(uri=MIXS['0001321'], name="migs_vi_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=TEMP.migs_vi_neg_cont_type, domain=MigsVi, range=Optional[str])

slots.migs_vi_pos_cont_type = Slot(uri=MIXS['0001322'], name="migs_vi_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=TEMP.migs_vi_pos_cont_type, domain=MigsVi, range=Optional[str])

slots.migs_org_samp_size = Slot(uri=MIXS['0000001'], name="migs_org_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.migs_org_samp_size, domain=MigsOrg, range=Optional[str])

slots.migs_org_samp_collec_device = Slot(uri=MIXS['0000002'], name="migs_org_samp_collec_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.migs_org_samp_collec_device, domain=MigsOrg, range=Optional[str])

slots.migs_org_isol_growth_condt = Slot(uri=MIXS['0000003'], name="migs_org_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=TEMP.migs_org_isol_growth_condt, domain=MigsOrg, range=Optional[str])

slots.migs_org_contam_screen_input = Slot(uri=MIXS['0000005'], name="migs_org_contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=TEMP.migs_org_contam_screen_input, domain=MigsOrg, range=Optional[str])

slots.migs_org_wga_amp_kit = Slot(uri=MIXS['0000006'], name="migs_org_wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=TEMP.migs_org_wga_amp_kit, domain=MigsOrg, range=Optional[str])

slots.migs_org_experimental_factor = Slot(uri=MIXS['0000008'], name="migs_org_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=TEMP.migs_org_experimental_factor, domain=MigsOrg, range=Optional[str])

slots.migs_org_lat_lon = Slot(uri=MIXS['0000009'], name="migs_org_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.migs_org_lat_lon, domain=MigsOrg, range=Optional[str])

slots.migs_org_geo_loc_name = Slot(uri=MIXS['0000010'], name="migs_org_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.migs_org_geo_loc_name, domain=MigsOrg, range=Optional[str])

slots.migs_org_collection_date = Slot(uri=MIXS['0000011'], name="migs_org_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.migs_org_collection_date, domain=MigsOrg, range=Optional[str])

slots.migs_org_env_broad_scale = Slot(uri=MIXS['0000012'], name="migs_org_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.migs_org_env_broad_scale, domain=MigsOrg, range=Optional[str])

slots.migs_org_env_local_scale = Slot(uri=MIXS['0000013'], name="migs_org_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.migs_org_env_local_scale, domain=MigsOrg, range=Optional[str])

slots.migs_org_env_medium = Slot(uri=MIXS['0000014'], name="migs_org_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.migs_org_env_medium, domain=MigsOrg, range=Optional[str])

slots.migs_org_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="migs_org_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=TEMP.migs_org_rel_to_oxygen, domain=MigsOrg, range=Optional[str])

slots.migs_org_samp_mat_process = Slot(uri=MIXS['0000016'], name="migs_org_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=TEMP.migs_org_samp_mat_process, domain=MigsOrg, range=Optional[str])

slots.migs_org_size_frac = Slot(uri=MIXS['0000017'], name="migs_org_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=TEMP.migs_org_size_frac, domain=MigsOrg, range=Optional[str])

slots.migs_org_depth = Slot(uri=MIXS['0000018'], name="migs_org_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.migs_org_depth, domain=MigsOrg, range=Optional[str])

slots.migs_org_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="migs_org_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=TEMP.migs_org_subspecf_gen_lin, domain=MigsOrg, range=Optional[str])

slots.migs_org_ploidy = Slot(uri=MIXS['0000021'], name="migs_org_ploidy", curie=MIXS.curie('0000021'),
                   model_uri=TEMP.migs_org_ploidy, domain=MigsOrg, range=Optional[str])

slots.migs_org_num_replicons = Slot(uri=MIXS['0000022'], name="migs_org_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=TEMP.migs_org_num_replicons, domain=MigsOrg, range=Optional[str])

slots.migs_org_extrachrom_elements = Slot(uri=MIXS['0000023'], name="migs_org_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=TEMP.migs_org_extrachrom_elements, domain=MigsOrg, range=Optional[str])

slots.migs_org_estimated_size = Slot(uri=MIXS['0000024'], name="migs_org_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=TEMP.migs_org_estimated_size, domain=MigsOrg, range=Optional[str])

slots.migs_org_ref_biomaterial = Slot(uri=MIXS['0000025'], name="migs_org_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=TEMP.migs_org_ref_biomaterial, domain=MigsOrg, range=Optional[str])

slots.migs_org_source_mat_id = Slot(uri=MIXS['0000026'], name="migs_org_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=TEMP.migs_org_source_mat_id, domain=MigsOrg, range=Optional[Union[str, List[str]]])

slots.migs_org_pathogenicity = Slot(uri=MIXS['0000027'], name="migs_org_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=TEMP.migs_org_pathogenicity, domain=MigsOrg, range=Optional[str])

slots.migs_org_biotic_relationship = Slot(uri=MIXS['0000028'], name="migs_org_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=TEMP.migs_org_biotic_relationship, domain=MigsOrg, range=Optional[str])

slots.migs_org_specific_host = Slot(uri=MIXS['0000029'], name="migs_org_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=TEMP.migs_org_specific_host, domain=MigsOrg, range=Optional[str])

slots.migs_org_host_spec_range = Slot(uri=MIXS['0000030'], name="migs_org_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=TEMP.migs_org_host_spec_range, domain=MigsOrg, range=Optional[Union[str, List[str]]])

slots.migs_org_host_disease_stat = Slot(uri=MIXS['0000031'], name="migs_org_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.migs_org_host_disease_stat, domain=MigsOrg, range=Optional[Union[str, List[str]]])

slots.migs_org_trophic_level = Slot(uri=MIXS['0000032'], name="migs_org_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=TEMP.migs_org_trophic_level, domain=MigsOrg, range=Optional[str])

slots.migs_org_propagation = Slot(uri=MIXS['0000033'], name="migs_org_propagation", curie=MIXS.curie('0000033'),
                   model_uri=TEMP.migs_org_propagation, domain=MigsOrg, range=Optional[str])

slots.migs_org_encoded_traits = Slot(uri=MIXS['0000034'], name="migs_org_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=TEMP.migs_org_encoded_traits, domain=MigsOrg, range=Optional[str])

slots.migs_org_source_uvig = Slot(uri=MIXS['0000035'], name="migs_org_source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=TEMP.migs_org_source_uvig, domain=MigsOrg, range=Optional[str])

slots.migs_org_virus_enrich_appr = Slot(uri=MIXS['0000036'], name="migs_org_virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=TEMP.migs_org_virus_enrich_appr, domain=MigsOrg, range=Optional[str])

slots.migs_org_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="migs_org_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.migs_org_nucl_acid_ext, domain=MigsOrg, range=Optional[str])

slots.migs_org_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="migs_org_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=TEMP.migs_org_nucl_acid_amp, domain=MigsOrg, range=Optional[str])

slots.migs_org_lib_size = Slot(uri=MIXS['0000039'], name="migs_org_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=TEMP.migs_org_lib_size, domain=MigsOrg, range=Optional[str])

slots.migs_org_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="migs_org_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=TEMP.migs_org_lib_reads_seqd, domain=MigsOrg, range=Optional[str])

slots.migs_org_lib_layout = Slot(uri=MIXS['0000041'], name="migs_org_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=TEMP.migs_org_lib_layout, domain=MigsOrg, range=Optional[str])

slots.migs_org_lib_vector = Slot(uri=MIXS['0000042'], name="migs_org_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=TEMP.migs_org_lib_vector, domain=MigsOrg, range=Optional[str])

slots.migs_org_lib_screen = Slot(uri=MIXS['0000043'], name="migs_org_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=TEMP.migs_org_lib_screen, domain=MigsOrg, range=Optional[str])

slots.migs_org_target_gene = Slot(uri=MIXS['0000044'], name="migs_org_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=TEMP.migs_org_target_gene, domain=MigsOrg, range=Optional[str])

slots.migs_org_target_subfragment = Slot(uri=MIXS['0000045'], name="migs_org_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=TEMP.migs_org_target_subfragment, domain=MigsOrg, range=Optional[str])

slots.migs_org_pcr_primers = Slot(uri=MIXS['0000046'], name="migs_org_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=TEMP.migs_org_pcr_primers, domain=MigsOrg, range=Optional[str])

slots.migs_org_mid = Slot(uri=MIXS['0000047'], name="migs_org_mid", curie=MIXS.curie('0000047'),
                   model_uri=TEMP.migs_org_mid, domain=MigsOrg, range=Optional[str])

slots.migs_org_adapters = Slot(uri=MIXS['0000048'], name="migs_org_adapters", curie=MIXS.curie('0000048'),
                   model_uri=TEMP.migs_org_adapters, domain=MigsOrg, range=Optional[str])

slots.migs_org_pcr_cond = Slot(uri=MIXS['0000049'], name="migs_org_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=TEMP.migs_org_pcr_cond, domain=MigsOrg, range=Optional[str])

slots.migs_org_seq_meth = Slot(uri=MIXS['0000050'], name="migs_org_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.migs_org_seq_meth, domain=MigsOrg, range=Optional[str])

slots.migs_org_seq_quality_check = Slot(uri=MIXS['0000051'], name="migs_org_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=TEMP.migs_org_seq_quality_check, domain=MigsOrg, range=Optional[str])

slots.migs_org_chimera_check = Slot(uri=MIXS['0000052'], name="migs_org_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=TEMP.migs_org_chimera_check, domain=MigsOrg, range=Optional[str])

slots.migs_org_tax_ident = Slot(uri=MIXS['0000053'], name="migs_org_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=TEMP.migs_org_tax_ident, domain=MigsOrg, range=Optional[str])

slots.migs_org_single_cell_lysis_prot = Slot(uri=MIXS['0000054'], name="migs_org_single_cell_lysis_prot", curie=MIXS.curie('0000054'),
                   model_uri=TEMP.migs_org_single_cell_lysis_prot, domain=MigsOrg, range=Optional[str])

slots.migs_org_wga_amp_appr = Slot(uri=MIXS['0000055'], name="migs_org_wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=TEMP.migs_org_wga_amp_appr, domain=MigsOrg, range=Optional[str])

slots.migs_org_assembly_qual = Slot(uri=MIXS['0000056'], name="migs_org_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=TEMP.migs_org_assembly_qual, domain=MigsOrg, range=Optional[str])

slots.migs_org_assembly_name = Slot(uri=MIXS['0000057'], name="migs_org_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=TEMP.migs_org_assembly_name, domain=MigsOrg, range=Optional[str])

slots.migs_org_assembly_software = Slot(uri=MIXS['0000058'], name="migs_org_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=TEMP.migs_org_assembly_software, domain=MigsOrg, range=Optional[str])

slots.migs_org_annot = Slot(uri=MIXS['0000059'], name="migs_org_annot", curie=MIXS.curie('0000059'),
                   model_uri=TEMP.migs_org_annot, domain=MigsOrg, range=Optional[str])

slots.migs_org_number_contig = Slot(uri=MIXS['0000060'], name="migs_org_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=TEMP.migs_org_number_contig, domain=MigsOrg, range=Optional[str])

slots.migs_org_feat_pred = Slot(uri=MIXS['0000061'], name="migs_org_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=TEMP.migs_org_feat_pred, domain=MigsOrg, range=Optional[str])

slots.migs_org_ref_db = Slot(uri=MIXS['0000062'], name="migs_org_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=TEMP.migs_org_ref_db, domain=MigsOrg, range=Optional[str])

slots.migs_org_sim_search_meth = Slot(uri=MIXS['0000063'], name="migs_org_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=TEMP.migs_org_sim_search_meth, domain=MigsOrg, range=Optional[str])

slots.migs_org_tax_class = Slot(uri=MIXS['0000064'], name="migs_org_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=TEMP.migs_org_tax_class, domain=MigsOrg, range=Optional[str])

slots.migs_org_x_16s_recover = Slot(uri=MIXS['0000065'], name="migs_org_x_16s_recover", curie=MIXS.curie('0000065'),
                   model_uri=TEMP.migs_org_x_16s_recover, domain=MigsOrg, range=Optional[str])

slots.migs_org_x_16s_recover_software = Slot(uri=MIXS['0000066'], name="migs_org_x_16s_recover_software", curie=MIXS.curie('0000066'),
                   model_uri=TEMP.migs_org_x_16s_recover_software, domain=MigsOrg, range=Optional[str])

slots.migs_org_trnas = Slot(uri=MIXS['0000067'], name="migs_org_trnas", curie=MIXS.curie('0000067'),
                   model_uri=TEMP.migs_org_trnas, domain=MigsOrg, range=Optional[str])

slots.migs_org_trna_ext_software = Slot(uri=MIXS['0000068'], name="migs_org_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=TEMP.migs_org_trna_ext_software, domain=MigsOrg, range=Optional[str])

slots.migs_org_compl_score = Slot(uri=MIXS['0000069'], name="migs_org_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=TEMP.migs_org_compl_score, domain=MigsOrg, range=Optional[str])

slots.migs_org_compl_software = Slot(uri=MIXS['0000070'], name="migs_org_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=TEMP.migs_org_compl_software, domain=MigsOrg, range=Optional[str])

slots.migs_org_compl_appr = Slot(uri=MIXS['0000071'], name="migs_org_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=TEMP.migs_org_compl_appr, domain=MigsOrg, range=Optional[str])

slots.migs_org_contam_score = Slot(uri=MIXS['0000072'], name="migs_org_contam_score", curie=MIXS.curie('0000072'),
                   model_uri=TEMP.migs_org_contam_score, domain=MigsOrg, range=Optional[str])

slots.migs_org_contam_screen_param = Slot(uri=MIXS['0000073'], name="migs_org_contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=TEMP.migs_org_contam_screen_param, domain=MigsOrg, range=Optional[str])

slots.migs_org_decontam_software = Slot(uri=MIXS['0000074'], name="migs_org_decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=TEMP.migs_org_decontam_software, domain=MigsOrg, range=Optional[str])

slots.migs_org_sort_tech = Slot(uri=MIXS['0000075'], name="migs_org_sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=TEMP.migs_org_sort_tech, domain=MigsOrg, range=Optional[str])

slots.migs_org_single_cell_lysis_appr = Slot(uri=MIXS['0000076'], name="migs_org_single_cell_lysis_appr", curie=MIXS.curie('0000076'),
                   model_uri=TEMP.migs_org_single_cell_lysis_appr, domain=MigsOrg, range=Optional[str])

slots.migs_org_bin_param = Slot(uri=MIXS['0000077'], name="migs_org_bin_param", curie=MIXS.curie('0000077'),
                   model_uri=TEMP.migs_org_bin_param, domain=MigsOrg, range=Optional[str])

slots.migs_org_bin_software = Slot(uri=MIXS['0000078'], name="migs_org_bin_software", curie=MIXS.curie('0000078'),
                   model_uri=TEMP.migs_org_bin_software, domain=MigsOrg, range=Optional[str])

slots.migs_org_reassembly_bin = Slot(uri=MIXS['0000079'], name="migs_org_reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=TEMP.migs_org_reassembly_bin, domain=MigsOrg, range=Optional[str])

slots.migs_org_mag_cov_software = Slot(uri=MIXS['0000080'], name="migs_org_mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=TEMP.migs_org_mag_cov_software, domain=MigsOrg, range=Optional[str])

slots.migs_org_vir_ident_software = Slot(uri=MIXS['0000081'], name="migs_org_vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=TEMP.migs_org_vir_ident_software, domain=MigsOrg, range=Optional[str])

slots.migs_org_pred_genome_type = Slot(uri=MIXS['0000082'], name="migs_org_pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=TEMP.migs_org_pred_genome_type, domain=MigsOrg, range=Optional[str])

slots.migs_org_pred_genome_struc = Slot(uri=MIXS['0000083'], name="migs_org_pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=TEMP.migs_org_pred_genome_struc, domain=MigsOrg, range=Optional[str])

slots.migs_org_detec_type = Slot(uri=MIXS['0000084'], name="migs_org_detec_type", curie=MIXS.curie('0000084'),
                   model_uri=TEMP.migs_org_detec_type, domain=MigsOrg, range=Optional[str])

slots.migs_org_otu_class_appr = Slot(uri=MIXS['0000085'], name="migs_org_otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=TEMP.migs_org_otu_class_appr, domain=MigsOrg, range=Optional[str])

slots.migs_org_otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="migs_org_otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=TEMP.migs_org_otu_seq_comp_appr, domain=MigsOrg, range=Optional[str])

slots.migs_org_otu_db = Slot(uri=MIXS['0000087'], name="migs_org_otu_db", curie=MIXS.curie('0000087'),
                   model_uri=TEMP.migs_org_otu_db, domain=MigsOrg, range=Optional[str])

slots.migs_org_host_pred_appr = Slot(uri=MIXS['0000088'], name="migs_org_host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=TEMP.migs_org_host_pred_appr, domain=MigsOrg, range=Optional[str])

slots.migs_org_host_pred_est_acc = Slot(uri=MIXS['0000089'], name="migs_org_host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=TEMP.migs_org_host_pred_est_acc, domain=MigsOrg, range=Optional[str])

slots.migs_org_sop = Slot(uri=MIXS['0000090'], name="migs_org_sop", curie=MIXS.curie('0000090'),
                   model_uri=TEMP.migs_org_sop, domain=MigsOrg, range=Optional[Union[str, List[str]]])

slots.migs_org_associated_resource = Slot(uri=MIXS['0000091'], name="migs_org_associated_resource", curie=MIXS.curie('0000091'),
                   model_uri=TEMP.migs_org_associated_resource, domain=MigsOrg, range=Optional[Union[str, List[str]]])

slots.migs_org_project_name = Slot(uri=MIXS['0000092'], name="migs_org_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.migs_org_project_name, domain=MigsOrg, range=Optional[str])

slots.migs_org_elev = Slot(uri=MIXS['0000093'], name="migs_org_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.migs_org_elev, domain=MigsOrg, range=Optional[str])

slots.migs_org_alt = Slot(uri=MIXS['0000094'], name="migs_org_alt", curie=MIXS.curie('0000094'),
                   model_uri=TEMP.migs_org_alt, domain=MigsOrg, range=Optional[str])

slots.migs_org_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="migs_org_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.migs_org_samp_vol_we_dna_ext, domain=MigsOrg, range=Optional[str])

slots.migs_org_temp = Slot(uri=MIXS['0000113'], name="migs_org_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.migs_org_temp, domain=MigsOrg, range=Optional[str])

slots.migs_org_samp_name = Slot(uri=MIXS['0001107'], name="migs_org_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.migs_org_samp_name, domain=MigsOrg, range=Optional[str])

slots.migs_org_samp_collec_method = Slot(uri=MIXS['0001225'], name="migs_org_samp_collec_method", curie=MIXS.curie('0001225'),
                   model_uri=TEMP.migs_org_samp_collec_method, domain=MigsOrg, range=Optional[str])

slots.migs_org_samp_taxon_id = Slot(uri=MIXS['0001320'], name="migs_org_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=TEMP.migs_org_samp_taxon_id, domain=MigsOrg, range=Optional[str])

slots.migs_org_neg_cont_type = Slot(uri=MIXS['0001321'], name="migs_org_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=TEMP.migs_org_neg_cont_type, domain=MigsOrg, range=Optional[str])

slots.migs_org_pos_cont_type = Slot(uri=MIXS['0001322'], name="migs_org_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=TEMP.migs_org_pos_cont_type, domain=MigsOrg, range=Optional[str])

slots.mims_samp_size = Slot(uri=MIXS['0000001'], name="mims_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.mims_samp_size, domain=Mims, range=Optional[str])

slots.mims_samp_collec_device = Slot(uri=MIXS['0000002'], name="mims_samp_collec_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.mims_samp_collec_device, domain=Mims, range=Optional[str])

slots.mims_isol_growth_condt = Slot(uri=MIXS['0000003'], name="mims_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=TEMP.mims_isol_growth_condt, domain=Mims, range=Optional[str])

slots.mims_contam_screen_input = Slot(uri=MIXS['0000005'], name="mims_contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=TEMP.mims_contam_screen_input, domain=Mims, range=Optional[str])

slots.mims_wga_amp_kit = Slot(uri=MIXS['0000006'], name="mims_wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=TEMP.mims_wga_amp_kit, domain=Mims, range=Optional[str])

slots.mims_experimental_factor = Slot(uri=MIXS['0000008'], name="mims_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=TEMP.mims_experimental_factor, domain=Mims, range=Optional[str])

slots.mims_lat_lon = Slot(uri=MIXS['0000009'], name="mims_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.mims_lat_lon, domain=Mims, range=Optional[str])

slots.mims_geo_loc_name = Slot(uri=MIXS['0000010'], name="mims_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.mims_geo_loc_name, domain=Mims, range=Optional[str])

slots.mims_collection_date = Slot(uri=MIXS['0000011'], name="mims_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.mims_collection_date, domain=Mims, range=Optional[str])

slots.mims_env_broad_scale = Slot(uri=MIXS['0000012'], name="mims_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.mims_env_broad_scale, domain=Mims, range=Optional[str])

slots.mims_env_local_scale = Slot(uri=MIXS['0000013'], name="mims_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.mims_env_local_scale, domain=Mims, range=Optional[str])

slots.mims_env_medium = Slot(uri=MIXS['0000014'], name="mims_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.mims_env_medium, domain=Mims, range=Optional[str])

slots.mims_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="mims_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=TEMP.mims_rel_to_oxygen, domain=Mims, range=Optional[str])

slots.mims_samp_mat_process = Slot(uri=MIXS['0000016'], name="mims_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=TEMP.mims_samp_mat_process, domain=Mims, range=Optional[str])

slots.mims_size_frac = Slot(uri=MIXS['0000017'], name="mims_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=TEMP.mims_size_frac, domain=Mims, range=Optional[str])

slots.mims_depth = Slot(uri=MIXS['0000018'], name="mims_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.mims_depth, domain=Mims, range=Optional[str])

slots.mims_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="mims_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=TEMP.mims_subspecf_gen_lin, domain=Mims, range=Optional[str])

slots.mims_ploidy = Slot(uri=MIXS['0000021'], name="mims_ploidy", curie=MIXS.curie('0000021'),
                   model_uri=TEMP.mims_ploidy, domain=Mims, range=Optional[str])

slots.mims_num_replicons = Slot(uri=MIXS['0000022'], name="mims_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=TEMP.mims_num_replicons, domain=Mims, range=Optional[str])

slots.mims_extrachrom_elements = Slot(uri=MIXS['0000023'], name="mims_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=TEMP.mims_extrachrom_elements, domain=Mims, range=Optional[str])

slots.mims_estimated_size = Slot(uri=MIXS['0000024'], name="mims_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=TEMP.mims_estimated_size, domain=Mims, range=Optional[str])

slots.mims_ref_biomaterial = Slot(uri=MIXS['0000025'], name="mims_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=TEMP.mims_ref_biomaterial, domain=Mims, range=Optional[str])

slots.mims_source_mat_id = Slot(uri=MIXS['0000026'], name="mims_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=TEMP.mims_source_mat_id, domain=Mims, range=Optional[Union[str, List[str]]])

slots.mims_pathogenicity = Slot(uri=MIXS['0000027'], name="mims_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=TEMP.mims_pathogenicity, domain=Mims, range=Optional[str])

slots.mims_biotic_relationship = Slot(uri=MIXS['0000028'], name="mims_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=TEMP.mims_biotic_relationship, domain=Mims, range=Optional[str])

slots.mims_specific_host = Slot(uri=MIXS['0000029'], name="mims_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=TEMP.mims_specific_host, domain=Mims, range=Optional[str])

slots.mims_host_spec_range = Slot(uri=MIXS['0000030'], name="mims_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=TEMP.mims_host_spec_range, domain=Mims, range=Optional[Union[str, List[str]]])

slots.mims_host_disease_stat = Slot(uri=MIXS['0000031'], name="mims_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.mims_host_disease_stat, domain=Mims, range=Optional[Union[str, List[str]]])

slots.mims_trophic_level = Slot(uri=MIXS['0000032'], name="mims_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=TEMP.mims_trophic_level, domain=Mims, range=Optional[str])

slots.mims_propagation = Slot(uri=MIXS['0000033'], name="mims_propagation", curie=MIXS.curie('0000033'),
                   model_uri=TEMP.mims_propagation, domain=Mims, range=Optional[str])

slots.mims_encoded_traits = Slot(uri=MIXS['0000034'], name="mims_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=TEMP.mims_encoded_traits, domain=Mims, range=Optional[str])

slots.mims_source_uvig = Slot(uri=MIXS['0000035'], name="mims_source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=TEMP.mims_source_uvig, domain=Mims, range=Optional[str])

slots.mims_virus_enrich_appr = Slot(uri=MIXS['0000036'], name="mims_virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=TEMP.mims_virus_enrich_appr, domain=Mims, range=Optional[str])

slots.mims_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="mims_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.mims_nucl_acid_ext, domain=Mims, range=Optional[str])

slots.mims_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="mims_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=TEMP.mims_nucl_acid_amp, domain=Mims, range=Optional[str])

slots.mims_lib_size = Slot(uri=MIXS['0000039'], name="mims_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=TEMP.mims_lib_size, domain=Mims, range=Optional[str])

slots.mims_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="mims_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=TEMP.mims_lib_reads_seqd, domain=Mims, range=Optional[str])

slots.mims_lib_layout = Slot(uri=MIXS['0000041'], name="mims_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=TEMP.mims_lib_layout, domain=Mims, range=Optional[str])

slots.mims_lib_vector = Slot(uri=MIXS['0000042'], name="mims_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=TEMP.mims_lib_vector, domain=Mims, range=Optional[str])

slots.mims_lib_screen = Slot(uri=MIXS['0000043'], name="mims_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=TEMP.mims_lib_screen, domain=Mims, range=Optional[str])

slots.mims_target_gene = Slot(uri=MIXS['0000044'], name="mims_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=TEMP.mims_target_gene, domain=Mims, range=Optional[str])

slots.mims_target_subfragment = Slot(uri=MIXS['0000045'], name="mims_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=TEMP.mims_target_subfragment, domain=Mims, range=Optional[str])

slots.mims_pcr_primers = Slot(uri=MIXS['0000046'], name="mims_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=TEMP.mims_pcr_primers, domain=Mims, range=Optional[str])

slots.mims_mid = Slot(uri=MIXS['0000047'], name="mims_mid", curie=MIXS.curie('0000047'),
                   model_uri=TEMP.mims_mid, domain=Mims, range=Optional[str])

slots.mims_adapters = Slot(uri=MIXS['0000048'], name="mims_adapters", curie=MIXS.curie('0000048'),
                   model_uri=TEMP.mims_adapters, domain=Mims, range=Optional[str])

slots.mims_pcr_cond = Slot(uri=MIXS['0000049'], name="mims_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=TEMP.mims_pcr_cond, domain=Mims, range=Optional[str])

slots.mims_seq_meth = Slot(uri=MIXS['0000050'], name="mims_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.mims_seq_meth, domain=Mims, range=Optional[str])

slots.mims_seq_quality_check = Slot(uri=MIXS['0000051'], name="mims_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=TEMP.mims_seq_quality_check, domain=Mims, range=Optional[str])

slots.mims_chimera_check = Slot(uri=MIXS['0000052'], name="mims_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=TEMP.mims_chimera_check, domain=Mims, range=Optional[str])

slots.mims_tax_ident = Slot(uri=MIXS['0000053'], name="mims_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=TEMP.mims_tax_ident, domain=Mims, range=Optional[str])

slots.mims_single_cell_lysis_prot = Slot(uri=MIXS['0000054'], name="mims_single_cell_lysis_prot", curie=MIXS.curie('0000054'),
                   model_uri=TEMP.mims_single_cell_lysis_prot, domain=Mims, range=Optional[str])

slots.mims_wga_amp_appr = Slot(uri=MIXS['0000055'], name="mims_wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=TEMP.mims_wga_amp_appr, domain=Mims, range=Optional[str])

slots.mims_assembly_qual = Slot(uri=MIXS['0000056'], name="mims_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=TEMP.mims_assembly_qual, domain=Mims, range=Optional[str])

slots.mims_assembly_name = Slot(uri=MIXS['0000057'], name="mims_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=TEMP.mims_assembly_name, domain=Mims, range=Optional[str])

slots.mims_assembly_software = Slot(uri=MIXS['0000058'], name="mims_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=TEMP.mims_assembly_software, domain=Mims, range=Optional[str])

slots.mims_annot = Slot(uri=MIXS['0000059'], name="mims_annot", curie=MIXS.curie('0000059'),
                   model_uri=TEMP.mims_annot, domain=Mims, range=Optional[str])

slots.mims_number_contig = Slot(uri=MIXS['0000060'], name="mims_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=TEMP.mims_number_contig, domain=Mims, range=Optional[str])

slots.mims_feat_pred = Slot(uri=MIXS['0000061'], name="mims_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=TEMP.mims_feat_pred, domain=Mims, range=Optional[str])

slots.mims_ref_db = Slot(uri=MIXS['0000062'], name="mims_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=TEMP.mims_ref_db, domain=Mims, range=Optional[str])

slots.mims_sim_search_meth = Slot(uri=MIXS['0000063'], name="mims_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=TEMP.mims_sim_search_meth, domain=Mims, range=Optional[str])

slots.mims_tax_class = Slot(uri=MIXS['0000064'], name="mims_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=TEMP.mims_tax_class, domain=Mims, range=Optional[str])

slots.mims_x_16s_recover = Slot(uri=MIXS['0000065'], name="mims_x_16s_recover", curie=MIXS.curie('0000065'),
                   model_uri=TEMP.mims_x_16s_recover, domain=Mims, range=Optional[str])

slots.mims_x_16s_recover_software = Slot(uri=MIXS['0000066'], name="mims_x_16s_recover_software", curie=MIXS.curie('0000066'),
                   model_uri=TEMP.mims_x_16s_recover_software, domain=Mims, range=Optional[str])

slots.mims_trnas = Slot(uri=MIXS['0000067'], name="mims_trnas", curie=MIXS.curie('0000067'),
                   model_uri=TEMP.mims_trnas, domain=Mims, range=Optional[str])

slots.mims_trna_ext_software = Slot(uri=MIXS['0000068'], name="mims_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=TEMP.mims_trna_ext_software, domain=Mims, range=Optional[str])

slots.mims_compl_score = Slot(uri=MIXS['0000069'], name="mims_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=TEMP.mims_compl_score, domain=Mims, range=Optional[str])

slots.mims_compl_software = Slot(uri=MIXS['0000070'], name="mims_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=TEMP.mims_compl_software, domain=Mims, range=Optional[str])

slots.mims_compl_appr = Slot(uri=MIXS['0000071'], name="mims_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=TEMP.mims_compl_appr, domain=Mims, range=Optional[str])

slots.mims_contam_score = Slot(uri=MIXS['0000072'], name="mims_contam_score", curie=MIXS.curie('0000072'),
                   model_uri=TEMP.mims_contam_score, domain=Mims, range=Optional[str])

slots.mims_contam_screen_param = Slot(uri=MIXS['0000073'], name="mims_contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=TEMP.mims_contam_screen_param, domain=Mims, range=Optional[str])

slots.mims_decontam_software = Slot(uri=MIXS['0000074'], name="mims_decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=TEMP.mims_decontam_software, domain=Mims, range=Optional[str])

slots.mims_sort_tech = Slot(uri=MIXS['0000075'], name="mims_sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=TEMP.mims_sort_tech, domain=Mims, range=Optional[str])

slots.mims_single_cell_lysis_appr = Slot(uri=MIXS['0000076'], name="mims_single_cell_lysis_appr", curie=MIXS.curie('0000076'),
                   model_uri=TEMP.mims_single_cell_lysis_appr, domain=Mims, range=Optional[str])

slots.mims_bin_param = Slot(uri=MIXS['0000077'], name="mims_bin_param", curie=MIXS.curie('0000077'),
                   model_uri=TEMP.mims_bin_param, domain=Mims, range=Optional[str])

slots.mims_bin_software = Slot(uri=MIXS['0000078'], name="mims_bin_software", curie=MIXS.curie('0000078'),
                   model_uri=TEMP.mims_bin_software, domain=Mims, range=Optional[str])

slots.mims_reassembly_bin = Slot(uri=MIXS['0000079'], name="mims_reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=TEMP.mims_reassembly_bin, domain=Mims, range=Optional[str])

slots.mims_mag_cov_software = Slot(uri=MIXS['0000080'], name="mims_mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=TEMP.mims_mag_cov_software, domain=Mims, range=Optional[str])

slots.mims_vir_ident_software = Slot(uri=MIXS['0000081'], name="mims_vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=TEMP.mims_vir_ident_software, domain=Mims, range=Optional[str])

slots.mims_pred_genome_type = Slot(uri=MIXS['0000082'], name="mims_pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=TEMP.mims_pred_genome_type, domain=Mims, range=Optional[str])

slots.mims_pred_genome_struc = Slot(uri=MIXS['0000083'], name="mims_pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=TEMP.mims_pred_genome_struc, domain=Mims, range=Optional[str])

slots.mims_detec_type = Slot(uri=MIXS['0000084'], name="mims_detec_type", curie=MIXS.curie('0000084'),
                   model_uri=TEMP.mims_detec_type, domain=Mims, range=Optional[str])

slots.mims_otu_class_appr = Slot(uri=MIXS['0000085'], name="mims_otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=TEMP.mims_otu_class_appr, domain=Mims, range=Optional[str])

slots.mims_otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="mims_otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=TEMP.mims_otu_seq_comp_appr, domain=Mims, range=Optional[str])

slots.mims_otu_db = Slot(uri=MIXS['0000087'], name="mims_otu_db", curie=MIXS.curie('0000087'),
                   model_uri=TEMP.mims_otu_db, domain=Mims, range=Optional[str])

slots.mims_host_pred_appr = Slot(uri=MIXS['0000088'], name="mims_host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=TEMP.mims_host_pred_appr, domain=Mims, range=Optional[str])

slots.mims_host_pred_est_acc = Slot(uri=MIXS['0000089'], name="mims_host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=TEMP.mims_host_pred_est_acc, domain=Mims, range=Optional[str])

slots.mims_sop = Slot(uri=MIXS['0000090'], name="mims_sop", curie=MIXS.curie('0000090'),
                   model_uri=TEMP.mims_sop, domain=Mims, range=Optional[Union[str, List[str]]])

slots.mims_associated_resource = Slot(uri=MIXS['0000091'], name="mims_associated_resource", curie=MIXS.curie('0000091'),
                   model_uri=TEMP.mims_associated_resource, domain=Mims, range=Optional[Union[str, List[str]]])

slots.mims_project_name = Slot(uri=MIXS['0000092'], name="mims_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.mims_project_name, domain=Mims, range=Optional[str])

slots.mims_elev = Slot(uri=MIXS['0000093'], name="mims_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.mims_elev, domain=Mims, range=Optional[str])

slots.mims_alt = Slot(uri=MIXS['0000094'], name="mims_alt", curie=MIXS.curie('0000094'),
                   model_uri=TEMP.mims_alt, domain=Mims, range=Optional[str])

slots.mims_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="mims_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.mims_samp_vol_we_dna_ext, domain=Mims, range=Optional[str])

slots.mims_temp = Slot(uri=MIXS['0000113'], name="mims_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.mims_temp, domain=Mims, range=Optional[str])

slots.mims_samp_name = Slot(uri=MIXS['0001107'], name="mims_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.mims_samp_name, domain=Mims, range=Optional[str])

slots.mims_samp_collec_method = Slot(uri=MIXS['0001225'], name="mims_samp_collec_method", curie=MIXS.curie('0001225'),
                   model_uri=TEMP.mims_samp_collec_method, domain=Mims, range=Optional[str])

slots.mims_samp_taxon_id = Slot(uri=MIXS['0001320'], name="mims_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=TEMP.mims_samp_taxon_id, domain=Mims, range=Optional[str])

slots.mims_neg_cont_type = Slot(uri=MIXS['0001321'], name="mims_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=TEMP.mims_neg_cont_type, domain=Mims, range=Optional[str])

slots.mims_pos_cont_type = Slot(uri=MIXS['0001322'], name="mims_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=TEMP.mims_pos_cont_type, domain=Mims, range=Optional[str])

slots.mimarks_s_samp_size = Slot(uri=MIXS['0000001'], name="mimarks_s_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.mimarks_s_samp_size, domain=MimarksS, range=Optional[str])

slots.mimarks_s_samp_collec_device = Slot(uri=MIXS['0000002'], name="mimarks_s_samp_collec_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.mimarks_s_samp_collec_device, domain=MimarksS, range=Optional[str])

slots.mimarks_s_isol_growth_condt = Slot(uri=MIXS['0000003'], name="mimarks_s_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=TEMP.mimarks_s_isol_growth_condt, domain=MimarksS, range=Optional[str])

slots.mimarks_s_contam_screen_input = Slot(uri=MIXS['0000005'], name="mimarks_s_contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=TEMP.mimarks_s_contam_screen_input, domain=MimarksS, range=Optional[str])

slots.mimarks_s_wga_amp_kit = Slot(uri=MIXS['0000006'], name="mimarks_s_wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=TEMP.mimarks_s_wga_amp_kit, domain=MimarksS, range=Optional[str])

slots.mimarks_s_experimental_factor = Slot(uri=MIXS['0000008'], name="mimarks_s_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=TEMP.mimarks_s_experimental_factor, domain=MimarksS, range=Optional[str])

slots.mimarks_s_lat_lon = Slot(uri=MIXS['0000009'], name="mimarks_s_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.mimarks_s_lat_lon, domain=MimarksS, range=Optional[str])

slots.mimarks_s_geo_loc_name = Slot(uri=MIXS['0000010'], name="mimarks_s_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.mimarks_s_geo_loc_name, domain=MimarksS, range=Optional[str])

slots.mimarks_s_collection_date = Slot(uri=MIXS['0000011'], name="mimarks_s_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.mimarks_s_collection_date, domain=MimarksS, range=Optional[str])

slots.mimarks_s_env_broad_scale = Slot(uri=MIXS['0000012'], name="mimarks_s_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.mimarks_s_env_broad_scale, domain=MimarksS, range=Optional[str])

slots.mimarks_s_env_local_scale = Slot(uri=MIXS['0000013'], name="mimarks_s_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.mimarks_s_env_local_scale, domain=MimarksS, range=Optional[str])

slots.mimarks_s_env_medium = Slot(uri=MIXS['0000014'], name="mimarks_s_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.mimarks_s_env_medium, domain=MimarksS, range=Optional[str])

slots.mimarks_s_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="mimarks_s_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=TEMP.mimarks_s_rel_to_oxygen, domain=MimarksS, range=Optional[str])

slots.mimarks_s_samp_mat_process = Slot(uri=MIXS['0000016'], name="mimarks_s_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=TEMP.mimarks_s_samp_mat_process, domain=MimarksS, range=Optional[str])

slots.mimarks_s_size_frac = Slot(uri=MIXS['0000017'], name="mimarks_s_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=TEMP.mimarks_s_size_frac, domain=MimarksS, range=Optional[str])

slots.mimarks_s_depth = Slot(uri=MIXS['0000018'], name="mimarks_s_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.mimarks_s_depth, domain=MimarksS, range=Optional[str])

slots.mimarks_s_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="mimarks_s_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=TEMP.mimarks_s_subspecf_gen_lin, domain=MimarksS, range=Optional[str])

slots.mimarks_s_ploidy = Slot(uri=MIXS['0000021'], name="mimarks_s_ploidy", curie=MIXS.curie('0000021'),
                   model_uri=TEMP.mimarks_s_ploidy, domain=MimarksS, range=Optional[str])

slots.mimarks_s_num_replicons = Slot(uri=MIXS['0000022'], name="mimarks_s_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=TEMP.mimarks_s_num_replicons, domain=MimarksS, range=Optional[str])

slots.mimarks_s_extrachrom_elements = Slot(uri=MIXS['0000023'], name="mimarks_s_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=TEMP.mimarks_s_extrachrom_elements, domain=MimarksS, range=Optional[str])

slots.mimarks_s_estimated_size = Slot(uri=MIXS['0000024'], name="mimarks_s_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=TEMP.mimarks_s_estimated_size, domain=MimarksS, range=Optional[str])

slots.mimarks_s_ref_biomaterial = Slot(uri=MIXS['0000025'], name="mimarks_s_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=TEMP.mimarks_s_ref_biomaterial, domain=MimarksS, range=Optional[str])

slots.mimarks_s_source_mat_id = Slot(uri=MIXS['0000026'], name="mimarks_s_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=TEMP.mimarks_s_source_mat_id, domain=MimarksS, range=Optional[Union[str, List[str]]])

slots.mimarks_s_pathogenicity = Slot(uri=MIXS['0000027'], name="mimarks_s_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=TEMP.mimarks_s_pathogenicity, domain=MimarksS, range=Optional[str])

slots.mimarks_s_biotic_relationship = Slot(uri=MIXS['0000028'], name="mimarks_s_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=TEMP.mimarks_s_biotic_relationship, domain=MimarksS, range=Optional[str])

slots.mimarks_s_specific_host = Slot(uri=MIXS['0000029'], name="mimarks_s_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=TEMP.mimarks_s_specific_host, domain=MimarksS, range=Optional[str])

slots.mimarks_s_host_spec_range = Slot(uri=MIXS['0000030'], name="mimarks_s_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=TEMP.mimarks_s_host_spec_range, domain=MimarksS, range=Optional[Union[str, List[str]]])

slots.mimarks_s_host_disease_stat = Slot(uri=MIXS['0000031'], name="mimarks_s_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.mimarks_s_host_disease_stat, domain=MimarksS, range=Optional[Union[str, List[str]]])

slots.mimarks_s_trophic_level = Slot(uri=MIXS['0000032'], name="mimarks_s_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=TEMP.mimarks_s_trophic_level, domain=MimarksS, range=Optional[str])

slots.mimarks_s_propagation = Slot(uri=MIXS['0000033'], name="mimarks_s_propagation", curie=MIXS.curie('0000033'),
                   model_uri=TEMP.mimarks_s_propagation, domain=MimarksS, range=Optional[str])

slots.mimarks_s_encoded_traits = Slot(uri=MIXS['0000034'], name="mimarks_s_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=TEMP.mimarks_s_encoded_traits, domain=MimarksS, range=Optional[str])

slots.mimarks_s_source_uvig = Slot(uri=MIXS['0000035'], name="mimarks_s_source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=TEMP.mimarks_s_source_uvig, domain=MimarksS, range=Optional[str])

slots.mimarks_s_virus_enrich_appr = Slot(uri=MIXS['0000036'], name="mimarks_s_virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=TEMP.mimarks_s_virus_enrich_appr, domain=MimarksS, range=Optional[str])

slots.mimarks_s_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="mimarks_s_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.mimarks_s_nucl_acid_ext, domain=MimarksS, range=Optional[str])

slots.mimarks_s_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="mimarks_s_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=TEMP.mimarks_s_nucl_acid_amp, domain=MimarksS, range=Optional[str])

slots.mimarks_s_lib_size = Slot(uri=MIXS['0000039'], name="mimarks_s_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=TEMP.mimarks_s_lib_size, domain=MimarksS, range=Optional[str])

slots.mimarks_s_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="mimarks_s_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=TEMP.mimarks_s_lib_reads_seqd, domain=MimarksS, range=Optional[str])

slots.mimarks_s_lib_layout = Slot(uri=MIXS['0000041'], name="mimarks_s_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=TEMP.mimarks_s_lib_layout, domain=MimarksS, range=Optional[str])

slots.mimarks_s_lib_vector = Slot(uri=MIXS['0000042'], name="mimarks_s_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=TEMP.mimarks_s_lib_vector, domain=MimarksS, range=Optional[str])

slots.mimarks_s_lib_screen = Slot(uri=MIXS['0000043'], name="mimarks_s_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=TEMP.mimarks_s_lib_screen, domain=MimarksS, range=Optional[str])

slots.mimarks_s_target_gene = Slot(uri=MIXS['0000044'], name="mimarks_s_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=TEMP.mimarks_s_target_gene, domain=MimarksS, range=Optional[str])

slots.mimarks_s_target_subfragment = Slot(uri=MIXS['0000045'], name="mimarks_s_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=TEMP.mimarks_s_target_subfragment, domain=MimarksS, range=Optional[str])

slots.mimarks_s_pcr_primers = Slot(uri=MIXS['0000046'], name="mimarks_s_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=TEMP.mimarks_s_pcr_primers, domain=MimarksS, range=Optional[str])

slots.mimarks_s_mid = Slot(uri=MIXS['0000047'], name="mimarks_s_mid", curie=MIXS.curie('0000047'),
                   model_uri=TEMP.mimarks_s_mid, domain=MimarksS, range=Optional[str])

slots.mimarks_s_adapters = Slot(uri=MIXS['0000048'], name="mimarks_s_adapters", curie=MIXS.curie('0000048'),
                   model_uri=TEMP.mimarks_s_adapters, domain=MimarksS, range=Optional[str])

slots.mimarks_s_pcr_cond = Slot(uri=MIXS['0000049'], name="mimarks_s_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=TEMP.mimarks_s_pcr_cond, domain=MimarksS, range=Optional[str])

slots.mimarks_s_seq_meth = Slot(uri=MIXS['0000050'], name="mimarks_s_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.mimarks_s_seq_meth, domain=MimarksS, range=Optional[str])

slots.mimarks_s_seq_quality_check = Slot(uri=MIXS['0000051'], name="mimarks_s_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=TEMP.mimarks_s_seq_quality_check, domain=MimarksS, range=Optional[str])

slots.mimarks_s_chimera_check = Slot(uri=MIXS['0000052'], name="mimarks_s_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=TEMP.mimarks_s_chimera_check, domain=MimarksS, range=Optional[str])

slots.mimarks_s_tax_ident = Slot(uri=MIXS['0000053'], name="mimarks_s_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=TEMP.mimarks_s_tax_ident, domain=MimarksS, range=Optional[str])

slots.mimarks_s_single_cell_lysis_prot = Slot(uri=MIXS['0000054'], name="mimarks_s_single_cell_lysis_prot", curie=MIXS.curie('0000054'),
                   model_uri=TEMP.mimarks_s_single_cell_lysis_prot, domain=MimarksS, range=Optional[str])

slots.mimarks_s_wga_amp_appr = Slot(uri=MIXS['0000055'], name="mimarks_s_wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=TEMP.mimarks_s_wga_amp_appr, domain=MimarksS, range=Optional[str])

slots.mimarks_s_assembly_qual = Slot(uri=MIXS['0000056'], name="mimarks_s_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=TEMP.mimarks_s_assembly_qual, domain=MimarksS, range=Optional[str])

slots.mimarks_s_assembly_name = Slot(uri=MIXS['0000057'], name="mimarks_s_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=TEMP.mimarks_s_assembly_name, domain=MimarksS, range=Optional[str])

slots.mimarks_s_assembly_software = Slot(uri=MIXS['0000058'], name="mimarks_s_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=TEMP.mimarks_s_assembly_software, domain=MimarksS, range=Optional[str])

slots.mimarks_s_annot = Slot(uri=MIXS['0000059'], name="mimarks_s_annot", curie=MIXS.curie('0000059'),
                   model_uri=TEMP.mimarks_s_annot, domain=MimarksS, range=Optional[str])

slots.mimarks_s_number_contig = Slot(uri=MIXS['0000060'], name="mimarks_s_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=TEMP.mimarks_s_number_contig, domain=MimarksS, range=Optional[str])

slots.mimarks_s_feat_pred = Slot(uri=MIXS['0000061'], name="mimarks_s_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=TEMP.mimarks_s_feat_pred, domain=MimarksS, range=Optional[str])

slots.mimarks_s_ref_db = Slot(uri=MIXS['0000062'], name="mimarks_s_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=TEMP.mimarks_s_ref_db, domain=MimarksS, range=Optional[str])

slots.mimarks_s_sim_search_meth = Slot(uri=MIXS['0000063'], name="mimarks_s_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=TEMP.mimarks_s_sim_search_meth, domain=MimarksS, range=Optional[str])

slots.mimarks_s_tax_class = Slot(uri=MIXS['0000064'], name="mimarks_s_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=TEMP.mimarks_s_tax_class, domain=MimarksS, range=Optional[str])

slots.mimarks_s_x_16s_recover = Slot(uri=MIXS['0000065'], name="mimarks_s_x_16s_recover", curie=MIXS.curie('0000065'),
                   model_uri=TEMP.mimarks_s_x_16s_recover, domain=MimarksS, range=Optional[str])

slots.mimarks_s_x_16s_recover_software = Slot(uri=MIXS['0000066'], name="mimarks_s_x_16s_recover_software", curie=MIXS.curie('0000066'),
                   model_uri=TEMP.mimarks_s_x_16s_recover_software, domain=MimarksS, range=Optional[str])

slots.mimarks_s_trnas = Slot(uri=MIXS['0000067'], name="mimarks_s_trnas", curie=MIXS.curie('0000067'),
                   model_uri=TEMP.mimarks_s_trnas, domain=MimarksS, range=Optional[str])

slots.mimarks_s_trna_ext_software = Slot(uri=MIXS['0000068'], name="mimarks_s_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=TEMP.mimarks_s_trna_ext_software, domain=MimarksS, range=Optional[str])

slots.mimarks_s_compl_score = Slot(uri=MIXS['0000069'], name="mimarks_s_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=TEMP.mimarks_s_compl_score, domain=MimarksS, range=Optional[str])

slots.mimarks_s_compl_software = Slot(uri=MIXS['0000070'], name="mimarks_s_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=TEMP.mimarks_s_compl_software, domain=MimarksS, range=Optional[str])

slots.mimarks_s_compl_appr = Slot(uri=MIXS['0000071'], name="mimarks_s_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=TEMP.mimarks_s_compl_appr, domain=MimarksS, range=Optional[str])

slots.mimarks_s_contam_score = Slot(uri=MIXS['0000072'], name="mimarks_s_contam_score", curie=MIXS.curie('0000072'),
                   model_uri=TEMP.mimarks_s_contam_score, domain=MimarksS, range=Optional[str])

slots.mimarks_s_contam_screen_param = Slot(uri=MIXS['0000073'], name="mimarks_s_contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=TEMP.mimarks_s_contam_screen_param, domain=MimarksS, range=Optional[str])

slots.mimarks_s_decontam_software = Slot(uri=MIXS['0000074'], name="mimarks_s_decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=TEMP.mimarks_s_decontam_software, domain=MimarksS, range=Optional[str])

slots.mimarks_s_sort_tech = Slot(uri=MIXS['0000075'], name="mimarks_s_sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=TEMP.mimarks_s_sort_tech, domain=MimarksS, range=Optional[str])

slots.mimarks_s_single_cell_lysis_appr = Slot(uri=MIXS['0000076'], name="mimarks_s_single_cell_lysis_appr", curie=MIXS.curie('0000076'),
                   model_uri=TEMP.mimarks_s_single_cell_lysis_appr, domain=MimarksS, range=Optional[str])

slots.mimarks_s_bin_param = Slot(uri=MIXS['0000077'], name="mimarks_s_bin_param", curie=MIXS.curie('0000077'),
                   model_uri=TEMP.mimarks_s_bin_param, domain=MimarksS, range=Optional[str])

slots.mimarks_s_bin_software = Slot(uri=MIXS['0000078'], name="mimarks_s_bin_software", curie=MIXS.curie('0000078'),
                   model_uri=TEMP.mimarks_s_bin_software, domain=MimarksS, range=Optional[str])

slots.mimarks_s_reassembly_bin = Slot(uri=MIXS['0000079'], name="mimarks_s_reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=TEMP.mimarks_s_reassembly_bin, domain=MimarksS, range=Optional[str])

slots.mimarks_s_mag_cov_software = Slot(uri=MIXS['0000080'], name="mimarks_s_mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=TEMP.mimarks_s_mag_cov_software, domain=MimarksS, range=Optional[str])

slots.mimarks_s_vir_ident_software = Slot(uri=MIXS['0000081'], name="mimarks_s_vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=TEMP.mimarks_s_vir_ident_software, domain=MimarksS, range=Optional[str])

slots.mimarks_s_pred_genome_type = Slot(uri=MIXS['0000082'], name="mimarks_s_pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=TEMP.mimarks_s_pred_genome_type, domain=MimarksS, range=Optional[str])

slots.mimarks_s_pred_genome_struc = Slot(uri=MIXS['0000083'], name="mimarks_s_pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=TEMP.mimarks_s_pred_genome_struc, domain=MimarksS, range=Optional[str])

slots.mimarks_s_detec_type = Slot(uri=MIXS['0000084'], name="mimarks_s_detec_type", curie=MIXS.curie('0000084'),
                   model_uri=TEMP.mimarks_s_detec_type, domain=MimarksS, range=Optional[str])

slots.mimarks_s_otu_class_appr = Slot(uri=MIXS['0000085'], name="mimarks_s_otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=TEMP.mimarks_s_otu_class_appr, domain=MimarksS, range=Optional[str])

slots.mimarks_s_otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="mimarks_s_otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=TEMP.mimarks_s_otu_seq_comp_appr, domain=MimarksS, range=Optional[str])

slots.mimarks_s_otu_db = Slot(uri=MIXS['0000087'], name="mimarks_s_otu_db", curie=MIXS.curie('0000087'),
                   model_uri=TEMP.mimarks_s_otu_db, domain=MimarksS, range=Optional[str])

slots.mimarks_s_host_pred_appr = Slot(uri=MIXS['0000088'], name="mimarks_s_host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=TEMP.mimarks_s_host_pred_appr, domain=MimarksS, range=Optional[str])

slots.mimarks_s_host_pred_est_acc = Slot(uri=MIXS['0000089'], name="mimarks_s_host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=TEMP.mimarks_s_host_pred_est_acc, domain=MimarksS, range=Optional[str])

slots.mimarks_s_sop = Slot(uri=MIXS['0000090'], name="mimarks_s_sop", curie=MIXS.curie('0000090'),
                   model_uri=TEMP.mimarks_s_sop, domain=MimarksS, range=Optional[Union[str, List[str]]])

slots.mimarks_s_associated_resource = Slot(uri=MIXS['0000091'], name="mimarks_s_associated_resource", curie=MIXS.curie('0000091'),
                   model_uri=TEMP.mimarks_s_associated_resource, domain=MimarksS, range=Optional[Union[str, List[str]]])

slots.mimarks_s_project_name = Slot(uri=MIXS['0000092'], name="mimarks_s_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.mimarks_s_project_name, domain=MimarksS, range=Optional[str])

slots.mimarks_s_elev = Slot(uri=MIXS['0000093'], name="mimarks_s_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.mimarks_s_elev, domain=MimarksS, range=Optional[str])

slots.mimarks_s_alt = Slot(uri=MIXS['0000094'], name="mimarks_s_alt", curie=MIXS.curie('0000094'),
                   model_uri=TEMP.mimarks_s_alt, domain=MimarksS, range=Optional[str])

slots.mimarks_s_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="mimarks_s_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.mimarks_s_samp_vol_we_dna_ext, domain=MimarksS, range=Optional[str])

slots.mimarks_s_temp = Slot(uri=MIXS['0000113'], name="mimarks_s_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.mimarks_s_temp, domain=MimarksS, range=Optional[str])

slots.mimarks_s_samp_name = Slot(uri=MIXS['0001107'], name="mimarks_s_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.mimarks_s_samp_name, domain=MimarksS, range=Optional[str])

slots.mimarks_s_samp_collec_method = Slot(uri=MIXS['0001225'], name="mimarks_s_samp_collec_method", curie=MIXS.curie('0001225'),
                   model_uri=TEMP.mimarks_s_samp_collec_method, domain=MimarksS, range=Optional[str])

slots.mimarks_s_samp_taxon_id = Slot(uri=MIXS['0001320'], name="mimarks_s_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=TEMP.mimarks_s_samp_taxon_id, domain=MimarksS, range=Optional[str])

slots.mimarks_s_neg_cont_type = Slot(uri=MIXS['0001321'], name="mimarks_s_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=TEMP.mimarks_s_neg_cont_type, domain=MimarksS, range=Optional[str])

slots.mimarks_s_pos_cont_type = Slot(uri=MIXS['0001322'], name="mimarks_s_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=TEMP.mimarks_s_pos_cont_type, domain=MimarksS, range=Optional[str])

slots.mimarks_c_samp_size = Slot(uri=MIXS['0000001'], name="mimarks_c_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.mimarks_c_samp_size, domain=MimarksC, range=Optional[str])

slots.mimarks_c_samp_collec_device = Slot(uri=MIXS['0000002'], name="mimarks_c_samp_collec_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.mimarks_c_samp_collec_device, domain=MimarksC, range=Optional[str])

slots.mimarks_c_isol_growth_condt = Slot(uri=MIXS['0000003'], name="mimarks_c_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=TEMP.mimarks_c_isol_growth_condt, domain=MimarksC, range=Optional[str])

slots.mimarks_c_contam_screen_input = Slot(uri=MIXS['0000005'], name="mimarks_c_contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=TEMP.mimarks_c_contam_screen_input, domain=MimarksC, range=Optional[str])

slots.mimarks_c_wga_amp_kit = Slot(uri=MIXS['0000006'], name="mimarks_c_wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=TEMP.mimarks_c_wga_amp_kit, domain=MimarksC, range=Optional[str])

slots.mimarks_c_experimental_factor = Slot(uri=MIXS['0000008'], name="mimarks_c_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=TEMP.mimarks_c_experimental_factor, domain=MimarksC, range=Optional[str])

slots.mimarks_c_lat_lon = Slot(uri=MIXS['0000009'], name="mimarks_c_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.mimarks_c_lat_lon, domain=MimarksC, range=Optional[str])

slots.mimarks_c_geo_loc_name = Slot(uri=MIXS['0000010'], name="mimarks_c_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.mimarks_c_geo_loc_name, domain=MimarksC, range=Optional[str])

slots.mimarks_c_collection_date = Slot(uri=MIXS['0000011'], name="mimarks_c_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.mimarks_c_collection_date, domain=MimarksC, range=Optional[str])

slots.mimarks_c_env_broad_scale = Slot(uri=MIXS['0000012'], name="mimarks_c_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.mimarks_c_env_broad_scale, domain=MimarksC, range=Optional[str])

slots.mimarks_c_env_local_scale = Slot(uri=MIXS['0000013'], name="mimarks_c_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.mimarks_c_env_local_scale, domain=MimarksC, range=Optional[str])

slots.mimarks_c_env_medium = Slot(uri=MIXS['0000014'], name="mimarks_c_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.mimarks_c_env_medium, domain=MimarksC, range=Optional[str])

slots.mimarks_c_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="mimarks_c_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=TEMP.mimarks_c_rel_to_oxygen, domain=MimarksC, range=Optional[str])

slots.mimarks_c_samp_mat_process = Slot(uri=MIXS['0000016'], name="mimarks_c_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=TEMP.mimarks_c_samp_mat_process, domain=MimarksC, range=Optional[str])

slots.mimarks_c_size_frac = Slot(uri=MIXS['0000017'], name="mimarks_c_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=TEMP.mimarks_c_size_frac, domain=MimarksC, range=Optional[str])

slots.mimarks_c_depth = Slot(uri=MIXS['0000018'], name="mimarks_c_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.mimarks_c_depth, domain=MimarksC, range=Optional[str])

slots.mimarks_c_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="mimarks_c_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=TEMP.mimarks_c_subspecf_gen_lin, domain=MimarksC, range=Optional[str])

slots.mimarks_c_ploidy = Slot(uri=MIXS['0000021'], name="mimarks_c_ploidy", curie=MIXS.curie('0000021'),
                   model_uri=TEMP.mimarks_c_ploidy, domain=MimarksC, range=Optional[str])

slots.mimarks_c_num_replicons = Slot(uri=MIXS['0000022'], name="mimarks_c_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=TEMP.mimarks_c_num_replicons, domain=MimarksC, range=Optional[str])

slots.mimarks_c_extrachrom_elements = Slot(uri=MIXS['0000023'], name="mimarks_c_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=TEMP.mimarks_c_extrachrom_elements, domain=MimarksC, range=Optional[str])

slots.mimarks_c_estimated_size = Slot(uri=MIXS['0000024'], name="mimarks_c_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=TEMP.mimarks_c_estimated_size, domain=MimarksC, range=Optional[str])

slots.mimarks_c_ref_biomaterial = Slot(uri=MIXS['0000025'], name="mimarks_c_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=TEMP.mimarks_c_ref_biomaterial, domain=MimarksC, range=Optional[str])

slots.mimarks_c_source_mat_id = Slot(uri=MIXS['0000026'], name="mimarks_c_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=TEMP.mimarks_c_source_mat_id, domain=MimarksC, range=Optional[Union[str, List[str]]])

slots.mimarks_c_pathogenicity = Slot(uri=MIXS['0000027'], name="mimarks_c_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=TEMP.mimarks_c_pathogenicity, domain=MimarksC, range=Optional[str])

slots.mimarks_c_biotic_relationship = Slot(uri=MIXS['0000028'], name="mimarks_c_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=TEMP.mimarks_c_biotic_relationship, domain=MimarksC, range=Optional[str])

slots.mimarks_c_specific_host = Slot(uri=MIXS['0000029'], name="mimarks_c_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=TEMP.mimarks_c_specific_host, domain=MimarksC, range=Optional[str])

slots.mimarks_c_host_spec_range = Slot(uri=MIXS['0000030'], name="mimarks_c_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=TEMP.mimarks_c_host_spec_range, domain=MimarksC, range=Optional[Union[str, List[str]]])

slots.mimarks_c_host_disease_stat = Slot(uri=MIXS['0000031'], name="mimarks_c_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.mimarks_c_host_disease_stat, domain=MimarksC, range=Optional[Union[str, List[str]]])

slots.mimarks_c_trophic_level = Slot(uri=MIXS['0000032'], name="mimarks_c_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=TEMP.mimarks_c_trophic_level, domain=MimarksC, range=Optional[str])

slots.mimarks_c_propagation = Slot(uri=MIXS['0000033'], name="mimarks_c_propagation", curie=MIXS.curie('0000033'),
                   model_uri=TEMP.mimarks_c_propagation, domain=MimarksC, range=Optional[str])

slots.mimarks_c_encoded_traits = Slot(uri=MIXS['0000034'], name="mimarks_c_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=TEMP.mimarks_c_encoded_traits, domain=MimarksC, range=Optional[str])

slots.mimarks_c_source_uvig = Slot(uri=MIXS['0000035'], name="mimarks_c_source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=TEMP.mimarks_c_source_uvig, domain=MimarksC, range=Optional[str])

slots.mimarks_c_virus_enrich_appr = Slot(uri=MIXS['0000036'], name="mimarks_c_virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=TEMP.mimarks_c_virus_enrich_appr, domain=MimarksC, range=Optional[str])

slots.mimarks_c_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="mimarks_c_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.mimarks_c_nucl_acid_ext, domain=MimarksC, range=Optional[str])

slots.mimarks_c_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="mimarks_c_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=TEMP.mimarks_c_nucl_acid_amp, domain=MimarksC, range=Optional[str])

slots.mimarks_c_lib_size = Slot(uri=MIXS['0000039'], name="mimarks_c_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=TEMP.mimarks_c_lib_size, domain=MimarksC, range=Optional[str])

slots.mimarks_c_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="mimarks_c_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=TEMP.mimarks_c_lib_reads_seqd, domain=MimarksC, range=Optional[str])

slots.mimarks_c_lib_layout = Slot(uri=MIXS['0000041'], name="mimarks_c_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=TEMP.mimarks_c_lib_layout, domain=MimarksC, range=Optional[str])

slots.mimarks_c_lib_vector = Slot(uri=MIXS['0000042'], name="mimarks_c_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=TEMP.mimarks_c_lib_vector, domain=MimarksC, range=Optional[str])

slots.mimarks_c_lib_screen = Slot(uri=MIXS['0000043'], name="mimarks_c_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=TEMP.mimarks_c_lib_screen, domain=MimarksC, range=Optional[str])

slots.mimarks_c_target_gene = Slot(uri=MIXS['0000044'], name="mimarks_c_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=TEMP.mimarks_c_target_gene, domain=MimarksC, range=Optional[str])

slots.mimarks_c_target_subfragment = Slot(uri=MIXS['0000045'], name="mimarks_c_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=TEMP.mimarks_c_target_subfragment, domain=MimarksC, range=Optional[str])

slots.mimarks_c_pcr_primers = Slot(uri=MIXS['0000046'], name="mimarks_c_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=TEMP.mimarks_c_pcr_primers, domain=MimarksC, range=Optional[str])

slots.mimarks_c_mid = Slot(uri=MIXS['0000047'], name="mimarks_c_mid", curie=MIXS.curie('0000047'),
                   model_uri=TEMP.mimarks_c_mid, domain=MimarksC, range=Optional[str])

slots.mimarks_c_adapters = Slot(uri=MIXS['0000048'], name="mimarks_c_adapters", curie=MIXS.curie('0000048'),
                   model_uri=TEMP.mimarks_c_adapters, domain=MimarksC, range=Optional[str])

slots.mimarks_c_pcr_cond = Slot(uri=MIXS['0000049'], name="mimarks_c_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=TEMP.mimarks_c_pcr_cond, domain=MimarksC, range=Optional[str])

slots.mimarks_c_seq_meth = Slot(uri=MIXS['0000050'], name="mimarks_c_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.mimarks_c_seq_meth, domain=MimarksC, range=Optional[str])

slots.mimarks_c_seq_quality_check = Slot(uri=MIXS['0000051'], name="mimarks_c_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=TEMP.mimarks_c_seq_quality_check, domain=MimarksC, range=Optional[str])

slots.mimarks_c_chimera_check = Slot(uri=MIXS['0000052'], name="mimarks_c_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=TEMP.mimarks_c_chimera_check, domain=MimarksC, range=Optional[str])

slots.mimarks_c_tax_ident = Slot(uri=MIXS['0000053'], name="mimarks_c_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=TEMP.mimarks_c_tax_ident, domain=MimarksC, range=Optional[str])

slots.mimarks_c_single_cell_lysis_prot = Slot(uri=MIXS['0000054'], name="mimarks_c_single_cell_lysis_prot", curie=MIXS.curie('0000054'),
                   model_uri=TEMP.mimarks_c_single_cell_lysis_prot, domain=MimarksC, range=Optional[str])

slots.mimarks_c_wga_amp_appr = Slot(uri=MIXS['0000055'], name="mimarks_c_wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=TEMP.mimarks_c_wga_amp_appr, domain=MimarksC, range=Optional[str])

slots.mimarks_c_assembly_qual = Slot(uri=MIXS['0000056'], name="mimarks_c_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=TEMP.mimarks_c_assembly_qual, domain=MimarksC, range=Optional[str])

slots.mimarks_c_assembly_name = Slot(uri=MIXS['0000057'], name="mimarks_c_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=TEMP.mimarks_c_assembly_name, domain=MimarksC, range=Optional[str])

slots.mimarks_c_assembly_software = Slot(uri=MIXS['0000058'], name="mimarks_c_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=TEMP.mimarks_c_assembly_software, domain=MimarksC, range=Optional[str])

slots.mimarks_c_annot = Slot(uri=MIXS['0000059'], name="mimarks_c_annot", curie=MIXS.curie('0000059'),
                   model_uri=TEMP.mimarks_c_annot, domain=MimarksC, range=Optional[str])

slots.mimarks_c_number_contig = Slot(uri=MIXS['0000060'], name="mimarks_c_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=TEMP.mimarks_c_number_contig, domain=MimarksC, range=Optional[str])

slots.mimarks_c_feat_pred = Slot(uri=MIXS['0000061'], name="mimarks_c_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=TEMP.mimarks_c_feat_pred, domain=MimarksC, range=Optional[str])

slots.mimarks_c_ref_db = Slot(uri=MIXS['0000062'], name="mimarks_c_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=TEMP.mimarks_c_ref_db, domain=MimarksC, range=Optional[str])

slots.mimarks_c_sim_search_meth = Slot(uri=MIXS['0000063'], name="mimarks_c_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=TEMP.mimarks_c_sim_search_meth, domain=MimarksC, range=Optional[str])

slots.mimarks_c_tax_class = Slot(uri=MIXS['0000064'], name="mimarks_c_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=TEMP.mimarks_c_tax_class, domain=MimarksC, range=Optional[str])

slots.mimarks_c_x_16s_recover = Slot(uri=MIXS['0000065'], name="mimarks_c_x_16s_recover", curie=MIXS.curie('0000065'),
                   model_uri=TEMP.mimarks_c_x_16s_recover, domain=MimarksC, range=Optional[str])

slots.mimarks_c_x_16s_recover_software = Slot(uri=MIXS['0000066'], name="mimarks_c_x_16s_recover_software", curie=MIXS.curie('0000066'),
                   model_uri=TEMP.mimarks_c_x_16s_recover_software, domain=MimarksC, range=Optional[str])

slots.mimarks_c_trnas = Slot(uri=MIXS['0000067'], name="mimarks_c_trnas", curie=MIXS.curie('0000067'),
                   model_uri=TEMP.mimarks_c_trnas, domain=MimarksC, range=Optional[str])

slots.mimarks_c_trna_ext_software = Slot(uri=MIXS['0000068'], name="mimarks_c_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=TEMP.mimarks_c_trna_ext_software, domain=MimarksC, range=Optional[str])

slots.mimarks_c_compl_score = Slot(uri=MIXS['0000069'], name="mimarks_c_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=TEMP.mimarks_c_compl_score, domain=MimarksC, range=Optional[str])

slots.mimarks_c_compl_software = Slot(uri=MIXS['0000070'], name="mimarks_c_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=TEMP.mimarks_c_compl_software, domain=MimarksC, range=Optional[str])

slots.mimarks_c_compl_appr = Slot(uri=MIXS['0000071'], name="mimarks_c_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=TEMP.mimarks_c_compl_appr, domain=MimarksC, range=Optional[str])

slots.mimarks_c_contam_score = Slot(uri=MIXS['0000072'], name="mimarks_c_contam_score", curie=MIXS.curie('0000072'),
                   model_uri=TEMP.mimarks_c_contam_score, domain=MimarksC, range=Optional[str])

slots.mimarks_c_contam_screen_param = Slot(uri=MIXS['0000073'], name="mimarks_c_contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=TEMP.mimarks_c_contam_screen_param, domain=MimarksC, range=Optional[str])

slots.mimarks_c_decontam_software = Slot(uri=MIXS['0000074'], name="mimarks_c_decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=TEMP.mimarks_c_decontam_software, domain=MimarksC, range=Optional[str])

slots.mimarks_c_sort_tech = Slot(uri=MIXS['0000075'], name="mimarks_c_sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=TEMP.mimarks_c_sort_tech, domain=MimarksC, range=Optional[str])

slots.mimarks_c_single_cell_lysis_appr = Slot(uri=MIXS['0000076'], name="mimarks_c_single_cell_lysis_appr", curie=MIXS.curie('0000076'),
                   model_uri=TEMP.mimarks_c_single_cell_lysis_appr, domain=MimarksC, range=Optional[str])

slots.mimarks_c_bin_param = Slot(uri=MIXS['0000077'], name="mimarks_c_bin_param", curie=MIXS.curie('0000077'),
                   model_uri=TEMP.mimarks_c_bin_param, domain=MimarksC, range=Optional[str])

slots.mimarks_c_bin_software = Slot(uri=MIXS['0000078'], name="mimarks_c_bin_software", curie=MIXS.curie('0000078'),
                   model_uri=TEMP.mimarks_c_bin_software, domain=MimarksC, range=Optional[str])

slots.mimarks_c_reassembly_bin = Slot(uri=MIXS['0000079'], name="mimarks_c_reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=TEMP.mimarks_c_reassembly_bin, domain=MimarksC, range=Optional[str])

slots.mimarks_c_mag_cov_software = Slot(uri=MIXS['0000080'], name="mimarks_c_mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=TEMP.mimarks_c_mag_cov_software, domain=MimarksC, range=Optional[str])

slots.mimarks_c_vir_ident_software = Slot(uri=MIXS['0000081'], name="mimarks_c_vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=TEMP.mimarks_c_vir_ident_software, domain=MimarksC, range=Optional[str])

slots.mimarks_c_pred_genome_type = Slot(uri=MIXS['0000082'], name="mimarks_c_pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=TEMP.mimarks_c_pred_genome_type, domain=MimarksC, range=Optional[str])

slots.mimarks_c_pred_genome_struc = Slot(uri=MIXS['0000083'], name="mimarks_c_pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=TEMP.mimarks_c_pred_genome_struc, domain=MimarksC, range=Optional[str])

slots.mimarks_c_detec_type = Slot(uri=MIXS['0000084'], name="mimarks_c_detec_type", curie=MIXS.curie('0000084'),
                   model_uri=TEMP.mimarks_c_detec_type, domain=MimarksC, range=Optional[str])

slots.mimarks_c_otu_class_appr = Slot(uri=MIXS['0000085'], name="mimarks_c_otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=TEMP.mimarks_c_otu_class_appr, domain=MimarksC, range=Optional[str])

slots.mimarks_c_otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="mimarks_c_otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=TEMP.mimarks_c_otu_seq_comp_appr, domain=MimarksC, range=Optional[str])

slots.mimarks_c_otu_db = Slot(uri=MIXS['0000087'], name="mimarks_c_otu_db", curie=MIXS.curie('0000087'),
                   model_uri=TEMP.mimarks_c_otu_db, domain=MimarksC, range=Optional[str])

slots.mimarks_c_host_pred_appr = Slot(uri=MIXS['0000088'], name="mimarks_c_host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=TEMP.mimarks_c_host_pred_appr, domain=MimarksC, range=Optional[str])

slots.mimarks_c_host_pred_est_acc = Slot(uri=MIXS['0000089'], name="mimarks_c_host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=TEMP.mimarks_c_host_pred_est_acc, domain=MimarksC, range=Optional[str])

slots.mimarks_c_sop = Slot(uri=MIXS['0000090'], name="mimarks_c_sop", curie=MIXS.curie('0000090'),
                   model_uri=TEMP.mimarks_c_sop, domain=MimarksC, range=Optional[Union[str, List[str]]])

slots.mimarks_c_associated_resource = Slot(uri=MIXS['0000091'], name="mimarks_c_associated_resource", curie=MIXS.curie('0000091'),
                   model_uri=TEMP.mimarks_c_associated_resource, domain=MimarksC, range=Optional[Union[str, List[str]]])

slots.mimarks_c_project_name = Slot(uri=MIXS['0000092'], name="mimarks_c_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.mimarks_c_project_name, domain=MimarksC, range=Optional[str])

slots.mimarks_c_elev = Slot(uri=MIXS['0000093'], name="mimarks_c_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.mimarks_c_elev, domain=MimarksC, range=Optional[str])

slots.mimarks_c_alt = Slot(uri=MIXS['0000094'], name="mimarks_c_alt", curie=MIXS.curie('0000094'),
                   model_uri=TEMP.mimarks_c_alt, domain=MimarksC, range=Optional[str])

slots.mimarks_c_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="mimarks_c_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.mimarks_c_samp_vol_we_dna_ext, domain=MimarksC, range=Optional[str])

slots.mimarks_c_temp = Slot(uri=MIXS['0000113'], name="mimarks_c_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.mimarks_c_temp, domain=MimarksC, range=Optional[str])

slots.mimarks_c_samp_name = Slot(uri=MIXS['0001107'], name="mimarks_c_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.mimarks_c_samp_name, domain=MimarksC, range=Optional[str])

slots.mimarks_c_samp_collec_method = Slot(uri=MIXS['0001225'], name="mimarks_c_samp_collec_method", curie=MIXS.curie('0001225'),
                   model_uri=TEMP.mimarks_c_samp_collec_method, domain=MimarksC, range=Optional[str])

slots.mimarks_c_samp_taxon_id = Slot(uri=MIXS['0001320'], name="mimarks_c_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=TEMP.mimarks_c_samp_taxon_id, domain=MimarksC, range=Optional[str])

slots.mimarks_c_neg_cont_type = Slot(uri=MIXS['0001321'], name="mimarks_c_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=TEMP.mimarks_c_neg_cont_type, domain=MimarksC, range=Optional[str])

slots.mimarks_c_pos_cont_type = Slot(uri=MIXS['0001322'], name="mimarks_c_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=TEMP.mimarks_c_pos_cont_type, domain=MimarksC, range=Optional[str])

slots.misag_samp_size = Slot(uri=MIXS['0000001'], name="misag_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.misag_samp_size, domain=Misag, range=Optional[str])

slots.misag_samp_collec_device = Slot(uri=MIXS['0000002'], name="misag_samp_collec_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.misag_samp_collec_device, domain=Misag, range=Optional[str])

slots.misag_isol_growth_condt = Slot(uri=MIXS['0000003'], name="misag_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=TEMP.misag_isol_growth_condt, domain=Misag, range=Optional[str])

slots.misag_contam_screen_input = Slot(uri=MIXS['0000005'], name="misag_contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=TEMP.misag_contam_screen_input, domain=Misag, range=Optional[str])

slots.misag_wga_amp_kit = Slot(uri=MIXS['0000006'], name="misag_wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=TEMP.misag_wga_amp_kit, domain=Misag, range=Optional[str])

slots.misag_experimental_factor = Slot(uri=MIXS['0000008'], name="misag_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=TEMP.misag_experimental_factor, domain=Misag, range=Optional[str])

slots.misag_lat_lon = Slot(uri=MIXS['0000009'], name="misag_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.misag_lat_lon, domain=Misag, range=Optional[str])

slots.misag_geo_loc_name = Slot(uri=MIXS['0000010'], name="misag_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.misag_geo_loc_name, domain=Misag, range=Optional[str])

slots.misag_collection_date = Slot(uri=MIXS['0000011'], name="misag_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.misag_collection_date, domain=Misag, range=Optional[str])

slots.misag_env_broad_scale = Slot(uri=MIXS['0000012'], name="misag_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.misag_env_broad_scale, domain=Misag, range=Optional[str])

slots.misag_env_local_scale = Slot(uri=MIXS['0000013'], name="misag_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.misag_env_local_scale, domain=Misag, range=Optional[str])

slots.misag_env_medium = Slot(uri=MIXS['0000014'], name="misag_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.misag_env_medium, domain=Misag, range=Optional[str])

slots.misag_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="misag_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=TEMP.misag_rel_to_oxygen, domain=Misag, range=Optional[str])

slots.misag_samp_mat_process = Slot(uri=MIXS['0000016'], name="misag_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=TEMP.misag_samp_mat_process, domain=Misag, range=Optional[str])

slots.misag_size_frac = Slot(uri=MIXS['0000017'], name="misag_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=TEMP.misag_size_frac, domain=Misag, range=Optional[str])

slots.misag_depth = Slot(uri=MIXS['0000018'], name="misag_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.misag_depth, domain=Misag, range=Optional[str])

slots.misag_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="misag_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=TEMP.misag_subspecf_gen_lin, domain=Misag, range=Optional[str])

slots.misag_ploidy = Slot(uri=MIXS['0000021'], name="misag_ploidy", curie=MIXS.curie('0000021'),
                   model_uri=TEMP.misag_ploidy, domain=Misag, range=Optional[str])

slots.misag_num_replicons = Slot(uri=MIXS['0000022'], name="misag_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=TEMP.misag_num_replicons, domain=Misag, range=Optional[str])

slots.misag_extrachrom_elements = Slot(uri=MIXS['0000023'], name="misag_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=TEMP.misag_extrachrom_elements, domain=Misag, range=Optional[str])

slots.misag_estimated_size = Slot(uri=MIXS['0000024'], name="misag_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=TEMP.misag_estimated_size, domain=Misag, range=Optional[str])

slots.misag_ref_biomaterial = Slot(uri=MIXS['0000025'], name="misag_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=TEMP.misag_ref_biomaterial, domain=Misag, range=Optional[str])

slots.misag_source_mat_id = Slot(uri=MIXS['0000026'], name="misag_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=TEMP.misag_source_mat_id, domain=Misag, range=Optional[Union[str, List[str]]])

slots.misag_pathogenicity = Slot(uri=MIXS['0000027'], name="misag_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=TEMP.misag_pathogenicity, domain=Misag, range=Optional[str])

slots.misag_biotic_relationship = Slot(uri=MIXS['0000028'], name="misag_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=TEMP.misag_biotic_relationship, domain=Misag, range=Optional[str])

slots.misag_specific_host = Slot(uri=MIXS['0000029'], name="misag_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=TEMP.misag_specific_host, domain=Misag, range=Optional[str])

slots.misag_host_spec_range = Slot(uri=MIXS['0000030'], name="misag_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=TEMP.misag_host_spec_range, domain=Misag, range=Optional[Union[str, List[str]]])

slots.misag_host_disease_stat = Slot(uri=MIXS['0000031'], name="misag_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.misag_host_disease_stat, domain=Misag, range=Optional[Union[str, List[str]]])

slots.misag_trophic_level = Slot(uri=MIXS['0000032'], name="misag_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=TEMP.misag_trophic_level, domain=Misag, range=Optional[str])

slots.misag_propagation = Slot(uri=MIXS['0000033'], name="misag_propagation", curie=MIXS.curie('0000033'),
                   model_uri=TEMP.misag_propagation, domain=Misag, range=Optional[str])

slots.misag_encoded_traits = Slot(uri=MIXS['0000034'], name="misag_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=TEMP.misag_encoded_traits, domain=Misag, range=Optional[str])

slots.misag_source_uvig = Slot(uri=MIXS['0000035'], name="misag_source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=TEMP.misag_source_uvig, domain=Misag, range=Optional[str])

slots.misag_virus_enrich_appr = Slot(uri=MIXS['0000036'], name="misag_virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=TEMP.misag_virus_enrich_appr, domain=Misag, range=Optional[str])

slots.misag_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="misag_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.misag_nucl_acid_ext, domain=Misag, range=Optional[str])

slots.misag_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="misag_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=TEMP.misag_nucl_acid_amp, domain=Misag, range=Optional[str])

slots.misag_lib_size = Slot(uri=MIXS['0000039'], name="misag_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=TEMP.misag_lib_size, domain=Misag, range=Optional[str])

slots.misag_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="misag_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=TEMP.misag_lib_reads_seqd, domain=Misag, range=Optional[str])

slots.misag_lib_layout = Slot(uri=MIXS['0000041'], name="misag_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=TEMP.misag_lib_layout, domain=Misag, range=Optional[str])

slots.misag_lib_vector = Slot(uri=MIXS['0000042'], name="misag_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=TEMP.misag_lib_vector, domain=Misag, range=Optional[str])

slots.misag_lib_screen = Slot(uri=MIXS['0000043'], name="misag_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=TEMP.misag_lib_screen, domain=Misag, range=Optional[str])

slots.misag_target_gene = Slot(uri=MIXS['0000044'], name="misag_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=TEMP.misag_target_gene, domain=Misag, range=Optional[str])

slots.misag_target_subfragment = Slot(uri=MIXS['0000045'], name="misag_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=TEMP.misag_target_subfragment, domain=Misag, range=Optional[str])

slots.misag_pcr_primers = Slot(uri=MIXS['0000046'], name="misag_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=TEMP.misag_pcr_primers, domain=Misag, range=Optional[str])

slots.misag_mid = Slot(uri=MIXS['0000047'], name="misag_mid", curie=MIXS.curie('0000047'),
                   model_uri=TEMP.misag_mid, domain=Misag, range=Optional[str])

slots.misag_adapters = Slot(uri=MIXS['0000048'], name="misag_adapters", curie=MIXS.curie('0000048'),
                   model_uri=TEMP.misag_adapters, domain=Misag, range=Optional[str])

slots.misag_pcr_cond = Slot(uri=MIXS['0000049'], name="misag_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=TEMP.misag_pcr_cond, domain=Misag, range=Optional[str])

slots.misag_seq_meth = Slot(uri=MIXS['0000050'], name="misag_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.misag_seq_meth, domain=Misag, range=Optional[str])

slots.misag_seq_quality_check = Slot(uri=MIXS['0000051'], name="misag_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=TEMP.misag_seq_quality_check, domain=Misag, range=Optional[str])

slots.misag_chimera_check = Slot(uri=MIXS['0000052'], name="misag_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=TEMP.misag_chimera_check, domain=Misag, range=Optional[str])

slots.misag_tax_ident = Slot(uri=MIXS['0000053'], name="misag_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=TEMP.misag_tax_ident, domain=Misag, range=Optional[str])

slots.misag_single_cell_lysis_prot = Slot(uri=MIXS['0000054'], name="misag_single_cell_lysis_prot", curie=MIXS.curie('0000054'),
                   model_uri=TEMP.misag_single_cell_lysis_prot, domain=Misag, range=Optional[str])

slots.misag_wga_amp_appr = Slot(uri=MIXS['0000055'], name="misag_wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=TEMP.misag_wga_amp_appr, domain=Misag, range=Optional[str])

slots.misag_assembly_qual = Slot(uri=MIXS['0000056'], name="misag_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=TEMP.misag_assembly_qual, domain=Misag, range=Optional[str])

slots.misag_assembly_name = Slot(uri=MIXS['0000057'], name="misag_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=TEMP.misag_assembly_name, domain=Misag, range=Optional[str])

slots.misag_assembly_software = Slot(uri=MIXS['0000058'], name="misag_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=TEMP.misag_assembly_software, domain=Misag, range=Optional[str])

slots.misag_annot = Slot(uri=MIXS['0000059'], name="misag_annot", curie=MIXS.curie('0000059'),
                   model_uri=TEMP.misag_annot, domain=Misag, range=Optional[str])

slots.misag_number_contig = Slot(uri=MIXS['0000060'], name="misag_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=TEMP.misag_number_contig, domain=Misag, range=Optional[str])

slots.misag_feat_pred = Slot(uri=MIXS['0000061'], name="misag_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=TEMP.misag_feat_pred, domain=Misag, range=Optional[str])

slots.misag_ref_db = Slot(uri=MIXS['0000062'], name="misag_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=TEMP.misag_ref_db, domain=Misag, range=Optional[str])

slots.misag_sim_search_meth = Slot(uri=MIXS['0000063'], name="misag_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=TEMP.misag_sim_search_meth, domain=Misag, range=Optional[str])

slots.misag_tax_class = Slot(uri=MIXS['0000064'], name="misag_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=TEMP.misag_tax_class, domain=Misag, range=Optional[str])

slots.misag_x_16s_recover = Slot(uri=MIXS['0000065'], name="misag_x_16s_recover", curie=MIXS.curie('0000065'),
                   model_uri=TEMP.misag_x_16s_recover, domain=Misag, range=Optional[str])

slots.misag_x_16s_recover_software = Slot(uri=MIXS['0000066'], name="misag_x_16s_recover_software", curie=MIXS.curie('0000066'),
                   model_uri=TEMP.misag_x_16s_recover_software, domain=Misag, range=Optional[str])

slots.misag_trnas = Slot(uri=MIXS['0000067'], name="misag_trnas", curie=MIXS.curie('0000067'),
                   model_uri=TEMP.misag_trnas, domain=Misag, range=Optional[str])

slots.misag_trna_ext_software = Slot(uri=MIXS['0000068'], name="misag_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=TEMP.misag_trna_ext_software, domain=Misag, range=Optional[str])

slots.misag_compl_score = Slot(uri=MIXS['0000069'], name="misag_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=TEMP.misag_compl_score, domain=Misag, range=Optional[str])

slots.misag_compl_software = Slot(uri=MIXS['0000070'], name="misag_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=TEMP.misag_compl_software, domain=Misag, range=Optional[str])

slots.misag_compl_appr = Slot(uri=MIXS['0000071'], name="misag_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=TEMP.misag_compl_appr, domain=Misag, range=Optional[str])

slots.misag_contam_score = Slot(uri=MIXS['0000072'], name="misag_contam_score", curie=MIXS.curie('0000072'),
                   model_uri=TEMP.misag_contam_score, domain=Misag, range=Optional[str])

slots.misag_contam_screen_param = Slot(uri=MIXS['0000073'], name="misag_contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=TEMP.misag_contam_screen_param, domain=Misag, range=Optional[str])

slots.misag_decontam_software = Slot(uri=MIXS['0000074'], name="misag_decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=TEMP.misag_decontam_software, domain=Misag, range=Optional[str])

slots.misag_sort_tech = Slot(uri=MIXS['0000075'], name="misag_sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=TEMP.misag_sort_tech, domain=Misag, range=Optional[str])

slots.misag_single_cell_lysis_appr = Slot(uri=MIXS['0000076'], name="misag_single_cell_lysis_appr", curie=MIXS.curie('0000076'),
                   model_uri=TEMP.misag_single_cell_lysis_appr, domain=Misag, range=Optional[str])

slots.misag_bin_param = Slot(uri=MIXS['0000077'], name="misag_bin_param", curie=MIXS.curie('0000077'),
                   model_uri=TEMP.misag_bin_param, domain=Misag, range=Optional[str])

slots.misag_bin_software = Slot(uri=MIXS['0000078'], name="misag_bin_software", curie=MIXS.curie('0000078'),
                   model_uri=TEMP.misag_bin_software, domain=Misag, range=Optional[str])

slots.misag_reassembly_bin = Slot(uri=MIXS['0000079'], name="misag_reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=TEMP.misag_reassembly_bin, domain=Misag, range=Optional[str])

slots.misag_mag_cov_software = Slot(uri=MIXS['0000080'], name="misag_mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=TEMP.misag_mag_cov_software, domain=Misag, range=Optional[str])

slots.misag_vir_ident_software = Slot(uri=MIXS['0000081'], name="misag_vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=TEMP.misag_vir_ident_software, domain=Misag, range=Optional[str])

slots.misag_pred_genome_type = Slot(uri=MIXS['0000082'], name="misag_pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=TEMP.misag_pred_genome_type, domain=Misag, range=Optional[str])

slots.misag_pred_genome_struc = Slot(uri=MIXS['0000083'], name="misag_pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=TEMP.misag_pred_genome_struc, domain=Misag, range=Optional[str])

slots.misag_detec_type = Slot(uri=MIXS['0000084'], name="misag_detec_type", curie=MIXS.curie('0000084'),
                   model_uri=TEMP.misag_detec_type, domain=Misag, range=Optional[str])

slots.misag_otu_class_appr = Slot(uri=MIXS['0000085'], name="misag_otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=TEMP.misag_otu_class_appr, domain=Misag, range=Optional[str])

slots.misag_otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="misag_otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=TEMP.misag_otu_seq_comp_appr, domain=Misag, range=Optional[str])

slots.misag_otu_db = Slot(uri=MIXS['0000087'], name="misag_otu_db", curie=MIXS.curie('0000087'),
                   model_uri=TEMP.misag_otu_db, domain=Misag, range=Optional[str])

slots.misag_host_pred_appr = Slot(uri=MIXS['0000088'], name="misag_host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=TEMP.misag_host_pred_appr, domain=Misag, range=Optional[str])

slots.misag_host_pred_est_acc = Slot(uri=MIXS['0000089'], name="misag_host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=TEMP.misag_host_pred_est_acc, domain=Misag, range=Optional[str])

slots.misag_sop = Slot(uri=MIXS['0000090'], name="misag_sop", curie=MIXS.curie('0000090'),
                   model_uri=TEMP.misag_sop, domain=Misag, range=Optional[Union[str, List[str]]])

slots.misag_associated_resource = Slot(uri=MIXS['0000091'], name="misag_associated_resource", curie=MIXS.curie('0000091'),
                   model_uri=TEMP.misag_associated_resource, domain=Misag, range=Optional[Union[str, List[str]]])

slots.misag_project_name = Slot(uri=MIXS['0000092'], name="misag_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.misag_project_name, domain=Misag, range=Optional[str])

slots.misag_elev = Slot(uri=MIXS['0000093'], name="misag_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.misag_elev, domain=Misag, range=Optional[str])

slots.misag_alt = Slot(uri=MIXS['0000094'], name="misag_alt", curie=MIXS.curie('0000094'),
                   model_uri=TEMP.misag_alt, domain=Misag, range=Optional[str])

slots.misag_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="misag_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.misag_samp_vol_we_dna_ext, domain=Misag, range=Optional[str])

slots.misag_temp = Slot(uri=MIXS['0000113'], name="misag_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.misag_temp, domain=Misag, range=Optional[str])

slots.misag_samp_name = Slot(uri=MIXS['0001107'], name="misag_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.misag_samp_name, domain=Misag, range=Optional[str])

slots.misag_samp_collec_method = Slot(uri=MIXS['0001225'], name="misag_samp_collec_method", curie=MIXS.curie('0001225'),
                   model_uri=TEMP.misag_samp_collec_method, domain=Misag, range=Optional[str])

slots.misag_samp_taxon_id = Slot(uri=MIXS['0001320'], name="misag_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=TEMP.misag_samp_taxon_id, domain=Misag, range=Optional[str])

slots.misag_neg_cont_type = Slot(uri=MIXS['0001321'], name="misag_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=TEMP.misag_neg_cont_type, domain=Misag, range=Optional[str])

slots.misag_pos_cont_type = Slot(uri=MIXS['0001322'], name="misag_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=TEMP.misag_pos_cont_type, domain=Misag, range=Optional[str])

slots.mimag_samp_size = Slot(uri=MIXS['0000001'], name="mimag_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.mimag_samp_size, domain=Mimag, range=Optional[str])

slots.mimag_samp_collec_device = Slot(uri=MIXS['0000002'], name="mimag_samp_collec_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.mimag_samp_collec_device, domain=Mimag, range=Optional[str])

slots.mimag_isol_growth_condt = Slot(uri=MIXS['0000003'], name="mimag_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=TEMP.mimag_isol_growth_condt, domain=Mimag, range=Optional[str])

slots.mimag_contam_screen_input = Slot(uri=MIXS['0000005'], name="mimag_contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=TEMP.mimag_contam_screen_input, domain=Mimag, range=Optional[str])

slots.mimag_wga_amp_kit = Slot(uri=MIXS['0000006'], name="mimag_wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=TEMP.mimag_wga_amp_kit, domain=Mimag, range=Optional[str])

slots.mimag_experimental_factor = Slot(uri=MIXS['0000008'], name="mimag_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=TEMP.mimag_experimental_factor, domain=Mimag, range=Optional[str])

slots.mimag_lat_lon = Slot(uri=MIXS['0000009'], name="mimag_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.mimag_lat_lon, domain=Mimag, range=Optional[str])

slots.mimag_geo_loc_name = Slot(uri=MIXS['0000010'], name="mimag_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.mimag_geo_loc_name, domain=Mimag, range=Optional[str])

slots.mimag_collection_date = Slot(uri=MIXS['0000011'], name="mimag_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.mimag_collection_date, domain=Mimag, range=Optional[str])

slots.mimag_env_broad_scale = Slot(uri=MIXS['0000012'], name="mimag_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.mimag_env_broad_scale, domain=Mimag, range=Optional[str])

slots.mimag_env_local_scale = Slot(uri=MIXS['0000013'], name="mimag_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.mimag_env_local_scale, domain=Mimag, range=Optional[str])

slots.mimag_env_medium = Slot(uri=MIXS['0000014'], name="mimag_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.mimag_env_medium, domain=Mimag, range=Optional[str])

slots.mimag_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="mimag_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=TEMP.mimag_rel_to_oxygen, domain=Mimag, range=Optional[str])

slots.mimag_samp_mat_process = Slot(uri=MIXS['0000016'], name="mimag_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=TEMP.mimag_samp_mat_process, domain=Mimag, range=Optional[str])

slots.mimag_size_frac = Slot(uri=MIXS['0000017'], name="mimag_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=TEMP.mimag_size_frac, domain=Mimag, range=Optional[str])

slots.mimag_depth = Slot(uri=MIXS['0000018'], name="mimag_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.mimag_depth, domain=Mimag, range=Optional[str])

slots.mimag_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="mimag_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=TEMP.mimag_subspecf_gen_lin, domain=Mimag, range=Optional[str])

slots.mimag_ploidy = Slot(uri=MIXS['0000021'], name="mimag_ploidy", curie=MIXS.curie('0000021'),
                   model_uri=TEMP.mimag_ploidy, domain=Mimag, range=Optional[str])

slots.mimag_num_replicons = Slot(uri=MIXS['0000022'], name="mimag_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=TEMP.mimag_num_replicons, domain=Mimag, range=Optional[str])

slots.mimag_extrachrom_elements = Slot(uri=MIXS['0000023'], name="mimag_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=TEMP.mimag_extrachrom_elements, domain=Mimag, range=Optional[str])

slots.mimag_estimated_size = Slot(uri=MIXS['0000024'], name="mimag_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=TEMP.mimag_estimated_size, domain=Mimag, range=Optional[str])

slots.mimag_ref_biomaterial = Slot(uri=MIXS['0000025'], name="mimag_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=TEMP.mimag_ref_biomaterial, domain=Mimag, range=Optional[str])

slots.mimag_source_mat_id = Slot(uri=MIXS['0000026'], name="mimag_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=TEMP.mimag_source_mat_id, domain=Mimag, range=Optional[Union[str, List[str]]])

slots.mimag_pathogenicity = Slot(uri=MIXS['0000027'], name="mimag_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=TEMP.mimag_pathogenicity, domain=Mimag, range=Optional[str])

slots.mimag_biotic_relationship = Slot(uri=MIXS['0000028'], name="mimag_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=TEMP.mimag_biotic_relationship, domain=Mimag, range=Optional[str])

slots.mimag_specific_host = Slot(uri=MIXS['0000029'], name="mimag_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=TEMP.mimag_specific_host, domain=Mimag, range=Optional[str])

slots.mimag_host_spec_range = Slot(uri=MIXS['0000030'], name="mimag_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=TEMP.mimag_host_spec_range, domain=Mimag, range=Optional[Union[str, List[str]]])

slots.mimag_host_disease_stat = Slot(uri=MIXS['0000031'], name="mimag_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.mimag_host_disease_stat, domain=Mimag, range=Optional[Union[str, List[str]]])

slots.mimag_trophic_level = Slot(uri=MIXS['0000032'], name="mimag_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=TEMP.mimag_trophic_level, domain=Mimag, range=Optional[str])

slots.mimag_propagation = Slot(uri=MIXS['0000033'], name="mimag_propagation", curie=MIXS.curie('0000033'),
                   model_uri=TEMP.mimag_propagation, domain=Mimag, range=Optional[str])

slots.mimag_encoded_traits = Slot(uri=MIXS['0000034'], name="mimag_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=TEMP.mimag_encoded_traits, domain=Mimag, range=Optional[str])

slots.mimag_source_uvig = Slot(uri=MIXS['0000035'], name="mimag_source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=TEMP.mimag_source_uvig, domain=Mimag, range=Optional[str])

slots.mimag_virus_enrich_appr = Slot(uri=MIXS['0000036'], name="mimag_virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=TEMP.mimag_virus_enrich_appr, domain=Mimag, range=Optional[str])

slots.mimag_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="mimag_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.mimag_nucl_acid_ext, domain=Mimag, range=Optional[str])

slots.mimag_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="mimag_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=TEMP.mimag_nucl_acid_amp, domain=Mimag, range=Optional[str])

slots.mimag_lib_size = Slot(uri=MIXS['0000039'], name="mimag_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=TEMP.mimag_lib_size, domain=Mimag, range=Optional[str])

slots.mimag_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="mimag_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=TEMP.mimag_lib_reads_seqd, domain=Mimag, range=Optional[str])

slots.mimag_lib_layout = Slot(uri=MIXS['0000041'], name="mimag_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=TEMP.mimag_lib_layout, domain=Mimag, range=Optional[str])

slots.mimag_lib_vector = Slot(uri=MIXS['0000042'], name="mimag_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=TEMP.mimag_lib_vector, domain=Mimag, range=Optional[str])

slots.mimag_lib_screen = Slot(uri=MIXS['0000043'], name="mimag_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=TEMP.mimag_lib_screen, domain=Mimag, range=Optional[str])

slots.mimag_target_gene = Slot(uri=MIXS['0000044'], name="mimag_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=TEMP.mimag_target_gene, domain=Mimag, range=Optional[str])

slots.mimag_target_subfragment = Slot(uri=MIXS['0000045'], name="mimag_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=TEMP.mimag_target_subfragment, domain=Mimag, range=Optional[str])

slots.mimag_pcr_primers = Slot(uri=MIXS['0000046'], name="mimag_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=TEMP.mimag_pcr_primers, domain=Mimag, range=Optional[str])

slots.mimag_mid = Slot(uri=MIXS['0000047'], name="mimag_mid", curie=MIXS.curie('0000047'),
                   model_uri=TEMP.mimag_mid, domain=Mimag, range=Optional[str])

slots.mimag_adapters = Slot(uri=MIXS['0000048'], name="mimag_adapters", curie=MIXS.curie('0000048'),
                   model_uri=TEMP.mimag_adapters, domain=Mimag, range=Optional[str])

slots.mimag_pcr_cond = Slot(uri=MIXS['0000049'], name="mimag_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=TEMP.mimag_pcr_cond, domain=Mimag, range=Optional[str])

slots.mimag_seq_meth = Slot(uri=MIXS['0000050'], name="mimag_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.mimag_seq_meth, domain=Mimag, range=Optional[str])

slots.mimag_seq_quality_check = Slot(uri=MIXS['0000051'], name="mimag_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=TEMP.mimag_seq_quality_check, domain=Mimag, range=Optional[str])

slots.mimag_chimera_check = Slot(uri=MIXS['0000052'], name="mimag_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=TEMP.mimag_chimera_check, domain=Mimag, range=Optional[str])

slots.mimag_tax_ident = Slot(uri=MIXS['0000053'], name="mimag_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=TEMP.mimag_tax_ident, domain=Mimag, range=Optional[str])

slots.mimag_single_cell_lysis_prot = Slot(uri=MIXS['0000054'], name="mimag_single_cell_lysis_prot", curie=MIXS.curie('0000054'),
                   model_uri=TEMP.mimag_single_cell_lysis_prot, domain=Mimag, range=Optional[str])

slots.mimag_wga_amp_appr = Slot(uri=MIXS['0000055'], name="mimag_wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=TEMP.mimag_wga_amp_appr, domain=Mimag, range=Optional[str])

slots.mimag_assembly_qual = Slot(uri=MIXS['0000056'], name="mimag_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=TEMP.mimag_assembly_qual, domain=Mimag, range=Optional[str])

slots.mimag_assembly_name = Slot(uri=MIXS['0000057'], name="mimag_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=TEMP.mimag_assembly_name, domain=Mimag, range=Optional[str])

slots.mimag_assembly_software = Slot(uri=MIXS['0000058'], name="mimag_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=TEMP.mimag_assembly_software, domain=Mimag, range=Optional[str])

slots.mimag_annot = Slot(uri=MIXS['0000059'], name="mimag_annot", curie=MIXS.curie('0000059'),
                   model_uri=TEMP.mimag_annot, domain=Mimag, range=Optional[str])

slots.mimag_number_contig = Slot(uri=MIXS['0000060'], name="mimag_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=TEMP.mimag_number_contig, domain=Mimag, range=Optional[str])

slots.mimag_feat_pred = Slot(uri=MIXS['0000061'], name="mimag_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=TEMP.mimag_feat_pred, domain=Mimag, range=Optional[str])

slots.mimag_ref_db = Slot(uri=MIXS['0000062'], name="mimag_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=TEMP.mimag_ref_db, domain=Mimag, range=Optional[str])

slots.mimag_sim_search_meth = Slot(uri=MIXS['0000063'], name="mimag_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=TEMP.mimag_sim_search_meth, domain=Mimag, range=Optional[str])

slots.mimag_tax_class = Slot(uri=MIXS['0000064'], name="mimag_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=TEMP.mimag_tax_class, domain=Mimag, range=Optional[str])

slots.mimag_x_16s_recover = Slot(uri=MIXS['0000065'], name="mimag_x_16s_recover", curie=MIXS.curie('0000065'),
                   model_uri=TEMP.mimag_x_16s_recover, domain=Mimag, range=Optional[str])

slots.mimag_x_16s_recover_software = Slot(uri=MIXS['0000066'], name="mimag_x_16s_recover_software", curie=MIXS.curie('0000066'),
                   model_uri=TEMP.mimag_x_16s_recover_software, domain=Mimag, range=Optional[str])

slots.mimag_trnas = Slot(uri=MIXS['0000067'], name="mimag_trnas", curie=MIXS.curie('0000067'),
                   model_uri=TEMP.mimag_trnas, domain=Mimag, range=Optional[str])

slots.mimag_trna_ext_software = Slot(uri=MIXS['0000068'], name="mimag_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=TEMP.mimag_trna_ext_software, domain=Mimag, range=Optional[str])

slots.mimag_compl_score = Slot(uri=MIXS['0000069'], name="mimag_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=TEMP.mimag_compl_score, domain=Mimag, range=Optional[str])

slots.mimag_compl_software = Slot(uri=MIXS['0000070'], name="mimag_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=TEMP.mimag_compl_software, domain=Mimag, range=Optional[str])

slots.mimag_compl_appr = Slot(uri=MIXS['0000071'], name="mimag_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=TEMP.mimag_compl_appr, domain=Mimag, range=Optional[str])

slots.mimag_contam_score = Slot(uri=MIXS['0000072'], name="mimag_contam_score", curie=MIXS.curie('0000072'),
                   model_uri=TEMP.mimag_contam_score, domain=Mimag, range=Optional[str])

slots.mimag_contam_screen_param = Slot(uri=MIXS['0000073'], name="mimag_contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=TEMP.mimag_contam_screen_param, domain=Mimag, range=Optional[str])

slots.mimag_decontam_software = Slot(uri=MIXS['0000074'], name="mimag_decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=TEMP.mimag_decontam_software, domain=Mimag, range=Optional[str])

slots.mimag_sort_tech = Slot(uri=MIXS['0000075'], name="mimag_sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=TEMP.mimag_sort_tech, domain=Mimag, range=Optional[str])

slots.mimag_single_cell_lysis_appr = Slot(uri=MIXS['0000076'], name="mimag_single_cell_lysis_appr", curie=MIXS.curie('0000076'),
                   model_uri=TEMP.mimag_single_cell_lysis_appr, domain=Mimag, range=Optional[str])

slots.mimag_bin_param = Slot(uri=MIXS['0000077'], name="mimag_bin_param", curie=MIXS.curie('0000077'),
                   model_uri=TEMP.mimag_bin_param, domain=Mimag, range=Optional[str])

slots.mimag_bin_software = Slot(uri=MIXS['0000078'], name="mimag_bin_software", curie=MIXS.curie('0000078'),
                   model_uri=TEMP.mimag_bin_software, domain=Mimag, range=Optional[str])

slots.mimag_reassembly_bin = Slot(uri=MIXS['0000079'], name="mimag_reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=TEMP.mimag_reassembly_bin, domain=Mimag, range=Optional[str])

slots.mimag_mag_cov_software = Slot(uri=MIXS['0000080'], name="mimag_mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=TEMP.mimag_mag_cov_software, domain=Mimag, range=Optional[str])

slots.mimag_vir_ident_software = Slot(uri=MIXS['0000081'], name="mimag_vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=TEMP.mimag_vir_ident_software, domain=Mimag, range=Optional[str])

slots.mimag_pred_genome_type = Slot(uri=MIXS['0000082'], name="mimag_pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=TEMP.mimag_pred_genome_type, domain=Mimag, range=Optional[str])

slots.mimag_pred_genome_struc = Slot(uri=MIXS['0000083'], name="mimag_pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=TEMP.mimag_pred_genome_struc, domain=Mimag, range=Optional[str])

slots.mimag_detec_type = Slot(uri=MIXS['0000084'], name="mimag_detec_type", curie=MIXS.curie('0000084'),
                   model_uri=TEMP.mimag_detec_type, domain=Mimag, range=Optional[str])

slots.mimag_otu_class_appr = Slot(uri=MIXS['0000085'], name="mimag_otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=TEMP.mimag_otu_class_appr, domain=Mimag, range=Optional[str])

slots.mimag_otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="mimag_otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=TEMP.mimag_otu_seq_comp_appr, domain=Mimag, range=Optional[str])

slots.mimag_otu_db = Slot(uri=MIXS['0000087'], name="mimag_otu_db", curie=MIXS.curie('0000087'),
                   model_uri=TEMP.mimag_otu_db, domain=Mimag, range=Optional[str])

slots.mimag_host_pred_appr = Slot(uri=MIXS['0000088'], name="mimag_host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=TEMP.mimag_host_pred_appr, domain=Mimag, range=Optional[str])

slots.mimag_host_pred_est_acc = Slot(uri=MIXS['0000089'], name="mimag_host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=TEMP.mimag_host_pred_est_acc, domain=Mimag, range=Optional[str])

slots.mimag_sop = Slot(uri=MIXS['0000090'], name="mimag_sop", curie=MIXS.curie('0000090'),
                   model_uri=TEMP.mimag_sop, domain=Mimag, range=Optional[Union[str, List[str]]])

slots.mimag_associated_resource = Slot(uri=MIXS['0000091'], name="mimag_associated_resource", curie=MIXS.curie('0000091'),
                   model_uri=TEMP.mimag_associated_resource, domain=Mimag, range=Optional[Union[str, List[str]]])

slots.mimag_project_name = Slot(uri=MIXS['0000092'], name="mimag_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.mimag_project_name, domain=Mimag, range=Optional[str])

slots.mimag_elev = Slot(uri=MIXS['0000093'], name="mimag_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.mimag_elev, domain=Mimag, range=Optional[str])

slots.mimag_alt = Slot(uri=MIXS['0000094'], name="mimag_alt", curie=MIXS.curie('0000094'),
                   model_uri=TEMP.mimag_alt, domain=Mimag, range=Optional[str])

slots.mimag_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="mimag_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.mimag_samp_vol_we_dna_ext, domain=Mimag, range=Optional[str])

slots.mimag_temp = Slot(uri=MIXS['0000113'], name="mimag_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.mimag_temp, domain=Mimag, range=Optional[str])

slots.mimag_samp_name = Slot(uri=MIXS['0001107'], name="mimag_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.mimag_samp_name, domain=Mimag, range=Optional[str])

slots.mimag_samp_collec_method = Slot(uri=MIXS['0001225'], name="mimag_samp_collec_method", curie=MIXS.curie('0001225'),
                   model_uri=TEMP.mimag_samp_collec_method, domain=Mimag, range=Optional[str])

slots.mimag_samp_taxon_id = Slot(uri=MIXS['0001320'], name="mimag_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=TEMP.mimag_samp_taxon_id, domain=Mimag, range=Optional[str])

slots.mimag_neg_cont_type = Slot(uri=MIXS['0001321'], name="mimag_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=TEMP.mimag_neg_cont_type, domain=Mimag, range=Optional[str])

slots.mimag_pos_cont_type = Slot(uri=MIXS['0001322'], name="mimag_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=TEMP.mimag_pos_cont_type, domain=Mimag, range=Optional[str])

slots.miuvig_samp_size = Slot(uri=MIXS['0000001'], name="miuvig_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.miuvig_samp_size, domain=Miuvig, range=Optional[str])

slots.miuvig_samp_collec_device = Slot(uri=MIXS['0000002'], name="miuvig_samp_collec_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.miuvig_samp_collec_device, domain=Miuvig, range=Optional[str])

slots.miuvig_isol_growth_condt = Slot(uri=MIXS['0000003'], name="miuvig_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=TEMP.miuvig_isol_growth_condt, domain=Miuvig, range=Optional[str])

slots.miuvig_contam_screen_input = Slot(uri=MIXS['0000005'], name="miuvig_contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=TEMP.miuvig_contam_screen_input, domain=Miuvig, range=Optional[str])

slots.miuvig_wga_amp_kit = Slot(uri=MIXS['0000006'], name="miuvig_wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=TEMP.miuvig_wga_amp_kit, domain=Miuvig, range=Optional[str])

slots.miuvig_experimental_factor = Slot(uri=MIXS['0000008'], name="miuvig_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=TEMP.miuvig_experimental_factor, domain=Miuvig, range=Optional[str])

slots.miuvig_lat_lon = Slot(uri=MIXS['0000009'], name="miuvig_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.miuvig_lat_lon, domain=Miuvig, range=Optional[str])

slots.miuvig_geo_loc_name = Slot(uri=MIXS['0000010'], name="miuvig_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.miuvig_geo_loc_name, domain=Miuvig, range=Optional[str])

slots.miuvig_collection_date = Slot(uri=MIXS['0000011'], name="miuvig_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.miuvig_collection_date, domain=Miuvig, range=Optional[str])

slots.miuvig_env_broad_scale = Slot(uri=MIXS['0000012'], name="miuvig_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.miuvig_env_broad_scale, domain=Miuvig, range=Optional[str])

slots.miuvig_env_local_scale = Slot(uri=MIXS['0000013'], name="miuvig_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.miuvig_env_local_scale, domain=Miuvig, range=Optional[str])

slots.miuvig_env_medium = Slot(uri=MIXS['0000014'], name="miuvig_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.miuvig_env_medium, domain=Miuvig, range=Optional[str])

slots.miuvig_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="miuvig_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=TEMP.miuvig_rel_to_oxygen, domain=Miuvig, range=Optional[str])

slots.miuvig_samp_mat_process = Slot(uri=MIXS['0000016'], name="miuvig_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=TEMP.miuvig_samp_mat_process, domain=Miuvig, range=Optional[str])

slots.miuvig_size_frac = Slot(uri=MIXS['0000017'], name="miuvig_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=TEMP.miuvig_size_frac, domain=Miuvig, range=Optional[str])

slots.miuvig_depth = Slot(uri=MIXS['0000018'], name="miuvig_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.miuvig_depth, domain=Miuvig, range=Optional[str])

slots.miuvig_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="miuvig_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=TEMP.miuvig_subspecf_gen_lin, domain=Miuvig, range=Optional[str])

slots.miuvig_ploidy = Slot(uri=MIXS['0000021'], name="miuvig_ploidy", curie=MIXS.curie('0000021'),
                   model_uri=TEMP.miuvig_ploidy, domain=Miuvig, range=Optional[str])

slots.miuvig_num_replicons = Slot(uri=MIXS['0000022'], name="miuvig_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=TEMP.miuvig_num_replicons, domain=Miuvig, range=Optional[str])

slots.miuvig_extrachrom_elements = Slot(uri=MIXS['0000023'], name="miuvig_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=TEMP.miuvig_extrachrom_elements, domain=Miuvig, range=Optional[str])

slots.miuvig_estimated_size = Slot(uri=MIXS['0000024'], name="miuvig_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=TEMP.miuvig_estimated_size, domain=Miuvig, range=Optional[str])

slots.miuvig_ref_biomaterial = Slot(uri=MIXS['0000025'], name="miuvig_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=TEMP.miuvig_ref_biomaterial, domain=Miuvig, range=Optional[str])

slots.miuvig_source_mat_id = Slot(uri=MIXS['0000026'], name="miuvig_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=TEMP.miuvig_source_mat_id, domain=Miuvig, range=Optional[Union[str, List[str]]])

slots.miuvig_pathogenicity = Slot(uri=MIXS['0000027'], name="miuvig_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=TEMP.miuvig_pathogenicity, domain=Miuvig, range=Optional[str])

slots.miuvig_biotic_relationship = Slot(uri=MIXS['0000028'], name="miuvig_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=TEMP.miuvig_biotic_relationship, domain=Miuvig, range=Optional[str])

slots.miuvig_specific_host = Slot(uri=MIXS['0000029'], name="miuvig_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=TEMP.miuvig_specific_host, domain=Miuvig, range=Optional[str])

slots.miuvig_host_spec_range = Slot(uri=MIXS['0000030'], name="miuvig_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=TEMP.miuvig_host_spec_range, domain=Miuvig, range=Optional[Union[str, List[str]]])

slots.miuvig_host_disease_stat = Slot(uri=MIXS['0000031'], name="miuvig_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.miuvig_host_disease_stat, domain=Miuvig, range=Optional[Union[str, List[str]]])

slots.miuvig_trophic_level = Slot(uri=MIXS['0000032'], name="miuvig_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=TEMP.miuvig_trophic_level, domain=Miuvig, range=Optional[str])

slots.miuvig_propagation = Slot(uri=MIXS['0000033'], name="miuvig_propagation", curie=MIXS.curie('0000033'),
                   model_uri=TEMP.miuvig_propagation, domain=Miuvig, range=Optional[str])

slots.miuvig_encoded_traits = Slot(uri=MIXS['0000034'], name="miuvig_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=TEMP.miuvig_encoded_traits, domain=Miuvig, range=Optional[str])

slots.miuvig_source_uvig = Slot(uri=MIXS['0000035'], name="miuvig_source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=TEMP.miuvig_source_uvig, domain=Miuvig, range=Optional[str])

slots.miuvig_virus_enrich_appr = Slot(uri=MIXS['0000036'], name="miuvig_virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=TEMP.miuvig_virus_enrich_appr, domain=Miuvig, range=Optional[str])

slots.miuvig_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="miuvig_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.miuvig_nucl_acid_ext, domain=Miuvig, range=Optional[str])

slots.miuvig_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="miuvig_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=TEMP.miuvig_nucl_acid_amp, domain=Miuvig, range=Optional[str])

slots.miuvig_lib_size = Slot(uri=MIXS['0000039'], name="miuvig_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=TEMP.miuvig_lib_size, domain=Miuvig, range=Optional[str])

slots.miuvig_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="miuvig_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=TEMP.miuvig_lib_reads_seqd, domain=Miuvig, range=Optional[str])

slots.miuvig_lib_layout = Slot(uri=MIXS['0000041'], name="miuvig_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=TEMP.miuvig_lib_layout, domain=Miuvig, range=Optional[str])

slots.miuvig_lib_vector = Slot(uri=MIXS['0000042'], name="miuvig_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=TEMP.miuvig_lib_vector, domain=Miuvig, range=Optional[str])

slots.miuvig_lib_screen = Slot(uri=MIXS['0000043'], name="miuvig_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=TEMP.miuvig_lib_screen, domain=Miuvig, range=Optional[str])

slots.miuvig_target_gene = Slot(uri=MIXS['0000044'], name="miuvig_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=TEMP.miuvig_target_gene, domain=Miuvig, range=Optional[str])

slots.miuvig_target_subfragment = Slot(uri=MIXS['0000045'], name="miuvig_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=TEMP.miuvig_target_subfragment, domain=Miuvig, range=Optional[str])

slots.miuvig_pcr_primers = Slot(uri=MIXS['0000046'], name="miuvig_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=TEMP.miuvig_pcr_primers, domain=Miuvig, range=Optional[str])

slots.miuvig_mid = Slot(uri=MIXS['0000047'], name="miuvig_mid", curie=MIXS.curie('0000047'),
                   model_uri=TEMP.miuvig_mid, domain=Miuvig, range=Optional[str])

slots.miuvig_adapters = Slot(uri=MIXS['0000048'], name="miuvig_adapters", curie=MIXS.curie('0000048'),
                   model_uri=TEMP.miuvig_adapters, domain=Miuvig, range=Optional[str])

slots.miuvig_pcr_cond = Slot(uri=MIXS['0000049'], name="miuvig_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=TEMP.miuvig_pcr_cond, domain=Miuvig, range=Optional[str])

slots.miuvig_seq_meth = Slot(uri=MIXS['0000050'], name="miuvig_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.miuvig_seq_meth, domain=Miuvig, range=Optional[str])

slots.miuvig_seq_quality_check = Slot(uri=MIXS['0000051'], name="miuvig_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=TEMP.miuvig_seq_quality_check, domain=Miuvig, range=Optional[str])

slots.miuvig_chimera_check = Slot(uri=MIXS['0000052'], name="miuvig_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=TEMP.miuvig_chimera_check, domain=Miuvig, range=Optional[str])

slots.miuvig_tax_ident = Slot(uri=MIXS['0000053'], name="miuvig_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=TEMP.miuvig_tax_ident, domain=Miuvig, range=Optional[str])

slots.miuvig_single_cell_lysis_prot = Slot(uri=MIXS['0000054'], name="miuvig_single_cell_lysis_prot", curie=MIXS.curie('0000054'),
                   model_uri=TEMP.miuvig_single_cell_lysis_prot, domain=Miuvig, range=Optional[str])

slots.miuvig_wga_amp_appr = Slot(uri=MIXS['0000055'], name="miuvig_wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=TEMP.miuvig_wga_amp_appr, domain=Miuvig, range=Optional[str])

slots.miuvig_assembly_qual = Slot(uri=MIXS['0000056'], name="miuvig_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=TEMP.miuvig_assembly_qual, domain=Miuvig, range=Optional[str])

slots.miuvig_assembly_name = Slot(uri=MIXS['0000057'], name="miuvig_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=TEMP.miuvig_assembly_name, domain=Miuvig, range=Optional[str])

slots.miuvig_assembly_software = Slot(uri=MIXS['0000058'], name="miuvig_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=TEMP.miuvig_assembly_software, domain=Miuvig, range=Optional[str])

slots.miuvig_annot = Slot(uri=MIXS['0000059'], name="miuvig_annot", curie=MIXS.curie('0000059'),
                   model_uri=TEMP.miuvig_annot, domain=Miuvig, range=Optional[str])

slots.miuvig_number_contig = Slot(uri=MIXS['0000060'], name="miuvig_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=TEMP.miuvig_number_contig, domain=Miuvig, range=Optional[str])

slots.miuvig_feat_pred = Slot(uri=MIXS['0000061'], name="miuvig_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=TEMP.miuvig_feat_pred, domain=Miuvig, range=Optional[str])

slots.miuvig_ref_db = Slot(uri=MIXS['0000062'], name="miuvig_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=TEMP.miuvig_ref_db, domain=Miuvig, range=Optional[str])

slots.miuvig_sim_search_meth = Slot(uri=MIXS['0000063'], name="miuvig_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=TEMP.miuvig_sim_search_meth, domain=Miuvig, range=Optional[str])

slots.miuvig_tax_class = Slot(uri=MIXS['0000064'], name="miuvig_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=TEMP.miuvig_tax_class, domain=Miuvig, range=Optional[str])

slots.miuvig_x_16s_recover = Slot(uri=MIXS['0000065'], name="miuvig_x_16s_recover", curie=MIXS.curie('0000065'),
                   model_uri=TEMP.miuvig_x_16s_recover, domain=Miuvig, range=Optional[str])

slots.miuvig_x_16s_recover_software = Slot(uri=MIXS['0000066'], name="miuvig_x_16s_recover_software", curie=MIXS.curie('0000066'),
                   model_uri=TEMP.miuvig_x_16s_recover_software, domain=Miuvig, range=Optional[str])

slots.miuvig_trnas = Slot(uri=MIXS['0000067'], name="miuvig_trnas", curie=MIXS.curie('0000067'),
                   model_uri=TEMP.miuvig_trnas, domain=Miuvig, range=Optional[str])

slots.miuvig_trna_ext_software = Slot(uri=MIXS['0000068'], name="miuvig_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=TEMP.miuvig_trna_ext_software, domain=Miuvig, range=Optional[str])

slots.miuvig_compl_score = Slot(uri=MIXS['0000069'], name="miuvig_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=TEMP.miuvig_compl_score, domain=Miuvig, range=Optional[str])

slots.miuvig_compl_software = Slot(uri=MIXS['0000070'], name="miuvig_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=TEMP.miuvig_compl_software, domain=Miuvig, range=Optional[str])

slots.miuvig_compl_appr = Slot(uri=MIXS['0000071'], name="miuvig_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=TEMP.miuvig_compl_appr, domain=Miuvig, range=Optional[str])

slots.miuvig_contam_score = Slot(uri=MIXS['0000072'], name="miuvig_contam_score", curie=MIXS.curie('0000072'),
                   model_uri=TEMP.miuvig_contam_score, domain=Miuvig, range=Optional[str])

slots.miuvig_contam_screen_param = Slot(uri=MIXS['0000073'], name="miuvig_contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=TEMP.miuvig_contam_screen_param, domain=Miuvig, range=Optional[str])

slots.miuvig_decontam_software = Slot(uri=MIXS['0000074'], name="miuvig_decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=TEMP.miuvig_decontam_software, domain=Miuvig, range=Optional[str])

slots.miuvig_sort_tech = Slot(uri=MIXS['0000075'], name="miuvig_sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=TEMP.miuvig_sort_tech, domain=Miuvig, range=Optional[str])

slots.miuvig_single_cell_lysis_appr = Slot(uri=MIXS['0000076'], name="miuvig_single_cell_lysis_appr", curie=MIXS.curie('0000076'),
                   model_uri=TEMP.miuvig_single_cell_lysis_appr, domain=Miuvig, range=Optional[str])

slots.miuvig_bin_param = Slot(uri=MIXS['0000077'], name="miuvig_bin_param", curie=MIXS.curie('0000077'),
                   model_uri=TEMP.miuvig_bin_param, domain=Miuvig, range=Optional[str])

slots.miuvig_bin_software = Slot(uri=MIXS['0000078'], name="miuvig_bin_software", curie=MIXS.curie('0000078'),
                   model_uri=TEMP.miuvig_bin_software, domain=Miuvig, range=Optional[str])

slots.miuvig_reassembly_bin = Slot(uri=MIXS['0000079'], name="miuvig_reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=TEMP.miuvig_reassembly_bin, domain=Miuvig, range=Optional[str])

slots.miuvig_mag_cov_software = Slot(uri=MIXS['0000080'], name="miuvig_mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=TEMP.miuvig_mag_cov_software, domain=Miuvig, range=Optional[str])

slots.miuvig_vir_ident_software = Slot(uri=MIXS['0000081'], name="miuvig_vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=TEMP.miuvig_vir_ident_software, domain=Miuvig, range=Optional[str])

slots.miuvig_pred_genome_type = Slot(uri=MIXS['0000082'], name="miuvig_pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=TEMP.miuvig_pred_genome_type, domain=Miuvig, range=Optional[str])

slots.miuvig_pred_genome_struc = Slot(uri=MIXS['0000083'], name="miuvig_pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=TEMP.miuvig_pred_genome_struc, domain=Miuvig, range=Optional[str])

slots.miuvig_detec_type = Slot(uri=MIXS['0000084'], name="miuvig_detec_type", curie=MIXS.curie('0000084'),
                   model_uri=TEMP.miuvig_detec_type, domain=Miuvig, range=Optional[str])

slots.miuvig_otu_class_appr = Slot(uri=MIXS['0000085'], name="miuvig_otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=TEMP.miuvig_otu_class_appr, domain=Miuvig, range=Optional[str])

slots.miuvig_otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="miuvig_otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=TEMP.miuvig_otu_seq_comp_appr, domain=Miuvig, range=Optional[str])

slots.miuvig_otu_db = Slot(uri=MIXS['0000087'], name="miuvig_otu_db", curie=MIXS.curie('0000087'),
                   model_uri=TEMP.miuvig_otu_db, domain=Miuvig, range=Optional[str])

slots.miuvig_host_pred_appr = Slot(uri=MIXS['0000088'], name="miuvig_host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=TEMP.miuvig_host_pred_appr, domain=Miuvig, range=Optional[str])

slots.miuvig_host_pred_est_acc = Slot(uri=MIXS['0000089'], name="miuvig_host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=TEMP.miuvig_host_pred_est_acc, domain=Miuvig, range=Optional[str])

slots.miuvig_sop = Slot(uri=MIXS['0000090'], name="miuvig_sop", curie=MIXS.curie('0000090'),
                   model_uri=TEMP.miuvig_sop, domain=Miuvig, range=Optional[Union[str, List[str]]])

slots.miuvig_associated_resource = Slot(uri=MIXS['0000091'], name="miuvig_associated_resource", curie=MIXS.curie('0000091'),
                   model_uri=TEMP.miuvig_associated_resource, domain=Miuvig, range=Optional[Union[str, List[str]]])

slots.miuvig_project_name = Slot(uri=MIXS['0000092'], name="miuvig_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.miuvig_project_name, domain=Miuvig, range=Optional[str])

slots.miuvig_elev = Slot(uri=MIXS['0000093'], name="miuvig_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.miuvig_elev, domain=Miuvig, range=Optional[str])

slots.miuvig_alt = Slot(uri=MIXS['0000094'], name="miuvig_alt", curie=MIXS.curie('0000094'),
                   model_uri=TEMP.miuvig_alt, domain=Miuvig, range=Optional[str])

slots.miuvig_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="miuvig_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.miuvig_samp_vol_we_dna_ext, domain=Miuvig, range=Optional[str])

slots.miuvig_temp = Slot(uri=MIXS['0000113'], name="miuvig_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.miuvig_temp, domain=Miuvig, range=Optional[str])

slots.miuvig_samp_name = Slot(uri=MIXS['0001107'], name="miuvig_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.miuvig_samp_name, domain=Miuvig, range=Optional[str])

slots.miuvig_samp_collec_method = Slot(uri=MIXS['0001225'], name="miuvig_samp_collec_method", curie=MIXS.curie('0001225'),
                   model_uri=TEMP.miuvig_samp_collec_method, domain=Miuvig, range=Optional[str])

slots.miuvig_samp_taxon_id = Slot(uri=MIXS['0001320'], name="miuvig_samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=TEMP.miuvig_samp_taxon_id, domain=Miuvig, range=Optional[str])

slots.miuvig_neg_cont_type = Slot(uri=MIXS['0001321'], name="miuvig_neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=TEMP.miuvig_neg_cont_type, domain=Miuvig, range=Optional[str])

slots.miuvig_pos_cont_type = Slot(uri=MIXS['0001322'], name="miuvig_pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=TEMP.miuvig_pos_cont_type, domain=Miuvig, range=Optional[str])

slots.agriculture_samp_size = Slot(uri=MIXS['0000001'], name="agriculture_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.agriculture_samp_size, domain=Agriculture, range=Optional[str])

slots.agriculture_samp_collect_device = Slot(uri=MIXS['0000002'], name="agriculture_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.agriculture_samp_collect_device, domain=Agriculture, range=Optional[str])

slots.agriculture_isol_growth_condt = Slot(uri=MIXS['0000003'], name="agriculture_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=TEMP.agriculture_isol_growth_condt, domain=Agriculture, range=Optional[str])

slots.agriculture_samp_mat_process = Slot(uri=MIXS['0000016'], name="agriculture_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=TEMP.agriculture_samp_mat_process, domain=Agriculture, range=Optional[str])

slots.agriculture_soil_depth = Slot(uri=MIXS['0000018'], name="agriculture_soil_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.agriculture_soil_depth, domain=Agriculture, range=Optional[str])

slots.agriculture_source_mat_id = Slot(uri=MIXS['0000026'], name="agriculture_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=TEMP.agriculture_source_mat_id, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_pathogenicity = Slot(uri=MIXS['0000027'], name="agriculture_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=TEMP.agriculture_pathogenicity, domain=Agriculture, range=Optional[str])

slots.agriculture_biotic_relationship = Slot(uri=MIXS['0000028'], name="agriculture_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=TEMP.agriculture_biotic_relationship, domain=Agriculture, range=Optional[str])

slots.agriculture_specific_host = Slot(uri=MIXS['0000029'], name="agriculture_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=TEMP.agriculture_specific_host, domain=Agriculture, range=Optional[str])

slots.agriculture_host_spec_range = Slot(uri=MIXS['0000030'], name="agriculture_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=TEMP.agriculture_host_spec_range, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_host_disease_stat = Slot(uri=MIXS['0000031'], name="agriculture_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.agriculture_host_disease_stat, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_trophic_level = Slot(uri=MIXS['0000032'], name="agriculture_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=TEMP.agriculture_trophic_level, domain=Agriculture, range=Optional[str])

slots.agriculture_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="agriculture_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.agriculture_nucl_acid_ext, domain=Agriculture, range=Optional[str])

slots.agriculture_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="agriculture_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=TEMP.agriculture_nucl_acid_amp, domain=Agriculture, range=Optional[str])

slots.agriculture_lib_size = Slot(uri=MIXS['0000039'], name="agriculture_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=TEMP.agriculture_lib_size, domain=Agriculture, range=Optional[str])

slots.agriculture_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="agriculture_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=TEMP.agriculture_lib_reads_seqd, domain=Agriculture, range=Optional[str])

slots.agriculture_lib_layout = Slot(uri=MIXS['0000041'], name="agriculture_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=TEMP.agriculture_lib_layout, domain=Agriculture, range=Optional[str])

slots.agriculture_lib_vector = Slot(uri=MIXS['0000042'], name="agriculture_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=TEMP.agriculture_lib_vector, domain=Agriculture, range=Optional[str])

slots.agriculture_lib_screen = Slot(uri=MIXS['0000043'], name="agriculture_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=TEMP.agriculture_lib_screen, domain=Agriculture, range=Optional[str])

slots.agriculture_target_gene = Slot(uri=MIXS['0000044'], name="agriculture_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=TEMP.agriculture_target_gene, domain=Agriculture, range=Optional[str])

slots.agriculture_target_subfragment = Slot(uri=MIXS['0000045'], name="agriculture_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=TEMP.agriculture_target_subfragment, domain=Agriculture, range=Optional[str])

slots.agriculture_pcr_primers = Slot(uri=MIXS['0000046'], name="agriculture_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=TEMP.agriculture_pcr_primers, domain=Agriculture, range=Optional[str])

slots.agriculture_mid = Slot(uri=MIXS['0000047'], name="agriculture_mid", curie=MIXS.curie('0000047'),
                   model_uri=TEMP.agriculture_mid, domain=Agriculture, range=Optional[str])

slots.agriculture_adapters = Slot(uri=MIXS['0000048'], name="agriculture_adapters", curie=MIXS.curie('0000048'),
                   model_uri=TEMP.agriculture_adapters, domain=Agriculture, range=Optional[str])

slots.agriculture_pcr_cond = Slot(uri=MIXS['0000049'], name="agriculture_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=TEMP.agriculture_pcr_cond, domain=Agriculture, range=Optional[str])

slots.agriculture_seq_meth = Slot(uri=MIXS['0000050'], name="agriculture_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.agriculture_seq_meth, domain=Agriculture, range=Optional[str])

slots.agriculture_seq_quality_check = Slot(uri=MIXS['0000051'], name="agriculture_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=TEMP.agriculture_seq_quality_check, domain=Agriculture, range=Optional[str])

slots.agriculture_chimera_check = Slot(uri=MIXS['0000052'], name="agriculture_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=TEMP.agriculture_chimera_check, domain=Agriculture, range=Optional[str])

slots.agriculture_assembly_software = Slot(uri=MIXS['0000056'], name="agriculture_assembly_software", curie=MIXS.curie('0000056'),
                   model_uri=TEMP.agriculture_assembly_software, domain=Agriculture, range=Optional[str])

slots.agriculture_assembly_name = Slot(uri=MIXS['0000057'], name="agriculture_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=TEMP.agriculture_assembly_name, domain=Agriculture, range=Optional[str])

slots.agriculture_assembly_quality = Slot(uri=MIXS['0000058'], name="agriculture_assembly_quality", curie=MIXS.curie('0000058'),
                   model_uri=TEMP.agriculture_assembly_quality, domain=Agriculture, range=Optional[str])

slots.agriculture_annot = Slot(uri=MIXS['0000059'], name="agriculture_annot", curie=MIXS.curie('0000059'),
                   model_uri=TEMP.agriculture_annot, domain=Agriculture, range=Optional[str])

slots.agriculture_sop = Slot(uri=MIXS['0000090'], name="agriculture_sop", curie=MIXS.curie('0000090'),
                   model_uri=TEMP.agriculture_sop, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_url = Slot(uri=MIXS['0000091'], name="agriculture_url", curie=MIXS.curie('0000091'),
                   model_uri=TEMP.agriculture_url, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_elev = Slot(uri=MIXS['0000093'], name="agriculture_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.agriculture_elev, domain=Agriculture, range=Optional[str])

slots.agriculture_humidity = Slot(uri=MIXS['0000100'], name="agriculture_humidity", curie=MIXS.curie('0000100'),
                   model_uri=TEMP.agriculture_humidity, domain=Agriculture, range=Optional[str])

slots.agriculture_organism_count = Slot(uri=MIXS['0000103'], name="agriculture_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.agriculture_organism_count, domain=Agriculture, range=Optional[str])

slots.agriculture_samp_stor_temp = Slot(uri=MIXS['0000110'], name="agriculture_samp_stor_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.agriculture_samp_stor_temp, domain=Agriculture, range=Optional[str])

slots.agriculture_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="agriculture_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.agriculture_samp_vol_we_dna_ext, domain=Agriculture, range=Optional[str])

slots.agriculture_solar_irradiance = Slot(uri=MIXS['0000112'], name="agriculture_solar_irradiance", curie=MIXS.curie('0000112'),
                   model_uri=TEMP.agriculture_solar_irradiance, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_temp = Slot(uri=MIXS['0000113'], name="agriculture_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.agriculture_temp, domain=Agriculture, range=Optional[str])

slots.agriculture_samp_store_dur = Slot(uri=MIXS['0000116'], name="agriculture_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.agriculture_samp_store_dur, domain=Agriculture, range=Optional[str])

slots.agriculture_porosity = Slot(uri=MIXS['0000211'], name="agriculture_porosity", curie=MIXS.curie('0000211'),
                   model_uri=TEMP.agriculture_porosity, domain=Agriculture, range=Optional[str])

slots.agriculture_ances_data = Slot(uri=MIXS['0000247'], name="agriculture_ances_data", curie=MIXS.curie('0000247'),
                   model_uri=TEMP.agriculture_ances_data, domain=Agriculture, range=Optional[str])

slots.agriculture_host_common_name = Slot(uri=MIXS['0000248'], name="agriculture_host_common_name", curie=MIXS.curie('0000248'),
                   model_uri=TEMP.agriculture_host_common_name, domain=Agriculture, range=Optional[str])

slots.agriculture_host_taxid = Slot(uri=MIXS['0000250'], name="agriculture_host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=TEMP.agriculture_host_taxid, domain=Agriculture, range=Optional[str])

slots.agriculture_host_life_stage = Slot(uri=MIXS['0000251'], name="agriculture_host_life_stage", curie=MIXS.curie('0000251'),
                   model_uri=TEMP.agriculture_host_life_stage, domain=Agriculture, range=Optional[str])

slots.agriculture_host_age = Slot(uri=MIXS['0000255'], name="agriculture_host_age", curie=MIXS.curie('0000255'),
                   model_uri=TEMP.agriculture_host_age, domain=Agriculture, range=Optional[str])

slots.agriculture_host_length = Slot(uri=MIXS['0000256'], name="agriculture_host_length", curie=MIXS.curie('0000256'),
                   model_uri=TEMP.agriculture_host_length, domain=Agriculture, range=Optional[str])

slots.agriculture_host_dry_mass = Slot(uri=MIXS['0000257'], name="agriculture_host_dry_mass", curie=MIXS.curie('0000257'),
                   model_uri=TEMP.agriculture_host_dry_mass, domain=Agriculture, range=Optional[str])

slots.agriculture_host_tot_mass = Slot(uri=MIXS['0000263'], name="agriculture_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=TEMP.agriculture_host_tot_mass, domain=Agriculture, range=Optional[str])

slots.agriculture_host_height = Slot(uri=MIXS['0000264'], name="agriculture_host_height", curie=MIXS.curie('0000264'),
                   model_uri=TEMP.agriculture_host_height, domain=Agriculture, range=Optional[str])

slots.agriculture_cur_vegetation = Slot(uri=MIXS['0000312'], name="agriculture_cur_vegetation", curie=MIXS.curie('0000312'),
                   model_uri=TEMP.agriculture_cur_vegetation, domain=Agriculture, range=Optional[str])

slots.agriculture_cur_vegetation_meth = Slot(uri=MIXS['0000314'], name="agriculture_cur_vegetation_meth", curie=MIXS.curie('0000314'),
                   model_uri=TEMP.agriculture_cur_vegetation_meth, domain=Agriculture, range=Optional[str])

slots.agriculture_previous_land_use = Slot(uri=MIXS['0000315'], name="agriculture_previous_land_use", curie=MIXS.curie('0000315'),
                   model_uri=TEMP.agriculture_previous_land_use, domain=Agriculture, range=Optional[str])

slots.agriculture_previous_land_use_meth = Slot(uri=MIXS['0000316'], name="agriculture_previous_land_use_meth", curie=MIXS.curie('0000316'),
                   model_uri=TEMP.agriculture_previous_land_use_meth, domain=Agriculture, range=Optional[str])

slots.agriculture_crop_rotation = Slot(uri=MIXS['0000318'], name="agriculture_crop_rotation", curie=MIXS.curie('0000318'),
                   model_uri=TEMP.agriculture_crop_rotation, domain=Agriculture, range=Optional[str])

slots.agriculture_flooding = Slot(uri=MIXS['0000319'], name="agriculture_flooding", curie=MIXS.curie('0000319'),
                   model_uri=TEMP.agriculture_flooding, domain=Agriculture, range=Optional[str])

slots.agriculture_extreme_event = Slot(uri=MIXS['0000320'], name="agriculture_extreme_event", curie=MIXS.curie('0000320'),
                   model_uri=TEMP.agriculture_extreme_event, domain=Agriculture, range=Optional[str])

slots.agriculture_horizon_meth = Slot(uri=MIXS['0000321'], name="agriculture_horizon_meth", curie=MIXS.curie('0000321'),
                   model_uri=TEMP.agriculture_horizon_meth, domain=Agriculture, range=Optional[str])

slots.agriculture_sieving = Slot(uri=MIXS['0000322'], name="agriculture_sieving", curie=MIXS.curie('0000322'),
                   model_uri=TEMP.agriculture_sieving, domain=Agriculture, range=Optional[str])

slots.agriculture_pool_dna_extracts = Slot(uri=MIXS['0000325'], name="agriculture_pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=TEMP.agriculture_pool_dna_extracts, domain=Agriculture, range=Optional[str])

slots.agriculture_store_cond = Slot(uri=MIXS['0000327'], name="agriculture_store_cond", curie=MIXS.curie('0000327'),
                   model_uri=TEMP.agriculture_store_cond, domain=Agriculture, range=Optional[str])

slots.agriculture_link_climate_info = Slot(uri=MIXS['0000328'], name="agriculture_link_climate_info", curie=MIXS.curie('0000328'),
                   model_uri=TEMP.agriculture_link_climate_info, domain=Agriculture, range=Optional[str])

slots.agriculture_link_class_info = Slot(uri=MIXS['0000329'], name="agriculture_link_class_info", curie=MIXS.curie('0000329'),
                   model_uri=TEMP.agriculture_link_class_info, domain=Agriculture, range=Optional[str])

slots.agriculture_local_class = Slot(uri=MIXS['0000330'], name="agriculture_local_class", curie=MIXS.curie('0000330'),
                   model_uri=TEMP.agriculture_local_class, domain=Agriculture, range=Optional[str])

slots.agriculture_local_class_meth = Slot(uri=MIXS['0000331'], name="agriculture_local_class_meth", curie=MIXS.curie('0000331'),
                   model_uri=TEMP.agriculture_local_class_meth, domain=Agriculture, range=Optional[str])

slots.agriculture_soil_type = Slot(uri=MIXS['0000332'], name="agriculture_soil_type", curie=MIXS.curie('0000332'),
                   model_uri=TEMP.agriculture_soil_type, domain=Agriculture, range=Optional[str])

slots.agriculture_soil_type_meth = Slot(uri=MIXS['0000334'], name="agriculture_soil_type_meth", curie=MIXS.curie('0000334'),
                   model_uri=TEMP.agriculture_soil_type_meth, domain=Agriculture, range=Optional[str])

slots.agriculture_texture = Slot(uri=MIXS['0000335'], name="agriculture_texture", curie=MIXS.curie('0000335'),
                   model_uri=TEMP.agriculture_texture, domain=Agriculture, range=Optional[str])

slots.agriculture_texture_meth = Slot(uri=MIXS['0000336'], name="agriculture_texture_meth", curie=MIXS.curie('0000336'),
                   model_uri=TEMP.agriculture_texture_meth, domain=Agriculture, range=Optional[str])

slots.agriculture_tot_org_c_meth = Slot(uri=MIXS['0000337'], name="agriculture_tot_org_c_meth", curie=MIXS.curie('0000337'),
                   model_uri=TEMP.agriculture_tot_org_c_meth, domain=Agriculture, range=Optional[str])

slots.agriculture_tot_n_meth = Slot(uri=MIXS['0000338'], name="agriculture_tot_n_meth", curie=MIXS.curie('0000338'),
                   model_uri=TEMP.agriculture_tot_n_meth, domain=Agriculture, range=Optional[str])

slots.agriculture_microbial_biomass_meth = Slot(uri=MIXS['0000339'], name="agriculture_microbial_biomass_meth", curie=MIXS.curie('0000339'),
                   model_uri=TEMP.agriculture_microbial_biomass_meth, domain=Agriculture, range=Optional[str])

slots.agriculture_heavy_metals_meth = Slot(uri=MIXS['0000343'], name="agriculture_heavy_metals_meth", curie=MIXS.curie('0000343'),
                   model_uri=TEMP.agriculture_heavy_metals_meth, domain=Agriculture, range=Optional[str])

slots.agriculture_host_genotype = Slot(uri=MIXS['0000365'], name="agriculture_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=TEMP.agriculture_host_genotype, domain=Agriculture, range=Optional[str])

slots.agriculture_tot_car = Slot(uri=MIXS['0000525'], name="agriculture_tot_car", curie=MIXS.curie('0000525'),
                   model_uri=TEMP.agriculture_tot_car, domain=Agriculture, range=Optional[str])

slots.agriculture_tot_nitro = Slot(uri=MIXS['0000530'], name="agriculture_tot_nitro", curie=MIXS.curie('0000530'),
                   model_uri=TEMP.agriculture_tot_nitro, domain=Agriculture, range=Optional[str])

slots.agriculture_tot_org_carb = Slot(uri=MIXS['0000533'], name="agriculture_tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=TEMP.agriculture_tot_org_carb, domain=Agriculture, range=Optional[str])

slots.agriculture_fungicide_regm = Slot(uri=MIXS['0000557'], name="agriculture_fungicide_regm", curie=MIXS.curie('0000557'),
                   model_uri=TEMP.agriculture_fungicide_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_gaseous_environment = Slot(uri=MIXS['0000558'], name="agriculture_gaseous_environment", curie=MIXS.curie('0000558'),
                   model_uri=TEMP.agriculture_gaseous_environment, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_herbicide_regm = Slot(uri=MIXS['0000561'], name="agriculture_herbicide_regm", curie=MIXS.curie('0000561'),
                   model_uri=TEMP.agriculture_herbicide_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_non_mineral_nutr_regm = Slot(uri=MIXS['0000571'], name="agriculture_non_mineral_nutr_regm", curie=MIXS.curie('0000571'),
                   model_uri=TEMP.agriculture_non_mineral_nutr_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_pesticide_regm = Slot(uri=MIXS['0000573'], name="agriculture_pesticide_regm", curie=MIXS.curie('0000573'),
                   model_uri=TEMP.agriculture_pesticide_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_root_med_carbon = Slot(uri=MIXS['0000577'], name="agriculture_root_med_carbon", curie=MIXS.curie('0000577'),
                   model_uri=TEMP.agriculture_root_med_carbon, domain=Agriculture, range=Optional[str])

slots.agriculture_root_med_macronutr = Slot(uri=MIXS['0000578'], name="agriculture_root_med_macronutr", curie=MIXS.curie('0000578'),
                   model_uri=TEMP.agriculture_root_med_macronutr, domain=Agriculture, range=Optional[str])

slots.agriculture_salt_regm = Slot(uri=MIXS['0000582'], name="agriculture_salt_regm", curie=MIXS.curie('0000582'),
                   model_uri=TEMP.agriculture_salt_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_water_temp_regm = Slot(uri=MIXS['0000590'], name="agriculture_water_temp_regm", curie=MIXS.curie('0000590'),
                   model_uri=TEMP.agriculture_water_temp_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_watering_regm = Slot(uri=MIXS['0000591'], name="agriculture_watering_regm", curie=MIXS.curie('0000591'),
                   model_uri=TEMP.agriculture_watering_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_agrochem_addition = Slot(uri=MIXS['0000639'], name="agriculture_agrochem_addition", curie=MIXS.curie('0000639'),
                   model_uri=TEMP.agriculture_agrochem_addition, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_annual_temp = Slot(uri=MIXS['0000642'], name="agriculture_annual_temp", curie=MIXS.curie('0000642'),
                   model_uri=TEMP.agriculture_annual_temp, domain=Agriculture, range=Optional[str])

slots.agriculture_season_temp = Slot(uri=MIXS['0000643'], name="agriculture_season_temp", curie=MIXS.curie('0000643'),
                   model_uri=TEMP.agriculture_season_temp, domain=Agriculture, range=Optional[str])

slots.agriculture_annual_precpt = Slot(uri=MIXS['0000644'], name="agriculture_annual_precpt", curie=MIXS.curie('0000644'),
                   model_uri=TEMP.agriculture_annual_precpt, domain=Agriculture, range=Optional[str])

slots.agriculture_season_precpt = Slot(uri=MIXS['0000645'], name="agriculture_season_precpt", curie=MIXS.curie('0000645'),
                   model_uri=TEMP.agriculture_season_precpt, domain=Agriculture, range=Optional[str])

slots.agriculture_slope_gradient = Slot(uri=MIXS['0000646'], name="agriculture_slope_gradient", curie=MIXS.curie('0000646'),
                   model_uri=TEMP.agriculture_slope_gradient, domain=Agriculture, range=Optional[str])

slots.agriculture_slope_aspect = Slot(uri=MIXS['0000647'], name="agriculture_slope_aspect", curie=MIXS.curie('0000647'),
                   model_uri=TEMP.agriculture_slope_aspect, domain=Agriculture, range=Optional[str])

slots.agriculture_microbial_biomass = Slot(uri=MIXS['0000650'], name="agriculture_microbial_biomass", curie=MIXS.curie('0000650'),
                   model_uri=TEMP.agriculture_microbial_biomass, domain=Agriculture, range=Optional[str])

slots.agriculture_tot_phos = Slot(uri=MIXS['0000689'], name="agriculture_tot_phos", curie=MIXS.curie('0000689'),
                   model_uri=TEMP.agriculture_tot_phos, domain=Agriculture, range=Optional[str])

slots.agriculture_size_frac_low = Slot(uri=MIXS['0000735'], name="agriculture_size_frac_low", curie=MIXS.curie('0000735'),
                   model_uri=TEMP.agriculture_size_frac_low, domain=Agriculture, range=Optional[str])

slots.agriculture_size_frac_up = Slot(uri=MIXS['0000736'], name="agriculture_size_frac_up", curie=MIXS.curie('0000736'),
                   model_uri=TEMP.agriculture_size_frac_up, domain=Agriculture, range=Optional[str])

slots.agriculture_chem_administration = Slot(uri=MIXS['0000751'], name="agriculture_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=TEMP.agriculture_chem_administration, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_misc_param = Slot(uri=MIXS['0000752'], name="agriculture_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.agriculture_misc_param, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="agriculture_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.agriculture_oxy_stat_samp, domain=Agriculture, range=Optional[str])

slots.agriculture_perturbation = Slot(uri=MIXS['0000754'], name="agriculture_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.agriculture_perturbation, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_samp_store_loc = Slot(uri=MIXS['0000755'], name="agriculture_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.agriculture_samp_store_loc, domain=Agriculture, range=Optional[str])

slots.agriculture_pres_animal_insect = Slot(uri=MIXS['0000819'], name="agriculture_pres_animal_insect", curie=MIXS.curie('0000819'),
                   model_uri=TEMP.agriculture_pres_animal_insect, domain=Agriculture, range=Optional[str])

slots.agriculture_season = Slot(uri=MIXS['0000829'], name="agriculture_season", curie=MIXS.curie('0000829'),
                   model_uri=TEMP.agriculture_season, domain=Agriculture, range=Optional[str])

slots.agriculture_genetic_mod = Slot(uri=MIXS['0000859'], name="agriculture_genetic_mod", curie=MIXS.curie('0000859'),
                   model_uri=TEMP.agriculture_genetic_mod, domain=Agriculture, range=Optional[str])

slots.agriculture_host_phenotype = Slot(uri=MIXS['0000874'], name="agriculture_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=TEMP.agriculture_host_phenotype, domain=Agriculture, range=Optional[str])

slots.agriculture_climate_environment = Slot(uri=MIXS['0001040'], name="agriculture_climate_environment", curie=MIXS.curie('0001040'),
                   model_uri=TEMP.agriculture_climate_environment, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_ph_regm = Slot(uri=MIXS['0001056'], name="agriculture_ph_regm", curie=MIXS.curie('0001056'),
                   model_uri=TEMP.agriculture_ph_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_plant_growth_med = Slot(uri=MIXS['0001057'], name="agriculture_plant_growth_med", curie=MIXS.curie('0001057'),
                   model_uri=TEMP.agriculture_plant_growth_med, domain=Agriculture, range=Optional[str])

slots.agriculture_plant_product = Slot(uri=MIXS['0001058'], name="agriculture_plant_product", curie=MIXS.curie('0001058'),
                   model_uri=TEMP.agriculture_plant_product, domain=Agriculture, range=Optional[str])

slots.agriculture_plant_struc = Slot(uri=MIXS['0001060'], name="agriculture_plant_struc", curie=MIXS.curie('0001060'),
                   model_uri=TEMP.agriculture_plant_struc, domain=Agriculture, range=Optional[str])

slots.agriculture_root_med_ph = Slot(uri=MIXS['0001062'], name="agriculture_root_med_ph", curie=MIXS.curie('0001062'),
                   model_uri=TEMP.agriculture_root_med_ph, domain=Agriculture, range=Optional[str])

slots.agriculture_season_environment = Slot(uri=MIXS['0001068'], name="agriculture_season_environment", curie=MIXS.curie('0001068'),
                   model_uri=TEMP.agriculture_season_environment, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_standing_water_regm = Slot(uri=MIXS['0001069'], name="agriculture_standing_water_regm", curie=MIXS.curie('0001069'),
                   model_uri=TEMP.agriculture_standing_water_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_cur_land_use = Slot(uri=MIXS['0001080'], name="agriculture_cur_land_use", curie=MIXS.curie('0001080'),
                   model_uri=TEMP.agriculture_cur_land_use, domain=Agriculture, range=Optional[str])

slots.agriculture_tillage = Slot(uri=MIXS['0001081'], name="agriculture_tillage", curie=MIXS.curie('0001081'),
                   model_uri=TEMP.agriculture_tillage, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_horizon = Slot(uri=MIXS['0001082'], name="agriculture_horizon", curie=MIXS.curie('0001082'),
                   model_uri=TEMP.agriculture_horizon, domain=Agriculture, range=Optional[str])

slots.agriculture_fao_class = Slot(uri=MIXS['0001083'], name="agriculture_fao_class", curie=MIXS.curie('0001083'),
                   model_uri=TEMP.agriculture_fao_class, domain=Agriculture, range=Optional[str])

slots.agriculture_profile_position = Slot(uri=MIXS['0001084'], name="agriculture_profile_position", curie=MIXS.curie('0001084'),
                   model_uri=TEMP.agriculture_profile_position, domain=Agriculture, range=Optional[str])

slots.agriculture_drainage_class = Slot(uri=MIXS['0001085'], name="agriculture_drainage_class", curie=MIXS.curie('0001085'),
                   model_uri=TEMP.agriculture_drainage_class, domain=Agriculture, range=Optional[str])

slots.agriculture_fire = Slot(uri=MIXS['0001086'], name="agriculture_fire", curie=MIXS.curie('0001086'),
                   model_uri=TEMP.agriculture_fire, domain=Agriculture, range=Optional[str])

slots.agriculture_ph_meth = Slot(uri=MIXS['0001106'], name="agriculture_ph_meth", curie=MIXS.curie('0001106'),
                   model_uri=TEMP.agriculture_ph_meth, domain=Agriculture, range=Optional[str])

slots.agriculture_farm_water_source = Slot(uri=MIXS['0001110'], name="agriculture_farm_water_source", curie=MIXS.curie('0001110'),
                   model_uri=TEMP.agriculture_farm_water_source, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_plant_water_method = Slot(uri=MIXS['0001111'], name="agriculture_plant_water_method", curie=MIXS.curie('0001111'),
                   model_uri=TEMP.agriculture_plant_water_method, domain=Agriculture, range=Optional[str])

slots.agriculture_anim_water_method = Slot(uri=MIXS['0001115'], name="agriculture_anim_water_method", curie=MIXS.curie('0001115'),
                   model_uri=TEMP.agriculture_anim_water_method, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_crop_yield = Slot(uri=MIXS['0001116'], name="agriculture_crop_yield", curie=MIXS.curie('0001116'),
                   model_uri=TEMP.agriculture_crop_yield, domain=Agriculture, range=Optional[str])

slots.agriculture_adjacent_environment = Slot(uri=MIXS['0001121'], name="agriculture_adjacent_environment", curie=MIXS.curie('0001121'),
                   model_uri=TEMP.agriculture_adjacent_environment, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_farm_equip_shared = Slot(uri=MIXS['0001123'], name="agriculture_farm_equip_shared", curie=MIXS.curie('0001123'),
                   model_uri=TEMP.agriculture_farm_equip_shared, domain=Agriculture, range=Optional[str])

slots.agriculture_farm_equip_san = Slot(uri=MIXS['0001124'], name="agriculture_farm_equip_san", curie=MIXS.curie('0001124'),
                   model_uri=TEMP.agriculture_farm_equip_san, domain=Agriculture, range=Optional[str])

slots.agriculture_farm_equip = Slot(uri=MIXS['0001126'], name="agriculture_farm_equip", curie=MIXS.curie('0001126'),
                   model_uri=TEMP.agriculture_farm_equip, domain=Agriculture, range=Optional[str])

slots.agriculture_fertilizer_admin = Slot(uri=MIXS['0001127'], name="agriculture_fertilizer_admin", curie=MIXS.curie('0001127'),
                   model_uri=TEMP.agriculture_fertilizer_admin, domain=Agriculture, range=Optional[str])

slots.agriculture_food_harvest_proc = Slot(uri=MIXS['0001133'], name="agriculture_food_harvest_proc", curie=MIXS.curie('0001133'),
                   model_uri=TEMP.agriculture_food_harvest_proc, domain=Agriculture, range=Optional[str])

slots.agriculture_food_trav_mode = Slot(uri=MIXS['0001137'], name="agriculture_food_trav_mode", curie=MIXS.curie('0001137'),
                   model_uri=TEMP.agriculture_food_trav_mode, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_food_trav_vehic = Slot(uri=MIXS['0001138'], name="agriculture_food_trav_vehic", curie=MIXS.curie('0001138'),
                   model_uri=TEMP.agriculture_food_trav_vehic, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_Food_source = Slot(uri=MIXS['0001139'], name="agriculture_Food_source", curie=MIXS.curie('0001139'),
                   model_uri=TEMP.agriculture_Food_source, domain=Agriculture, range=Optional[str])

slots.agriculture_library_prep_kit = Slot(uri=MIXS['0001145'], name="agriculture_library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=TEMP.agriculture_library_prep_kit, domain=Agriculture, range=Optional[str])

slots.agriculture_lot_number = Slot(uri=MIXS['0001147'], name="agriculture_lot_number", curie=MIXS.curie('0001147'),
                   model_uri=TEMP.agriculture_lot_number, domain=Agriculture, range=Optional[str])

slots.agriculture_season_humidity = Slot(uri=MIXS['0001148'], name="agriculture_season_humidity", curie=MIXS.curie('0001148'),
                   model_uri=TEMP.agriculture_season_humidity, domain=Agriculture, range=Optional[str])

slots.agriculture_samp_pooling = Slot(uri=MIXS['0001153'], name="agriculture_samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=TEMP.agriculture_samp_pooling, domain=Agriculture, range=Optional[str])

slots.agriculture_sequencing_location = Slot(uri=MIXS['0001156'], name="agriculture_sequencing_location", curie=MIXS.curie('0001156'),
                   model_uri=TEMP.agriculture_sequencing_location, domain=Agriculture, range=Optional[str])

slots.agriculture_soil_conductivity = Slot(uri=MIXS['0001158'], name="agriculture_soil_conductivity", curie=MIXS.curie('0001158'),
                   model_uri=TEMP.agriculture_soil_conductivity, domain=Agriculture, range=Optional[str])

slots.agriculture_soil_cover = Slot(uri=MIXS['0001159'], name="agriculture_soil_cover", curie=MIXS.curie('0001159'),
                   model_uri=TEMP.agriculture_soil_cover, domain=Agriculture, range=Optional[str])

slots.agriculture_soil_pH = Slot(uri=MIXS['0001160'], name="agriculture_soil_pH", curie=MIXS.curie('0001160'),
                   model_uri=TEMP.agriculture_soil_pH, domain=Agriculture, range=Optional[str])

slots.agriculture_rel_location = Slot(uri=MIXS['0001161'], name="agriculture_rel_location", curie=MIXS.curie('0001161'),
                   model_uri=TEMP.agriculture_rel_location, domain=Agriculture, range=Optional[str])

slots.agriculture_soil_temp = Slot(uri=MIXS['0001163'], name="agriculture_soil_temp", curie=MIXS.curie('0001163'),
                   model_uri=TEMP.agriculture_soil_temp, domain=Agriculture, range=Optional[str])

slots.agriculture_spikein_strain = Slot(uri=MIXS['0001170'], name="agriculture_spikein_strain", curie=MIXS.curie('0001170'),
                   model_uri=TEMP.agriculture_spikein_strain, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_water_pH = Slot(uri=MIXS['0001175'], name="agriculture_water_pH", curie=MIXS.curie('0001175'),
                   model_uri=TEMP.agriculture_water_pH, domain=Agriculture, range=Optional[str])

slots.agriculture_water_source_shared = Slot(uri=MIXS['0001176'], name="agriculture_water_source_shared", curie=MIXS.curie('0001176'),
                   model_uri=TEMP.agriculture_water_source_shared, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_enrichment_protocol = Slot(uri=MIXS['0001177'], name="agriculture_enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=TEMP.agriculture_enrichment_protocol, domain=Agriculture, range=Optional[str])

slots.agriculture_cult_isol_date = Slot(uri=MIXS['0001181'], name="agriculture_cult_isol_date", curie=MIXS.curie('0001181'),
                   model_uri=TEMP.agriculture_cult_isol_date, domain=Agriculture, range=Optional[str])

slots.agriculture_Food_Product_type = Slot(uri=MIXS['0001184'], name="agriculture_Food_Product_type", curie=MIXS.curie('0001184'),
                   model_uri=TEMP.agriculture_Food_Product_type, domain=Agriculture, range=Optional[str])

slots.agriculture_food_prod = Slot(uri=MIXS['0001211'], name="agriculture_food_prod", curie=MIXS.curie('0001211'),
                   model_uri=TEMP.agriculture_food_prod, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_samp_collect_method = Slot(uri=MIXS['0001225'], name="agriculture_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=TEMP.agriculture_samp_collect_method, domain=Agriculture, range=Optional[str])

slots.agriculture_soil_horizon = Slot(uri=MIXS['0001291'], name="agriculture_soil_horizon", curie=MIXS.curie('0001291'),
                   model_uri=TEMP.agriculture_soil_horizon, domain=Agriculture, range=Optional[str])

slots.agriculture_photosynt_activ = Slot(uri=MIXS['0001296'], name="agriculture_photosynt_activ", curie=MIXS.curie('0001296'),
                   model_uri=TEMP.agriculture_photosynt_activ, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_host_symbiont = Slot(uri=MIXS['0001309'], name="agriculture_host_symbiont", curie=MIXS.curie('0001309'),
                   model_uri=TEMP.agriculture_host_symbiont, domain=Agriculture, range=Optional[str])

slots.agriculture_host_subspecf_genlin = Slot(uri=MIXS['0001318'], name="agriculture_host_subspecf_genlin", curie=MIXS.curie('0001318'),
                   model_uri=TEMP.agriculture_host_subspecf_genlin, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.agriculture_photosynt_activ_meth = Slot(uri=MIXS['0001336'], name="agriculture_photosynt_activ_meth", curie=MIXS.curie('0001336'),
                   model_uri=TEMP.agriculture_photosynt_activ_meth, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_samp_size = Slot(uri=MIXS['0000001'], name="food_animal_and_animal_feed_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_size, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_samp_collect_device = Slot(uri=MIXS['0000002'], name="food_animal_and_animal_feed_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_collect_device, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_experimental_factor = Slot(uri=MIXS['0000008'], name="food_animal_and_animal_feed_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=TEMP.food_animal_and_animal_feed_experimental_factor, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_lat_lon = Slot(uri=MIXS['0000009'], name="food_animal_and_animal_feed_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.food_animal_and_animal_feed_lat_lon, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_geo_loc_name = Slot(uri=MIXS['0000010'], name="food_animal_and_animal_feed_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.food_animal_and_animal_feed_geo_loc_name, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_collection_date = Slot(uri=MIXS['0000011'], name="food_animal_and_animal_feed_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.food_animal_and_animal_feed_collection_date, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_env_broad_scale = Slot(uri=MIXS['0000012'], name="food_animal_and_animal_feed_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.food_animal_and_animal_feed_env_broad_scale, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_env_local_scale = Slot(uri=MIXS['0000013'], name="food_animal_and_animal_feed_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.food_animal_and_animal_feed_env_local_scale, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_env_medium = Slot(uri=MIXS['0000014'], name="food_animal_and_animal_feed_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.food_animal_and_animal_feed_env_medium, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="food_animal_and_animal_feed_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.food_animal_and_animal_feed_nucl_acid_ext, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_seq_meth = Slot(uri=MIXS['0000050'], name="food_animal_and_animal_feed_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.food_animal_and_animal_feed_seq_meth, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_project_name = Slot(uri=MIXS['0000092'], name="food_animal_and_animal_feed_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.food_animal_and_animal_feed_project_name, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_organism_count = Slot(uri=MIXS['0000103'], name="food_animal_and_animal_feed_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.food_animal_and_animal_feed_organism_count, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_spikein_count = Slot(uri=MIXS['0000103'], name="food_animal_and_animal_feed_spikein_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.food_animal_and_animal_feed_spikein_count, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_samp_stor_temp = Slot(uri=MIXS['0000110'], name="food_animal_and_animal_feed_samp_stor_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_stor_temp, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="food_animal_and_animal_feed_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_vol_we_dna_ext, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_temp = Slot(uri=MIXS['0000113'], name="food_animal_and_animal_feed_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.food_animal_and_animal_feed_temp, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_samp_stor_dur = Slot(uri=MIXS['0000116'], name="food_animal_and_animal_feed_samp_stor_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_stor_dur, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_pool_dna_extracts = Slot(uri=MIXS['0000325'], name="food_animal_and_animal_feed_pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=TEMP.food_animal_and_animal_feed_pool_dna_extracts, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_misc_param = Slot(uri=MIXS['0000752'], name="food_animal_and_animal_feed_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.food_animal_and_animal_feed_misc_param, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_perturbation = Slot(uri=MIXS['0000754'], name="food_animal_and_animal_feed_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.food_animal_and_animal_feed_perturbation, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_samp_stor_loc = Slot(uri=MIXS['0000755'], name="food_animal_and_animal_feed_samp_stor_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_stor_loc, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_samp_name = Slot(uri=MIXS['0001107'], name="food_animal_and_animal_feed_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_name, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_animal_feed_equip = Slot(uri=MIXS['0001113'], name="food_animal_and_animal_feed_animal_feed_equip", curie=MIXS.curie('0001113'),
                   model_uri=TEMP.food_animal_and_animal_feed_animal_feed_equip, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_cult_result = Slot(uri=MIXS['0001117'], name="food_animal_and_animal_feed_cult_result", curie=MIXS.curie('0001117'),
                   model_uri=TEMP.food_animal_and_animal_feed_cult_result, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_cult_result_org = Slot(uri=MIXS['0001118'], name="food_animal_and_animal_feed_cult_result_org", curie=MIXS.curie('0001118'),
                   model_uri=TEMP.food_animal_and_animal_feed_cult_result_org, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_cult_target = Slot(uri=MIXS['0001119'], name="food_animal_and_animal_feed_cult_target", curie=MIXS.curie('0001119'),
                   model_uri=TEMP.food_animal_and_animal_feed_cult_target, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_animal_group_size = Slot(uri=MIXS['0001129'], name="food_animal_and_animal_feed_animal_group_size", curie=MIXS.curie('0001129'),
                   model_uri=TEMP.food_animal_and_animal_feed_animal_group_size, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_animal_diet = Slot(uri=MIXS['0001130'], name="food_animal_and_animal_feed_animal_diet", curie=MIXS.curie('0001130'),
                   model_uri=TEMP.food_animal_and_animal_feed_animal_diet, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_food_contact_surf = Slot(uri=MIXS['0001131'], name="food_animal_and_animal_feed_food_contact_surf", curie=MIXS.curie('0001131'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_contact_surf, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_food_contain_wrap = Slot(uri=MIXS['0001132'], name="food_animal_and_animal_feed_food_contain_wrap", curie=MIXS.curie('0001132'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_contain_wrap, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_food_pack_medium = Slot(uri=MIXS['0001134'], name="food_animal_and_animal_feed_food_pack_medium", curie=MIXS.curie('0001134'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_pack_medium, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_food_preserv_proc = Slot(uri=MIXS['0001135'], name="food_animal_and_animal_feed_food_preserv_proc", curie=MIXS.curie('0001135'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_preserv_proc, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_food_trav_mode = Slot(uri=MIXS['0001137'], name="food_animal_and_animal_feed_food_trav_mode", curie=MIXS.curie('0001137'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_trav_mode, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_food_trav_vehic = Slot(uri=MIXS['0001138'], name="food_animal_and_animal_feed_food_trav_vehic", curie=MIXS.curie('0001138'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_trav_vehic, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_food_source = Slot(uri=MIXS['0001139'], name="food_animal_and_animal_feed_food_source", curie=MIXS.curie('0001139'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_source, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_food_treat_proc = Slot(uri=MIXS['0001140'], name="food_animal_and_animal_feed_food_treat_proc", curie=MIXS.curie('0001140'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_treat_proc, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_intended_consumer = Slot(uri=MIXS['0001144'], name="food_animal_and_animal_feed_intended_consumer", curie=MIXS.curie('0001144'),
                   model_uri=TEMP.food_animal_and_animal_feed_intended_consumer, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_library_prep_kit = Slot(uri=MIXS['0001145'], name="food_animal_and_animal_feed_library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=TEMP.food_animal_and_animal_feed_library_prep_kit, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_lot_number = Slot(uri=MIXS['0001147'], name="food_animal_and_animal_feed_lot_number", curie=MIXS.curie('0001147'),
                   model_uri=TEMP.food_animal_and_animal_feed_lot_number, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_part_plant_animal = Slot(uri=MIXS['0001149'], name="food_animal_and_animal_feed_part_plant_animal", curie=MIXS.curie('0001149'),
                   model_uri=TEMP.food_animal_and_animal_feed_part_plant_animal, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_samp_purpose = Slot(uri=MIXS['0001151'], name="food_animal_and_animal_feed_samp_purpose", curie=MIXS.curie('0001151'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_purpose, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_repository_name = Slot(uri=MIXS['0001152'], name="food_animal_and_animal_feed_repository_name", curie=MIXS.curie('0001152'),
                   model_uri=TEMP.food_animal_and_animal_feed_repository_name, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_samp_pooling = Slot(uri=MIXS['0001153'], name="food_animal_and_animal_feed_samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_pooling, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_samp_source_mat_cat = Slot(uri=MIXS['0001154'], name="food_animal_and_animal_feed_samp_source_mat_cat", curie=MIXS.curie('0001154'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_source_mat_cat, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_sequencing_kit = Slot(uri=MIXS['0001155'], name="food_animal_and_animal_feed_sequencing_kit", curie=MIXS.curie('0001155'),
                   model_uri=TEMP.food_animal_and_animal_feed_sequencing_kit, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_sequencing_location = Slot(uri=MIXS['0001156'], name="food_animal_and_animal_feed_sequencing_location", curie=MIXS.curie('0001156'),
                   model_uri=TEMP.food_animal_and_animal_feed_sequencing_location, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_serovar_or_serotype = Slot(uri=MIXS['0001157'], name="food_animal_and_animal_feed_serovar_or_serotype", curie=MIXS.curie('0001157'),
                   model_uri=TEMP.food_animal_and_animal_feed_serovar_or_serotype, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_spikein_org = Slot(uri=MIXS['0001167'], name="food_animal_and_animal_feed_spikein_org", curie=MIXS.curie('0001167'),
                   model_uri=TEMP.food_animal_and_animal_feed_spikein_org, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_spikein_serovar = Slot(uri=MIXS['0001168'], name="food_animal_and_animal_feed_spikein_serovar", curie=MIXS.curie('0001168'),
                   model_uri=TEMP.food_animal_and_animal_feed_spikein_serovar, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_spikein_growth_med = Slot(uri=MIXS['0001169'], name="food_animal_and_animal_feed_spikein_growth_med", curie=MIXS.curie('0001169'),
                   model_uri=TEMP.food_animal_and_animal_feed_spikein_growth_med, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_spikein_strain = Slot(uri=MIXS['0001170'], name="food_animal_and_animal_feed_spikein_strain", curie=MIXS.curie('0001170'),
                   model_uri=TEMP.food_animal_and_animal_feed_spikein_strain, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_spikein_antibiotic = Slot(uri=MIXS['0001171'], name="food_animal_and_animal_feed_spikein_antibiotic", curie=MIXS.curie('0001171'),
                   model_uri=TEMP.food_animal_and_animal_feed_spikein_antibiotic, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_spikein_metal = Slot(uri=MIXS['0001172'], name="food_animal_and_animal_feed_spikein_metal", curie=MIXS.curie('0001172'),
                   model_uri=TEMP.food_animal_and_animal_feed_spikein_metal, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_timepoint = Slot(uri=MIXS['0001173'], name="food_animal_and_animal_feed_timepoint", curie=MIXS.curie('0001173'),
                   model_uri=TEMP.food_animal_and_animal_feed_timepoint, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_enrichment_protocol = Slot(uri=MIXS['0001177'], name="food_animal_and_animal_feed_enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=TEMP.food_animal_and_animal_feed_enrichment_protocol, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_food_quality_date = Slot(uri=MIXS['0001178'], name="food_animal_and_animal_feed_food_quality_date", curie=MIXS.curie('0001178'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_quality_date, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_IFSAC_category = Slot(uri=MIXS['0001179'], name="food_animal_and_animal_feed_IFSAC_category", curie=MIXS.curie('0001179'),
                   model_uri=TEMP.food_animal_and_animal_feed_IFSAC_category, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_animal_housing = Slot(uri=MIXS['0001180'], name="food_animal_and_animal_feed_animal_housing", curie=MIXS.curie('0001180'),
                   model_uri=TEMP.food_animal_and_animal_feed_animal_housing, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_cult_isol_date = Slot(uri=MIXS['0001181'], name="food_animal_and_animal_feed_cult_isol_date", curie=MIXS.curie('0001181'),
                   model_uri=TEMP.food_animal_and_animal_feed_cult_isol_date, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_coll_site_geo_feat = Slot(uri=MIXS['0001183'], name="food_animal_and_animal_feed_coll_site_geo_feat", curie=MIXS.curie('0001183'),
                   model_uri=TEMP.food_animal_and_animal_feed_coll_site_geo_feat, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_food_product_type = Slot(uri=MIXS['0001184'], name="food_animal_and_animal_feed_food_product_type", curie=MIXS.curie('0001184'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_product_type, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_bacterial_density = Slot(uri=MIXS['0001194'], name="food_animal_and_animal_feed_bacterial_density", curie=MIXS.curie('0001194'),
                   model_uri=TEMP.food_animal_and_animal_feed_bacterial_density, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_cons_food_stor_dur = Slot(uri=MIXS['0001195'], name="food_animal_and_animal_feed_cons_food_stor_dur", curie=MIXS.curie('0001195'),
                   model_uri=TEMP.food_animal_and_animal_feed_cons_food_stor_dur, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_cons_food_stor_temp = Slot(uri=MIXS['0001196'], name="food_animal_and_animal_feed_cons_food_stor_temp", curie=MIXS.curie('0001196'),
                   model_uri=TEMP.food_animal_and_animal_feed_cons_food_stor_temp, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_cons_purch_date = Slot(uri=MIXS['0001197'], name="food_animal_and_animal_feed_cons_purch_date", curie=MIXS.curie('0001197'),
                   model_uri=TEMP.food_animal_and_animal_feed_cons_purch_date, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_cons_qty_purchased = Slot(uri=MIXS['0001198'], name="food_animal_and_animal_feed_cons_qty_purchased", curie=MIXS.curie('0001198'),
                   model_uri=TEMP.food_animal_and_animal_feed_cons_qty_purchased, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_food_additive = Slot(uri=MIXS['0001200'], name="food_animal_and_animal_feed_food_additive", curie=MIXS.curie('0001200'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_additive, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_food_cooking_proc = Slot(uri=MIXS['0001202'], name="food_animal_and_animal_feed_food_cooking_proc", curie=MIXS.curie('0001202'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_cooking_proc, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_food_dis_point = Slot(uri=MIXS['0001203'], name="food_animal_and_animal_feed_food_dis_point", curie=MIXS.curie('0001203'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_dis_point, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_food_dis_point_city = Slot(uri=MIXS['0001204'], name="food_animal_and_animal_feed_food_dis_point_city", curie=MIXS.curie('0001204'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_dis_point_city, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_food_ingredient = Slot(uri=MIXS['0001205'], name="food_animal_and_animal_feed_food_ingredient", curie=MIXS.curie('0001205'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_ingredient, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_food_origin = Slot(uri=MIXS['0001207'], name="food_animal_and_animal_feed_food_origin", curie=MIXS.curie('0001207'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_origin, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_food_pack_capacity = Slot(uri=MIXS['0001208'], name="food_animal_and_animal_feed_food_pack_capacity", curie=MIXS.curie('0001208'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_pack_capacity, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_food_pack_integrity = Slot(uri=MIXS['0001209'], name="food_animal_and_animal_feed_food_pack_integrity", curie=MIXS.curie('0001209'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_pack_integrity, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_food_prior_contact = Slot(uri=MIXS['0001210'], name="food_animal_and_animal_feed_food_prior_contact", curie=MIXS.curie('0001210'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_prior_contact, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_food_prod = Slot(uri=MIXS['0001211'], name="food_animal_and_animal_feed_food_prod", curie=MIXS.curie('0001211'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_prod, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_food_prod_synonym = Slot(uri=MIXS['0001212'], name="food_animal_and_animal_feed_food_prod_synonym", curie=MIXS.curie('0001212'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_prod_synonym, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_food_product_qual = Slot(uri=MIXS['0001213'], name="food_animal_and_animal_feed_food_product_qual", curie=MIXS.curie('0001213'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_product_qual, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_food_trace_list = Slot(uri=MIXS['0001214'], name="food_animal_and_animal_feed_food_trace_list", curie=MIXS.curie('0001214'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_trace_list, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_HACCP_term = Slot(uri=MIXS['0001215'], name="food_animal_and_animal_feed_HACCP_term", curie=MIXS.curie('0001215'),
                   model_uri=TEMP.food_animal_and_animal_feed_HACCP_term, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_microb_cult_med = Slot(uri=MIXS['0001216'], name="food_animal_and_animal_feed_microb_cult_med", curie=MIXS.curie('0001216'),
                   model_uri=TEMP.food_animal_and_animal_feed_microb_cult_med, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_samp_collect_method = Slot(uri=MIXS['0001225'], name="food_animal_and_animal_feed_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_collect_method, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_samp_rep_biol = Slot(uri=MIXS['0001226'], name="food_animal_and_animal_feed_samp_rep_biol", curie=MIXS.curie('0001226'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_rep_biol, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_samp_rep_tech = Slot(uri=MIXS['0001227'], name="food_animal_and_animal_feed_samp_rep_tech", curie=MIXS.curie('0001227'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_rep_tech, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_samp_stor_device = Slot(uri=MIXS['0001228'], name="food_animal_and_animal_feed_samp_stor_device", curie=MIXS.curie('0001228'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_stor_device, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_samp_stor_media = Slot(uri=MIXS['0001229'], name="food_animal_and_animal_feed_samp_stor_media", curie=MIXS.curie('0001229'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_stor_media, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_samp_transport_cont = Slot(uri=MIXS['0001230'], name="food_animal_and_animal_feed_samp_transport_cont", curie=MIXS.curie('0001230'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_transport_cont, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_samp_transport_dur = Slot(uri=MIXS['0001231'], name="food_animal_and_animal_feed_samp_transport_dur", curie=MIXS.curie('0001231'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_transport_dur, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_samp_transport_temp = Slot(uri=MIXS['0001232'], name="food_animal_and_animal_feed_samp_transport_temp", curie=MIXS.curie('0001232'),
                   model_uri=TEMP.food_animal_and_animal_feed_samp_transport_temp, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_spikein_AMR = Slot(uri=MIXS['0001235'], name="food_animal_and_animal_feed_spikein_AMR", curie=MIXS.curie('0001235'),
                   model_uri=TEMP.food_animal_and_animal_feed_spikein_AMR, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_study_design = Slot(uri=MIXS['0001236'], name="food_animal_and_animal_feed_study_design", curie=MIXS.curie('0001236'),
                   model_uri=TEMP.food_animal_and_animal_feed_study_design, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_study_inc_dur = Slot(uri=MIXS['0001237'], name="food_animal_and_animal_feed_study_inc_dur", curie=MIXS.curie('0001237'),
                   model_uri=TEMP.food_animal_and_animal_feed_study_inc_dur, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_study_inc_temp = Slot(uri=MIXS['0001238'], name="food_animal_and_animal_feed_study_inc_temp", curie=MIXS.curie('0001238'),
                   model_uri=TEMP.food_animal_and_animal_feed_study_inc_temp, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_study_timecourse = Slot(uri=MIXS['0001239'], name="food_animal_and_animal_feed_study_timecourse", curie=MIXS.curie('0001239'),
                   model_uri=TEMP.food_animal_and_animal_feed_study_timecourse, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_study_tmnt = Slot(uri=MIXS['0001240'], name="food_animal_and_animal_feed_study_tmnt", curie=MIXS.curie('0001240'),
                   model_uri=TEMP.food_animal_and_animal_feed_study_tmnt, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.food_animal_and_animal_feed_animal_am = Slot(uri=MIXS['0001243'], name="food_animal_and_animal_feed_animal_am", curie=MIXS.curie('0001243'),
                   model_uri=TEMP.food_animal_and_animal_feed_animal_am, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_animal_am_dur = Slot(uri=MIXS['0001244'], name="food_animal_and_animal_feed_animal_am_dur", curie=MIXS.curie('0001244'),
                   model_uri=TEMP.food_animal_and_animal_feed_animal_am_dur, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_animal_am_freq = Slot(uri=MIXS['0001245'], name="food_animal_and_animal_feed_animal_am_freq", curie=MIXS.curie('0001245'),
                   model_uri=TEMP.food_animal_and_animal_feed_animal_am_freq, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_animal_am_route = Slot(uri=MIXS['0001246'], name="food_animal_and_animal_feed_animal_am_route", curie=MIXS.curie('0001246'),
                   model_uri=TEMP.food_animal_and_animal_feed_animal_am_route, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_animal_am_use = Slot(uri=MIXS['0001247'], name="food_animal_and_animal_feed_animal_am_use", curie=MIXS.curie('0001247'),
                   model_uri=TEMP.food_animal_and_animal_feed_animal_am_use, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_animal_body_cond = Slot(uri=MIXS['0001248'], name="food_animal_and_animal_feed_animal_body_cond", curie=MIXS.curie('0001248'),
                   model_uri=TEMP.food_animal_and_animal_feed_animal_body_cond, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_animal_sex = Slot(uri=MIXS['0001249'], name="food_animal_and_animal_feed_animal_sex", curie=MIXS.curie('0001249'),
                   model_uri=TEMP.food_animal_and_animal_feed_animal_sex, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_animal_and_animal_feed_food_source_age = Slot(uri=MIXS['0001251'], name="food_animal_and_animal_feed_food_source_age", curie=MIXS.curie('0001251'),
                   model_uri=TEMP.food_animal_and_animal_feed_food_source_age, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.food_farm_environment_samp_size = Slot(uri=MIXS['0000001'], name="food_farm_environment_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.food_farm_environment_samp_size, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_samp_collect_device = Slot(uri=MIXS['0000002'], name="food_farm_environment_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.food_farm_environment_samp_collect_device, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_lat_lon = Slot(uri=MIXS['0000009'], name="food_farm_environment_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.food_farm_environment_lat_lon, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_geo_loc_name = Slot(uri=MIXS['0000010'], name="food_farm_environment_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.food_farm_environment_geo_loc_name, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_collection_date = Slot(uri=MIXS['0000011'], name="food_farm_environment_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.food_farm_environment_collection_date, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_env_broad_scale = Slot(uri=MIXS['0000012'], name="food_farm_environment_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.food_farm_environment_env_broad_scale, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_env_local_scale = Slot(uri=MIXS['0000013'], name="food_farm_environment_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.food_farm_environment_env_local_scale, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_env_medium = Slot(uri=MIXS['0000014'], name="food_farm_environment_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.food_farm_environment_env_medium, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_depth = Slot(uri=MIXS['0000018'], name="food_farm_environment_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.food_farm_environment_depth, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_host_disease_stat = Slot(uri=MIXS['0000031'], name="food_farm_environment_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.food_farm_environment_host_disease_stat, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="food_farm_environment_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.food_farm_environment_nucl_acid_ext, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_seq_meth = Slot(uri=MIXS['0000050'], name="food_farm_environment_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.food_farm_environment_seq_meth, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_project_name = Slot(uri=MIXS['0000092'], name="food_farm_environment_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.food_farm_environment_project_name, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_humidity = Slot(uri=MIXS['0000100'], name="food_farm_environment_humidity", curie=MIXS.curie('0000100'),
                   model_uri=TEMP.food_farm_environment_humidity, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_organism_count = Slot(uri=MIXS['0000103'], name="food_farm_environment_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.food_farm_environment_organism_count, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_spikein_count = Slot(uri=MIXS['0000103'], name="food_farm_environment_spikein_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.food_farm_environment_spikein_count, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_air_PM_concen = Slot(uri=MIXS['0000108'], name="food_farm_environment_air_PM_concen", curie=MIXS.curie('0000108'),
                   model_uri=TEMP.food_farm_environment_air_PM_concen, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_samp_stor_temp = Slot(uri=MIXS['0000110'], name="food_farm_environment_samp_stor_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.food_farm_environment_samp_stor_temp, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="food_farm_environment_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.food_farm_environment_samp_vol_we_dna_ext, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_solar_irradiance = Slot(uri=MIXS['0000112'], name="food_farm_environment_solar_irradiance", curie=MIXS.curie('0000112'),
                   model_uri=TEMP.food_farm_environment_solar_irradiance, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_temp = Slot(uri=MIXS['0000113'], name="food_farm_environment_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.food_farm_environment_temp, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_ventilation_rate = Slot(uri=MIXS['0000114'], name="food_farm_environment_ventilation_rate", curie=MIXS.curie('0000114'),
                   model_uri=TEMP.food_farm_environment_ventilation_rate, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_samp_stor_dur = Slot(uri=MIXS['0000116'], name="food_farm_environment_samp_stor_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.food_farm_environment_samp_stor_dur, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_wind_speed = Slot(uri=MIXS['0000118'], name="food_farm_environment_wind_speed", curie=MIXS.curie('0000118'),
                   model_uri=TEMP.food_farm_environment_wind_speed, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_salinity = Slot(uri=MIXS['0000183'], name="food_farm_environment_salinity", curie=MIXS.curie('0000183'),
                   model_uri=TEMP.food_farm_environment_salinity, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_turbidity = Slot(uri=MIXS['0000191'], name="food_farm_environment_turbidity", curie=MIXS.curie('0000191'),
                   model_uri=TEMP.food_farm_environment_turbidity, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_ances_data = Slot(uri=MIXS['0000247'], name="food_farm_environment_ances_data", curie=MIXS.curie('0000247'),
                   model_uri=TEMP.food_farm_environment_ances_data, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_host_taxid = Slot(uri=MIXS['0000250'], name="food_farm_environment_host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=TEMP.food_farm_environment_host_taxid, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_host_age = Slot(uri=MIXS['0000255'], name="food_farm_environment_host_age", curie=MIXS.curie('0000255'),
                   model_uri=TEMP.food_farm_environment_host_age, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_host_length = Slot(uri=MIXS['0000256'], name="food_farm_environment_host_length", curie=MIXS.curie('0000256'),
                   model_uri=TEMP.food_farm_environment_host_length, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_host_dry_mass = Slot(uri=MIXS['0000257'], name="food_farm_environment_host_dry_mass", curie=MIXS.curie('0000257'),
                   model_uri=TEMP.food_farm_environment_host_dry_mass, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_host_tot_mass = Slot(uri=MIXS['0000263'], name="food_farm_environment_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=TEMP.food_farm_environment_host_tot_mass, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_host_height = Slot(uri=MIXS['0000264'], name="food_farm_environment_host_height", curie=MIXS.curie('0000264'),
                   model_uri=TEMP.food_farm_environment_host_height, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_previous_land_use = Slot(uri=MIXS['0000315'], name="food_farm_environment_previous_land_use", curie=MIXS.curie('0000315'),
                   model_uri=TEMP.food_farm_environment_previous_land_use, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_crop_rotation = Slot(uri=MIXS['0000318'], name="food_farm_environment_crop_rotation", curie=MIXS.curie('0000318'),
                   model_uri=TEMP.food_farm_environment_crop_rotation, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_soil_type = Slot(uri=MIXS['0000332'], name="food_farm_environment_soil_type", curie=MIXS.curie('0000332'),
                   model_uri=TEMP.food_farm_environment_soil_type, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_soil_type_meth = Slot(uri=MIXS['0000334'], name="food_farm_environment_soil_type_meth", curie=MIXS.curie('0000334'),
                   model_uri=TEMP.food_farm_environment_soil_type_meth, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_soil_texture_meth = Slot(uri=MIXS['0000336'], name="food_farm_environment_soil_texture_meth", curie=MIXS.curie('0000336'),
                   model_uri=TEMP.food_farm_environment_soil_texture_meth, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_tot_org_c_meth = Slot(uri=MIXS['0000337'], name="food_farm_environment_tot_org_c_meth", curie=MIXS.curie('0000337'),
                   model_uri=TEMP.food_farm_environment_tot_org_c_meth, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_tot_nitro_cont_meth = Slot(uri=MIXS['0000338'], name="food_farm_environment_tot_nitro_cont_meth", curie=MIXS.curie('0000338'),
                   model_uri=TEMP.food_farm_environment_tot_nitro_cont_meth, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_salinity_meth = Slot(uri=MIXS['0000341'], name="food_farm_environment_salinity_meth", curie=MIXS.curie('0000341'),
                   model_uri=TEMP.food_farm_environment_salinity_meth, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_host_genotype = Slot(uri=MIXS['0000365'], name="food_farm_environment_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=TEMP.food_farm_environment_host_genotype, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_tot_nitro_content = Slot(uri=MIXS['0000530'], name="food_farm_environment_tot_nitro_content", curie=MIXS.curie('0000530'),
                   model_uri=TEMP.food_farm_environment_tot_nitro_content, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_tot_org_carb = Slot(uri=MIXS['0000533'], name="food_farm_environment_tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=TEMP.food_farm_environment_tot_org_carb, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_root_med_carbon = Slot(uri=MIXS['0000577'], name="food_farm_environment_root_med_carbon", curie=MIXS.curie('0000577'),
                   model_uri=TEMP.food_farm_environment_root_med_carbon, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_root_med_macronutr = Slot(uri=MIXS['0000578'], name="food_farm_environment_root_med_macronutr", curie=MIXS.curie('0000578'),
                   model_uri=TEMP.food_farm_environment_root_med_macronutr, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_root_med_micronutr = Slot(uri=MIXS['0000579'], name="food_farm_environment_root_med_micronutr", curie=MIXS.curie('0000579'),
                   model_uri=TEMP.food_farm_environment_root_med_micronutr, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_season_temp = Slot(uri=MIXS['0000643'], name="food_farm_environment_season_temp", curie=MIXS.curie('0000643'),
                   model_uri=TEMP.food_farm_environment_season_temp, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_season_precpt = Slot(uri=MIXS['0000645'], name="food_farm_environment_season_precpt", curie=MIXS.curie('0000645'),
                   model_uri=TEMP.food_farm_environment_season_precpt, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_conduc = Slot(uri=MIXS['0000692'], name="food_farm_environment_conduc", curie=MIXS.curie('0000692'),
                   model_uri=TEMP.food_farm_environment_conduc, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_size_frac_low = Slot(uri=MIXS['0000735'], name="food_farm_environment_size_frac_low", curie=MIXS.curie('0000735'),
                   model_uri=TEMP.food_farm_environment_size_frac_low, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_size_frac_up = Slot(uri=MIXS['0000736'], name="food_farm_environment_size_frac_up", curie=MIXS.curie('0000736'),
                   model_uri=TEMP.food_farm_environment_size_frac_up, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_chem_administration = Slot(uri=MIXS['0000751'], name="food_farm_environment_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=TEMP.food_farm_environment_chem_administration, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_misc_param = Slot(uri=MIXS['0000752'], name="food_farm_environment_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.food_farm_environment_misc_param, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_perturbation = Slot(uri=MIXS['0000754'], name="food_farm_environment_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.food_farm_environment_perturbation, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_ventilation_type = Slot(uri=MIXS['0000756'], name="food_farm_environment_ventilation_type", curie=MIXS.curie('0000756'),
                   model_uri=TEMP.food_farm_environment_ventilation_type, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_wind_direction = Slot(uri=MIXS['0000757'], name="food_farm_environment_wind_direction", curie=MIXS.curie('0000757'),
                   model_uri=TEMP.food_farm_environment_wind_direction, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_season = Slot(uri=MIXS['0000829'], name="food_farm_environment_season", curie=MIXS.curie('0000829'),
                   model_uri=TEMP.food_farm_environment_season, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_genetic_mod = Slot(uri=MIXS['0000859'], name="food_farm_environment_genetic_mod", curie=MIXS.curie('0000859'),
                   model_uri=TEMP.food_farm_environment_genetic_mod, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_host_phenotype = Slot(uri=MIXS['0000874'], name="food_farm_environment_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=TEMP.food_farm_environment_host_phenotype, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_samp_type = Slot(uri=MIXS['0000998'], name="food_farm_environment_samp_type", curie=MIXS.curie('0000998'),
                   model_uri=TEMP.food_farm_environment_samp_type, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_ph = Slot(uri=MIXS['0001001'], name="food_farm_environment_ph", curie=MIXS.curie('0001001'),
                   model_uri=TEMP.food_farm_environment_ph, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_biotic_regm = Slot(uri=MIXS['0001038'], name="food_farm_environment_biotic_regm", curie=MIXS.curie('0001038'),
                   model_uri=TEMP.food_farm_environment_biotic_regm, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_growth_habit = Slot(uri=MIXS['0001044'], name="food_farm_environment_growth_habit", curie=MIXS.curie('0001044'),
                   model_uri=TEMP.food_farm_environment_growth_habit, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_mechanical_damage = Slot(uri=MIXS['0001052'], name="food_farm_environment_mechanical_damage", curie=MIXS.curie('0001052'),
                   model_uri=TEMP.food_farm_environment_mechanical_damage, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_plant_growth_med = Slot(uri=MIXS['0001057'], name="food_farm_environment_plant_growth_med", curie=MIXS.curie('0001057'),
                   model_uri=TEMP.food_farm_environment_plant_growth_med, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_root_cond = Slot(uri=MIXS['0001061'], name="food_farm_environment_root_cond", curie=MIXS.curie('0001061'),
                   model_uri=TEMP.food_farm_environment_root_cond, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_root_med_ph = Slot(uri=MIXS['0001062'], name="food_farm_environment_root_med_ph", curie=MIXS.curie('0001062'),
                   model_uri=TEMP.food_farm_environment_root_med_ph, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_tillage = Slot(uri=MIXS['0001081'], name="food_farm_environment_tillage", curie=MIXS.curie('0001081'),
                   model_uri=TEMP.food_farm_environment_tillage, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_ph_meth = Slot(uri=MIXS['0001106'], name="food_farm_environment_ph_meth", curie=MIXS.curie('0001106'),
                   model_uri=TEMP.food_farm_environment_ph_meth, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_samp_name = Slot(uri=MIXS['0001107'], name="food_farm_environment_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.food_farm_environment_samp_name, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_growth_medium = Slot(uri=MIXS['0001108'], name="food_farm_environment_growth_medium", curie=MIXS.curie('0001108'),
                   model_uri=TEMP.food_farm_environment_growth_medium, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_farm_water_source = Slot(uri=MIXS['0001110'], name="food_farm_environment_farm_water_source", curie=MIXS.curie('0001110'),
                   model_uri=TEMP.food_farm_environment_farm_water_source, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_plant_water_method = Slot(uri=MIXS['0001111'], name="food_farm_environment_plant_water_method", curie=MIXS.curie('0001111'),
                   model_uri=TEMP.food_farm_environment_plant_water_method, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_animal_feed_equip = Slot(uri=MIXS['0001113'], name="food_farm_environment_animal_feed_equip", curie=MIXS.curie('0001113'),
                   model_uri=TEMP.food_farm_environment_animal_feed_equip, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_animal_intrusion = Slot(uri=MIXS['0001114'], name="food_farm_environment_animal_intrusion", curie=MIXS.curie('0001114'),
                   model_uri=TEMP.food_farm_environment_animal_intrusion, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_anim_water_method = Slot(uri=MIXS['0001115'], name="food_farm_environment_anim_water_method", curie=MIXS.curie('0001115'),
                   model_uri=TEMP.food_farm_environment_anim_water_method, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_crop_yield = Slot(uri=MIXS['0001116'], name="food_farm_environment_crop_yield", curie=MIXS.curie('0001116'),
                   model_uri=TEMP.food_farm_environment_crop_yield, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_cult_result = Slot(uri=MIXS['0001117'], name="food_farm_environment_cult_result", curie=MIXS.curie('0001117'),
                   model_uri=TEMP.food_farm_environment_cult_result, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_cult_result_org = Slot(uri=MIXS['0001118'], name="food_farm_environment_cult_result_org", curie=MIXS.curie('0001118'),
                   model_uri=TEMP.food_farm_environment_cult_result_org, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_cult_target = Slot(uri=MIXS['0001119'], name="food_farm_environment_cult_target", curie=MIXS.curie('0001119'),
                   model_uri=TEMP.food_farm_environment_cult_target, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_plant_part_maturity = Slot(uri=MIXS['0001120'], name="food_farm_environment_plant_part_maturity", curie=MIXS.curie('0001120'),
                   model_uri=TEMP.food_farm_environment_plant_part_maturity, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_adjacent_environment = Slot(uri=MIXS['0001121'], name="food_farm_environment_adjacent_environment", curie=MIXS.curie('0001121'),
                   model_uri=TEMP.food_farm_environment_adjacent_environment, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_water_source_adjac = Slot(uri=MIXS['0001122'], name="food_farm_environment_water_source_adjac", curie=MIXS.curie('0001122'),
                   model_uri=TEMP.food_farm_environment_water_source_adjac, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_farm_equip_shared = Slot(uri=MIXS['0001123'], name="food_farm_environment_farm_equip_shared", curie=MIXS.curie('0001123'),
                   model_uri=TEMP.food_farm_environment_farm_equip_shared, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_farm_equip_san = Slot(uri=MIXS['0001124'], name="food_farm_environment_farm_equip_san", curie=MIXS.curie('0001124'),
                   model_uri=TEMP.food_farm_environment_farm_equip_san, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_farm_equip_san_freq = Slot(uri=MIXS['0001125'], name="food_farm_environment_farm_equip_san_freq", curie=MIXS.curie('0001125'),
                   model_uri=TEMP.food_farm_environment_farm_equip_san_freq, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_farm_equip = Slot(uri=MIXS['0001126'], name="food_farm_environment_farm_equip", curie=MIXS.curie('0001126'),
                   model_uri=TEMP.food_farm_environment_farm_equip, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_fertilizer_admin = Slot(uri=MIXS['0001127'], name="food_farm_environment_fertilizer_admin", curie=MIXS.curie('0001127'),
                   model_uri=TEMP.food_farm_environment_fertilizer_admin, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_fertilizer_date = Slot(uri=MIXS['0001128'], name="food_farm_environment_fertilizer_date", curie=MIXS.curie('0001128'),
                   model_uri=TEMP.food_farm_environment_fertilizer_date, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_animal_group_size = Slot(uri=MIXS['0001129'], name="food_farm_environment_animal_group_size", curie=MIXS.curie('0001129'),
                   model_uri=TEMP.food_farm_environment_animal_group_size, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_animal_diet = Slot(uri=MIXS['0001130'], name="food_farm_environment_animal_diet", curie=MIXS.curie('0001130'),
                   model_uri=TEMP.food_farm_environment_animal_diet, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_food_contact_surf = Slot(uri=MIXS['0001131'], name="food_farm_environment_food_contact_surf", curie=MIXS.curie('0001131'),
                   model_uri=TEMP.food_farm_environment_food_contact_surf, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_food_contain_wrap = Slot(uri=MIXS['0001132'], name="food_farm_environment_food_contain_wrap", curie=MIXS.curie('0001132'),
                   model_uri=TEMP.food_farm_environment_food_contain_wrap, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_food_harvest_proc = Slot(uri=MIXS['0001133'], name="food_farm_environment_food_harvest_proc", curie=MIXS.curie('0001133'),
                   model_uri=TEMP.food_farm_environment_food_harvest_proc, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_food_pack_medium = Slot(uri=MIXS['0001134'], name="food_farm_environment_food_pack_medium", curie=MIXS.curie('0001134'),
                   model_uri=TEMP.food_farm_environment_food_pack_medium, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_food_preserv_proc = Slot(uri=MIXS['0001135'], name="food_farm_environment_food_preserv_proc", curie=MIXS.curie('0001135'),
                   model_uri=TEMP.food_farm_environment_food_preserv_proc, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_food_prod_char = Slot(uri=MIXS['0001136'], name="food_farm_environment_food_prod_char", curie=MIXS.curie('0001136'),
                   model_uri=TEMP.food_farm_environment_food_prod_char, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_food_trav_mode = Slot(uri=MIXS['0001137'], name="food_farm_environment_food_trav_mode", curie=MIXS.curie('0001137'),
                   model_uri=TEMP.food_farm_environment_food_trav_mode, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_food_trav_vehic = Slot(uri=MIXS['0001138'], name="food_farm_environment_food_trav_vehic", curie=MIXS.curie('0001138'),
                   model_uri=TEMP.food_farm_environment_food_trav_vehic, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_food_source = Slot(uri=MIXS['0001139'], name="food_farm_environment_food_source", curie=MIXS.curie('0001139'),
                   model_uri=TEMP.food_farm_environment_food_source, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_food_treat_proc = Slot(uri=MIXS['0001140'], name="food_farm_environment_food_treat_proc", curie=MIXS.curie('0001140'),
                   model_uri=TEMP.food_farm_environment_food_treat_proc, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_extr_weather_event = Slot(uri=MIXS['0001141'], name="food_farm_environment_extr_weather_event", curie=MIXS.curie('0001141'),
                   model_uri=TEMP.food_farm_environment_extr_weather_event, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_date_extr_weath = Slot(uri=MIXS['0001142'], name="food_farm_environment_date_extr_weath", curie=MIXS.curie('0001142'),
                   model_uri=TEMP.food_farm_environment_date_extr_weath, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_intended_consumer = Slot(uri=MIXS['0001144'], name="food_farm_environment_intended_consumer", curie=MIXS.curie('0001144'),
                   model_uri=TEMP.food_farm_environment_intended_consumer, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_library_prep_kit = Slot(uri=MIXS['0001145'], name="food_farm_environment_library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=TEMP.food_farm_environment_library_prep_kit, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_air_flow_impede = Slot(uri=MIXS['0001146'], name="food_farm_environment_air_flow_impede", curie=MIXS.curie('0001146'),
                   model_uri=TEMP.food_farm_environment_air_flow_impede, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_lot_number = Slot(uri=MIXS['0001147'], name="food_farm_environment_lot_number", curie=MIXS.curie('0001147'),
                   model_uri=TEMP.food_farm_environment_lot_number, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_season_humidity = Slot(uri=MIXS['0001148'], name="food_farm_environment_season_humidity", curie=MIXS.curie('0001148'),
                   model_uri=TEMP.food_farm_environment_season_humidity, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_part_plant_animal = Slot(uri=MIXS['0001149'], name="food_farm_environment_part_plant_animal", curie=MIXS.curie('0001149'),
                   model_uri=TEMP.food_farm_environment_part_plant_animal, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_plant_reprod_crop = Slot(uri=MIXS['0001150'], name="food_farm_environment_plant_reprod_crop", curie=MIXS.curie('0001150'),
                   model_uri=TEMP.food_farm_environment_plant_reprod_crop, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_samp_purpose = Slot(uri=MIXS['0001151'], name="food_farm_environment_samp_purpose", curie=MIXS.curie('0001151'),
                   model_uri=TEMP.food_farm_environment_samp_purpose, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_repository_name = Slot(uri=MIXS['0001152'], name="food_farm_environment_repository_name", curie=MIXS.curie('0001152'),
                   model_uri=TEMP.food_farm_environment_repository_name, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_samp_pooling = Slot(uri=MIXS['0001153'], name="food_farm_environment_samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=TEMP.food_farm_environment_samp_pooling, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_samp_source_mat_cat = Slot(uri=MIXS['0001154'], name="food_farm_environment_samp_source_mat_cat", curie=MIXS.curie('0001154'),
                   model_uri=TEMP.food_farm_environment_samp_source_mat_cat, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_sequencing_kit = Slot(uri=MIXS['0001155'], name="food_farm_environment_sequencing_kit", curie=MIXS.curie('0001155'),
                   model_uri=TEMP.food_farm_environment_sequencing_kit, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_sequencing_location = Slot(uri=MIXS['0001156'], name="food_farm_environment_sequencing_location", curie=MIXS.curie('0001156'),
                   model_uri=TEMP.food_farm_environment_sequencing_location, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_serovar_or_serotype = Slot(uri=MIXS['0001157'], name="food_farm_environment_serovar_or_serotype", curie=MIXS.curie('0001157'),
                   model_uri=TEMP.food_farm_environment_serovar_or_serotype, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_soil_conductivity = Slot(uri=MIXS['0001158'], name="food_farm_environment_soil_conductivity", curie=MIXS.curie('0001158'),
                   model_uri=TEMP.food_farm_environment_soil_conductivity, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_soil_cover = Slot(uri=MIXS['0001159'], name="food_farm_environment_soil_cover", curie=MIXS.curie('0001159'),
                   model_uri=TEMP.food_farm_environment_soil_cover, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_soil_pH = Slot(uri=MIXS['0001160'], name="food_farm_environment_soil_pH", curie=MIXS.curie('0001160'),
                   model_uri=TEMP.food_farm_environment_soil_pH, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_rel_location = Slot(uri=MIXS['0001161'], name="food_farm_environment_rel_location", curie=MIXS.curie('0001161'),
                   model_uri=TEMP.food_farm_environment_rel_location, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_soil_porosity = Slot(uri=MIXS['0001162'], name="food_farm_environment_soil_porosity", curie=MIXS.curie('0001162'),
                   model_uri=TEMP.food_farm_environment_soil_porosity, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_soil_temp = Slot(uri=MIXS['0001163'], name="food_farm_environment_soil_temp", curie=MIXS.curie('0001163'),
                   model_uri=TEMP.food_farm_environment_soil_temp, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_soil_texture_class = Slot(uri=MIXS['0001164'], name="food_farm_environment_soil_texture_class", curie=MIXS.curie('0001164'),
                   model_uri=TEMP.food_farm_environment_soil_texture_class, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_spikein_org = Slot(uri=MIXS['0001167'], name="food_farm_environment_spikein_org", curie=MIXS.curie('0001167'),
                   model_uri=TEMP.food_farm_environment_spikein_org, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_spikein_serovar = Slot(uri=MIXS['0001168'], name="food_farm_environment_spikein_serovar", curie=MIXS.curie('0001168'),
                   model_uri=TEMP.food_farm_environment_spikein_serovar, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_spikein_growth_med = Slot(uri=MIXS['0001169'], name="food_farm_environment_spikein_growth_med", curie=MIXS.curie('0001169'),
                   model_uri=TEMP.food_farm_environment_spikein_growth_med, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_spikein_strain = Slot(uri=MIXS['0001170'], name="food_farm_environment_spikein_strain", curie=MIXS.curie('0001170'),
                   model_uri=TEMP.food_farm_environment_spikein_strain, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_spikein_antibiotic = Slot(uri=MIXS['0001171'], name="food_farm_environment_spikein_antibiotic", curie=MIXS.curie('0001171'),
                   model_uri=TEMP.food_farm_environment_spikein_antibiotic, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_spikein_metal = Slot(uri=MIXS['0001172'], name="food_farm_environment_spikein_metal", curie=MIXS.curie('0001172'),
                   model_uri=TEMP.food_farm_environment_spikein_metal, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_timepoint = Slot(uri=MIXS['0001173'], name="food_farm_environment_timepoint", curie=MIXS.curie('0001173'),
                   model_uri=TEMP.food_farm_environment_timepoint, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_water_frequency = Slot(uri=MIXS['0001174'], name="food_farm_environment_water_frequency", curie=MIXS.curie('0001174'),
                   model_uri=TEMP.food_farm_environment_water_frequency, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_water_pH = Slot(uri=MIXS['0001175'], name="food_farm_environment_water_pH", curie=MIXS.curie('0001175'),
                   model_uri=TEMP.food_farm_environment_water_pH, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_water_source_shared = Slot(uri=MIXS['0001176'], name="food_farm_environment_water_source_shared", curie=MIXS.curie('0001176'),
                   model_uri=TEMP.food_farm_environment_water_source_shared, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_enrichment_protocol = Slot(uri=MIXS['0001177'], name="food_farm_environment_enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=TEMP.food_farm_environment_enrichment_protocol, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_food_quality_date = Slot(uri=MIXS['0001178'], name="food_farm_environment_food_quality_date", curie=MIXS.curie('0001178'),
                   model_uri=TEMP.food_farm_environment_food_quality_date, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_IFSAC_category = Slot(uri=MIXS['0001179'], name="food_farm_environment_IFSAC_category", curie=MIXS.curie('0001179'),
                   model_uri=TEMP.food_farm_environment_IFSAC_category, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_animal_housing = Slot(uri=MIXS['0001180'], name="food_farm_environment_animal_housing", curie=MIXS.curie('0001180'),
                   model_uri=TEMP.food_farm_environment_animal_housing, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_cult_isol_date = Slot(uri=MIXS['0001181'], name="food_farm_environment_cult_isol_date", curie=MIXS.curie('0001181'),
                   model_uri=TEMP.food_farm_environment_cult_isol_date, domain=FoodFarmEnvironment, range=Optional[str])

slots.food_farm_environment_food_clean_proc = Slot(uri=MIXS['0001182'], name="food_farm_environment_food_clean_proc", curie=MIXS.curie('0001182'),
                   model_uri=TEMP.food_farm_environment_food_clean_proc, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_food_product_type = Slot(uri=MIXS['0001184'], name="food_farm_environment_food_product_type", curie=MIXS.curie('0001184'),
                   model_uri=TEMP.food_farm_environment_food_product_type, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_host_subspecf_genlin = Slot(uri=MIXS['0001318'], name="food_farm_environment_host_subspecf_genlin", curie=MIXS.curie('0001318'),
                   model_uri=TEMP.food_farm_environment_host_subspecf_genlin, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_farm_environment_prod_label_claims = Slot(uri=MIXS['0001337'], name="food_farm_environment_prod_label_claims", curie=MIXS.curie('0001337'),
                   model_uri=TEMP.food_farm_environment_prod_label_claims, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_samp_size = Slot(uri=MIXS['0000001'], name="food_food_production_facility_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.food_food_production_facility_samp_size, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_collect_device = Slot(uri=MIXS['0000002'], name="food_food_production_facility_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.food_food_production_facility_samp_collect_device, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_experimental_factor = Slot(uri=MIXS['0000008'], name="food_food_production_facility_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=TEMP.food_food_production_facility_experimental_factor, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_lat_lon = Slot(uri=MIXS['0000009'], name="food_food_production_facility_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.food_food_production_facility_lat_lon, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_geo_loc_name = Slot(uri=MIXS['0000010'], name="food_food_production_facility_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.food_food_production_facility_geo_loc_name, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_collection_date = Slot(uri=MIXS['0000011'], name="food_food_production_facility_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.food_food_production_facility_collection_date, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_env_broad_scale = Slot(uri=MIXS['0000012'], name="food_food_production_facility_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.food_food_production_facility_env_broad_scale, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_env_local_scale = Slot(uri=MIXS['0000013'], name="food_food_production_facility_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.food_food_production_facility_env_local_scale, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_env_medium = Slot(uri=MIXS['0000014'], name="food_food_production_facility_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.food_food_production_facility_env_medium, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="food_food_production_facility_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=TEMP.food_food_production_facility_subspecf_gen_lin, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="food_food_production_facility_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.food_food_production_facility_nucl_acid_ext, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_seq_meth = Slot(uri=MIXS['0000050'], name="food_food_production_facility_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.food_food_production_facility_seq_meth, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_project_name = Slot(uri=MIXS['0000092'], name="food_food_production_facility_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.food_food_production_facility_project_name, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_organism_count = Slot(uri=MIXS['0000103'], name="food_food_production_facility_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.food_food_production_facility_organism_count, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_stor_temp = Slot(uri=MIXS['0000110'], name="food_food_production_facility_samp_stor_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.food_food_production_facility_samp_stor_temp, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="food_food_production_facility_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.food_food_production_facility_samp_vol_we_dna_ext, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_stor_dur = Slot(uri=MIXS['0000116'], name="food_food_production_facility_samp_stor_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.food_food_production_facility_samp_stor_dur, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_air_temp = Slot(uri=MIXS['0000124'], name="food_food_production_facility_air_temp", curie=MIXS.curie('0000124'),
                   model_uri=TEMP.food_food_production_facility_air_temp, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_room_dim = Slot(uri=MIXS['0000192'], name="food_food_production_facility_room_dim", curie=MIXS.curie('0000192'),
                   model_uri=TEMP.food_food_production_facility_room_dim, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_freq_clean = Slot(uri=MIXS['0000226'], name="food_food_production_facility_freq_clean", curie=MIXS.curie('0000226'),
                   model_uri=TEMP.food_food_production_facility_freq_clean, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_room_id = Slot(uri=MIXS['0000244'], name="food_food_production_facility_samp_room_id", curie=MIXS.curie('0000244'),
                   model_uri=TEMP.food_food_production_facility_samp_room_id, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_pool_dna_extracts = Slot(uri=MIXS['0000325'], name="food_food_production_facility_pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=TEMP.food_food_production_facility_pool_dna_extracts, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_misc_param = Slot(uri=MIXS['0000752'], name="food_food_production_facility_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.food_food_production_facility_misc_param, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_samp_stor_loc = Slot(uri=MIXS['0000755'], name="food_food_production_facility_samp_stor_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.food_food_production_facility_samp_stor_loc, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_surf_material = Slot(uri=MIXS['0000758'], name="food_food_production_facility_surf_material", curie=MIXS.curie('0000758'),
                   model_uri=TEMP.food_food_production_facility_surf_material, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_indoor_surf = Slot(uri=MIXS['0000764'], name="food_food_production_facility_indoor_surf", curie=MIXS.curie('0000764'),
                   model_uri=TEMP.food_food_production_facility_indoor_surf, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_avg_occup = Slot(uri=MIXS['0000775'], name="food_food_production_facility_avg_occup", curie=MIXS.curie('0000775'),
                   model_uri=TEMP.food_food_production_facility_avg_occup, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_floor = Slot(uri=MIXS['0000828'], name="food_food_production_facility_samp_floor", curie=MIXS.curie('0000828'),
                   model_uri=TEMP.food_food_production_facility_samp_floor, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_genetic_mod = Slot(uri=MIXS['0000859'], name="food_food_production_facility_genetic_mod", curie=MIXS.curie('0000859'),
                   model_uri=TEMP.food_food_production_facility_genetic_mod, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_type = Slot(uri=MIXS['0000998'], name="food_food_production_facility_samp_type", curie=MIXS.curie('0000998'),
                   model_uri=TEMP.food_food_production_facility_samp_type, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_name = Slot(uri=MIXS['0001107'], name="food_food_production_facility_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.food_food_production_facility_samp_name, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_cult_result = Slot(uri=MIXS['0001117'], name="food_food_production_facility_cult_result", curie=MIXS.curie('0001117'),
                   model_uri=TEMP.food_food_production_facility_cult_result, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_cult_result_org = Slot(uri=MIXS['0001118'], name="food_food_production_facility_cult_result_org", curie=MIXS.curie('0001118'),
                   model_uri=TEMP.food_food_production_facility_cult_result_org, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_cult_target = Slot(uri=MIXS['0001119'], name="food_food_production_facility_cult_target", curie=MIXS.curie('0001119'),
                   model_uri=TEMP.food_food_production_facility_cult_target, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_contact_surf = Slot(uri=MIXS['0001131'], name="food_food_production_facility_food_contact_surf", curie=MIXS.curie('0001131'),
                   model_uri=TEMP.food_food_production_facility_food_contact_surf, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_contain_wrap = Slot(uri=MIXS['0001132'], name="food_food_production_facility_food_contain_wrap", curie=MIXS.curie('0001132'),
                   model_uri=TEMP.food_food_production_facility_food_contain_wrap, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_food_pack_medium = Slot(uri=MIXS['0001134'], name="food_food_production_facility_food_pack_medium", curie=MIXS.curie('0001134'),
                   model_uri=TEMP.food_food_production_facility_food_pack_medium, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_preserv_proc = Slot(uri=MIXS['0001135'], name="food_food_production_facility_food_preserv_proc", curie=MIXS.curie('0001135'),
                   model_uri=TEMP.food_food_production_facility_food_preserv_proc, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_prod_char = Slot(uri=MIXS['0001136'], name="food_food_production_facility_food_prod_char", curie=MIXS.curie('0001136'),
                   model_uri=TEMP.food_food_production_facility_food_prod_char, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_trav_mode = Slot(uri=MIXS['0001137'], name="food_food_production_facility_food_trav_mode", curie=MIXS.curie('0001137'),
                   model_uri=TEMP.food_food_production_facility_food_trav_mode, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_trav_vehic = Slot(uri=MIXS['0001138'], name="food_food_production_facility_food_trav_vehic", curie=MIXS.curie('0001138'),
                   model_uri=TEMP.food_food_production_facility_food_trav_vehic, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_source = Slot(uri=MIXS['0001139'], name="food_food_production_facility_food_source", curie=MIXS.curie('0001139'),
                   model_uri=TEMP.food_food_production_facility_food_source, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_food_treat_proc = Slot(uri=MIXS['0001140'], name="food_food_production_facility_food_treat_proc", curie=MIXS.curie('0001140'),
                   model_uri=TEMP.food_food_production_facility_food_treat_proc, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_intended_consumer = Slot(uri=MIXS['0001144'], name="food_food_production_facility_intended_consumer", curie=MIXS.curie('0001144'),
                   model_uri=TEMP.food_food_production_facility_intended_consumer, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_library_prep_kit = Slot(uri=MIXS['0001145'], name="food_food_production_facility_library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=TEMP.food_food_production_facility_library_prep_kit, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_lot_number = Slot(uri=MIXS['0001147'], name="food_food_production_facility_lot_number", curie=MIXS.curie('0001147'),
                   model_uri=TEMP.food_food_production_facility_lot_number, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_part_plant_animal = Slot(uri=MIXS['0001149'], name="food_food_production_facility_part_plant_animal", curie=MIXS.curie('0001149'),
                   model_uri=TEMP.food_food_production_facility_part_plant_animal, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_samp_purpose = Slot(uri=MIXS['0001151'], name="food_food_production_facility_samp_purpose", curie=MIXS.curie('0001151'),
                   model_uri=TEMP.food_food_production_facility_samp_purpose, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_repository_name = Slot(uri=MIXS['0001152'], name="food_food_production_facility_repository_name", curie=MIXS.curie('0001152'),
                   model_uri=TEMP.food_food_production_facility_repository_name, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_samp_pooling = Slot(uri=MIXS['0001153'], name="food_food_production_facility_samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=TEMP.food_food_production_facility_samp_pooling, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_samp_source_mat_cat = Slot(uri=MIXS['0001154'], name="food_food_production_facility_samp_source_mat_cat", curie=MIXS.curie('0001154'),
                   model_uri=TEMP.food_food_production_facility_samp_source_mat_cat, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_sequencing_kit = Slot(uri=MIXS['0001155'], name="food_food_production_facility_sequencing_kit", curie=MIXS.curie('0001155'),
                   model_uri=TEMP.food_food_production_facility_sequencing_kit, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_sequencing_location = Slot(uri=MIXS['0001156'], name="food_food_production_facility_sequencing_location", curie=MIXS.curie('0001156'),
                   model_uri=TEMP.food_food_production_facility_sequencing_location, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_timepoint = Slot(uri=MIXS['0001173'], name="food_food_production_facility_timepoint", curie=MIXS.curie('0001173'),
                   model_uri=TEMP.food_food_production_facility_timepoint, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_enrichment_protocol = Slot(uri=MIXS['0001177'], name="food_food_production_facility_enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=TEMP.food_food_production_facility_enrichment_protocol, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_food_quality_date = Slot(uri=MIXS['0001178'], name="food_food_production_facility_food_quality_date", curie=MIXS.curie('0001178'),
                   model_uri=TEMP.food_food_production_facility_food_quality_date, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_IFSAC_category = Slot(uri=MIXS['0001179'], name="food_food_production_facility_IFSAC_category", curie=MIXS.curie('0001179'),
                   model_uri=TEMP.food_food_production_facility_IFSAC_category, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_cult_isol_date = Slot(uri=MIXS['0001181'], name="food_food_production_facility_cult_isol_date", curie=MIXS.curie('0001181'),
                   model_uri=TEMP.food_food_production_facility_cult_isol_date, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_coll_site_geo_feat = Slot(uri=MIXS['0001183'], name="food_food_production_facility_coll_site_geo_feat", curie=MIXS.curie('0001183'),
                   model_uri=TEMP.food_food_production_facility_coll_site_geo_feat, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_food_product_type = Slot(uri=MIXS['0001184'], name="food_food_production_facility_food_product_type", curie=MIXS.curie('0001184'),
                   model_uri=TEMP.food_food_production_facility_food_product_type, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_bacterial_density = Slot(uri=MIXS['0001194'], name="food_food_production_facility_bacterial_density", curie=MIXS.curie('0001194'),
                   model_uri=TEMP.food_food_production_facility_bacterial_density, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_dietary_claim_use = Slot(uri=MIXS['0001199'], name="food_food_production_facility_dietary_claim_use", curie=MIXS.curie('0001199'),
                   model_uri=TEMP.food_food_production_facility_dietary_claim_use, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_additive = Slot(uri=MIXS['0001200'], name="food_food_production_facility_food_additive", curie=MIXS.curie('0001200'),
                   model_uri=TEMP.food_food_production_facility_food_additive, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_allergen_label = Slot(uri=MIXS['0001201'], name="food_food_production_facility_food_allergen_label", curie=MIXS.curie('0001201'),
                   model_uri=TEMP.food_food_production_facility_food_allergen_label, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_cooking_proc = Slot(uri=MIXS['0001202'], name="food_food_production_facility_food_cooking_proc", curie=MIXS.curie('0001202'),
                   model_uri=TEMP.food_food_production_facility_food_cooking_proc, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_dis_point = Slot(uri=MIXS['0001203'], name="food_food_production_facility_food_dis_point", curie=MIXS.curie('0001203'),
                   model_uri=TEMP.food_food_production_facility_food_dis_point, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_dis_point_city = Slot(uri=MIXS['0001204'], name="food_food_production_facility_food_dis_point_city", curie=MIXS.curie('0001204'),
                   model_uri=TEMP.food_food_production_facility_food_dis_point_city, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_ingredient = Slot(uri=MIXS['0001205'], name="food_food_production_facility_food_ingredient", curie=MIXS.curie('0001205'),
                   model_uri=TEMP.food_food_production_facility_food_ingredient, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_name_status = Slot(uri=MIXS['0001206'], name="food_food_production_facility_food_name_status", curie=MIXS.curie('0001206'),
                   model_uri=TEMP.food_food_production_facility_food_name_status, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_food_origin = Slot(uri=MIXS['0001207'], name="food_food_production_facility_food_origin", curie=MIXS.curie('0001207'),
                   model_uri=TEMP.food_food_production_facility_food_origin, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_food_pack_capacity = Slot(uri=MIXS['0001208'], name="food_food_production_facility_food_pack_capacity", curie=MIXS.curie('0001208'),
                   model_uri=TEMP.food_food_production_facility_food_pack_capacity, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_food_pack_integrity = Slot(uri=MIXS['0001209'], name="food_food_production_facility_food_pack_integrity", curie=MIXS.curie('0001209'),
                   model_uri=TEMP.food_food_production_facility_food_pack_integrity, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_prior_contact = Slot(uri=MIXS['0001210'], name="food_food_production_facility_food_prior_contact", curie=MIXS.curie('0001210'),
                   model_uri=TEMP.food_food_production_facility_food_prior_contact, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_prod = Slot(uri=MIXS['0001211'], name="food_food_production_facility_food_prod", curie=MIXS.curie('0001211'),
                   model_uri=TEMP.food_food_production_facility_food_prod, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_prod_synonym = Slot(uri=MIXS['0001212'], name="food_food_production_facility_food_prod_synonym", curie=MIXS.curie('0001212'),
                   model_uri=TEMP.food_food_production_facility_food_prod_synonym, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_food_product_qual = Slot(uri=MIXS['0001213'], name="food_food_production_facility_food_product_qual", curie=MIXS.curie('0001213'),
                   model_uri=TEMP.food_food_production_facility_food_product_qual, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_food_trace_list = Slot(uri=MIXS['0001214'], name="food_food_production_facility_food_trace_list", curie=MIXS.curie('0001214'),
                   model_uri=TEMP.food_food_production_facility_food_trace_list, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_HACCP_term = Slot(uri=MIXS['0001215'], name="food_food_production_facility_HACCP_term", curie=MIXS.curie('0001215'),
                   model_uri=TEMP.food_food_production_facility_HACCP_term, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_microb_cult_med = Slot(uri=MIXS['0001216'], name="food_food_production_facility_microb_cult_med", curie=MIXS.curie('0001216'),
                   model_uri=TEMP.food_food_production_facility_microb_cult_med, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_nucl_acid_ext_kit = Slot(uri=MIXS['0001223'], name="food_food_production_facility_nucl_acid_ext_kit", curie=MIXS.curie('0001223'),
                   model_uri=TEMP.food_food_production_facility_nucl_acid_ext_kit, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_num_samp_collect = Slot(uri=MIXS['0001224'], name="food_food_production_facility_num_samp_collect", curie=MIXS.curie('0001224'),
                   model_uri=TEMP.food_food_production_facility_num_samp_collect, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_collect_method = Slot(uri=MIXS['0001225'], name="food_food_production_facility_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=TEMP.food_food_production_facility_samp_collect_method, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_rep_biol = Slot(uri=MIXS['0001226'], name="food_food_production_facility_samp_rep_biol", curie=MIXS.curie('0001226'),
                   model_uri=TEMP.food_food_production_facility_samp_rep_biol, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_rep_tech = Slot(uri=MIXS['0001227'], name="food_food_production_facility_samp_rep_tech", curie=MIXS.curie('0001227'),
                   model_uri=TEMP.food_food_production_facility_samp_rep_tech, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_stor_device = Slot(uri=MIXS['0001228'], name="food_food_production_facility_samp_stor_device", curie=MIXS.curie('0001228'),
                   model_uri=TEMP.food_food_production_facility_samp_stor_device, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_stor_media = Slot(uri=MIXS['0001229'], name="food_food_production_facility_samp_stor_media", curie=MIXS.curie('0001229'),
                   model_uri=TEMP.food_food_production_facility_samp_stor_media, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_transport_cont = Slot(uri=MIXS['0001230'], name="food_food_production_facility_samp_transport_cont", curie=MIXS.curie('0001230'),
                   model_uri=TEMP.food_food_production_facility_samp_transport_cont, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_transport_dur = Slot(uri=MIXS['0001231'], name="food_food_production_facility_samp_transport_dur", curie=MIXS.curie('0001231'),
                   model_uri=TEMP.food_food_production_facility_samp_transport_dur, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_transport_temp = Slot(uri=MIXS['0001232'], name="food_food_production_facility_samp_transport_temp", curie=MIXS.curie('0001232'),
                   model_uri=TEMP.food_food_production_facility_samp_transport_temp, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_spec_intended_cons = Slot(uri=MIXS['0001234'], name="food_food_production_facility_spec_intended_cons", curie=MIXS.curie('0001234'),
                   model_uri=TEMP.food_food_production_facility_spec_intended_cons, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_study_design = Slot(uri=MIXS['0001236'], name="food_food_production_facility_study_design", curie=MIXS.curie('0001236'),
                   model_uri=TEMP.food_food_production_facility_study_design, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_study_inc_dur = Slot(uri=MIXS['0001237'], name="food_food_production_facility_study_inc_dur", curie=MIXS.curie('0001237'),
                   model_uri=TEMP.food_food_production_facility_study_inc_dur, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_study_inc_temp = Slot(uri=MIXS['0001238'], name="food_food_production_facility_study_inc_temp", curie=MIXS.curie('0001238'),
                   model_uri=TEMP.food_food_production_facility_study_inc_temp, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_study_timecourse = Slot(uri=MIXS['0001239'], name="food_food_production_facility_study_timecourse", curie=MIXS.curie('0001239'),
                   model_uri=TEMP.food_food_production_facility_study_timecourse, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_study_tmnt = Slot(uri=MIXS['0001240'], name="food_food_production_facility_study_tmnt", curie=MIXS.curie('0001240'),
                   model_uri=TEMP.food_food_production_facility_study_tmnt, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_facility_type = Slot(uri=MIXS['0001252'], name="food_food_production_facility_facility_type", curie=MIXS.curie('0001252'),
                   model_uri=TEMP.food_food_production_facility_facility_type, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_hygienic_area = Slot(uri=MIXS['0001253'], name="food_food_production_facility_hygienic_area", curie=MIXS.curie('0001253'),
                   model_uri=TEMP.food_food_production_facility_hygienic_area, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_env_monitoring_zone = Slot(uri=MIXS['0001254'], name="food_food_production_facility_env_monitoring_zone", curie=MIXS.curie('0001254'),
                   model_uri=TEMP.food_food_production_facility_env_monitoring_zone, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_area_samp_size = Slot(uri=MIXS['0001255'], name="food_food_production_facility_area_samp_size", curie=MIXS.curie('0001255'),
                   model_uri=TEMP.food_food_production_facility_area_samp_size, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_samp_surf_moisture = Slot(uri=MIXS['0001256'], name="food_food_production_facility_samp_surf_moisture", curie=MIXS.curie('0001256'),
                   model_uri=TEMP.food_food_production_facility_samp_surf_moisture, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_samp_loc_condition = Slot(uri=MIXS['0001257'], name="food_food_production_facility_samp_loc_condition", curie=MIXS.curie('0001257'),
                   model_uri=TEMP.food_food_production_facility_samp_loc_condition, domain=FoodFoodProductionFacility, range=Optional[str])

slots.food_food_production_facility_biocide_used = Slot(uri=MIXS['0001258'], name="food_food_production_facility_biocide_used", curie=MIXS.curie('0001258'),
                   model_uri=TEMP.food_food_production_facility_biocide_used, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_ster_meth_samp_room = Slot(uri=MIXS['0001259'], name="food_food_production_facility_ster_meth_samp_room", curie=MIXS.curie('0001259'),
                   model_uri=TEMP.food_food_production_facility_ster_meth_samp_room, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_food_production_facility_prod_label_claims = Slot(uri=MIXS['0001337'], name="food_food_production_facility_prod_label_claims", curie=MIXS.curie('0001337'),
                   model_uri=TEMP.food_food_production_facility_prod_label_claims, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.food_human_foods_samp_size = Slot(uri=MIXS['0000001'], name="food_human_foods_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=TEMP.food_human_foods_samp_size, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_samp_collect_device = Slot(uri=MIXS['0000002'], name="food_human_foods_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=TEMP.food_human_foods_samp_collect_device, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_experimental_factor = Slot(uri=MIXS['0000008'], name="food_human_foods_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=TEMP.food_human_foods_experimental_factor, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_lat_lon = Slot(uri=MIXS['0000009'], name="food_human_foods_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.food_human_foods_lat_lon, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_geo_loc_name = Slot(uri=MIXS['0000010'], name="food_human_foods_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.food_human_foods_geo_loc_name, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_collection_date = Slot(uri=MIXS['0000011'], name="food_human_foods_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.food_human_foods_collection_date, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_env_broad_scale = Slot(uri=MIXS['0000012'], name="food_human_foods_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.food_human_foods_env_broad_scale, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_env_local_scale = Slot(uri=MIXS['0000013'], name="food_human_foods_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.food_human_foods_env_local_scale, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_env_medium = Slot(uri=MIXS['0000014'], name="food_human_foods_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.food_human_foods_env_medium, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="food_human_foods_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=TEMP.food_human_foods_nucl_acid_ext, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_seq_meth = Slot(uri=MIXS['0000050'], name="food_human_foods_seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=TEMP.food_human_foods_seq_meth, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_project_name = Slot(uri=MIXS['0000092'], name="food_human_foods_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.food_human_foods_project_name, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_organism_count = Slot(uri=MIXS['0000103'], name="food_human_foods_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.food_human_foods_organism_count, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_samp_stor_temp = Slot(uri=MIXS['0000110'], name="food_human_foods_samp_stor_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.food_human_foods_samp_stor_temp, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="food_human_foods_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.food_human_foods_samp_vol_we_dna_ext, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_temp = Slot(uri=MIXS['0000113'], name="food_human_foods_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.food_human_foods_temp, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_samp_stor_dur = Slot(uri=MIXS['0000116'], name="food_human_foods_samp_stor_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.food_human_foods_samp_stor_dur, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_pool_dna_extracts = Slot(uri=MIXS['0000325'], name="food_human_foods_pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=TEMP.food_human_foods_pool_dna_extracts, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_misc_param = Slot(uri=MIXS['0000752'], name="food_human_foods_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.food_human_foods_misc_param, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_perturbation = Slot(uri=MIXS['0000754'], name="food_human_foods_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.food_human_foods_perturbation, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_samp_stor_loc = Slot(uri=MIXS['0000755'], name="food_human_foods_samp_stor_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.food_human_foods_samp_stor_loc, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_genetic_mod = Slot(uri=MIXS['0000859'], name="food_human_foods_genetic_mod", curie=MIXS.curie('0000859'),
                   model_uri=TEMP.food_human_foods_genetic_mod, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_samp_name = Slot(uri=MIXS['0001107'], name="food_human_foods_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.food_human_foods_samp_name, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_cult_result = Slot(uri=MIXS['0001117'], name="food_human_foods_cult_result", curie=MIXS.curie('0001117'),
                   model_uri=TEMP.food_human_foods_cult_result, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_cult_result_org = Slot(uri=MIXS['0001118'], name="food_human_foods_cult_result_org", curie=MIXS.curie('0001118'),
                   model_uri=TEMP.food_human_foods_cult_result_org, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_cult_target = Slot(uri=MIXS['0001119'], name="food_human_foods_cult_target", curie=MIXS.curie('0001119'),
                   model_uri=TEMP.food_human_foods_cult_target, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_food_contact_surf = Slot(uri=MIXS['0001131'], name="food_human_foods_food_contact_surf", curie=MIXS.curie('0001131'),
                   model_uri=TEMP.food_human_foods_food_contact_surf, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_food_contain_wrap = Slot(uri=MIXS['0001132'], name="food_human_foods_food_contain_wrap", curie=MIXS.curie('0001132'),
                   model_uri=TEMP.food_human_foods_food_contain_wrap, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_food_pack_medium = Slot(uri=MIXS['0001134'], name="food_human_foods_food_pack_medium", curie=MIXS.curie('0001134'),
                   model_uri=TEMP.food_human_foods_food_pack_medium, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_food_preserv_proc = Slot(uri=MIXS['0001135'], name="food_human_foods_food_preserv_proc", curie=MIXS.curie('0001135'),
                   model_uri=TEMP.food_human_foods_food_preserv_proc, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_food_trav_mode = Slot(uri=MIXS['0001137'], name="food_human_foods_food_trav_mode", curie=MIXS.curie('0001137'),
                   model_uri=TEMP.food_human_foods_food_trav_mode, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_food_trav_vehic = Slot(uri=MIXS['0001138'], name="food_human_foods_food_trav_vehic", curie=MIXS.curie('0001138'),
                   model_uri=TEMP.food_human_foods_food_trav_vehic, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_food_source = Slot(uri=MIXS['0001139'], name="food_human_foods_food_source", curie=MIXS.curie('0001139'),
                   model_uri=TEMP.food_human_foods_food_source, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_food_treat_proc = Slot(uri=MIXS['0001140'], name="food_human_foods_food_treat_proc", curie=MIXS.curie('0001140'),
                   model_uri=TEMP.food_human_foods_food_treat_proc, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_intended_consumer = Slot(uri=MIXS['0001144'], name="food_human_foods_intended_consumer", curie=MIXS.curie('0001144'),
                   model_uri=TEMP.food_human_foods_intended_consumer, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_library_prep_kit = Slot(uri=MIXS['0001145'], name="food_human_foods_library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=TEMP.food_human_foods_library_prep_kit, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_lot_number = Slot(uri=MIXS['0001147'], name="food_human_foods_lot_number", curie=MIXS.curie('0001147'),
                   model_uri=TEMP.food_human_foods_lot_number, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_part_plant_animal = Slot(uri=MIXS['0001149'], name="food_human_foods_part_plant_animal", curie=MIXS.curie('0001149'),
                   model_uri=TEMP.food_human_foods_part_plant_animal, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_samp_purpose = Slot(uri=MIXS['0001151'], name="food_human_foods_samp_purpose", curie=MIXS.curie('0001151'),
                   model_uri=TEMP.food_human_foods_samp_purpose, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_repository_name = Slot(uri=MIXS['0001152'], name="food_human_foods_repository_name", curie=MIXS.curie('0001152'),
                   model_uri=TEMP.food_human_foods_repository_name, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_samp_pooling = Slot(uri=MIXS['0001153'], name="food_human_foods_samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=TEMP.food_human_foods_samp_pooling, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_samp_source_mat_cat = Slot(uri=MIXS['0001154'], name="food_human_foods_samp_source_mat_cat", curie=MIXS.curie('0001154'),
                   model_uri=TEMP.food_human_foods_samp_source_mat_cat, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_sequencing_kit = Slot(uri=MIXS['0001155'], name="food_human_foods_sequencing_kit", curie=MIXS.curie('0001155'),
                   model_uri=TEMP.food_human_foods_sequencing_kit, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_sequencing_location = Slot(uri=MIXS['0001156'], name="food_human_foods_sequencing_location", curie=MIXS.curie('0001156'),
                   model_uri=TEMP.food_human_foods_sequencing_location, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_serovar_or_serotype = Slot(uri=MIXS['0001157'], name="food_human_foods_serovar_or_serotype", curie=MIXS.curie('0001157'),
                   model_uri=TEMP.food_human_foods_serovar_or_serotype, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_spikein_org = Slot(uri=MIXS['0001167'], name="food_human_foods_spikein_org", curie=MIXS.curie('0001167'),
                   model_uri=TEMP.food_human_foods_spikein_org, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_spikein_serovar = Slot(uri=MIXS['0001168'], name="food_human_foods_spikein_serovar", curie=MIXS.curie('0001168'),
                   model_uri=TEMP.food_human_foods_spikein_serovar, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_spikein_growth_med = Slot(uri=MIXS['0001169'], name="food_human_foods_spikein_growth_med", curie=MIXS.curie('0001169'),
                   model_uri=TEMP.food_human_foods_spikein_growth_med, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_spikein_strain = Slot(uri=MIXS['0001170'], name="food_human_foods_spikein_strain", curie=MIXS.curie('0001170'),
                   model_uri=TEMP.food_human_foods_spikein_strain, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_spikein_antibiotic = Slot(uri=MIXS['0001171'], name="food_human_foods_spikein_antibiotic", curie=MIXS.curie('0001171'),
                   model_uri=TEMP.food_human_foods_spikein_antibiotic, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_spikein_metal = Slot(uri=MIXS['0001172'], name="food_human_foods_spikein_metal", curie=MIXS.curie('0001172'),
                   model_uri=TEMP.food_human_foods_spikein_metal, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_timepoint = Slot(uri=MIXS['0001173'], name="food_human_foods_timepoint", curie=MIXS.curie('0001173'),
                   model_uri=TEMP.food_human_foods_timepoint, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_enrichment_protocol = Slot(uri=MIXS['0001177'], name="food_human_foods_enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=TEMP.food_human_foods_enrichment_protocol, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_food_quality_date = Slot(uri=MIXS['0001178'], name="food_human_foods_food_quality_date", curie=MIXS.curie('0001178'),
                   model_uri=TEMP.food_human_foods_food_quality_date, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_IFSAC_category = Slot(uri=MIXS['0001179'], name="food_human_foods_IFSAC_category", curie=MIXS.curie('0001179'),
                   model_uri=TEMP.food_human_foods_IFSAC_category, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_cult_isol_date = Slot(uri=MIXS['0001181'], name="food_human_foods_cult_isol_date", curie=MIXS.curie('0001181'),
                   model_uri=TEMP.food_human_foods_cult_isol_date, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_coll_site_geo_feat = Slot(uri=MIXS['0001183'], name="food_human_foods_coll_site_geo_feat", curie=MIXS.curie('0001183'),
                   model_uri=TEMP.food_human_foods_coll_site_geo_feat, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_food_product_type = Slot(uri=MIXS['0001184'], name="food_human_foods_food_product_type", curie=MIXS.curie('0001184'),
                   model_uri=TEMP.food_human_foods_food_product_type, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_ferm_chem_add = Slot(uri=MIXS['0001185'], name="food_human_foods_ferm_chem_add", curie=MIXS.curie('0001185'),
                   model_uri=TEMP.food_human_foods_ferm_chem_add, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_ferm_chem_add_perc = Slot(uri=MIXS['0001186'], name="food_human_foods_ferm_chem_add_perc", curie=MIXS.curie('0001186'),
                   model_uri=TEMP.food_human_foods_ferm_chem_add_perc, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_ferm_headspace_oxy = Slot(uri=MIXS['0001187'], name="food_human_foods_ferm_headspace_oxy", curie=MIXS.curie('0001187'),
                   model_uri=TEMP.food_human_foods_ferm_headspace_oxy, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_ferm_medium = Slot(uri=MIXS['0001188'], name="food_human_foods_ferm_medium", curie=MIXS.curie('0001188'),
                   model_uri=TEMP.food_human_foods_ferm_medium, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_ferm_pH = Slot(uri=MIXS['0001189'], name="food_human_foods_ferm_pH", curie=MIXS.curie('0001189'),
                   model_uri=TEMP.food_human_foods_ferm_pH, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_ferm_rel_humidity = Slot(uri=MIXS['0001190'], name="food_human_foods_ferm_rel_humidity", curie=MIXS.curie('0001190'),
                   model_uri=TEMP.food_human_foods_ferm_rel_humidity, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_ferm_temp = Slot(uri=MIXS['0001191'], name="food_human_foods_ferm_temp", curie=MIXS.curie('0001191'),
                   model_uri=TEMP.food_human_foods_ferm_temp, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_ferm_time = Slot(uri=MIXS['0001192'], name="food_human_foods_ferm_time", curie=MIXS.curie('0001192'),
                   model_uri=TEMP.food_human_foods_ferm_time, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_ferm_vessel = Slot(uri=MIXS['0001193'], name="food_human_foods_ferm_vessel", curie=MIXS.curie('0001193'),
                   model_uri=TEMP.food_human_foods_ferm_vessel, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_bacterial_density = Slot(uri=MIXS['0001194'], name="food_human_foods_bacterial_density", curie=MIXS.curie('0001194'),
                   model_uri=TEMP.food_human_foods_bacterial_density, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_cons_food_stor_dur = Slot(uri=MIXS['0001195'], name="food_human_foods_cons_food_stor_dur", curie=MIXS.curie('0001195'),
                   model_uri=TEMP.food_human_foods_cons_food_stor_dur, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_cons_food_stor_temp = Slot(uri=MIXS['0001196'], name="food_human_foods_cons_food_stor_temp", curie=MIXS.curie('0001196'),
                   model_uri=TEMP.food_human_foods_cons_food_stor_temp, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_cons_purch_date = Slot(uri=MIXS['0001197'], name="food_human_foods_cons_purch_date", curie=MIXS.curie('0001197'),
                   model_uri=TEMP.food_human_foods_cons_purch_date, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_cons_qty_purchased = Slot(uri=MIXS['0001198'], name="food_human_foods_cons_qty_purchased", curie=MIXS.curie('0001198'),
                   model_uri=TEMP.food_human_foods_cons_qty_purchased, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_dietary_claim_use = Slot(uri=MIXS['0001199'], name="food_human_foods_dietary_claim_use", curie=MIXS.curie('0001199'),
                   model_uri=TEMP.food_human_foods_dietary_claim_use, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_food_additive = Slot(uri=MIXS['0001200'], name="food_human_foods_food_additive", curie=MIXS.curie('0001200'),
                   model_uri=TEMP.food_human_foods_food_additive, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_food_allergen_label = Slot(uri=MIXS['0001201'], name="food_human_foods_food_allergen_label", curie=MIXS.curie('0001201'),
                   model_uri=TEMP.food_human_foods_food_allergen_label, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_food_cooking_proc = Slot(uri=MIXS['0001202'], name="food_human_foods_food_cooking_proc", curie=MIXS.curie('0001202'),
                   model_uri=TEMP.food_human_foods_food_cooking_proc, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_food_dis_point = Slot(uri=MIXS['0001203'], name="food_human_foods_food_dis_point", curie=MIXS.curie('0001203'),
                   model_uri=TEMP.food_human_foods_food_dis_point, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_food_ingredient = Slot(uri=MIXS['0001205'], name="food_human_foods_food_ingredient", curie=MIXS.curie('0001205'),
                   model_uri=TEMP.food_human_foods_food_ingredient, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_food_name_status = Slot(uri=MIXS['0001206'], name="food_human_foods_food_name_status", curie=MIXS.curie('0001206'),
                   model_uri=TEMP.food_human_foods_food_name_status, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_food_origin = Slot(uri=MIXS['0001207'], name="food_human_foods_food_origin", curie=MIXS.curie('0001207'),
                   model_uri=TEMP.food_human_foods_food_origin, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_food_pack_capacity = Slot(uri=MIXS['0001208'], name="food_human_foods_food_pack_capacity", curie=MIXS.curie('0001208'),
                   model_uri=TEMP.food_human_foods_food_pack_capacity, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_food_pack_integrity = Slot(uri=MIXS['0001209'], name="food_human_foods_food_pack_integrity", curie=MIXS.curie('0001209'),
                   model_uri=TEMP.food_human_foods_food_pack_integrity, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_food_prior_contact = Slot(uri=MIXS['0001210'], name="food_human_foods_food_prior_contact", curie=MIXS.curie('0001210'),
                   model_uri=TEMP.food_human_foods_food_prior_contact, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_food_prod = Slot(uri=MIXS['0001211'], name="food_human_foods_food_prod", curie=MIXS.curie('0001211'),
                   model_uri=TEMP.food_human_foods_food_prod, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_food_prod_synonym = Slot(uri=MIXS['0001212'], name="food_human_foods_food_prod_synonym", curie=MIXS.curie('0001212'),
                   model_uri=TEMP.food_human_foods_food_prod_synonym, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_food_product_qual = Slot(uri=MIXS['0001213'], name="food_human_foods_food_product_qual", curie=MIXS.curie('0001213'),
                   model_uri=TEMP.food_human_foods_food_product_qual, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_food_trace_list = Slot(uri=MIXS['0001214'], name="food_human_foods_food_trace_list", curie=MIXS.curie('0001214'),
                   model_uri=TEMP.food_human_foods_food_trace_list, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_HACCP_term = Slot(uri=MIXS['0001215'], name="food_human_foods_HACCP_term", curie=MIXS.curie('0001215'),
                   model_uri=TEMP.food_human_foods_HACCP_term, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_microb_cult_med = Slot(uri=MIXS['0001216'], name="food_human_foods_microb_cult_med", curie=MIXS.curie('0001216'),
                   model_uri=TEMP.food_human_foods_microb_cult_med, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_microb_start = Slot(uri=MIXS['0001217'], name="food_human_foods_microb_start", curie=MIXS.curie('0001217'),
                   model_uri=TEMP.food_human_foods_microb_start, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_microb_start_count = Slot(uri=MIXS['0001218'], name="food_human_foods_microb_start_count", curie=MIXS.curie('0001218'),
                   model_uri=TEMP.food_human_foods_microb_start_count, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_microb_start_inoc = Slot(uri=MIXS['0001219'], name="food_human_foods_microb_start_inoc", curie=MIXS.curie('0001219'),
                   model_uri=TEMP.food_human_foods_microb_start_inoc, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_microb_start_prep = Slot(uri=MIXS['0001220'], name="food_human_foods_microb_start_prep", curie=MIXS.curie('0001220'),
                   model_uri=TEMP.food_human_foods_microb_start_prep, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_microb_start_source = Slot(uri=MIXS['0001221'], name="food_human_foods_microb_start_source", curie=MIXS.curie('0001221'),
                   model_uri=TEMP.food_human_foods_microb_start_source, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_microb_start_taxID = Slot(uri=MIXS['0001222'], name="food_human_foods_microb_start_taxID", curie=MIXS.curie('0001222'),
                   model_uri=TEMP.food_human_foods_microb_start_taxID, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_nucl_acid_ext_kit = Slot(uri=MIXS['0001223'], name="food_human_foods_nucl_acid_ext_kit", curie=MIXS.curie('0001223'),
                   model_uri=TEMP.food_human_foods_nucl_acid_ext_kit, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_num_samp_collect = Slot(uri=MIXS['0001224'], name="food_human_foods_num_samp_collect", curie=MIXS.curie('0001224'),
                   model_uri=TEMP.food_human_foods_num_samp_collect, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_sample_collec_method = Slot(uri=MIXS['0001225'], name="food_human_foods_sample_collec_method", curie=MIXS.curie('0001225'),
                   model_uri=TEMP.food_human_foods_sample_collec_method, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_samp_rep_biol = Slot(uri=MIXS['0001226'], name="food_human_foods_samp_rep_biol", curie=MIXS.curie('0001226'),
                   model_uri=TEMP.food_human_foods_samp_rep_biol, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_samp_rep_tech = Slot(uri=MIXS['0001227'], name="food_human_foods_samp_rep_tech", curie=MIXS.curie('0001227'),
                   model_uri=TEMP.food_human_foods_samp_rep_tech, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_samp_stor_device = Slot(uri=MIXS['0001228'], name="food_human_foods_samp_stor_device", curie=MIXS.curie('0001228'),
                   model_uri=TEMP.food_human_foods_samp_stor_device, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_samp_stor_media = Slot(uri=MIXS['0001229'], name="food_human_foods_samp_stor_media", curie=MIXS.curie('0001229'),
                   model_uri=TEMP.food_human_foods_samp_stor_media, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_samp_transport_cont = Slot(uri=MIXS['0001230'], name="food_human_foods_samp_transport_cont", curie=MIXS.curie('0001230'),
                   model_uri=TEMP.food_human_foods_samp_transport_cont, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_samp_transport_dur = Slot(uri=MIXS['0001231'], name="food_human_foods_samp_transport_dur", curie=MIXS.curie('0001231'),
                   model_uri=TEMP.food_human_foods_samp_transport_dur, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_samp_transport_temp = Slot(uri=MIXS['0001232'], name="food_human_foods_samp_transport_temp", curie=MIXS.curie('0001232'),
                   model_uri=TEMP.food_human_foods_samp_transport_temp, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_spikein_AMR = Slot(uri=MIXS['0001235'], name="food_human_foods_spikein_AMR", curie=MIXS.curie('0001235'),
                   model_uri=TEMP.food_human_foods_spikein_AMR, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_study_design = Slot(uri=MIXS['0001236'], name="food_human_foods_study_design", curie=MIXS.curie('0001236'),
                   model_uri=TEMP.food_human_foods_study_design, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_study_inc_dur = Slot(uri=MIXS['0001237'], name="food_human_foods_study_inc_dur", curie=MIXS.curie('0001237'),
                   model_uri=TEMP.food_human_foods_study_inc_dur, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_study_inc_temp = Slot(uri=MIXS['0001238'], name="food_human_foods_study_inc_temp", curie=MIXS.curie('0001238'),
                   model_uri=TEMP.food_human_foods_study_inc_temp, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_study_timecourse = Slot(uri=MIXS['0001239'], name="food_human_foods_study_timecourse", curie=MIXS.curie('0001239'),
                   model_uri=TEMP.food_human_foods_study_timecourse, domain=FoodHumanFoods, range=Optional[str])

slots.food_human_foods_study_tmnt = Slot(uri=MIXS['0001240'], name="food_human_foods_study_tmnt", curie=MIXS.curie('0001240'),
                   model_uri=TEMP.food_human_foods_study_tmnt, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.food_human_foods_spikein_count = Slot(uri=MIXS['0001335'], name="food_human_foods_spikein_count", curie=MIXS.curie('0001335'),
                   model_uri=TEMP.food_human_foods_spikein_count, domain=FoodHumanFoods, range=Optional[str])

slots.symbiont_associated_lat_lon = Slot(uri=MIXS['0000009'], name="symbiont_associated_lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=TEMP.symbiont_associated_lat_lon, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_geo_loc_name = Slot(uri=MIXS['0000010'], name="symbiont_associated_geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=TEMP.symbiont_associated_geo_loc_name, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_collection_date = Slot(uri=MIXS['0000011'], name="symbiont_associated_collection_date", curie=MIXS.curie('0000011'),
                   model_uri=TEMP.symbiont_associated_collection_date, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_env_broad_scale = Slot(uri=MIXS['0000012'], name="symbiont_associated_env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=TEMP.symbiont_associated_env_broad_scale, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_env_local_scale = Slot(uri=MIXS['0000013'], name="symbiont_associated_env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=TEMP.symbiont_associated_env_local_scale, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_env_medium = Slot(uri=MIXS['0000014'], name="symbiont_associated_env_medium", curie=MIXS.curie('0000014'),
                   model_uri=TEMP.symbiont_associated_env_medium, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_depth = Slot(uri=MIXS['0000018'], name="symbiont_associated_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.symbiont_associated_depth, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_source_mat_id = Slot(uri=MIXS['0000026'], name="symbiont_associated_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=TEMP.symbiont_associated_source_mat_id, domain=SymbiontAssociated, range=Optional[Union[str, List[str]]])

slots.symbiont_associated_project_name = Slot(uri=MIXS['0000092'], name="symbiont_associated_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.symbiont_associated_project_name, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_elev = Slot(uri=MIXS['0000093'], name="symbiont_associated_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.symbiont_associated_elev, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_alt = Slot(uri=MIXS['0000094'], name="symbiont_associated_alt", curie=MIXS.curie('0000094'),
                   model_uri=TEMP.symbiont_associated_alt, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_organism_count = Slot(uri=MIXS['0000103'], name="symbiont_associated_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.symbiont_associated_organism_count, domain=SymbiontAssociated, range=Optional[Union[str, List[str]]])

slots.symbiont_associated_samp_salinity = Slot(uri=MIXS['0000109'], name="symbiont_associated_samp_salinity", curie=MIXS.curie('0000109'),
                   model_uri=TEMP.symbiont_associated_samp_salinity, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_samp_store_temp = Slot(uri=MIXS['0000110'], name="symbiont_associated_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.symbiont_associated_samp_store_temp, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="symbiont_associated_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.symbiont_associated_samp_vol_we_dna_ext, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_temp = Slot(uri=MIXS['0000113'], name="symbiont_associated_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.symbiont_associated_temp, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_samp_store_dur = Slot(uri=MIXS['0000116'], name="symbiont_associated_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.symbiont_associated_samp_store_dur, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_common_name = Slot(uri=MIXS['0000248'], name="symbiont_associated_host_common_name", curie=MIXS.curie('0000248'),
                   model_uri=TEMP.symbiont_associated_host_common_name, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_taxid = Slot(uri=MIXS['0000250'], name="symbiont_associated_host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=TEMP.symbiont_associated_host_taxid, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_life_stage = Slot(uri=MIXS['0000251'], name="symbiont_associated_host_life_stage", curie=MIXS.curie('0000251'),
                   model_uri=TEMP.symbiont_associated_host_life_stage, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_substrate = Slot(uri=MIXS['0000252'], name="symbiont_associated_host_substrate", curie=MIXS.curie('0000252'),
                   model_uri=TEMP.symbiont_associated_host_substrate, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_infra_specific_name = Slot(uri=MIXS['0000253'], name="symbiont_associated_host_infra_specific_name", curie=MIXS.curie('0000253'),
                   model_uri=TEMP.symbiont_associated_host_infra_specific_name, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_infra_specific_rank = Slot(uri=MIXS['0000254'], name="symbiont_associated_host_infra_specific_rank", curie=MIXS.curie('0000254'),
                   model_uri=TEMP.symbiont_associated_host_infra_specific_rank, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_age = Slot(uri=MIXS['0000255'], name="symbiont_associated_host_age", curie=MIXS.curie('0000255'),
                   model_uri=TEMP.symbiont_associated_host_age, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_length = Slot(uri=MIXS['0000256'], name="symbiont_associated_host_length", curie=MIXS.curie('0000256'),
                   model_uri=TEMP.symbiont_associated_host_length, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_dry_mass = Slot(uri=MIXS['0000257'], name="symbiont_associated_host_dry_mass", curie=MIXS.curie('0000257'),
                   model_uri=TEMP.symbiont_associated_host_dry_mass, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_color = Slot(uri=MIXS['0000260'], name="symbiont_associated_host_color", curie=MIXS.curie('0000260'),
                   model_uri=TEMP.symbiont_associated_host_color, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_shape = Slot(uri=MIXS['0000261'], name="symbiont_associated_host_shape", curie=MIXS.curie('0000261'),
                   model_uri=TEMP.symbiont_associated_host_shape, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_tot_mass = Slot(uri=MIXS['0000263'], name="symbiont_associated_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=TEMP.symbiont_associated_host_tot_mass, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_height = Slot(uri=MIXS['0000264'], name="symbiont_associated_host_height", curie=MIXS.curie('0000264'),
                   model_uri=TEMP.symbiont_associated_host_height, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_genotype = Slot(uri=MIXS['0000365'], name="symbiont_associated_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=TEMP.symbiont_associated_host_genotype, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_chem_administration = Slot(uri=MIXS['0000751'], name="symbiont_associated_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=TEMP.symbiont_associated_chem_administration, domain=SymbiontAssociated, range=Optional[Union[str, List[str]]])

slots.symbiont_associated_misc_param = Slot(uri=MIXS['0000752'], name="symbiont_associated_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.symbiont_associated_misc_param, domain=SymbiontAssociated, range=Optional[Union[str, List[str]]])

slots.symbiont_associated_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="symbiont_associated_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.symbiont_associated_oxy_stat_samp, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_perturbation = Slot(uri=MIXS['0000754'], name="symbiont_associated_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.symbiont_associated_perturbation, domain=SymbiontAssociated, range=Optional[Union[str, List[str]]])

slots.symbiont_associated_samp_store_loc = Slot(uri=MIXS['0000755'], name="symbiont_associated_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.symbiont_associated_samp_store_loc, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_subject_id = Slot(uri=MIXS['0000861'], name="symbiont_associated_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=TEMP.symbiont_associated_host_subject_id, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_sex = Slot(uri=MIXS['0000862'], name="symbiont_associated_host_sex", curie=MIXS.curie('0000862'),
                   model_uri=TEMP.symbiont_associated_host_sex, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_body_habitat = Slot(uri=MIXS['0000866'], name="symbiont_associated_host_body_habitat", curie=MIXS.curie('0000866'),
                   model_uri=TEMP.symbiont_associated_host_body_habitat, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_body_site = Slot(uri=MIXS['0000867'], name="symbiont_associated_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=TEMP.symbiont_associated_host_body_site, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_body_product = Slot(uri=MIXS['0000868'], name="symbiont_associated_host_body_product", curie=MIXS.curie('0000868'),
                   model_uri=TEMP.symbiont_associated_host_body_product, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_growth_cond = Slot(uri=MIXS['0000871'], name="symbiont_associated_host_growth_cond", curie=MIXS.curie('0000871'),
                   model_uri=TEMP.symbiont_associated_host_growth_cond, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_family_relationship = Slot(uri=MIXS['0000872'], name="symbiont_associated_host_family_relationship", curie=MIXS.curie('0000872'),
                   model_uri=TEMP.symbiont_associated_host_family_relationship, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_phenotype = Slot(uri=MIXS['0000874'], name="symbiont_associated_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=TEMP.symbiont_associated_host_phenotype, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_gravidity = Slot(uri=MIXS['0000875'], name="symbiont_associated_gravidity", curie=MIXS.curie('0000875'),
                   model_uri=TEMP.symbiont_associated_gravidity, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_sample_name = Slot(uri=MIXS['0001107'], name="symbiont_associated_sample_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.symbiont_associated_sample_name, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_association_duration = Slot(uri=MIXS['0001299'], name="symbiont_associated_association_duration", curie=MIXS.curie('0001299'),
                   model_uri=TEMP.symbiont_associated_association_duration, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_sym_life_cycle_type = Slot(uri=MIXS['0001300'], name="symbiont_associated_sym_life_cycle_type", curie=MIXS.curie('0001300'),
                   model_uri=TEMP.symbiont_associated_sym_life_cycle_type, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_symbiont_host_role = Slot(uri=MIXS['0001303'], name="symbiont_associated_symbiont_host_role", curie=MIXS.curie('0001303'),
                   model_uri=TEMP.symbiont_associated_symbiont_host_role, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_number = Slot(uri=MIXS['0001305'], name="symbiont_associated_host_number", curie=MIXS.curie('0001305'),
                   model_uri=TEMP.symbiont_associated_host_number, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_of_host_taxid = Slot(uri=MIXS['0001306'], name="symbiont_associated_host_of_host_taxid", curie=MIXS.curie('0001306'),
                   model_uri=TEMP.symbiont_associated_host_of_host_taxid, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_type_of_symbiosis = Slot(uri=MIXS['0001307'], name="symbiont_associated_type_of_symbiosis", curie=MIXS.curie('0001307'),
                   model_uri=TEMP.symbiont_associated_type_of_symbiosis, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_specificity = Slot(uri=MIXS['0001308'], name="symbiont_associated_host_specificity", curie=MIXS.curie('0001308'),
                   model_uri=TEMP.symbiont_associated_host_specificity, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_symbiont = Slot(uri=MIXS['0001309'], name="symbiont_associated_host_symbiont", curie=MIXS.curie('0001309'),
                   model_uri=TEMP.symbiont_associated_host_symbiont, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_of_host_coinf = Slot(uri=MIXS['0001310'], name="symbiont_associated_host_of_host_coinf", curie=MIXS.curie('0001310'),
                   model_uri=TEMP.symbiont_associated_host_of_host_coinf, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_mode_transmission = Slot(uri=MIXS['0001312'], name="symbiont_associated_mode_transmission", curie=MIXS.curie('0001312'),
                   model_uri=TEMP.symbiont_associated_mode_transmission, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_cellular_loc = Slot(uri=MIXS['0001313'], name="symbiont_associated_host_cellular_loc", curie=MIXS.curie('0001313'),
                   model_uri=TEMP.symbiont_associated_host_cellular_loc, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_dependence = Slot(uri=MIXS['0001315'], name="symbiont_associated_host_dependence", curie=MIXS.curie('0001315'),
                   model_uri=TEMP.symbiont_associated_host_dependence, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_route_transmission = Slot(uri=MIXS['0001316'], name="symbiont_associated_route_transmission", curie=MIXS.curie('0001316'),
                   model_uri=TEMP.symbiont_associated_route_transmission, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_samp_store_sol = Slot(uri=MIXS['0001317'], name="symbiont_associated_samp_store_sol", curie=MIXS.curie('0001317'),
                   model_uri=TEMP.symbiont_associated_samp_store_sol, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_of_host_disease = Slot(uri=MIXS['0001319'], name="symbiont_associated_host_of_host_disease", curie=MIXS.curie('0001319'),
                   model_uri=TEMP.symbiont_associated_host_of_host_disease, domain=SymbiontAssociated, range=Optional[Union[str, List[str]]])

slots.symbiont_associated_host_of_host_name = Slot(uri=MIXS['0001324'], name="symbiont_associated_host_of_host_name", curie=MIXS.curie('0001324'),
                   model_uri=TEMP.symbiont_associated_host_of_host_name, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_of_host_env_loc = Slot(uri=MIXS['0001325'], name="symbiont_associated_host_of_host_env_loc", curie=MIXS.curie('0001325'),
                   model_uri=TEMP.symbiont_associated_host_of_host_env_loc, domain=SymbiontAssociated, range=Optional[Union[str, List[str]]])

slots.symbiont_associated_host_of_host_env_med = Slot(uri=MIXS['0001326'], name="symbiont_associated_host_of_host_env_med", curie=MIXS.curie('0001326'),
                   model_uri=TEMP.symbiont_associated_host_of_host_env_med, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_of_host_sub_id = Slot(uri=MIXS['0001327'], name="symbiont_associated_host_of_host_sub_id", curie=MIXS.curie('0001327'),
                   model_uri=TEMP.symbiont_associated_host_of_host_sub_id, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_of_host_fam_rel = Slot(uri=MIXS['0001328'], name="symbiont_associated_host_of_host_fam_rel", curie=MIXS.curie('0001328'),
                   model_uri=TEMP.symbiont_associated_host_of_host_fam_rel, domain=SymbiontAssociated, range=Optional[Union[str, List[str]]])

slots.symbiont_associated_host_of_host_infname = Slot(uri=MIXS['0001329'], name="symbiont_associated_host_of_host_infname", curie=MIXS.curie('0001329'),
                   model_uri=TEMP.symbiont_associated_host_of_host_infname, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_of_host_infrank = Slot(uri=MIXS['0001330'], name="symbiont_associated_host_of_host_infrank", curie=MIXS.curie('0001330'),
                   model_uri=TEMP.symbiont_associated_host_of_host_infrank, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_of_host_geno = Slot(uri=MIXS['0001331'], name="symbiont_associated_host_of_host_geno", curie=MIXS.curie('0001331'),
                   model_uri=TEMP.symbiont_associated_host_of_host_geno, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_of_host_pheno = Slot(uri=MIXS['0001332'], name="symbiont_associated_host_of_host_pheno", curie=MIXS.curie('0001332'),
                   model_uri=TEMP.symbiont_associated_host_of_host_pheno, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_of_host_gravid = Slot(uri=MIXS['0001333'], name="symbiont_associated_host_of_host_gravid", curie=MIXS.curie('0001333'),
                   model_uri=TEMP.symbiont_associated_host_of_host_gravid, domain=SymbiontAssociated, range=Optional[str])

slots.symbiont_associated_host_of_host_totmass = Slot(uri=MIXS['0001334'], name="symbiont_associated_host_of_host_totmass", curie=MIXS.curie('0001334'),
                   model_uri=TEMP.symbiont_associated_host_of_host_totmass, domain=SymbiontAssociated, range=Optional[str])

slots.host_associated_depth = Slot(uri=MIXS['0000018'], name="host_associated_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.host_associated_depth, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_disease_stat = Slot(uri=MIXS['0000031'], name="host_associated_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.host_associated_host_disease_stat, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.host_associated_project_name = Slot(uri=MIXS['0000092'], name="host_associated_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.host_associated_project_name, domain=HostAssociated, range=Optional[str])

slots.host_associated_elev = Slot(uri=MIXS['0000093'], name="host_associated_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.host_associated_elev, domain=HostAssociated, range=Optional[str])

slots.host_associated_alt = Slot(uri=MIXS['0000094'], name="host_associated_alt", curie=MIXS.curie('0000094'),
                   model_uri=TEMP.host_associated_alt, domain=HostAssociated, range=Optional[str])

slots.host_associated_organism_count = Slot(uri=MIXS['0000103'], name="host_associated_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.host_associated_organism_count, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.host_associated_samp_store_temp = Slot(uri=MIXS['0000110'], name="host_associated_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.host_associated_samp_store_temp, domain=HostAssociated, range=Optional[str])

slots.host_associated_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="host_associated_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.host_associated_samp_vol_we_dna_ext, domain=HostAssociated, range=Optional[str])

slots.host_associated_temp = Slot(uri=MIXS['0000113'], name="host_associated_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.host_associated_temp, domain=HostAssociated, range=Optional[str])

slots.host_associated_samp_store_dur = Slot(uri=MIXS['0000116'], name="host_associated_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.host_associated_samp_store_dur, domain=HostAssociated, range=Optional[str])

slots.host_associated_salinity = Slot(uri=MIXS['0000183'], name="host_associated_salinity", curie=MIXS.curie('0000183'),
                   model_uri=TEMP.host_associated_salinity, domain=HostAssociated, range=Optional[str])

slots.host_associated_ances_data = Slot(uri=MIXS['0000247'], name="host_associated_ances_data", curie=MIXS.curie('0000247'),
                   model_uri=TEMP.host_associated_ances_data, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_common_name = Slot(uri=MIXS['0000248'], name="host_associated_host_common_name", curie=MIXS.curie('0000248'),
                   model_uri=TEMP.host_associated_host_common_name, domain=HostAssociated, range=Optional[str])

slots.host_associated_samp_dis_stage = Slot(uri=MIXS['0000249'], name="host_associated_samp_dis_stage", curie=MIXS.curie('0000249'),
                   model_uri=TEMP.host_associated_samp_dis_stage, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_taxid = Slot(uri=MIXS['0000250'], name="host_associated_host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=TEMP.host_associated_host_taxid, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_life_stage = Slot(uri=MIXS['0000251'], name="host_associated_host_life_stage", curie=MIXS.curie('0000251'),
                   model_uri=TEMP.host_associated_host_life_stage, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_substrate = Slot(uri=MIXS['0000252'], name="host_associated_host_substrate", curie=MIXS.curie('0000252'),
                   model_uri=TEMP.host_associated_host_substrate, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_age = Slot(uri=MIXS['0000255'], name="host_associated_host_age", curie=MIXS.curie('0000255'),
                   model_uri=TEMP.host_associated_host_age, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_length = Slot(uri=MIXS['0000256'], name="host_associated_host_length", curie=MIXS.curie('0000256'),
                   model_uri=TEMP.host_associated_host_length, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_dry_mass = Slot(uri=MIXS['0000257'], name="host_associated_host_dry_mass", curie=MIXS.curie('0000257'),
                   model_uri=TEMP.host_associated_host_dry_mass, domain=HostAssociated, range=Optional[str])

slots.host_associated_blood_press_diast = Slot(uri=MIXS['0000258'], name="host_associated_blood_press_diast", curie=MIXS.curie('0000258'),
                   model_uri=TEMP.host_associated_blood_press_diast, domain=HostAssociated, range=Optional[str])

slots.host_associated_blood_press_syst = Slot(uri=MIXS['0000259'], name="host_associated_blood_press_syst", curie=MIXS.curie('0000259'),
                   model_uri=TEMP.host_associated_blood_press_syst, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_color = Slot(uri=MIXS['0000260'], name="host_associated_host_color", curie=MIXS.curie('0000260'),
                   model_uri=TEMP.host_associated_host_color, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_shape = Slot(uri=MIXS['0000261'], name="host_associated_host_shape", curie=MIXS.curie('0000261'),
                   model_uri=TEMP.host_associated_host_shape, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_tot_mass = Slot(uri=MIXS['0000263'], name="host_associated_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=TEMP.host_associated_host_tot_mass, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_height = Slot(uri=MIXS['0000264'], name="host_associated_host_height", curie=MIXS.curie('0000264'),
                   model_uri=TEMP.host_associated_host_height, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_body_temp = Slot(uri=MIXS['0000274'], name="host_associated_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=TEMP.host_associated_host_body_temp, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_genotype = Slot(uri=MIXS['0000365'], name="host_associated_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=TEMP.host_associated_host_genotype, domain=HostAssociated, range=Optional[str])

slots.host_associated_chem_administration = Slot(uri=MIXS['0000751'], name="host_associated_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=TEMP.host_associated_chem_administration, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.host_associated_misc_param = Slot(uri=MIXS['0000752'], name="host_associated_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.host_associated_misc_param, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.host_associated_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="host_associated_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.host_associated_oxy_stat_samp, domain=HostAssociated, range=Optional[str])

slots.host_associated_perturbation = Slot(uri=MIXS['0000754'], name="host_associated_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.host_associated_perturbation, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.host_associated_samp_store_loc = Slot(uri=MIXS['0000755'], name="host_associated_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.host_associated_samp_store_loc, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_sex = Slot(uri=MIXS['0000811'], name="host_associated_host_sex", curie=MIXS.curie('0000811'),
                   model_uri=TEMP.host_associated_host_sex, domain=HostAssociated, range=Optional[str])

slots.host_associated_biol_stat = Slot(uri=MIXS['0000858'], name="host_associated_biol_stat", curie=MIXS.curie('0000858'),
                   model_uri=TEMP.host_associated_biol_stat, domain=HostAssociated, range=Optional[str])

slots.host_associated_genetic_mod = Slot(uri=MIXS['0000859'], name="host_associated_genetic_mod", curie=MIXS.curie('0000859'),
                   model_uri=TEMP.host_associated_genetic_mod, domain=HostAssociated, range=Optional[str])

slots.host_associated_samp_capt_status = Slot(uri=MIXS['0000860'], name="host_associated_samp_capt_status", curie=MIXS.curie('0000860'),
                   model_uri=TEMP.host_associated_samp_capt_status, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_subject_id = Slot(uri=MIXS['0000861'], name="host_associated_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=TEMP.host_associated_host_subject_id, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_body_habitat = Slot(uri=MIXS['0000866'], name="host_associated_host_body_habitat", curie=MIXS.curie('0000866'),
                   model_uri=TEMP.host_associated_host_body_habitat, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_body_site = Slot(uri=MIXS['0000867'], name="host_associated_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=TEMP.host_associated_host_body_site, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_diet = Slot(uri=MIXS['0000869'], name="host_associated_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=TEMP.host_associated_host_diet, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.host_associated_host_last_meal = Slot(uri=MIXS['0000870'], name="host_associated_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=TEMP.host_associated_host_last_meal, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.host_associated_host_growth_cond = Slot(uri=MIXS['0000871'], name="host_associated_host_growth_cond", curie=MIXS.curie('0000871'),
                   model_uri=TEMP.host_associated_host_growth_cond, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_family_relation = Slot(uri=MIXS['0000872'], name="host_associated_host_family_relation", curie=MIXS.curie('0000872'),
                   model_uri=TEMP.host_associated_host_family_relation, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.host_associated_host_phenotype = Slot(uri=MIXS['0000874'], name="host_associated_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=TEMP.host_associated_host_phenotype, domain=HostAssociated, range=Optional[str])

slots.host_associated_gravidity = Slot(uri=MIXS['0000875'], name="host_associated_gravidity", curie=MIXS.curie('0000875'),
                   model_uri=TEMP.host_associated_gravidity, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_body_product = Slot(uri=MIXS['0000888'], name="host_associated_host_body_product", curie=MIXS.curie('0000888'),
                   model_uri=TEMP.host_associated_host_body_product, domain=HostAssociated, range=Optional[str])

slots.host_associated_samp_name = Slot(uri=MIXS['0001107'], name="host_associated_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.host_associated_samp_name, domain=HostAssociated, range=Optional[str])

slots.host_associated_host_symbiont = Slot(uri=MIXS['0001298'], name="host_associated_host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=TEMP.host_associated_host_symbiont, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.host_associated_host_subspecf_genlin = Slot(uri=MIXS['0001318'], name="host_associated_host_subspecf_genlin", curie=MIXS.curie('0001318'),
                   model_uri=TEMP.host_associated_host_subspecf_genlin, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.microbial_mat_biofilm_depth = Slot(uri=MIXS['0000018'], name="microbial_mat_biofilm_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.microbial_mat_biofilm_depth, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_project_name = Slot(uri=MIXS['0000092'], name="microbial_mat_biofilm_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.microbial_mat_biofilm_project_name, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_elev = Slot(uri=MIXS['0000093'], name="microbial_mat_biofilm_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.microbial_mat_biofilm_elev, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_methane = Slot(uri=MIXS['0000101'], name="microbial_mat_biofilm_methane", curie=MIXS.curie('0000101'),
                   model_uri=TEMP.microbial_mat_biofilm_methane, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_organism_count = Slot(uri=MIXS['0000103'], name="microbial_mat_biofilm_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.microbial_mat_biofilm_organism_count, domain=MicrobialMatBiofilm, range=Optional[Union[str, List[str]]])

slots.microbial_mat_biofilm_samp_store_temp = Slot(uri=MIXS['0000110'], name="microbial_mat_biofilm_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.microbial_mat_biofilm_samp_store_temp, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="microbial_mat_biofilm_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.microbial_mat_biofilm_samp_vol_we_dna_ext, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_temp = Slot(uri=MIXS['0000113'], name="microbial_mat_biofilm_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.microbial_mat_biofilm_temp, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_samp_store_dur = Slot(uri=MIXS['0000116'], name="microbial_mat_biofilm_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.microbial_mat_biofilm_samp_store_dur, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_diss_oxygen = Slot(uri=MIXS['0000119'], name="microbial_mat_biofilm_diss_oxygen", curie=MIXS.curie('0000119'),
                   model_uri=TEMP.microbial_mat_biofilm_diss_oxygen, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_glucosidase_act = Slot(uri=MIXS['0000137'], name="microbial_mat_biofilm_glucosidase_act", curie=MIXS.curie('0000137'),
                   model_uri=TEMP.microbial_mat_biofilm_glucosidase_act, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_diss_org_nitro = Slot(uri=MIXS['0000162'], name="microbial_mat_biofilm_diss_org_nitro", curie=MIXS.curie('0000162'),
                   model_uri=TEMP.microbial_mat_biofilm_diss_org_nitro, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_aminopept_act = Slot(uri=MIXS['0000172'], name="microbial_mat_biofilm_aminopept_act", curie=MIXS.curie('0000172'),
                   model_uri=TEMP.microbial_mat_biofilm_aminopept_act, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_bacteria_carb_prod = Slot(uri=MIXS['0000173'], name="microbial_mat_biofilm_bacteria_carb_prod", curie=MIXS.curie('0000173'),
                   model_uri=TEMP.microbial_mat_biofilm_bacteria_carb_prod, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_biomass = Slot(uri=MIXS['0000174'], name="microbial_mat_biofilm_biomass", curie=MIXS.curie('0000174'),
                   model_uri=TEMP.microbial_mat_biofilm_biomass, domain=MicrobialMatBiofilm, range=Optional[Union[str, List[str]]])

slots.microbial_mat_biofilm_bishomohopanol = Slot(uri=MIXS['0000175'], name="microbial_mat_biofilm_bishomohopanol", curie=MIXS.curie('0000175'),
                   model_uri=TEMP.microbial_mat_biofilm_bishomohopanol, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_bromide = Slot(uri=MIXS['0000176'], name="microbial_mat_biofilm_bromide", curie=MIXS.curie('0000176'),
                   model_uri=TEMP.microbial_mat_biofilm_bromide, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_chlorophyll = Slot(uri=MIXS['0000177'], name="microbial_mat_biofilm_chlorophyll", curie=MIXS.curie('0000177'),
                   model_uri=TEMP.microbial_mat_biofilm_chlorophyll, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_diether_lipids = Slot(uri=MIXS['0000178'], name="microbial_mat_biofilm_diether_lipids", curie=MIXS.curie('0000178'),
                   model_uri=TEMP.microbial_mat_biofilm_diether_lipids, domain=MicrobialMatBiofilm, range=Optional[Union[str, List[str]]])

slots.microbial_mat_biofilm_diss_hydrogen = Slot(uri=MIXS['0000179'], name="microbial_mat_biofilm_diss_hydrogen", curie=MIXS.curie('0000179'),
                   model_uri=TEMP.microbial_mat_biofilm_diss_hydrogen, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_phaeopigments = Slot(uri=MIXS['0000180'], name="microbial_mat_biofilm_phaeopigments", curie=MIXS.curie('0000180'),
                   model_uri=TEMP.microbial_mat_biofilm_phaeopigments, domain=MicrobialMatBiofilm, range=Optional[Union[str, List[str]]])

slots.microbial_mat_biofilm_phosplipid_fatt_acid = Slot(uri=MIXS['0000181'], name="microbial_mat_biofilm_phosplipid_fatt_acid", curie=MIXS.curie('0000181'),
                   model_uri=TEMP.microbial_mat_biofilm_phosplipid_fatt_acid, domain=MicrobialMatBiofilm, range=Optional[Union[str, List[str]]])

slots.microbial_mat_biofilm_redox_potential = Slot(uri=MIXS['0000182'], name="microbial_mat_biofilm_redox_potential", curie=MIXS.curie('0000182'),
                   model_uri=TEMP.microbial_mat_biofilm_redox_potential, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_salinity = Slot(uri=MIXS['0000183'], name="microbial_mat_biofilm_salinity", curie=MIXS.curie('0000183'),
                   model_uri=TEMP.microbial_mat_biofilm_salinity, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_silicate = Slot(uri=MIXS['0000184'], name="microbial_mat_biofilm_silicate", curie=MIXS.curie('0000184'),
                   model_uri=TEMP.microbial_mat_biofilm_silicate, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_water_content = Slot(uri=MIXS['0000185'], name="microbial_mat_biofilm_water_content", curie=MIXS.curie('0000185'),
                   model_uri=TEMP.microbial_mat_biofilm_water_content, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_turbidity = Slot(uri=MIXS['0000191'], name="microbial_mat_biofilm_turbidity", curie=MIXS.curie('0000191'),
                   model_uri=TEMP.microbial_mat_biofilm_turbidity, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_org_matter = Slot(uri=MIXS['0000204'], name="microbial_mat_biofilm_org_matter", curie=MIXS.curie('0000204'),
                   model_uri=TEMP.microbial_mat_biofilm_org_matter, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_org_nitro = Slot(uri=MIXS['0000205'], name="microbial_mat_biofilm_org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=TEMP.microbial_mat_biofilm_org_nitro, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_carb_nitro_ratio = Slot(uri=MIXS['0000310'], name="microbial_mat_biofilm_carb_nitro_ratio", curie=MIXS.curie('0000310'),
                   model_uri=TEMP.microbial_mat_biofilm_carb_nitro_ratio, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_pressure = Slot(uri=MIXS['0000412'], name="microbial_mat_biofilm_pressure", curie=MIXS.curie('0000412'),
                   model_uri=TEMP.microbial_mat_biofilm_pressure, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_alkalinity = Slot(uri=MIXS['0000421'], name="microbial_mat_biofilm_alkalinity", curie=MIXS.curie('0000421'),
                   model_uri=TEMP.microbial_mat_biofilm_alkalinity, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_sulfate = Slot(uri=MIXS['0000423'], name="microbial_mat_biofilm_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=TEMP.microbial_mat_biofilm_sulfate, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_sulfide = Slot(uri=MIXS['0000424'], name="microbial_mat_biofilm_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=TEMP.microbial_mat_biofilm_sulfide, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_nitrate = Slot(uri=MIXS['0000425'], name="microbial_mat_biofilm_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=TEMP.microbial_mat_biofilm_nitrate, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_nitrite = Slot(uri=MIXS['0000426'], name="microbial_mat_biofilm_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=TEMP.microbial_mat_biofilm_nitrite, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_ammonium = Slot(uri=MIXS['0000427'], name="microbial_mat_biofilm_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=TEMP.microbial_mat_biofilm_ammonium, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_sodium = Slot(uri=MIXS['0000428'], name="microbial_mat_biofilm_sodium", curie=MIXS.curie('0000428'),
                   model_uri=TEMP.microbial_mat_biofilm_sodium, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_chloride = Slot(uri=MIXS['0000429'], name="microbial_mat_biofilm_chloride", curie=MIXS.curie('0000429'),
                   model_uri=TEMP.microbial_mat_biofilm_chloride, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_potassium = Slot(uri=MIXS['0000430'], name="microbial_mat_biofilm_potassium", curie=MIXS.curie('0000430'),
                   model_uri=TEMP.microbial_mat_biofilm_potassium, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_magnesium = Slot(uri=MIXS['0000431'], name="microbial_mat_biofilm_magnesium", curie=MIXS.curie('0000431'),
                   model_uri=TEMP.microbial_mat_biofilm_magnesium, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_calcium = Slot(uri=MIXS['0000432'], name="microbial_mat_biofilm_calcium", curie=MIXS.curie('0000432'),
                   model_uri=TEMP.microbial_mat_biofilm_calcium, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_diss_org_carb = Slot(uri=MIXS['0000433'], name="microbial_mat_biofilm_diss_org_carb", curie=MIXS.curie('0000433'),
                   model_uri=TEMP.microbial_mat_biofilm_diss_org_carb, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_diss_inorg_carb = Slot(uri=MIXS['0000434'], name="microbial_mat_biofilm_diss_inorg_carb", curie=MIXS.curie('0000434'),
                   model_uri=TEMP.microbial_mat_biofilm_diss_inorg_carb, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_diss_carb_dioxide = Slot(uri=MIXS['0000436'], name="microbial_mat_biofilm_diss_carb_dioxide", curie=MIXS.curie('0000436'),
                   model_uri=TEMP.microbial_mat_biofilm_diss_carb_dioxide, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_alkyl_diethers = Slot(uri=MIXS['0000490'], name="microbial_mat_biofilm_alkyl_diethers", curie=MIXS.curie('0000490'),
                   model_uri=TEMP.microbial_mat_biofilm_alkyl_diethers, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_mean_frict_vel = Slot(uri=MIXS['0000498'], name="microbial_mat_biofilm_mean_frict_vel", curie=MIXS.curie('0000498'),
                   model_uri=TEMP.microbial_mat_biofilm_mean_frict_vel, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_mean_peak_frict_vel = Slot(uri=MIXS['0000502'], name="microbial_mat_biofilm_mean_peak_frict_vel", curie=MIXS.curie('0000502'),
                   model_uri=TEMP.microbial_mat_biofilm_mean_peak_frict_vel, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_n_alkanes = Slot(uri=MIXS['0000503'], name="microbial_mat_biofilm_n_alkanes", curie=MIXS.curie('0000503'),
                   model_uri=TEMP.microbial_mat_biofilm_n_alkanes, domain=MicrobialMatBiofilm, range=Optional[Union[str, List[str]]])

slots.microbial_mat_biofilm_nitro = Slot(uri=MIXS['0000504'], name="microbial_mat_biofilm_nitro", curie=MIXS.curie('0000504'),
                   model_uri=TEMP.microbial_mat_biofilm_nitro, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_phosphate = Slot(uri=MIXS['0000505'], name="microbial_mat_biofilm_phosphate", curie=MIXS.curie('0000505'),
                   model_uri=TEMP.microbial_mat_biofilm_phosphate, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_org_carb = Slot(uri=MIXS['0000508'], name="microbial_mat_biofilm_org_carb", curie=MIXS.curie('0000508'),
                   model_uri=TEMP.microbial_mat_biofilm_org_carb, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_part_org_carb = Slot(uri=MIXS['0000515'], name="microbial_mat_biofilm_part_org_carb", curie=MIXS.curie('0000515'),
                   model_uri=TEMP.microbial_mat_biofilm_part_org_carb, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_petroleum_hydrocarb = Slot(uri=MIXS['0000516'], name="microbial_mat_biofilm_petroleum_hydrocarb", curie=MIXS.curie('0000516'),
                   model_uri=TEMP.microbial_mat_biofilm_petroleum_hydrocarb, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_tot_carb = Slot(uri=MIXS['0000525'], name="microbial_mat_biofilm_tot_carb", curie=MIXS.curie('0000525'),
                   model_uri=TEMP.microbial_mat_biofilm_tot_carb, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_tot_nitro_content = Slot(uri=MIXS['0000530'], name="microbial_mat_biofilm_tot_nitro_content", curie=MIXS.curie('0000530'),
                   model_uri=TEMP.microbial_mat_biofilm_tot_nitro_content, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_tot_org_carb = Slot(uri=MIXS['0000533'], name="microbial_mat_biofilm_tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=TEMP.microbial_mat_biofilm_tot_org_carb, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_chem_administration = Slot(uri=MIXS['0000751'], name="microbial_mat_biofilm_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=TEMP.microbial_mat_biofilm_chem_administration, domain=MicrobialMatBiofilm, range=Optional[Union[str, List[str]]])

slots.microbial_mat_biofilm_misc_param = Slot(uri=MIXS['0000752'], name="microbial_mat_biofilm_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.microbial_mat_biofilm_misc_param, domain=MicrobialMatBiofilm, range=Optional[Union[str, List[str]]])

slots.microbial_mat_biofilm_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="microbial_mat_biofilm_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.microbial_mat_biofilm_oxy_stat_samp, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_perturbation = Slot(uri=MIXS['0000754'], name="microbial_mat_biofilm_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.microbial_mat_biofilm_perturbation, domain=MicrobialMatBiofilm, range=Optional[Union[str, List[str]]])

slots.microbial_mat_biofilm_samp_store_loc = Slot(uri=MIXS['0000755'], name="microbial_mat_biofilm_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.microbial_mat_biofilm_samp_store_loc, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_ph = Slot(uri=MIXS['0001001'], name="microbial_mat_biofilm_ph", curie=MIXS.curie('0001001'),
                   model_uri=TEMP.microbial_mat_biofilm_ph, domain=MicrobialMatBiofilm, range=Optional[str])

slots.microbial_mat_biofilm_samp_name = Slot(uri=MIXS['0001107'], name="microbial_mat_biofilm_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.microbial_mat_biofilm_samp_name, domain=MicrobialMatBiofilm, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_depth = Slot(uri=MIXS['0000018'], name="miscellaneous_natural_or_artificial_environment_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_depth, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_project_name = Slot(uri=MIXS['0000092'], name="miscellaneous_natural_or_artificial_environment_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_project_name, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_elev = Slot(uri=MIXS['0000093'], name="miscellaneous_natural_or_artificial_environment_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_elev, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_alt = Slot(uri=MIXS['0000094'], name="miscellaneous_natural_or_artificial_environment_alt", curie=MIXS.curie('0000094'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_alt, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_organism_count = Slot(uri=MIXS['0000103'], name="miscellaneous_natural_or_artificial_environment_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_organism_count, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[Union[str, List[str]]])

slots.miscellaneous_natural_or_artificial_environment_samp_store_temp = Slot(uri=MIXS['0000110'], name="miscellaneous_natural_or_artificial_environment_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_samp_store_temp, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="miscellaneous_natural_or_artificial_environment_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_samp_vol_we_dna_ext, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_temp = Slot(uri=MIXS['0000113'], name="miscellaneous_natural_or_artificial_environment_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_temp, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_samp_store_dur = Slot(uri=MIXS['0000116'], name="miscellaneous_natural_or_artificial_environment_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_samp_store_dur, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_diss_oxygen = Slot(uri=MIXS['0000119'], name="miscellaneous_natural_or_artificial_environment_diss_oxygen", curie=MIXS.curie('0000119'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_diss_oxygen, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_diss_org_nitro = Slot(uri=MIXS['0000162'], name="miscellaneous_natural_or_artificial_environment_diss_org_nitro", curie=MIXS.curie('0000162'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_diss_org_nitro, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_biomass = Slot(uri=MIXS['0000174'], name="miscellaneous_natural_or_artificial_environment_biomass", curie=MIXS.curie('0000174'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_biomass, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[Union[str, List[str]]])

slots.miscellaneous_natural_or_artificial_environment_bromide = Slot(uri=MIXS['0000176'], name="miscellaneous_natural_or_artificial_environment_bromide", curie=MIXS.curie('0000176'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_bromide, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_chlorophyll = Slot(uri=MIXS['0000177'], name="miscellaneous_natural_or_artificial_environment_chlorophyll", curie=MIXS.curie('0000177'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_chlorophyll, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_diether_lipids = Slot(uri=MIXS['0000178'], name="miscellaneous_natural_or_artificial_environment_diether_lipids", curie=MIXS.curie('0000178'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_diether_lipids, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[Union[str, List[str]]])

slots.miscellaneous_natural_or_artificial_environment_diss_hydrogen = Slot(uri=MIXS['0000179'], name="miscellaneous_natural_or_artificial_environment_diss_hydrogen", curie=MIXS.curie('0000179'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_diss_hydrogen, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_phosplipid_fatt_acid = Slot(uri=MIXS['0000181'], name="miscellaneous_natural_or_artificial_environment_phosplipid_fatt_acid", curie=MIXS.curie('0000181'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_phosplipid_fatt_acid, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[Union[str, List[str]]])

slots.miscellaneous_natural_or_artificial_environment_salinity = Slot(uri=MIXS['0000183'], name="miscellaneous_natural_or_artificial_environment_salinity", curie=MIXS.curie('0000183'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_salinity, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_silicate = Slot(uri=MIXS['0000184'], name="miscellaneous_natural_or_artificial_environment_silicate", curie=MIXS.curie('0000184'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_silicate, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_water_current = Slot(uri=MIXS['0000203'], name="miscellaneous_natural_or_artificial_environment_water_current", curie=MIXS.curie('0000203'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_water_current, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_org_matter = Slot(uri=MIXS['0000204'], name="miscellaneous_natural_or_artificial_environment_org_matter", curie=MIXS.curie('0000204'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_org_matter, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_org_nitro = Slot(uri=MIXS['0000205'], name="miscellaneous_natural_or_artificial_environment_org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_org_nitro, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_pressure = Slot(uri=MIXS['0000412'], name="miscellaneous_natural_or_artificial_environment_pressure", curie=MIXS.curie('0000412'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_pressure, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_alkalinity = Slot(uri=MIXS['0000421'], name="miscellaneous_natural_or_artificial_environment_alkalinity", curie=MIXS.curie('0000421'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_alkalinity, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_sulfate = Slot(uri=MIXS['0000423'], name="miscellaneous_natural_or_artificial_environment_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_sulfate, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_sulfide = Slot(uri=MIXS['0000424'], name="miscellaneous_natural_or_artificial_environment_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_sulfide, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_nitrate = Slot(uri=MIXS['0000425'], name="miscellaneous_natural_or_artificial_environment_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_nitrate, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_nitrite = Slot(uri=MIXS['0000426'], name="miscellaneous_natural_or_artificial_environment_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_nitrite, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_ammonium = Slot(uri=MIXS['0000427'], name="miscellaneous_natural_or_artificial_environment_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_ammonium, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_sodium = Slot(uri=MIXS['0000428'], name="miscellaneous_natural_or_artificial_environment_sodium", curie=MIXS.curie('0000428'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_sodium, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_chloride = Slot(uri=MIXS['0000429'], name="miscellaneous_natural_or_artificial_environment_chloride", curie=MIXS.curie('0000429'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_chloride, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_potassium = Slot(uri=MIXS['0000430'], name="miscellaneous_natural_or_artificial_environment_potassium", curie=MIXS.curie('0000430'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_potassium, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_calcium = Slot(uri=MIXS['0000432'], name="miscellaneous_natural_or_artificial_environment_calcium", curie=MIXS.curie('0000432'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_calcium, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_diss_inorg_carb = Slot(uri=MIXS['0000434'], name="miscellaneous_natural_or_artificial_environment_diss_inorg_carb", curie=MIXS.curie('0000434'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_diss_inorg_carb, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_density = Slot(uri=MIXS['0000435'], name="miscellaneous_natural_or_artificial_environment_density", curie=MIXS.curie('0000435'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_density, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_diss_carb_dioxide = Slot(uri=MIXS['0000436'], name="miscellaneous_natural_or_artificial_environment_diss_carb_dioxide", curie=MIXS.curie('0000436'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_diss_carb_dioxide, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_nitro = Slot(uri=MIXS['0000504'], name="miscellaneous_natural_or_artificial_environment_nitro", curie=MIXS.curie('0000504'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_nitro, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_phosphate = Slot(uri=MIXS['0000505'], name="miscellaneous_natural_or_artificial_environment_phosphate", curie=MIXS.curie('0000505'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_phosphate, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_org_carb = Slot(uri=MIXS['0000508'], name="miscellaneous_natural_or_artificial_environment_org_carb", curie=MIXS.curie('0000508'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_org_carb, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_chem_administration = Slot(uri=MIXS['0000751'], name="miscellaneous_natural_or_artificial_environment_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_chem_administration, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[Union[str, List[str]]])

slots.miscellaneous_natural_or_artificial_environment_misc_param = Slot(uri=MIXS['0000752'], name="miscellaneous_natural_or_artificial_environment_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_misc_param, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[Union[str, List[str]]])

slots.miscellaneous_natural_or_artificial_environment_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="miscellaneous_natural_or_artificial_environment_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_oxy_stat_samp, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_perturbation = Slot(uri=MIXS['0000754'], name="miscellaneous_natural_or_artificial_environment_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_perturbation, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[Union[str, List[str]]])

slots.miscellaneous_natural_or_artificial_environment_samp_store_loc = Slot(uri=MIXS['0000755'], name="miscellaneous_natural_or_artificial_environment_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_samp_store_loc, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_ph = Slot(uri=MIXS['0001001'], name="miscellaneous_natural_or_artificial_environment_ph", curie=MIXS.curie('0001001'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_ph, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.miscellaneous_natural_or_artificial_environment_samp_name = Slot(uri=MIXS['0001107'], name="miscellaneous_natural_or_artificial_environment_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.miscellaneous_natural_or_artificial_environment_samp_name, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.plant_associated_depth = Slot(uri=MIXS['0000018'], name="plant_associated_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.plant_associated_depth, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_host_disease_stat = Slot(uri=MIXS['0000031'], name="plant_associated_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.plant_associated_host_disease_stat, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_project_name = Slot(uri=MIXS['0000092'], name="plant_associated_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.plant_associated_project_name, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_elev = Slot(uri=MIXS['0000093'], name="plant_associated_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.plant_associated_elev, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_organism_count = Slot(uri=MIXS['0000103'], name="plant_associated_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.plant_associated_organism_count, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_samp_store_temp = Slot(uri=MIXS['0000110'], name="plant_associated_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.plant_associated_samp_store_temp, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="plant_associated_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.plant_associated_samp_vol_we_dna_ext, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_temp = Slot(uri=MIXS['0000113'], name="plant_associated_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.plant_associated_temp, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_samp_store_dur = Slot(uri=MIXS['0000116'], name="plant_associated_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.plant_associated_samp_store_dur, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_salinity = Slot(uri=MIXS['0000183'], name="plant_associated_salinity", curie=MIXS.curie('0000183'),
                   model_uri=TEMP.plant_associated_salinity, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_ances_data = Slot(uri=MIXS['0000247'], name="plant_associated_ances_data", curie=MIXS.curie('0000247'),
                   model_uri=TEMP.plant_associated_ances_data, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_host_common_name = Slot(uri=MIXS['0000248'], name="plant_associated_host_common_name", curie=MIXS.curie('0000248'),
                   model_uri=TEMP.plant_associated_host_common_name, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_samp_dis_stage = Slot(uri=MIXS['0000249'], name="plant_associated_samp_dis_stage", curie=MIXS.curie('0000249'),
                   model_uri=TEMP.plant_associated_samp_dis_stage, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_host_taxid = Slot(uri=MIXS['0000250'], name="plant_associated_host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=TEMP.plant_associated_host_taxid, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_host_life_stage = Slot(uri=MIXS['0000251'], name="plant_associated_host_life_stage", curie=MIXS.curie('0000251'),
                   model_uri=TEMP.plant_associated_host_life_stage, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_host_age = Slot(uri=MIXS['0000255'], name="plant_associated_host_age", curie=MIXS.curie('0000255'),
                   model_uri=TEMP.plant_associated_host_age, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_host_length = Slot(uri=MIXS['0000256'], name="plant_associated_host_length", curie=MIXS.curie('0000256'),
                   model_uri=TEMP.plant_associated_host_length, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_host_dry_mass = Slot(uri=MIXS['0000257'], name="plant_associated_host_dry_mass", curie=MIXS.curie('0000257'),
                   model_uri=TEMP.plant_associated_host_dry_mass, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_host_tot_mass = Slot(uri=MIXS['0000263'], name="plant_associated_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=TEMP.plant_associated_host_tot_mass, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_host_height = Slot(uri=MIXS['0000264'], name="plant_associated_host_height", curie=MIXS.curie('0000264'),
                   model_uri=TEMP.plant_associated_host_height, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_host_genotype = Slot(uri=MIXS['0000365'], name="plant_associated_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=TEMP.plant_associated_host_genotype, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_air_temp_regm = Slot(uri=MIXS['0000551'], name="plant_associated_air_temp_regm", curie=MIXS.curie('0000551'),
                   model_uri=TEMP.plant_associated_air_temp_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_antibiotic_regm = Slot(uri=MIXS['0000553'], name="plant_associated_antibiotic_regm", curie=MIXS.curie('0000553'),
                   model_uri=TEMP.plant_associated_antibiotic_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_chem_mutagen = Slot(uri=MIXS['0000555'], name="plant_associated_chem_mutagen", curie=MIXS.curie('0000555'),
                   model_uri=TEMP.plant_associated_chem_mutagen, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_fertilizer_regm = Slot(uri=MIXS['0000556'], name="plant_associated_fertilizer_regm", curie=MIXS.curie('0000556'),
                   model_uri=TEMP.plant_associated_fertilizer_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_fungicide_regm = Slot(uri=MIXS['0000557'], name="plant_associated_fungicide_regm", curie=MIXS.curie('0000557'),
                   model_uri=TEMP.plant_associated_fungicide_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_gaseous_environment = Slot(uri=MIXS['0000558'], name="plant_associated_gaseous_environment", curie=MIXS.curie('0000558'),
                   model_uri=TEMP.plant_associated_gaseous_environment, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_gravity = Slot(uri=MIXS['0000559'], name="plant_associated_gravity", curie=MIXS.curie('0000559'),
                   model_uri=TEMP.plant_associated_gravity, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_growth_hormone_regm = Slot(uri=MIXS['0000560'], name="plant_associated_growth_hormone_regm", curie=MIXS.curie('0000560'),
                   model_uri=TEMP.plant_associated_growth_hormone_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_herbicide_regm = Slot(uri=MIXS['0000561'], name="plant_associated_herbicide_regm", curie=MIXS.curie('0000561'),
                   model_uri=TEMP.plant_associated_herbicide_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_host_wet_mass = Slot(uri=MIXS['0000567'], name="plant_associated_host_wet_mass", curie=MIXS.curie('0000567'),
                   model_uri=TEMP.plant_associated_host_wet_mass, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_humidity_regm = Slot(uri=MIXS['0000568'], name="plant_associated_humidity_regm", curie=MIXS.curie('0000568'),
                   model_uri=TEMP.plant_associated_humidity_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_light_regm = Slot(uri=MIXS['0000569'], name="plant_associated_light_regm", curie=MIXS.curie('0000569'),
                   model_uri=TEMP.plant_associated_light_regm, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_mineral_nutr_regm = Slot(uri=MIXS['0000570'], name="plant_associated_mineral_nutr_regm", curie=MIXS.curie('0000570'),
                   model_uri=TEMP.plant_associated_mineral_nutr_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_non_min_nutr_regm = Slot(uri=MIXS['0000571'], name="plant_associated_non_min_nutr_regm", curie=MIXS.curie('0000571'),
                   model_uri=TEMP.plant_associated_non_min_nutr_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_pesticide_regm = Slot(uri=MIXS['0000573'], name="plant_associated_pesticide_regm", curie=MIXS.curie('0000573'),
                   model_uri=TEMP.plant_associated_pesticide_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_radiation_regm = Slot(uri=MIXS['0000575'], name="plant_associated_radiation_regm", curie=MIXS.curie('0000575'),
                   model_uri=TEMP.plant_associated_radiation_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_rainfall_regm = Slot(uri=MIXS['0000576'], name="plant_associated_rainfall_regm", curie=MIXS.curie('0000576'),
                   model_uri=TEMP.plant_associated_rainfall_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_root_med_carbon = Slot(uri=MIXS['0000577'], name="plant_associated_root_med_carbon", curie=MIXS.curie('0000577'),
                   model_uri=TEMP.plant_associated_root_med_carbon, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_root_med_macronutr = Slot(uri=MIXS['0000578'], name="plant_associated_root_med_macronutr", curie=MIXS.curie('0000578'),
                   model_uri=TEMP.plant_associated_root_med_macronutr, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_root_med_micronutr = Slot(uri=MIXS['0000579'], name="plant_associated_root_med_micronutr", curie=MIXS.curie('0000579'),
                   model_uri=TEMP.plant_associated_root_med_micronutr, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_root_med_suppl = Slot(uri=MIXS['0000580'], name="plant_associated_root_med_suppl", curie=MIXS.curie('0000580'),
                   model_uri=TEMP.plant_associated_root_med_suppl, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_root_med_regl = Slot(uri=MIXS['0000581'], name="plant_associated_root_med_regl", curie=MIXS.curie('0000581'),
                   model_uri=TEMP.plant_associated_root_med_regl, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_salt_regm = Slot(uri=MIXS['0000582'], name="plant_associated_salt_regm", curie=MIXS.curie('0000582'),
                   model_uri=TEMP.plant_associated_salt_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_water_temp_regm = Slot(uri=MIXS['0000590'], name="plant_associated_water_temp_regm", curie=MIXS.curie('0000590'),
                   model_uri=TEMP.plant_associated_water_temp_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_watering_regm = Slot(uri=MIXS['0000591'], name="plant_associated_watering_regm", curie=MIXS.curie('0000591'),
                   model_uri=TEMP.plant_associated_watering_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_chem_administration = Slot(uri=MIXS['0000751'], name="plant_associated_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=TEMP.plant_associated_chem_administration, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_misc_param = Slot(uri=MIXS['0000752'], name="plant_associated_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.plant_associated_misc_param, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="plant_associated_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.plant_associated_oxy_stat_samp, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_perturbation = Slot(uri=MIXS['0000754'], name="plant_associated_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.plant_associated_perturbation, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_samp_store_loc = Slot(uri=MIXS['0000755'], name="plant_associated_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.plant_associated_samp_store_loc, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_biol_stat = Slot(uri=MIXS['0000858'], name="plant_associated_biol_stat", curie=MIXS.curie('0000858'),
                   model_uri=TEMP.plant_associated_biol_stat, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_genetic_mod = Slot(uri=MIXS['0000859'], name="plant_associated_genetic_mod", curie=MIXS.curie('0000859'),
                   model_uri=TEMP.plant_associated_genetic_mod, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_samp_capt_status = Slot(uri=MIXS['0000860'], name="plant_associated_samp_capt_status", curie=MIXS.curie('0000860'),
                   model_uri=TEMP.plant_associated_samp_capt_status, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_host_phenotype = Slot(uri=MIXS['0000874'], name="plant_associated_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=TEMP.plant_associated_host_phenotype, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_biotic_regm = Slot(uri=MIXS['0001038'], name="plant_associated_biotic_regm", curie=MIXS.curie('0001038'),
                   model_uri=TEMP.plant_associated_biotic_regm, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_climate_environment = Slot(uri=MIXS['0001040'], name="plant_associated_climate_environment", curie=MIXS.curie('0001040'),
                   model_uri=TEMP.plant_associated_climate_environment, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_cult_root_med = Slot(uri=MIXS['0001041'], name="plant_associated_cult_root_med", curie=MIXS.curie('0001041'),
                   model_uri=TEMP.plant_associated_cult_root_med, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_growth_facil = Slot(uri=MIXS['0001043'], name="plant_associated_growth_facil", curie=MIXS.curie('0001043'),
                   model_uri=TEMP.plant_associated_growth_facil, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_growth_habit = Slot(uri=MIXS['0001044'], name="plant_associated_growth_habit", curie=MIXS.curie('0001044'),
                   model_uri=TEMP.plant_associated_growth_habit, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_mechanical_damage = Slot(uri=MIXS['0001052'], name="plant_associated_mechanical_damage", curie=MIXS.curie('0001052'),
                   model_uri=TEMP.plant_associated_mechanical_damage, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_ph_regm = Slot(uri=MIXS['0001056'], name="plant_associated_ph_regm", curie=MIXS.curie('0001056'),
                   model_uri=TEMP.plant_associated_ph_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_plant_growth_med = Slot(uri=MIXS['0001057'], name="plant_associated_plant_growth_med", curie=MIXS.curie('0001057'),
                   model_uri=TEMP.plant_associated_plant_growth_med, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_plant_product = Slot(uri=MIXS['0001058'], name="plant_associated_plant_product", curie=MIXS.curie('0001058'),
                   model_uri=TEMP.plant_associated_plant_product, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_plant_sex = Slot(uri=MIXS['0001059'], name="plant_associated_plant_sex", curie=MIXS.curie('0001059'),
                   model_uri=TEMP.plant_associated_plant_sex, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_plant_struc = Slot(uri=MIXS['0001060'], name="plant_associated_plant_struc", curie=MIXS.curie('0001060'),
                   model_uri=TEMP.plant_associated_plant_struc, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_root_cond = Slot(uri=MIXS['0001061'], name="plant_associated_root_cond", curie=MIXS.curie('0001061'),
                   model_uri=TEMP.plant_associated_root_cond, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_root_med_ph = Slot(uri=MIXS['0001062'], name="plant_associated_root_med_ph", curie=MIXS.curie('0001062'),
                   model_uri=TEMP.plant_associated_root_med_ph, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_root_med_solid = Slot(uri=MIXS['0001063'], name="plant_associated_root_med_solid", curie=MIXS.curie('0001063'),
                   model_uri=TEMP.plant_associated_root_med_solid, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_season_environment = Slot(uri=MIXS['0001068'], name="plant_associated_season_environment", curie=MIXS.curie('0001068'),
                   model_uri=TEMP.plant_associated_season_environment, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_standing_water_regm = Slot(uri=MIXS['0001069'], name="plant_associated_standing_water_regm", curie=MIXS.curie('0001069'),
                   model_uri=TEMP.plant_associated_standing_water_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_tiss_cult_growth_med = Slot(uri=MIXS['0001070'], name="plant_associated_tiss_cult_growth_med", curie=MIXS.curie('0001070'),
                   model_uri=TEMP.plant_associated_tiss_cult_growth_med, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_samp_name = Slot(uri=MIXS['0001107'], name="plant_associated_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.plant_associated_samp_name, domain=PlantAssociated, range=Optional[str])

slots.plant_associated_host_symbiont = Slot(uri=MIXS['0001298'], name="plant_associated_host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=TEMP.plant_associated_host_symbiont, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.plant_associated_host_subspecf_genlin = Slot(uri=MIXS['0001318'], name="plant_associated_host_subspecf_genlin", curie=MIXS.curie('0001318'),
                   model_uri=TEMP.plant_associated_host_subspecf_genlin, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.sediment_depth = Slot(uri=MIXS['0000018'], name="sediment_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.sediment_depth, domain=Sediment, range=Optional[str])

slots.sediment_project_name = Slot(uri=MIXS['0000092'], name="sediment_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.sediment_project_name, domain=Sediment, range=Optional[str])

slots.sediment_elev = Slot(uri=MIXS['0000093'], name="sediment_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.sediment_elev, domain=Sediment, range=Optional[str])

slots.sediment_methane = Slot(uri=MIXS['0000101'], name="sediment_methane", curie=MIXS.curie('0000101'),
                   model_uri=TEMP.sediment_methane, domain=Sediment, range=Optional[str])

slots.sediment_organism_count = Slot(uri=MIXS['0000103'], name="sediment_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.sediment_organism_count, domain=Sediment, range=Optional[Union[str, List[str]]])

slots.sediment_samp_store_temp = Slot(uri=MIXS['0000110'], name="sediment_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.sediment_samp_store_temp, domain=Sediment, range=Optional[str])

slots.sediment_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="sediment_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.sediment_samp_vol_we_dna_ext, domain=Sediment, range=Optional[str])

slots.sediment_temp = Slot(uri=MIXS['0000113'], name="sediment_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.sediment_temp, domain=Sediment, range=Optional[str])

slots.sediment_samp_store_dur = Slot(uri=MIXS['0000116'], name="sediment_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.sediment_samp_store_dur, domain=Sediment, range=Optional[str])

slots.sediment_diss_oxygen = Slot(uri=MIXS['0000119'], name="sediment_diss_oxygen", curie=MIXS.curie('0000119'),
                   model_uri=TEMP.sediment_diss_oxygen, domain=Sediment, range=Optional[str])

slots.sediment_glucosidase_act = Slot(uri=MIXS['0000137'], name="sediment_glucosidase_act", curie=MIXS.curie('0000137'),
                   model_uri=TEMP.sediment_glucosidase_act, domain=Sediment, range=Optional[str])

slots.sediment_diss_org_nitro = Slot(uri=MIXS['0000162'], name="sediment_diss_org_nitro", curie=MIXS.curie('0000162'),
                   model_uri=TEMP.sediment_diss_org_nitro, domain=Sediment, range=Optional[str])

slots.sediment_aminopept_act = Slot(uri=MIXS['0000172'], name="sediment_aminopept_act", curie=MIXS.curie('0000172'),
                   model_uri=TEMP.sediment_aminopept_act, domain=Sediment, range=Optional[str])

slots.sediment_bacteria_carb_prod = Slot(uri=MIXS['0000173'], name="sediment_bacteria_carb_prod", curie=MIXS.curie('0000173'),
                   model_uri=TEMP.sediment_bacteria_carb_prod, domain=Sediment, range=Optional[str])

slots.sediment_biomass = Slot(uri=MIXS['0000174'], name="sediment_biomass", curie=MIXS.curie('0000174'),
                   model_uri=TEMP.sediment_biomass, domain=Sediment, range=Optional[Union[str, List[str]]])

slots.sediment_bishomohopanol = Slot(uri=MIXS['0000175'], name="sediment_bishomohopanol", curie=MIXS.curie('0000175'),
                   model_uri=TEMP.sediment_bishomohopanol, domain=Sediment, range=Optional[str])

slots.sediment_bromide = Slot(uri=MIXS['0000176'], name="sediment_bromide", curie=MIXS.curie('0000176'),
                   model_uri=TEMP.sediment_bromide, domain=Sediment, range=Optional[str])

slots.sediment_chlorophyll = Slot(uri=MIXS['0000177'], name="sediment_chlorophyll", curie=MIXS.curie('0000177'),
                   model_uri=TEMP.sediment_chlorophyll, domain=Sediment, range=Optional[str])

slots.sediment_diether_lipids = Slot(uri=MIXS['0000178'], name="sediment_diether_lipids", curie=MIXS.curie('0000178'),
                   model_uri=TEMP.sediment_diether_lipids, domain=Sediment, range=Optional[Union[str, List[str]]])

slots.sediment_diss_hydrogen = Slot(uri=MIXS['0000179'], name="sediment_diss_hydrogen", curie=MIXS.curie('0000179'),
                   model_uri=TEMP.sediment_diss_hydrogen, domain=Sediment, range=Optional[str])

slots.sediment_phaeopigments = Slot(uri=MIXS['0000180'], name="sediment_phaeopigments", curie=MIXS.curie('0000180'),
                   model_uri=TEMP.sediment_phaeopigments, domain=Sediment, range=Optional[Union[str, List[str]]])

slots.sediment_phosplipid_fatt_acid = Slot(uri=MIXS['0000181'], name="sediment_phosplipid_fatt_acid", curie=MIXS.curie('0000181'),
                   model_uri=TEMP.sediment_phosplipid_fatt_acid, domain=Sediment, range=Optional[Union[str, List[str]]])

slots.sediment_redox_potential = Slot(uri=MIXS['0000182'], name="sediment_redox_potential", curie=MIXS.curie('0000182'),
                   model_uri=TEMP.sediment_redox_potential, domain=Sediment, range=Optional[str])

slots.sediment_salinity = Slot(uri=MIXS['0000183'], name="sediment_salinity", curie=MIXS.curie('0000183'),
                   model_uri=TEMP.sediment_salinity, domain=Sediment, range=Optional[str])

slots.sediment_silicate = Slot(uri=MIXS['0000184'], name="sediment_silicate", curie=MIXS.curie('0000184'),
                   model_uri=TEMP.sediment_silicate, domain=Sediment, range=Optional[str])

slots.sediment_water_content = Slot(uri=MIXS['0000185'], name="sediment_water_content", curie=MIXS.curie('0000185'),
                   model_uri=TEMP.sediment_water_content, domain=Sediment, range=Optional[str])

slots.sediment_turbidity = Slot(uri=MIXS['0000191'], name="sediment_turbidity", curie=MIXS.curie('0000191'),
                   model_uri=TEMP.sediment_turbidity, domain=Sediment, range=Optional[str])

slots.sediment_org_matter = Slot(uri=MIXS['0000204'], name="sediment_org_matter", curie=MIXS.curie('0000204'),
                   model_uri=TEMP.sediment_org_matter, domain=Sediment, range=Optional[str])

slots.sediment_org_nitro = Slot(uri=MIXS['0000205'], name="sediment_org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=TEMP.sediment_org_nitro, domain=Sediment, range=Optional[str])

slots.sediment_particle_class = Slot(uri=MIXS['0000206'], name="sediment_particle_class", curie=MIXS.curie('0000206'),
                   model_uri=TEMP.sediment_particle_class, domain=Sediment, range=Optional[Union[str, List[str]]])

slots.sediment_porosity = Slot(uri=MIXS['0000211'], name="sediment_porosity", curie=MIXS.curie('0000211'),
                   model_uri=TEMP.sediment_porosity, domain=Sediment, range=Optional[str])

slots.sediment_carb_nitro_ratio = Slot(uri=MIXS['0000310'], name="sediment_carb_nitro_ratio", curie=MIXS.curie('0000310'),
                   model_uri=TEMP.sediment_carb_nitro_ratio, domain=Sediment, range=Optional[str])

slots.sediment_pressure = Slot(uri=MIXS['0000412'], name="sediment_pressure", curie=MIXS.curie('0000412'),
                   model_uri=TEMP.sediment_pressure, domain=Sediment, range=Optional[str])

slots.sediment_alkalinity = Slot(uri=MIXS['0000421'], name="sediment_alkalinity", curie=MIXS.curie('0000421'),
                   model_uri=TEMP.sediment_alkalinity, domain=Sediment, range=Optional[str])

slots.sediment_sulfate = Slot(uri=MIXS['0000423'], name="sediment_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=TEMP.sediment_sulfate, domain=Sediment, range=Optional[str])

slots.sediment_sulfide = Slot(uri=MIXS['0000424'], name="sediment_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=TEMP.sediment_sulfide, domain=Sediment, range=Optional[str])

slots.sediment_nitrate = Slot(uri=MIXS['0000425'], name="sediment_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=TEMP.sediment_nitrate, domain=Sediment, range=Optional[str])

slots.sediment_nitrite = Slot(uri=MIXS['0000426'], name="sediment_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=TEMP.sediment_nitrite, domain=Sediment, range=Optional[str])

slots.sediment_ammonium = Slot(uri=MIXS['0000427'], name="sediment_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=TEMP.sediment_ammonium, domain=Sediment, range=Optional[str])

slots.sediment_sodium = Slot(uri=MIXS['0000428'], name="sediment_sodium", curie=MIXS.curie('0000428'),
                   model_uri=TEMP.sediment_sodium, domain=Sediment, range=Optional[str])

slots.sediment_chloride = Slot(uri=MIXS['0000429'], name="sediment_chloride", curie=MIXS.curie('0000429'),
                   model_uri=TEMP.sediment_chloride, domain=Sediment, range=Optional[str])

slots.sediment_potassium = Slot(uri=MIXS['0000430'], name="sediment_potassium", curie=MIXS.curie('0000430'),
                   model_uri=TEMP.sediment_potassium, domain=Sediment, range=Optional[str])

slots.sediment_magnesium = Slot(uri=MIXS['0000431'], name="sediment_magnesium", curie=MIXS.curie('0000431'),
                   model_uri=TEMP.sediment_magnesium, domain=Sediment, range=Optional[str])

slots.sediment_calcium = Slot(uri=MIXS['0000432'], name="sediment_calcium", curie=MIXS.curie('0000432'),
                   model_uri=TEMP.sediment_calcium, domain=Sediment, range=Optional[str])

slots.sediment_diss_org_carb = Slot(uri=MIXS['0000433'], name="sediment_diss_org_carb", curie=MIXS.curie('0000433'),
                   model_uri=TEMP.sediment_diss_org_carb, domain=Sediment, range=Optional[str])

slots.sediment_diss_inorg_carb = Slot(uri=MIXS['0000434'], name="sediment_diss_inorg_carb", curie=MIXS.curie('0000434'),
                   model_uri=TEMP.sediment_diss_inorg_carb, domain=Sediment, range=Optional[str])

slots.sediment_density = Slot(uri=MIXS['0000435'], name="sediment_density", curie=MIXS.curie('0000435'),
                   model_uri=TEMP.sediment_density, domain=Sediment, range=Optional[str])

slots.sediment_diss_carb_dioxide = Slot(uri=MIXS['0000436'], name="sediment_diss_carb_dioxide", curie=MIXS.curie('0000436'),
                   model_uri=TEMP.sediment_diss_carb_dioxide, domain=Sediment, range=Optional[str])

slots.sediment_alkyl_diethers = Slot(uri=MIXS['0000490'], name="sediment_alkyl_diethers", curie=MIXS.curie('0000490'),
                   model_uri=TEMP.sediment_alkyl_diethers, domain=Sediment, range=Optional[str])

slots.sediment_mean_frict_vel = Slot(uri=MIXS['0000498'], name="sediment_mean_frict_vel", curie=MIXS.curie('0000498'),
                   model_uri=TEMP.sediment_mean_frict_vel, domain=Sediment, range=Optional[str])

slots.sediment_mean_peak_frict_vel = Slot(uri=MIXS['0000502'], name="sediment_mean_peak_frict_vel", curie=MIXS.curie('0000502'),
                   model_uri=TEMP.sediment_mean_peak_frict_vel, domain=Sediment, range=Optional[str])

slots.sediment_n_alkanes = Slot(uri=MIXS['0000503'], name="sediment_n_alkanes", curie=MIXS.curie('0000503'),
                   model_uri=TEMP.sediment_n_alkanes, domain=Sediment, range=Optional[Union[str, List[str]]])

slots.sediment_nitro = Slot(uri=MIXS['0000504'], name="sediment_nitro", curie=MIXS.curie('0000504'),
                   model_uri=TEMP.sediment_nitro, domain=Sediment, range=Optional[str])

slots.sediment_phosphate = Slot(uri=MIXS['0000505'], name="sediment_phosphate", curie=MIXS.curie('0000505'),
                   model_uri=TEMP.sediment_phosphate, domain=Sediment, range=Optional[str])

slots.sediment_org_carb = Slot(uri=MIXS['0000508'], name="sediment_org_carb", curie=MIXS.curie('0000508'),
                   model_uri=TEMP.sediment_org_carb, domain=Sediment, range=Optional[str])

slots.sediment_part_org_carb = Slot(uri=MIXS['0000515'], name="sediment_part_org_carb", curie=MIXS.curie('0000515'),
                   model_uri=TEMP.sediment_part_org_carb, domain=Sediment, range=Optional[str])

slots.sediment_petroleum_hydrocarb = Slot(uri=MIXS['0000516'], name="sediment_petroleum_hydrocarb", curie=MIXS.curie('0000516'),
                   model_uri=TEMP.sediment_petroleum_hydrocarb, domain=Sediment, range=Optional[str])

slots.sediment_tot_carb = Slot(uri=MIXS['0000525'], name="sediment_tot_carb", curie=MIXS.curie('0000525'),
                   model_uri=TEMP.sediment_tot_carb, domain=Sediment, range=Optional[str])

slots.sediment_tot_nitro_content = Slot(uri=MIXS['0000530'], name="sediment_tot_nitro_content", curie=MIXS.curie('0000530'),
                   model_uri=TEMP.sediment_tot_nitro_content, domain=Sediment, range=Optional[str])

slots.sediment_tot_org_carb = Slot(uri=MIXS['0000533'], name="sediment_tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=TEMP.sediment_tot_org_carb, domain=Sediment, range=Optional[str])

slots.sediment_tot_depth_water_col = Slot(uri=MIXS['0000634'], name="sediment_tot_depth_water_col", curie=MIXS.curie('0000634'),
                   model_uri=TEMP.sediment_tot_depth_water_col, domain=Sediment, range=Optional[str])

slots.sediment_tidal_stage = Slot(uri=MIXS['0000750'], name="sediment_tidal_stage", curie=MIXS.curie('0000750'),
                   model_uri=TEMP.sediment_tidal_stage, domain=Sediment, range=Optional[str])

slots.sediment_chem_administration = Slot(uri=MIXS['0000751'], name="sediment_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=TEMP.sediment_chem_administration, domain=Sediment, range=Optional[Union[str, List[str]]])

slots.sediment_misc_param = Slot(uri=MIXS['0000752'], name="sediment_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.sediment_misc_param, domain=Sediment, range=Optional[Union[str, List[str]]])

slots.sediment_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="sediment_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.sediment_oxy_stat_samp, domain=Sediment, range=Optional[str])

slots.sediment_perturbation = Slot(uri=MIXS['0000754'], name="sediment_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.sediment_perturbation, domain=Sediment, range=Optional[Union[str, List[str]]])

slots.sediment_samp_store_loc = Slot(uri=MIXS['0000755'], name="sediment_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.sediment_samp_store_loc, domain=Sediment, range=Optional[str])

slots.sediment_ph = Slot(uri=MIXS['0001001'], name="sediment_ph", curie=MIXS.curie('0001001'),
                   model_uri=TEMP.sediment_ph, domain=Sediment, range=Optional[str])

slots.sediment_sediment_type = Slot(uri=MIXS['0001078'], name="sediment_sediment_type", curie=MIXS.curie('0001078'),
                   model_uri=TEMP.sediment_sediment_type, domain=Sediment, range=Optional[str])

slots.sediment_samp_name = Slot(uri=MIXS['0001107'], name="sediment_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.sediment_samp_name, domain=Sediment, range=Optional[str])

slots.soil_project_name = Slot(uri=MIXS['0000092'], name="soil_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.soil_project_name, domain=Soil, range=Optional[str])

slots.soil_elev = Slot(uri=MIXS['0000093'], name="soil_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.soil_elev, domain=Soil, range=Optional[str])

slots.soil_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="soil_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.soil_samp_vol_we_dna_ext, domain=Soil, range=Optional[str])

slots.soil_water_content = Slot(uri=MIXS['0000185'], name="soil_water_content", curie=MIXS.curie('0000185'),
                   model_uri=TEMP.soil_water_content, domain=Soil, range=Optional[str])

slots.soil_org_matter = Slot(uri=MIXS['0000204'], name="soil_org_matter", curie=MIXS.curie('0000204'),
                   model_uri=TEMP.soil_org_matter, domain=Soil, range=Optional[str])

slots.soil_org_nitro = Slot(uri=MIXS['0000205'], name="soil_org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=TEMP.soil_org_nitro, domain=Soil, range=Optional[str])

slots.soil_cur_vegetation = Slot(uri=MIXS['0000312'], name="soil_cur_vegetation", curie=MIXS.curie('0000312'),
                   model_uri=TEMP.soil_cur_vegetation, domain=Soil, range=Optional[str])

slots.soil_cur_vegetation_meth = Slot(uri=MIXS['0000314'], name="soil_cur_vegetation_meth", curie=MIXS.curie('0000314'),
                   model_uri=TEMP.soil_cur_vegetation_meth, domain=Soil, range=Optional[str])

slots.soil_previous_land_use = Slot(uri=MIXS['0000315'], name="soil_previous_land_use", curie=MIXS.curie('0000315'),
                   model_uri=TEMP.soil_previous_land_use, domain=Soil, range=Optional[str])

slots.soil_prev_land_use_meth = Slot(uri=MIXS['0000316'], name="soil_prev_land_use_meth", curie=MIXS.curie('0000316'),
                   model_uri=TEMP.soil_prev_land_use_meth, domain=Soil, range=Optional[str])

slots.soil_crop_rotation = Slot(uri=MIXS['0000318'], name="soil_crop_rotation", curie=MIXS.curie('0000318'),
                   model_uri=TEMP.soil_crop_rotation, domain=Soil, range=Optional[str])

slots.soil_flooding = Slot(uri=MIXS['0000319'], name="soil_flooding", curie=MIXS.curie('0000319'),
                   model_uri=TEMP.soil_flooding, domain=Soil, range=Optional[str])

slots.soil_extreme_event = Slot(uri=MIXS['0000320'], name="soil_extreme_event", curie=MIXS.curie('0000320'),
                   model_uri=TEMP.soil_extreme_event, domain=Soil, range=Optional[str])

slots.soil_horizon_meth = Slot(uri=MIXS['0000321'], name="soil_horizon_meth", curie=MIXS.curie('0000321'),
                   model_uri=TEMP.soil_horizon_meth, domain=Soil, range=Optional[str])

slots.soil_sieving = Slot(uri=MIXS['0000322'], name="soil_sieving", curie=MIXS.curie('0000322'),
                   model_uri=TEMP.soil_sieving, domain=Soil, range=Optional[str])

slots.soil_water_cont_soil_meth = Slot(uri=MIXS['0000323'], name="soil_water_cont_soil_meth", curie=MIXS.curie('0000323'),
                   model_uri=TEMP.soil_water_cont_soil_meth, domain=Soil, range=Optional[str])

slots.soil_al_sat_meth = Slot(uri=MIXS['0000324'], name="soil_al_sat_meth", curie=MIXS.curie('0000324'),
                   model_uri=TEMP.soil_al_sat_meth, domain=Soil, range=Optional[str])

slots.soil_pool_dna_extracts = Slot(uri=MIXS['0000325'], name="soil_pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=TEMP.soil_pool_dna_extracts, domain=Soil, range=Optional[str])

slots.soil_store_cond = Slot(uri=MIXS['0000327'], name="soil_store_cond", curie=MIXS.curie('0000327'),
                   model_uri=TEMP.soil_store_cond, domain=Soil, range=Optional[str])

slots.soil_link_climate_info = Slot(uri=MIXS['0000328'], name="soil_link_climate_info", curie=MIXS.curie('0000328'),
                   model_uri=TEMP.soil_link_climate_info, domain=Soil, range=Optional[str])

slots.soil_link_class_info = Slot(uri=MIXS['0000329'], name="soil_link_class_info", curie=MIXS.curie('0000329'),
                   model_uri=TEMP.soil_link_class_info, domain=Soil, range=Optional[str])

slots.soil_local_class = Slot(uri=MIXS['0000330'], name="soil_local_class", curie=MIXS.curie('0000330'),
                   model_uri=TEMP.soil_local_class, domain=Soil, range=Optional[str])

slots.soil_local_class_meth = Slot(uri=MIXS['0000331'], name="soil_local_class_meth", curie=MIXS.curie('0000331'),
                   model_uri=TEMP.soil_local_class_meth, domain=Soil, range=Optional[str])

slots.soil_soil_type = Slot(uri=MIXS['0000332'], name="soil_soil_type", curie=MIXS.curie('0000332'),
                   model_uri=TEMP.soil_soil_type, domain=Soil, range=Optional[str])

slots.soil_soil_type_meth = Slot(uri=MIXS['0000334'], name="soil_soil_type_meth", curie=MIXS.curie('0000334'),
                   model_uri=TEMP.soil_soil_type_meth, domain=Soil, range=Optional[str])

slots.soil_soil_text_measure = Slot(uri=MIXS['0000335'], name="soil_soil_text_measure", curie=MIXS.curie('0000335'),
                   model_uri=TEMP.soil_soil_text_measure, domain=Soil, range=Optional[str])

slots.soil_soil_texture_meth = Slot(uri=MIXS['0000336'], name="soil_soil_texture_meth", curie=MIXS.curie('0000336'),
                   model_uri=TEMP.soil_soil_texture_meth, domain=Soil, range=Optional[str])

slots.soil_tot_org_c_meth = Slot(uri=MIXS['0000337'], name="soil_tot_org_c_meth", curie=MIXS.curie('0000337'),
                   model_uri=TEMP.soil_tot_org_c_meth, domain=Soil, range=Optional[str])

slots.soil_tot_nitro_cont_meth = Slot(uri=MIXS['0000338'], name="soil_tot_nitro_cont_meth", curie=MIXS.curie('0000338'),
                   model_uri=TEMP.soil_tot_nitro_cont_meth, domain=Soil, range=Optional[str])

slots.soil_micro_biomass_meth = Slot(uri=MIXS['0000339'], name="soil_micro_biomass_meth", curie=MIXS.curie('0000339'),
                   model_uri=TEMP.soil_micro_biomass_meth, domain=Soil, range=Optional[str])

slots.soil_link_addit_analys = Slot(uri=MIXS['0000340'], name="soil_link_addit_analys", curie=MIXS.curie('0000340'),
                   model_uri=TEMP.soil_link_addit_analys, domain=Soil, range=Optional[str])

slots.soil_salinity_meth = Slot(uri=MIXS['0000341'], name="soil_salinity_meth", curie=MIXS.curie('0000341'),
                   model_uri=TEMP.soil_salinity_meth, domain=Soil, range=Optional[str])

slots.soil_heavy_metals_meth = Slot(uri=MIXS['0000343'], name="soil_heavy_metals_meth", curie=MIXS.curie('0000343'),
                   model_uri=TEMP.soil_heavy_metals_meth, domain=Soil, range=Optional[str])

slots.soil_tot_nitro_content = Slot(uri=MIXS['0000530'], name="soil_tot_nitro_content", curie=MIXS.curie('0000530'),
                   model_uri=TEMP.soil_tot_nitro_content, domain=Soil, range=Optional[str])

slots.soil_tot_org_carb = Slot(uri=MIXS['0000533'], name="soil_tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=TEMP.soil_tot_org_carb, domain=Soil, range=Optional[str])

slots.soil_al_sat = Slot(uri=MIXS['0000607'], name="soil_al_sat", curie=MIXS.curie('0000607'),
                   model_uri=TEMP.soil_al_sat, domain=Soil, range=Optional[str])

slots.soil_agrochem_addition = Slot(uri=MIXS['0000639'], name="soil_agrochem_addition", curie=MIXS.curie('0000639'),
                   model_uri=TEMP.soil_agrochem_addition, domain=Soil, range=Optional[Union[str, List[str]]])

slots.soil_annual_temp = Slot(uri=MIXS['0000642'], name="soil_annual_temp", curie=MIXS.curie('0000642'),
                   model_uri=TEMP.soil_annual_temp, domain=Soil, range=Optional[str])

slots.soil_season_temp = Slot(uri=MIXS['0000643'], name="soil_season_temp", curie=MIXS.curie('0000643'),
                   model_uri=TEMP.soil_season_temp, domain=Soil, range=Optional[str])

slots.soil_annual_precpt = Slot(uri=MIXS['0000644'], name="soil_annual_precpt", curie=MIXS.curie('0000644'),
                   model_uri=TEMP.soil_annual_precpt, domain=Soil, range=Optional[str])

slots.soil_season_precpt = Slot(uri=MIXS['0000645'], name="soil_season_precpt", curie=MIXS.curie('0000645'),
                   model_uri=TEMP.soil_season_precpt, domain=Soil, range=Optional[str])

slots.soil_slope_gradient = Slot(uri=MIXS['0000646'], name="soil_slope_gradient", curie=MIXS.curie('0000646'),
                   model_uri=TEMP.soil_slope_gradient, domain=Soil, range=Optional[str])

slots.soil_slope_aspect = Slot(uri=MIXS['0000647'], name="soil_slope_aspect", curie=MIXS.curie('0000647'),
                   model_uri=TEMP.soil_slope_aspect, domain=Soil, range=Optional[str])

slots.soil_microbial_biomass = Slot(uri=MIXS['0000650'], name="soil_microbial_biomass", curie=MIXS.curie('0000650'),
                   model_uri=TEMP.soil_microbial_biomass, domain=Soil, range=Optional[str])

slots.soil_heavy_metals = Slot(uri=MIXS['0000652'], name="soil_heavy_metals", curie=MIXS.curie('0000652'),
                   model_uri=TEMP.soil_heavy_metals, domain=Soil, range=Optional[Union[str, List[str]]])

slots.soil_misc_param = Slot(uri=MIXS['0000752'], name="soil_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.soil_misc_param, domain=Soil, range=Optional[Union[str, List[str]]])

slots.soil_ph = Slot(uri=MIXS['0001001'], name="soil_ph", curie=MIXS.curie('0001001'),
                   model_uri=TEMP.soil_ph, domain=Soil, range=Optional[str])

slots.soil_cur_land_use = Slot(uri=MIXS['0001080'], name="soil_cur_land_use", curie=MIXS.curie('0001080'),
                   model_uri=TEMP.soil_cur_land_use, domain=Soil, range=Optional[str])

slots.soil_tillage = Slot(uri=MIXS['0001081'], name="soil_tillage", curie=MIXS.curie('0001081'),
                   model_uri=TEMP.soil_tillage, domain=Soil, range=Optional[Union[str, List[str]]])

slots.soil_soil_horizon = Slot(uri=MIXS['0001082'], name="soil_soil_horizon", curie=MIXS.curie('0001082'),
                   model_uri=TEMP.soil_soil_horizon, domain=Soil, range=Optional[str])

slots.soil_fao_class = Slot(uri=MIXS['0001083'], name="soil_fao_class", curie=MIXS.curie('0001083'),
                   model_uri=TEMP.soil_fao_class, domain=Soil, range=Optional[str])

slots.soil_profile_position = Slot(uri=MIXS['0001084'], name="soil_profile_position", curie=MIXS.curie('0001084'),
                   model_uri=TEMP.soil_profile_position, domain=Soil, range=Optional[str])

slots.soil_drainage_class = Slot(uri=MIXS['0001085'], name="soil_drainage_class", curie=MIXS.curie('0001085'),
                   model_uri=TEMP.soil_drainage_class, domain=Soil, range=Optional[str])

slots.soil_fire = Slot(uri=MIXS['0001086'], name="soil_fire", curie=MIXS.curie('0001086'),
                   model_uri=TEMP.soil_fire, domain=Soil, range=Optional[str])

slots.soil_ph_meth = Slot(uri=MIXS['0001106'], name="soil_ph_meth", curie=MIXS.curie('0001106'),
                   model_uri=TEMP.soil_ph_meth, domain=Soil, range=Optional[str])

slots.soil_samp_name = Slot(uri=MIXS['0001107'], name="soil_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.soil_samp_name, domain=Soil, range=Optional[str])

slots.wastewater_sludge_depth = Slot(uri=MIXS['0000018'], name="wastewater_sludge_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.wastewater_sludge_depth, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_project_name = Slot(uri=MIXS['0000092'], name="wastewater_sludge_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.wastewater_sludge_project_name, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_tot_nitro = Slot(uri=MIXS['0000102'], name="wastewater_sludge_tot_nitro", curie=MIXS.curie('0000102'),
                   model_uri=TEMP.wastewater_sludge_tot_nitro, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_organism_count = Slot(uri=MIXS['0000103'], name="wastewater_sludge_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.wastewater_sludge_organism_count, domain=WastewaterSludge, range=Optional[Union[str, List[str]]])

slots.wastewater_sludge_samp_store_temp = Slot(uri=MIXS['0000110'], name="wastewater_sludge_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.wastewater_sludge_samp_store_temp, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="wastewater_sludge_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.wastewater_sludge_samp_vol_we_dna_ext, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_temp = Slot(uri=MIXS['0000113'], name="wastewater_sludge_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.wastewater_sludge_temp, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_samp_store_dur = Slot(uri=MIXS['0000116'], name="wastewater_sludge_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.wastewater_sludge_samp_store_dur, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_suspend_solids = Slot(uri=MIXS['0000150'], name="wastewater_sludge_suspend_solids", curie=MIXS.curie('0000150'),
                   model_uri=TEMP.wastewater_sludge_suspend_solids, domain=WastewaterSludge, range=Optional[Union[str, List[str]]])

slots.wastewater_sludge_salinity = Slot(uri=MIXS['0000183'], name="wastewater_sludge_salinity", curie=MIXS.curie('0000183'),
                   model_uri=TEMP.wastewater_sludge_salinity, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_sewage_type = Slot(uri=MIXS['0000215'], name="wastewater_sludge_sewage_type", curie=MIXS.curie('0000215'),
                   model_uri=TEMP.wastewater_sludge_sewage_type, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_pre_treatment = Slot(uri=MIXS['0000348'], name="wastewater_sludge_pre_treatment", curie=MIXS.curie('0000348'),
                   model_uri=TEMP.wastewater_sludge_pre_treatment, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_primary_treatment = Slot(uri=MIXS['0000349'], name="wastewater_sludge_primary_treatment", curie=MIXS.curie('0000349'),
                   model_uri=TEMP.wastewater_sludge_primary_treatment, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_reactor_type = Slot(uri=MIXS['0000350'], name="wastewater_sludge_reactor_type", curie=MIXS.curie('0000350'),
                   model_uri=TEMP.wastewater_sludge_reactor_type, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_secondary_treatment = Slot(uri=MIXS['0000351'], name="wastewater_sludge_secondary_treatment", curie=MIXS.curie('0000351'),
                   model_uri=TEMP.wastewater_sludge_secondary_treatment, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_tertiary_treatment = Slot(uri=MIXS['0000352'], name="wastewater_sludge_tertiary_treatment", curie=MIXS.curie('0000352'),
                   model_uri=TEMP.wastewater_sludge_tertiary_treatment, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_wastewater_type = Slot(uri=MIXS['0000353'], name="wastewater_sludge_wastewater_type", curie=MIXS.curie('0000353'),
                   model_uri=TEMP.wastewater_sludge_wastewater_type, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_alkalinity = Slot(uri=MIXS['0000421'], name="wastewater_sludge_alkalinity", curie=MIXS.curie('0000421'),
                   model_uri=TEMP.wastewater_sludge_alkalinity, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_nitrate = Slot(uri=MIXS['0000425'], name="wastewater_sludge_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=TEMP.wastewater_sludge_nitrate, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_sodium = Slot(uri=MIXS['0000428'], name="wastewater_sludge_sodium", curie=MIXS.curie('0000428'),
                   model_uri=TEMP.wastewater_sludge_sodium, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_phosphate = Slot(uri=MIXS['0000505'], name="wastewater_sludge_phosphate", curie=MIXS.curie('0000505'),
                   model_uri=TEMP.wastewater_sludge_phosphate, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_biochem_oxygen_dem = Slot(uri=MIXS['0000653'], name="wastewater_sludge_biochem_oxygen_dem", curie=MIXS.curie('0000653'),
                   model_uri=TEMP.wastewater_sludge_biochem_oxygen_dem, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_chem_oxygen_dem = Slot(uri=MIXS['0000656'], name="wastewater_sludge_chem_oxygen_dem", curie=MIXS.curie('0000656'),
                   model_uri=TEMP.wastewater_sludge_chem_oxygen_dem, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_efficiency_percent = Slot(uri=MIXS['0000657'], name="wastewater_sludge_efficiency_percent", curie=MIXS.curie('0000657'),
                   model_uri=TEMP.wastewater_sludge_efficiency_percent, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_emulsions = Slot(uri=MIXS['0000660'], name="wastewater_sludge_emulsions", curie=MIXS.curie('0000660'),
                   model_uri=TEMP.wastewater_sludge_emulsions, domain=WastewaterSludge, range=Optional[Union[str, List[str]]])

slots.wastewater_sludge_gaseous_substances = Slot(uri=MIXS['0000661'], name="wastewater_sludge_gaseous_substances", curie=MIXS.curie('0000661'),
                   model_uri=TEMP.wastewater_sludge_gaseous_substances, domain=WastewaterSludge, range=Optional[Union[str, List[str]]])

slots.wastewater_sludge_indust_eff_percent = Slot(uri=MIXS['0000662'], name="wastewater_sludge_indust_eff_percent", curie=MIXS.curie('0000662'),
                   model_uri=TEMP.wastewater_sludge_indust_eff_percent, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_inorg_particles = Slot(uri=MIXS['0000664'], name="wastewater_sludge_inorg_particles", curie=MIXS.curie('0000664'),
                   model_uri=TEMP.wastewater_sludge_inorg_particles, domain=WastewaterSludge, range=Optional[Union[str, List[str]]])

slots.wastewater_sludge_org_particles = Slot(uri=MIXS['0000665'], name="wastewater_sludge_org_particles", curie=MIXS.curie('0000665'),
                   model_uri=TEMP.wastewater_sludge_org_particles, domain=WastewaterSludge, range=Optional[Union[str, List[str]]])

slots.wastewater_sludge_sludge_retent_time = Slot(uri=MIXS['0000669'], name="wastewater_sludge_sludge_retent_time", curie=MIXS.curie('0000669'),
                   model_uri=TEMP.wastewater_sludge_sludge_retent_time, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_soluble_inorg_mat = Slot(uri=MIXS['0000672'], name="wastewater_sludge_soluble_inorg_mat", curie=MIXS.curie('0000672'),
                   model_uri=TEMP.wastewater_sludge_soluble_inorg_mat, domain=WastewaterSludge, range=Optional[Union[str, List[str]]])

slots.wastewater_sludge_soluble_org_mat = Slot(uri=MIXS['0000673'], name="wastewater_sludge_soluble_org_mat", curie=MIXS.curie('0000673'),
                   model_uri=TEMP.wastewater_sludge_soluble_org_mat, domain=WastewaterSludge, range=Optional[Union[str, List[str]]])

slots.wastewater_sludge_tot_phosphate = Slot(uri=MIXS['0000689'], name="wastewater_sludge_tot_phosphate", curie=MIXS.curie('0000689'),
                   model_uri=TEMP.wastewater_sludge_tot_phosphate, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_chem_administration = Slot(uri=MIXS['0000751'], name="wastewater_sludge_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=TEMP.wastewater_sludge_chem_administration, domain=WastewaterSludge, range=Optional[Union[str, List[str]]])

slots.wastewater_sludge_misc_param = Slot(uri=MIXS['0000752'], name="wastewater_sludge_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.wastewater_sludge_misc_param, domain=WastewaterSludge, range=Optional[Union[str, List[str]]])

slots.wastewater_sludge_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="wastewater_sludge_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.wastewater_sludge_oxy_stat_samp, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_perturbation = Slot(uri=MIXS['0000754'], name="wastewater_sludge_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.wastewater_sludge_perturbation, domain=WastewaterSludge, range=Optional[Union[str, List[str]]])

slots.wastewater_sludge_samp_store_loc = Slot(uri=MIXS['0000755'], name="wastewater_sludge_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.wastewater_sludge_samp_store_loc, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_ph = Slot(uri=MIXS['0001001'], name="wastewater_sludge_ph", curie=MIXS.curie('0001001'),
                   model_uri=TEMP.wastewater_sludge_ph, domain=WastewaterSludge, range=Optional[str])

slots.wastewater_sludge_samp_name = Slot(uri=MIXS['0001107'], name="wastewater_sludge_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.wastewater_sludge_samp_name, domain=WastewaterSludge, range=Optional[str])

slots.water_depth = Slot(uri=MIXS['0000018'], name="water_depth", curie=MIXS.curie('0000018'),
                   model_uri=TEMP.water_depth, domain=Water, range=Optional[str])

slots.water_project_name = Slot(uri=MIXS['0000092'], name="water_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.water_project_name, domain=Water, range=Optional[str])

slots.water_elev = Slot(uri=MIXS['0000093'], name="water_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.water_elev, domain=Water, range=Optional[str])

slots.water_tot_nitro = Slot(uri=MIXS['0000102'], name="water_tot_nitro", curie=MIXS.curie('0000102'),
                   model_uri=TEMP.water_tot_nitro, domain=Water, range=Optional[str])

slots.water_organism_count = Slot(uri=MIXS['0000103'], name="water_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.water_organism_count, domain=Water, range=Optional[Union[str, List[str]]])

slots.water_diss_inorg_phosp = Slot(uri=MIXS['0000106'], name="water_diss_inorg_phosp", curie=MIXS.curie('0000106'),
                   model_uri=TEMP.water_diss_inorg_phosp, domain=Water, range=Optional[str])

slots.water_samp_store_temp = Slot(uri=MIXS['0000110'], name="water_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.water_samp_store_temp, domain=Water, range=Optional[str])

slots.water_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="water_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.water_samp_vol_we_dna_ext, domain=Water, range=Optional[str])

slots.water_temp = Slot(uri=MIXS['0000113'], name="water_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.water_temp, domain=Water, range=Optional[str])

slots.water_samp_store_dur = Slot(uri=MIXS['0000116'], name="water_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.water_samp_store_dur, domain=Water, range=Optional[str])

slots.water_tot_phosp = Slot(uri=MIXS['0000117'], name="water_tot_phosp", curie=MIXS.curie('0000117'),
                   model_uri=TEMP.water_tot_phosp, domain=Water, range=Optional[str])

slots.water_diss_oxygen = Slot(uri=MIXS['0000119'], name="water_diss_oxygen", curie=MIXS.curie('0000119'),
                   model_uri=TEMP.water_diss_oxygen, domain=Water, range=Optional[str])

slots.water_glucosidase_act = Slot(uri=MIXS['0000137'], name="water_glucosidase_act", curie=MIXS.curie('0000137'),
                   model_uri=TEMP.water_glucosidase_act, domain=Water, range=Optional[str])

slots.water_diss_org_nitro = Slot(uri=MIXS['0000162'], name="water_diss_org_nitro", curie=MIXS.curie('0000162'),
                   model_uri=TEMP.water_diss_org_nitro, domain=Water, range=Optional[str])

slots.water_aminopept_act = Slot(uri=MIXS['0000172'], name="water_aminopept_act", curie=MIXS.curie('0000172'),
                   model_uri=TEMP.water_aminopept_act, domain=Water, range=Optional[str])

slots.water_bacteria_carb_prod = Slot(uri=MIXS['0000173'], name="water_bacteria_carb_prod", curie=MIXS.curie('0000173'),
                   model_uri=TEMP.water_bacteria_carb_prod, domain=Water, range=Optional[str])

slots.water_biomass = Slot(uri=MIXS['0000174'], name="water_biomass", curie=MIXS.curie('0000174'),
                   model_uri=TEMP.water_biomass, domain=Water, range=Optional[Union[str, List[str]]])

slots.water_bishomohopanol = Slot(uri=MIXS['0000175'], name="water_bishomohopanol", curie=MIXS.curie('0000175'),
                   model_uri=TEMP.water_bishomohopanol, domain=Water, range=Optional[str])

slots.water_bromide = Slot(uri=MIXS['0000176'], name="water_bromide", curie=MIXS.curie('0000176'),
                   model_uri=TEMP.water_bromide, domain=Water, range=Optional[str])

slots.water_chlorophyll = Slot(uri=MIXS['0000177'], name="water_chlorophyll", curie=MIXS.curie('0000177'),
                   model_uri=TEMP.water_chlorophyll, domain=Water, range=Optional[str])

slots.water_diether_lipids = Slot(uri=MIXS['0000178'], name="water_diether_lipids", curie=MIXS.curie('0000178'),
                   model_uri=TEMP.water_diether_lipids, domain=Water, range=Optional[Union[str, List[str]]])

slots.water_diss_hydrogen = Slot(uri=MIXS['0000179'], name="water_diss_hydrogen", curie=MIXS.curie('0000179'),
                   model_uri=TEMP.water_diss_hydrogen, domain=Water, range=Optional[str])

slots.water_phaeopigments = Slot(uri=MIXS['0000180'], name="water_phaeopigments", curie=MIXS.curie('0000180'),
                   model_uri=TEMP.water_phaeopigments, domain=Water, range=Optional[Union[str, List[str]]])

slots.water_phosplipid_fatt_acid = Slot(uri=MIXS['0000181'], name="water_phosplipid_fatt_acid", curie=MIXS.curie('0000181'),
                   model_uri=TEMP.water_phosplipid_fatt_acid, domain=Water, range=Optional[Union[str, List[str]]])

slots.water_redox_potential = Slot(uri=MIXS['0000182'], name="water_redox_potential", curie=MIXS.curie('0000182'),
                   model_uri=TEMP.water_redox_potential, domain=Water, range=Optional[str])

slots.water_salinity = Slot(uri=MIXS['0000183'], name="water_salinity", curie=MIXS.curie('0000183'),
                   model_uri=TEMP.water_salinity, domain=Water, range=Optional[str])

slots.water_silicate = Slot(uri=MIXS['0000184'], name="water_silicate", curie=MIXS.curie('0000184'),
                   model_uri=TEMP.water_silicate, domain=Water, range=Optional[str])

slots.water_turbidity = Slot(uri=MIXS['0000191'], name="water_turbidity", curie=MIXS.curie('0000191'),
                   model_uri=TEMP.water_turbidity, domain=Water, range=Optional[str])

slots.water_water_current = Slot(uri=MIXS['0000203'], name="water_water_current", curie=MIXS.curie('0000203'),
                   model_uri=TEMP.water_water_current, domain=Water, range=Optional[str])

slots.water_org_matter = Slot(uri=MIXS['0000204'], name="water_org_matter", curie=MIXS.curie('0000204'),
                   model_uri=TEMP.water_org_matter, domain=Water, range=Optional[str])

slots.water_org_nitro = Slot(uri=MIXS['0000205'], name="water_org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=TEMP.water_org_nitro, domain=Water, range=Optional[str])

slots.water_alkalinity_method = Slot(uri=MIXS['0000298'], name="water_alkalinity_method", curie=MIXS.curie('0000298'),
                   model_uri=TEMP.water_alkalinity_method, domain=Water, range=Optional[str])

slots.water_carb_nitro_ratio = Slot(uri=MIXS['0000310'], name="water_carb_nitro_ratio", curie=MIXS.curie('0000310'),
                   model_uri=TEMP.water_carb_nitro_ratio, domain=Water, range=Optional[str])

slots.water_pressure = Slot(uri=MIXS['0000412'], name="water_pressure", curie=MIXS.curie('0000412'),
                   model_uri=TEMP.water_pressure, domain=Water, range=Optional[str])

slots.water_alkalinity = Slot(uri=MIXS['0000421'], name="water_alkalinity", curie=MIXS.curie('0000421'),
                   model_uri=TEMP.water_alkalinity, domain=Water, range=Optional[str])

slots.water_sulfate = Slot(uri=MIXS['0000423'], name="water_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=TEMP.water_sulfate, domain=Water, range=Optional[str])

slots.water_sulfide = Slot(uri=MIXS['0000424'], name="water_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=TEMP.water_sulfide, domain=Water, range=Optional[str])

slots.water_nitrate = Slot(uri=MIXS['0000425'], name="water_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=TEMP.water_nitrate, domain=Water, range=Optional[str])

slots.water_nitrite = Slot(uri=MIXS['0000426'], name="water_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=TEMP.water_nitrite, domain=Water, range=Optional[str])

slots.water_ammonium = Slot(uri=MIXS['0000427'], name="water_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=TEMP.water_ammonium, domain=Water, range=Optional[str])

slots.water_sodium = Slot(uri=MIXS['0000428'], name="water_sodium", curie=MIXS.curie('0000428'),
                   model_uri=TEMP.water_sodium, domain=Water, range=Optional[str])

slots.water_chloride = Slot(uri=MIXS['0000429'], name="water_chloride", curie=MIXS.curie('0000429'),
                   model_uri=TEMP.water_chloride, domain=Water, range=Optional[str])

slots.water_potassium = Slot(uri=MIXS['0000430'], name="water_potassium", curie=MIXS.curie('0000430'),
                   model_uri=TEMP.water_potassium, domain=Water, range=Optional[str])

slots.water_magnesium = Slot(uri=MIXS['0000431'], name="water_magnesium", curie=MIXS.curie('0000431'),
                   model_uri=TEMP.water_magnesium, domain=Water, range=Optional[str])

slots.water_calcium = Slot(uri=MIXS['0000432'], name="water_calcium", curie=MIXS.curie('0000432'),
                   model_uri=TEMP.water_calcium, domain=Water, range=Optional[str])

slots.water_diss_org_carb = Slot(uri=MIXS['0000433'], name="water_diss_org_carb", curie=MIXS.curie('0000433'),
                   model_uri=TEMP.water_diss_org_carb, domain=Water, range=Optional[str])

slots.water_diss_inorg_carb = Slot(uri=MIXS['0000434'], name="water_diss_inorg_carb", curie=MIXS.curie('0000434'),
                   model_uri=TEMP.water_diss_inorg_carb, domain=Water, range=Optional[str])

slots.water_density = Slot(uri=MIXS['0000435'], name="water_density", curie=MIXS.curie('0000435'),
                   model_uri=TEMP.water_density, domain=Water, range=Optional[str])

slots.water_diss_carb_dioxide = Slot(uri=MIXS['0000436'], name="water_diss_carb_dioxide", curie=MIXS.curie('0000436'),
                   model_uri=TEMP.water_diss_carb_dioxide, domain=Water, range=Optional[str])

slots.water_alkyl_diethers = Slot(uri=MIXS['0000490'], name="water_alkyl_diethers", curie=MIXS.curie('0000490'),
                   model_uri=TEMP.water_alkyl_diethers, domain=Water, range=Optional[str])

slots.water_mean_frict_vel = Slot(uri=MIXS['0000498'], name="water_mean_frict_vel", curie=MIXS.curie('0000498'),
                   model_uri=TEMP.water_mean_frict_vel, domain=Water, range=Optional[str])

slots.water_mean_peak_frict_vel = Slot(uri=MIXS['0000502'], name="water_mean_peak_frict_vel", curie=MIXS.curie('0000502'),
                   model_uri=TEMP.water_mean_peak_frict_vel, domain=Water, range=Optional[str])

slots.water_n_alkanes = Slot(uri=MIXS['0000503'], name="water_n_alkanes", curie=MIXS.curie('0000503'),
                   model_uri=TEMP.water_n_alkanes, domain=Water, range=Optional[Union[str, List[str]]])

slots.water_nitro = Slot(uri=MIXS['0000504'], name="water_nitro", curie=MIXS.curie('0000504'),
                   model_uri=TEMP.water_nitro, domain=Water, range=Optional[str])

slots.water_phosphate = Slot(uri=MIXS['0000505'], name="water_phosphate", curie=MIXS.curie('0000505'),
                   model_uri=TEMP.water_phosphate, domain=Water, range=Optional[str])

slots.water_org_carb = Slot(uri=MIXS['0000508'], name="water_org_carb", curie=MIXS.curie('0000508'),
                   model_uri=TEMP.water_org_carb, domain=Water, range=Optional[str])

slots.water_part_org_carb = Slot(uri=MIXS['0000515'], name="water_part_org_carb", curie=MIXS.curie('0000515'),
                   model_uri=TEMP.water_part_org_carb, domain=Water, range=Optional[str])

slots.water_petroleum_hydrocarb = Slot(uri=MIXS['0000516'], name="water_petroleum_hydrocarb", curie=MIXS.curie('0000516'),
                   model_uri=TEMP.water_petroleum_hydrocarb, domain=Water, range=Optional[str])

slots.water_tot_depth_water_col = Slot(uri=MIXS['0000634'], name="water_tot_depth_water_col", curie=MIXS.curie('0000634'),
                   model_uri=TEMP.water_tot_depth_water_col, domain=Water, range=Optional[str])

slots.water_bac_prod = Slot(uri=MIXS['0000683'], name="water_bac_prod", curie=MIXS.curie('0000683'),
                   model_uri=TEMP.water_bac_prod, domain=Water, range=Optional[str])

slots.water_bac_resp = Slot(uri=MIXS['0000684'], name="water_bac_resp", curie=MIXS.curie('0000684'),
                   model_uri=TEMP.water_bac_resp, domain=Water, range=Optional[str])

slots.water_conduc = Slot(uri=MIXS['0000692'], name="water_conduc", curie=MIXS.curie('0000692'),
                   model_uri=TEMP.water_conduc, domain=Water, range=Optional[str])

slots.water_diss_inorg_nitro = Slot(uri=MIXS['0000698'], name="water_diss_inorg_nitro", curie=MIXS.curie('0000698'),
                   model_uri=TEMP.water_diss_inorg_nitro, domain=Water, range=Optional[str])

slots.water_down_par = Slot(uri=MIXS['0000703'], name="water_down_par", curie=MIXS.curie('0000703'),
                   model_uri=TEMP.water_down_par, domain=Water, range=Optional[str])

slots.water_fluor = Slot(uri=MIXS['0000704'], name="water_fluor", curie=MIXS.curie('0000704'),
                   model_uri=TEMP.water_fluor, domain=Water, range=Optional[str])

slots.water_light_intensity = Slot(uri=MIXS['0000706'], name="water_light_intensity", curie=MIXS.curie('0000706'),
                   model_uri=TEMP.water_light_intensity, domain=Water, range=Optional[str])

slots.water_part_org_nitro = Slot(uri=MIXS['0000719'], name="water_part_org_nitro", curie=MIXS.curie('0000719'),
                   model_uri=TEMP.water_part_org_nitro, domain=Water, range=Optional[str])

slots.water_photon_flux = Slot(uri=MIXS['0000725'], name="water_photon_flux", curie=MIXS.curie('0000725'),
                   model_uri=TEMP.water_photon_flux, domain=Water, range=Optional[str])

slots.water_primary_prod = Slot(uri=MIXS['0000728'], name="water_primary_prod", curie=MIXS.curie('0000728'),
                   model_uri=TEMP.water_primary_prod, domain=Water, range=Optional[str])

slots.water_size_frac_low = Slot(uri=MIXS['0000735'], name="water_size_frac_low", curie=MIXS.curie('0000735'),
                   model_uri=TEMP.water_size_frac_low, domain=Water, range=Optional[str])

slots.water_size_frac_up = Slot(uri=MIXS['0000736'], name="water_size_frac_up", curie=MIXS.curie('0000736'),
                   model_uri=TEMP.water_size_frac_up, domain=Water, range=Optional[str])

slots.water_soluble_react_phosp = Slot(uri=MIXS['0000738'], name="water_soluble_react_phosp", curie=MIXS.curie('0000738'),
                   model_uri=TEMP.water_soluble_react_phosp, domain=Water, range=Optional[str])

slots.water_suspend_part_matter = Slot(uri=MIXS['0000741'], name="water_suspend_part_matter", curie=MIXS.curie('0000741'),
                   model_uri=TEMP.water_suspend_part_matter, domain=Water, range=Optional[str])

slots.water_tot_diss_nitro = Slot(uri=MIXS['0000744'], name="water_tot_diss_nitro", curie=MIXS.curie('0000744'),
                   model_uri=TEMP.water_tot_diss_nitro, domain=Water, range=Optional[str])

slots.water_tot_inorg_nitro = Slot(uri=MIXS['0000745'], name="water_tot_inorg_nitro", curie=MIXS.curie('0000745'),
                   model_uri=TEMP.water_tot_inorg_nitro, domain=Water, range=Optional[str])

slots.water_tot_part_carb = Slot(uri=MIXS['0000747'], name="water_tot_part_carb", curie=MIXS.curie('0000747'),
                   model_uri=TEMP.water_tot_part_carb, domain=Water, range=Optional[str])

slots.water_tidal_stage = Slot(uri=MIXS['0000750'], name="water_tidal_stage", curie=MIXS.curie('0000750'),
                   model_uri=TEMP.water_tidal_stage, domain=Water, range=Optional[str])

slots.water_chem_administration = Slot(uri=MIXS['0000751'], name="water_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=TEMP.water_chem_administration, domain=Water, range=Optional[Union[str, List[str]]])

slots.water_misc_param = Slot(uri=MIXS['0000752'], name="water_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.water_misc_param, domain=Water, range=Optional[Union[str, List[str]]])

slots.water_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="water_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.water_oxy_stat_samp, domain=Water, range=Optional[str])

slots.water_perturbation = Slot(uri=MIXS['0000754'], name="water_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.water_perturbation, domain=Water, range=Optional[Union[str, List[str]]])

slots.water_samp_store_loc = Slot(uri=MIXS['0000755'], name="water_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.water_samp_store_loc, domain=Water, range=Optional[str])

slots.water_ph = Slot(uri=MIXS['0001001'], name="water_ph", curie=MIXS.curie('0001001'),
                   model_uri=TEMP.water_ph, domain=Water, range=Optional[str])

slots.water_atmospheric_data = Slot(uri=MIXS['0001097'], name="water_atmospheric_data", curie=MIXS.curie('0001097'),
                   model_uri=TEMP.water_atmospheric_data, domain=Water, range=Optional[Union[str, List[str]]])

slots.water_samp_name = Slot(uri=MIXS['0001107'], name="water_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.water_samp_name, domain=Water, range=Optional[str])

slots.human_associated_host_disease_stat = Slot(uri=MIXS['0000031'], name="human_associated_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.human_associated_host_disease_stat, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_project_name = Slot(uri=MIXS['0000092'], name="human_associated_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.human_associated_project_name, domain=HumanAssociated, range=Optional[str])

slots.human_associated_organism_count = Slot(uri=MIXS['0000103'], name="human_associated_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.human_associated_organism_count, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_samp_store_temp = Slot(uri=MIXS['0000110'], name="human_associated_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.human_associated_samp_store_temp, domain=HumanAssociated, range=Optional[str])

slots.human_associated_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="human_associated_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.human_associated_samp_vol_we_dna_ext, domain=HumanAssociated, range=Optional[str])

slots.human_associated_temp = Slot(uri=MIXS['0000113'], name="human_associated_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.human_associated_temp, domain=HumanAssociated, range=Optional[str])

slots.human_associated_samp_store_dur = Slot(uri=MIXS['0000116'], name="human_associated_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.human_associated_samp_store_dur, domain=HumanAssociated, range=Optional[str])

slots.human_associated_salinity = Slot(uri=MIXS['0000183'], name="human_associated_salinity", curie=MIXS.curie('0000183'),
                   model_uri=TEMP.human_associated_salinity, domain=HumanAssociated, range=Optional[str])

slots.human_associated_host_age = Slot(uri=MIXS['0000255'], name="human_associated_host_age", curie=MIXS.curie('0000255'),
                   model_uri=TEMP.human_associated_host_age, domain=HumanAssociated, range=Optional[str])

slots.human_associated_smoker = Slot(uri=MIXS['0000262'], name="human_associated_smoker", curie=MIXS.curie('0000262'),
                   model_uri=TEMP.human_associated_smoker, domain=HumanAssociated, range=Optional[str])

slots.human_associated_host_tot_mass = Slot(uri=MIXS['0000263'], name="human_associated_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=TEMP.human_associated_host_tot_mass, domain=HumanAssociated, range=Optional[str])

slots.human_associated_host_height = Slot(uri=MIXS['0000264'], name="human_associated_host_height", curie=MIXS.curie('0000264'),
                   model_uri=TEMP.human_associated_host_height, domain=HumanAssociated, range=Optional[str])

slots.human_associated_host_hiv_stat = Slot(uri=MIXS['0000265'], name="human_associated_host_hiv_stat", curie=MIXS.curie('0000265'),
                   model_uri=TEMP.human_associated_host_hiv_stat, domain=HumanAssociated, range=Optional[str])

slots.human_associated_diet_last_six_month = Slot(uri=MIXS['0000266'], name="human_associated_diet_last_six_month", curie=MIXS.curie('0000266'),
                   model_uri=TEMP.human_associated_diet_last_six_month, domain=HumanAssociated, range=Optional[str])

slots.human_associated_pet_farm_animal = Slot(uri=MIXS['0000267'], name="human_associated_pet_farm_animal", curie=MIXS.curie('0000267'),
                   model_uri=TEMP.human_associated_pet_farm_animal, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_travel_out_six_month = Slot(uri=MIXS['0000268'], name="human_associated_travel_out_six_month", curie=MIXS.curie('0000268'),
                   model_uri=TEMP.human_associated_travel_out_six_month, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_pulmonary_disord = Slot(uri=MIXS['0000269'], name="human_associated_pulmonary_disord", curie=MIXS.curie('0000269'),
                   model_uri=TEMP.human_associated_pulmonary_disord, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_nose_throat_disord = Slot(uri=MIXS['0000270'], name="human_associated_nose_throat_disord", curie=MIXS.curie('0000270'),
                   model_uri=TEMP.human_associated_nose_throat_disord, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_blood_blood_disord = Slot(uri=MIXS['0000271'], name="human_associated_blood_blood_disord", curie=MIXS.curie('0000271'),
                   model_uri=TEMP.human_associated_blood_blood_disord, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_gestation_state = Slot(uri=MIXS['0000272'], name="human_associated_gestation_state", curie=MIXS.curie('0000272'),
                   model_uri=TEMP.human_associated_gestation_state, domain=HumanAssociated, range=Optional[str])

slots.human_associated_maternal_health_stat = Slot(uri=MIXS['0000273'], name="human_associated_maternal_health_stat", curie=MIXS.curie('0000273'),
                   model_uri=TEMP.human_associated_maternal_health_stat, domain=HumanAssociated, range=Optional[str])

slots.human_associated_host_body_temp = Slot(uri=MIXS['0000274'], name="human_associated_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=TEMP.human_associated_host_body_temp, domain=HumanAssociated, range=Optional[str])

slots.human_associated_foetal_health_stat = Slot(uri=MIXS['0000275'], name="human_associated_foetal_health_stat", curie=MIXS.curie('0000275'),
                   model_uri=TEMP.human_associated_foetal_health_stat, domain=HumanAssociated, range=Optional[str])

slots.human_associated_amniotic_fluid_color = Slot(uri=MIXS['0000276'], name="human_associated_amniotic_fluid_color", curie=MIXS.curie('0000276'),
                   model_uri=TEMP.human_associated_amniotic_fluid_color, domain=HumanAssociated, range=Optional[str])

slots.human_associated_kidney_disord = Slot(uri=MIXS['0000277'], name="human_associated_kidney_disord", curie=MIXS.curie('0000277'),
                   model_uri=TEMP.human_associated_kidney_disord, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_urogenit_tract_disor = Slot(uri=MIXS['0000278'], name="human_associated_urogenit_tract_disor", curie=MIXS.curie('0000278'),
                   model_uri=TEMP.human_associated_urogenit_tract_disor, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_weight_loss_3_month = Slot(uri=MIXS['0000295'], name="human_associated_weight_loss_3_month", curie=MIXS.curie('0000295'),
                   model_uri=TEMP.human_associated_weight_loss_3_month, domain=HumanAssociated, range=Optional[str])

slots.human_associated_host_body_mass_index = Slot(uri=MIXS['0000317'], name="human_associated_host_body_mass_index", curie=MIXS.curie('0000317'),
                   model_uri=TEMP.human_associated_host_body_mass_index, domain=HumanAssociated, range=Optional[str])

slots.human_associated_twin_sibling = Slot(uri=MIXS['0000326'], name="human_associated_twin_sibling", curie=MIXS.curie('0000326'),
                   model_uri=TEMP.human_associated_twin_sibling, domain=HumanAssociated, range=Optional[str])

slots.human_associated_host_pulse = Slot(uri=MIXS['0000333'], name="human_associated_host_pulse", curie=MIXS.curie('0000333'),
                   model_uri=TEMP.human_associated_host_pulse, domain=HumanAssociated, range=Optional[str])

slots.human_associated_host_genotype = Slot(uri=MIXS['0000365'], name="human_associated_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=TEMP.human_associated_host_genotype, domain=HumanAssociated, range=Optional[str])

slots.human_associated_chem_administration = Slot(uri=MIXS['0000751'], name="human_associated_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=TEMP.human_associated_chem_administration, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_misc_param = Slot(uri=MIXS['0000752'], name="human_associated_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.human_associated_misc_param, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="human_associated_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.human_associated_oxy_stat_samp, domain=HumanAssociated, range=Optional[str])

slots.human_associated_perturbation = Slot(uri=MIXS['0000754'], name="human_associated_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.human_associated_perturbation, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_samp_store_loc = Slot(uri=MIXS['0000755'], name="human_associated_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.human_associated_samp_store_loc, domain=HumanAssociated, range=Optional[str])

slots.human_associated_host_sex = Slot(uri=MIXS['0000811'], name="human_associated_host_sex", curie=MIXS.curie('0000811'),
                   model_uri=TEMP.human_associated_host_sex, domain=HumanAssociated, range=Optional[str])

slots.human_associated_host_subject_id = Slot(uri=MIXS['0000861'], name="human_associated_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=TEMP.human_associated_host_subject_id, domain=HumanAssociated, range=Optional[str])

slots.human_associated_host_body_site = Slot(uri=MIXS['0000867'], name="human_associated_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=TEMP.human_associated_host_body_site, domain=HumanAssociated, range=Optional[str])

slots.human_associated_host_diet = Slot(uri=MIXS['0000869'], name="human_associated_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=TEMP.human_associated_host_diet, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_host_last_meal = Slot(uri=MIXS['0000870'], name="human_associated_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=TEMP.human_associated_host_last_meal, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_host_family_relation = Slot(uri=MIXS['0000872'], name="human_associated_host_family_relation", curie=MIXS.curie('0000872'),
                   model_uri=TEMP.human_associated_host_family_relation, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_host_phenotype = Slot(uri=MIXS['0000874'], name="human_associated_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=TEMP.human_associated_host_phenotype, domain=HumanAssociated, range=Optional[str])

slots.human_associated_ihmc_medication_code = Slot(uri=MIXS['0000884'], name="human_associated_ihmc_medication_code", curie=MIXS.curie('0000884'),
                   model_uri=TEMP.human_associated_ihmc_medication_code, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_host_body_product = Slot(uri=MIXS['0000888'], name="human_associated_host_body_product", curie=MIXS.curie('0000888'),
                   model_uri=TEMP.human_associated_host_body_product, domain=HumanAssociated, range=Optional[str])

slots.human_associated_drug_usage = Slot(uri=MIXS['0000894'], name="human_associated_drug_usage", curie=MIXS.curie('0000894'),
                   model_uri=TEMP.human_associated_drug_usage, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_ethnicity = Slot(uri=MIXS['0000895'], name="human_associated_ethnicity", curie=MIXS.curie('0000895'),
                   model_uri=TEMP.human_associated_ethnicity, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_associated_host_occupation = Slot(uri=MIXS['0000896'], name="human_associated_host_occupation", curie=MIXS.curie('0000896'),
                   model_uri=TEMP.human_associated_host_occupation, domain=HumanAssociated, range=Optional[str])

slots.human_associated_medic_hist_perform = Slot(uri=MIXS['0000897'], name="human_associated_medic_hist_perform", curie=MIXS.curie('0000897'),
                   model_uri=TEMP.human_associated_medic_hist_perform, domain=HumanAssociated, range=Optional[str])

slots.human_associated_study_complt_stat = Slot(uri=MIXS['0000898'], name="human_associated_study_complt_stat", curie=MIXS.curie('0000898'),
                   model_uri=TEMP.human_associated_study_complt_stat, domain=HumanAssociated, range=Optional[str])

slots.human_associated_urine_collect_meth = Slot(uri=MIXS['0000899'], name="human_associated_urine_collect_meth", curie=MIXS.curie('0000899'),
                   model_uri=TEMP.human_associated_urine_collect_meth, domain=HumanAssociated, range=Optional[str])

slots.human_associated_samp_name = Slot(uri=MIXS['0001107'], name="human_associated_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.human_associated_samp_name, domain=HumanAssociated, range=Optional[str])

slots.human_associated_host_symbiont = Slot(uri=MIXS['0001298'], name="human_associated_host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=TEMP.human_associated_host_symbiont, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.human_gut_host_disease_stat = Slot(uri=MIXS['0000031'], name="human_gut_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.human_gut_host_disease_stat, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.human_gut_project_name = Slot(uri=MIXS['0000092'], name="human_gut_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.human_gut_project_name, domain=HumanGut, range=Optional[str])

slots.human_gut_organism_count = Slot(uri=MIXS['0000103'], name="human_gut_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.human_gut_organism_count, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.human_gut_samp_store_temp = Slot(uri=MIXS['0000110'], name="human_gut_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.human_gut_samp_store_temp, domain=HumanGut, range=Optional[str])

slots.human_gut_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="human_gut_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.human_gut_samp_vol_we_dna_ext, domain=HumanGut, range=Optional[str])

slots.human_gut_temp = Slot(uri=MIXS['0000113'], name="human_gut_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.human_gut_temp, domain=HumanGut, range=Optional[str])

slots.human_gut_samp_store_dur = Slot(uri=MIXS['0000116'], name="human_gut_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.human_gut_samp_store_dur, domain=HumanGut, range=Optional[str])

slots.human_gut_salinity = Slot(uri=MIXS['0000183'], name="human_gut_salinity", curie=MIXS.curie('0000183'),
                   model_uri=TEMP.human_gut_salinity, domain=HumanGut, range=Optional[str])

slots.human_gut_host_age = Slot(uri=MIXS['0000255'], name="human_gut_host_age", curie=MIXS.curie('0000255'),
                   model_uri=TEMP.human_gut_host_age, domain=HumanGut, range=Optional[str])

slots.human_gut_host_tot_mass = Slot(uri=MIXS['0000263'], name="human_gut_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=TEMP.human_gut_host_tot_mass, domain=HumanGut, range=Optional[str])

slots.human_gut_host_height = Slot(uri=MIXS['0000264'], name="human_gut_host_height", curie=MIXS.curie('0000264'),
                   model_uri=TEMP.human_gut_host_height, domain=HumanGut, range=Optional[str])

slots.human_gut_host_body_temp = Slot(uri=MIXS['0000274'], name="human_gut_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=TEMP.human_gut_host_body_temp, domain=HumanGut, range=Optional[str])

slots.human_gut_gastrointest_disord = Slot(uri=MIXS['0000280'], name="human_gut_gastrointest_disord", curie=MIXS.curie('0000280'),
                   model_uri=TEMP.human_gut_gastrointest_disord, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.human_gut_liver_disord = Slot(uri=MIXS['0000282'], name="human_gut_liver_disord", curie=MIXS.curie('0000282'),
                   model_uri=TEMP.human_gut_liver_disord, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.human_gut_host_body_mass_index = Slot(uri=MIXS['0000317'], name="human_gut_host_body_mass_index", curie=MIXS.curie('0000317'),
                   model_uri=TEMP.human_gut_host_body_mass_index, domain=HumanGut, range=Optional[str])

slots.human_gut_host_pulse = Slot(uri=MIXS['0000333'], name="human_gut_host_pulse", curie=MIXS.curie('0000333'),
                   model_uri=TEMP.human_gut_host_pulse, domain=HumanGut, range=Optional[str])

slots.human_gut_host_genotype = Slot(uri=MIXS['0000365'], name="human_gut_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=TEMP.human_gut_host_genotype, domain=HumanGut, range=Optional[str])

slots.human_gut_chem_administration = Slot(uri=MIXS['0000751'], name="human_gut_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=TEMP.human_gut_chem_administration, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.human_gut_misc_param = Slot(uri=MIXS['0000752'], name="human_gut_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.human_gut_misc_param, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.human_gut_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="human_gut_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.human_gut_oxy_stat_samp, domain=HumanGut, range=Optional[str])

slots.human_gut_perturbation = Slot(uri=MIXS['0000754'], name="human_gut_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.human_gut_perturbation, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.human_gut_samp_store_loc = Slot(uri=MIXS['0000755'], name="human_gut_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.human_gut_samp_store_loc, domain=HumanGut, range=Optional[str])

slots.human_gut_host_sex = Slot(uri=MIXS['0000811'], name="human_gut_host_sex", curie=MIXS.curie('0000811'),
                   model_uri=TEMP.human_gut_host_sex, domain=HumanGut, range=Optional[str])

slots.human_gut_host_subject_id = Slot(uri=MIXS['0000861'], name="human_gut_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=TEMP.human_gut_host_subject_id, domain=HumanGut, range=Optional[str])

slots.human_gut_host_body_site = Slot(uri=MIXS['0000867'], name="human_gut_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=TEMP.human_gut_host_body_site, domain=HumanGut, range=Optional[str])

slots.human_gut_host_diet = Slot(uri=MIXS['0000869'], name="human_gut_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=TEMP.human_gut_host_diet, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.human_gut_host_last_meal = Slot(uri=MIXS['0000870'], name="human_gut_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=TEMP.human_gut_host_last_meal, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.human_gut_host_family_relation = Slot(uri=MIXS['0000872'], name="human_gut_host_family_relation", curie=MIXS.curie('0000872'),
                   model_uri=TEMP.human_gut_host_family_relation, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.human_gut_host_phenotype = Slot(uri=MIXS['0000874'], name="human_gut_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=TEMP.human_gut_host_phenotype, domain=HumanGut, range=Optional[str])

slots.human_gut_ihmc_medication_code = Slot(uri=MIXS['0000884'], name="human_gut_ihmc_medication_code", curie=MIXS.curie('0000884'),
                   model_uri=TEMP.human_gut_ihmc_medication_code, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.human_gut_host_body_product = Slot(uri=MIXS['0000888'], name="human_gut_host_body_product", curie=MIXS.curie('0000888'),
                   model_uri=TEMP.human_gut_host_body_product, domain=HumanGut, range=Optional[str])

slots.human_gut_ethnicity = Slot(uri=MIXS['0000895'], name="human_gut_ethnicity", curie=MIXS.curie('0000895'),
                   model_uri=TEMP.human_gut_ethnicity, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.human_gut_host_occupation = Slot(uri=MIXS['0000896'], name="human_gut_host_occupation", curie=MIXS.curie('0000896'),
                   model_uri=TEMP.human_gut_host_occupation, domain=HumanGut, range=Optional[str])

slots.human_gut_medic_hist_perform = Slot(uri=MIXS['0000897'], name="human_gut_medic_hist_perform", curie=MIXS.curie('0000897'),
                   model_uri=TEMP.human_gut_medic_hist_perform, domain=HumanGut, range=Optional[str])

slots.human_gut_special_diet = Slot(uri=MIXS['0000905'], name="human_gut_special_diet", curie=MIXS.curie('0000905'),
                   model_uri=TEMP.human_gut_special_diet, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.human_gut_samp_name = Slot(uri=MIXS['0001107'], name="human_gut_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.human_gut_samp_name, domain=HumanGut, range=Optional[str])

slots.human_gut_host_symbiont = Slot(uri=MIXS['0001298'], name="human_gut_host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=TEMP.human_gut_host_symbiont, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.human_oral_host_disease_stat = Slot(uri=MIXS['0000031'], name="human_oral_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.human_oral_host_disease_stat, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.human_oral_project_name = Slot(uri=MIXS['0000092'], name="human_oral_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.human_oral_project_name, domain=HumanOral, range=Optional[str])

slots.human_oral_organism_count = Slot(uri=MIXS['0000103'], name="human_oral_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.human_oral_organism_count, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.human_oral_samp_store_temp = Slot(uri=MIXS['0000110'], name="human_oral_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.human_oral_samp_store_temp, domain=HumanOral, range=Optional[str])

slots.human_oral_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="human_oral_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.human_oral_samp_vol_we_dna_ext, domain=HumanOral, range=Optional[str])

slots.human_oral_temp = Slot(uri=MIXS['0000113'], name="human_oral_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.human_oral_temp, domain=HumanOral, range=Optional[str])

slots.human_oral_samp_store_dur = Slot(uri=MIXS['0000116'], name="human_oral_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.human_oral_samp_store_dur, domain=HumanOral, range=Optional[str])

slots.human_oral_salinity = Slot(uri=MIXS['0000183'], name="human_oral_salinity", curie=MIXS.curie('0000183'),
                   model_uri=TEMP.human_oral_salinity, domain=HumanOral, range=Optional[str])

slots.human_oral_host_age = Slot(uri=MIXS['0000255'], name="human_oral_host_age", curie=MIXS.curie('0000255'),
                   model_uri=TEMP.human_oral_host_age, domain=HumanOral, range=Optional[str])

slots.human_oral_host_tot_mass = Slot(uri=MIXS['0000263'], name="human_oral_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=TEMP.human_oral_host_tot_mass, domain=HumanOral, range=Optional[str])

slots.human_oral_host_height = Slot(uri=MIXS['0000264'], name="human_oral_host_height", curie=MIXS.curie('0000264'),
                   model_uri=TEMP.human_oral_host_height, domain=HumanOral, range=Optional[str])

slots.human_oral_host_body_temp = Slot(uri=MIXS['0000274'], name="human_oral_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=TEMP.human_oral_host_body_temp, domain=HumanOral, range=Optional[str])

slots.human_oral_nose_throat_disord = Slot(uri=MIXS['0000283'], name="human_oral_nose_throat_disord", curie=MIXS.curie('0000283'),
                   model_uri=TEMP.human_oral_nose_throat_disord, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.human_oral_host_body_mass_index = Slot(uri=MIXS['0000317'], name="human_oral_host_body_mass_index", curie=MIXS.curie('0000317'),
                   model_uri=TEMP.human_oral_host_body_mass_index, domain=HumanOral, range=Optional[str])

slots.human_oral_host_pulse = Slot(uri=MIXS['0000333'], name="human_oral_host_pulse", curie=MIXS.curie('0000333'),
                   model_uri=TEMP.human_oral_host_pulse, domain=HumanOral, range=Optional[str])

slots.human_oral_host_genotype = Slot(uri=MIXS['0000365'], name="human_oral_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=TEMP.human_oral_host_genotype, domain=HumanOral, range=Optional[str])

slots.human_oral_chem_administration = Slot(uri=MIXS['0000751'], name="human_oral_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=TEMP.human_oral_chem_administration, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.human_oral_misc_param = Slot(uri=MIXS['0000752'], name="human_oral_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.human_oral_misc_param, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.human_oral_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="human_oral_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.human_oral_oxy_stat_samp, domain=HumanOral, range=Optional[str])

slots.human_oral_perturbation = Slot(uri=MIXS['0000754'], name="human_oral_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.human_oral_perturbation, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.human_oral_samp_store_loc = Slot(uri=MIXS['0000755'], name="human_oral_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.human_oral_samp_store_loc, domain=HumanOral, range=Optional[str])

slots.human_oral_host_sex = Slot(uri=MIXS['0000811'], name="human_oral_host_sex", curie=MIXS.curie('0000811'),
                   model_uri=TEMP.human_oral_host_sex, domain=HumanOral, range=Optional[str])

slots.human_oral_host_subject_id = Slot(uri=MIXS['0000861'], name="human_oral_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=TEMP.human_oral_host_subject_id, domain=HumanOral, range=Optional[str])

slots.human_oral_host_body_site = Slot(uri=MIXS['0000867'], name="human_oral_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=TEMP.human_oral_host_body_site, domain=HumanOral, range=Optional[str])

slots.human_oral_host_diet = Slot(uri=MIXS['0000869'], name="human_oral_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=TEMP.human_oral_host_diet, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.human_oral_host_last_meal = Slot(uri=MIXS['0000870'], name="human_oral_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=TEMP.human_oral_host_last_meal, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.human_oral_host_family_relation = Slot(uri=MIXS['0000872'], name="human_oral_host_family_relation", curie=MIXS.curie('0000872'),
                   model_uri=TEMP.human_oral_host_family_relation, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.human_oral_host_phenotype = Slot(uri=MIXS['0000874'], name="human_oral_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=TEMP.human_oral_host_phenotype, domain=HumanOral, range=Optional[str])

slots.human_oral_ihmc_medication_code = Slot(uri=MIXS['0000884'], name="human_oral_ihmc_medication_code", curie=MIXS.curie('0000884'),
                   model_uri=TEMP.human_oral_ihmc_medication_code, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.human_oral_host_body_product = Slot(uri=MIXS['0000888'], name="human_oral_host_body_product", curie=MIXS.curie('0000888'),
                   model_uri=TEMP.human_oral_host_body_product, domain=HumanOral, range=Optional[str])

slots.human_oral_ethnicity = Slot(uri=MIXS['0000895'], name="human_oral_ethnicity", curie=MIXS.curie('0000895'),
                   model_uri=TEMP.human_oral_ethnicity, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.human_oral_host_occupation = Slot(uri=MIXS['0000896'], name="human_oral_host_occupation", curie=MIXS.curie('0000896'),
                   model_uri=TEMP.human_oral_host_occupation, domain=HumanOral, range=Optional[str])

slots.human_oral_medic_hist_perform = Slot(uri=MIXS['0000897'], name="human_oral_medic_hist_perform", curie=MIXS.curie('0000897'),
                   model_uri=TEMP.human_oral_medic_hist_perform, domain=HumanOral, range=Optional[str])

slots.human_oral_time_last_toothbrush = Slot(uri=MIXS['0000924'], name="human_oral_time_last_toothbrush", curie=MIXS.curie('0000924'),
                   model_uri=TEMP.human_oral_time_last_toothbrush, domain=HumanOral, range=Optional[str])

slots.human_oral_samp_name = Slot(uri=MIXS['0001107'], name="human_oral_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.human_oral_samp_name, domain=HumanOral, range=Optional[str])

slots.human_oral_host_symbiont = Slot(uri=MIXS['0001298'], name="human_oral_host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=TEMP.human_oral_host_symbiont, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.human_skin_host_disease_stat = Slot(uri=MIXS['0000031'], name="human_skin_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.human_skin_host_disease_stat, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.human_skin_project_name = Slot(uri=MIXS['0000092'], name="human_skin_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.human_skin_project_name, domain=HumanSkin, range=Optional[str])

slots.human_skin_organism_count = Slot(uri=MIXS['0000103'], name="human_skin_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.human_skin_organism_count, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.human_skin_samp_store_temp = Slot(uri=MIXS['0000110'], name="human_skin_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.human_skin_samp_store_temp, domain=HumanSkin, range=Optional[str])

slots.human_skin_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="human_skin_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.human_skin_samp_vol_we_dna_ext, domain=HumanSkin, range=Optional[str])

slots.human_skin_temp = Slot(uri=MIXS['0000113'], name="human_skin_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.human_skin_temp, domain=HumanSkin, range=Optional[str])

slots.human_skin_samp_store_dur = Slot(uri=MIXS['0000116'], name="human_skin_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.human_skin_samp_store_dur, domain=HumanSkin, range=Optional[str])

slots.human_skin_salinity = Slot(uri=MIXS['0000183'], name="human_skin_salinity", curie=MIXS.curie('0000183'),
                   model_uri=TEMP.human_skin_salinity, domain=HumanSkin, range=Optional[str])

slots.human_skin_host_age = Slot(uri=MIXS['0000255'], name="human_skin_host_age", curie=MIXS.curie('0000255'),
                   model_uri=TEMP.human_skin_host_age, domain=HumanSkin, range=Optional[str])

slots.human_skin_host_tot_mass = Slot(uri=MIXS['0000263'], name="human_skin_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=TEMP.human_skin_host_tot_mass, domain=HumanSkin, range=Optional[str])

slots.human_skin_host_height = Slot(uri=MIXS['0000264'], name="human_skin_host_height", curie=MIXS.curie('0000264'),
                   model_uri=TEMP.human_skin_host_height, domain=HumanSkin, range=Optional[str])

slots.human_skin_host_body_temp = Slot(uri=MIXS['0000274'], name="human_skin_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=TEMP.human_skin_host_body_temp, domain=HumanSkin, range=Optional[str])

slots.human_skin_dermatology_disord = Slot(uri=MIXS['0000284'], name="human_skin_dermatology_disord", curie=MIXS.curie('0000284'),
                   model_uri=TEMP.human_skin_dermatology_disord, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.human_skin_host_body_mass_index = Slot(uri=MIXS['0000317'], name="human_skin_host_body_mass_index", curie=MIXS.curie('0000317'),
                   model_uri=TEMP.human_skin_host_body_mass_index, domain=HumanSkin, range=Optional[str])

slots.human_skin_host_pulse = Slot(uri=MIXS['0000333'], name="human_skin_host_pulse", curie=MIXS.curie('0000333'),
                   model_uri=TEMP.human_skin_host_pulse, domain=HumanSkin, range=Optional[str])

slots.human_skin_host_genotype = Slot(uri=MIXS['0000365'], name="human_skin_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=TEMP.human_skin_host_genotype, domain=HumanSkin, range=Optional[str])

slots.human_skin_chem_administration = Slot(uri=MIXS['0000751'], name="human_skin_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=TEMP.human_skin_chem_administration, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.human_skin_misc_param = Slot(uri=MIXS['0000752'], name="human_skin_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.human_skin_misc_param, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.human_skin_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="human_skin_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.human_skin_oxy_stat_samp, domain=HumanSkin, range=Optional[str])

slots.human_skin_perturbation = Slot(uri=MIXS['0000754'], name="human_skin_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.human_skin_perturbation, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.human_skin_samp_store_loc = Slot(uri=MIXS['0000755'], name="human_skin_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.human_skin_samp_store_loc, domain=HumanSkin, range=Optional[str])

slots.human_skin_host_sex = Slot(uri=MIXS['0000811'], name="human_skin_host_sex", curie=MIXS.curie('0000811'),
                   model_uri=TEMP.human_skin_host_sex, domain=HumanSkin, range=Optional[str])

slots.human_skin_host_subject_id = Slot(uri=MIXS['0000861'], name="human_skin_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=TEMP.human_skin_host_subject_id, domain=HumanSkin, range=Optional[str])

slots.human_skin_host_body_site = Slot(uri=MIXS['0000867'], name="human_skin_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=TEMP.human_skin_host_body_site, domain=HumanSkin, range=Optional[str])

slots.human_skin_host_diet = Slot(uri=MIXS['0000869'], name="human_skin_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=TEMP.human_skin_host_diet, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.human_skin_host_last_meal = Slot(uri=MIXS['0000870'], name="human_skin_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=TEMP.human_skin_host_last_meal, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.human_skin_host_family_relation = Slot(uri=MIXS['0000872'], name="human_skin_host_family_relation", curie=MIXS.curie('0000872'),
                   model_uri=TEMP.human_skin_host_family_relation, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.human_skin_host_phenotype = Slot(uri=MIXS['0000874'], name="human_skin_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=TEMP.human_skin_host_phenotype, domain=HumanSkin, range=Optional[str])

slots.human_skin_ihmc_medication_code = Slot(uri=MIXS['0000884'], name="human_skin_ihmc_medication_code", curie=MIXS.curie('0000884'),
                   model_uri=TEMP.human_skin_ihmc_medication_code, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.human_skin_host_body_product = Slot(uri=MIXS['0000888'], name="human_skin_host_body_product", curie=MIXS.curie('0000888'),
                   model_uri=TEMP.human_skin_host_body_product, domain=HumanSkin, range=Optional[str])

slots.human_skin_ethnicity = Slot(uri=MIXS['0000895'], name="human_skin_ethnicity", curie=MIXS.curie('0000895'),
                   model_uri=TEMP.human_skin_ethnicity, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.human_skin_host_occupation = Slot(uri=MIXS['0000896'], name="human_skin_host_occupation", curie=MIXS.curie('0000896'),
                   model_uri=TEMP.human_skin_host_occupation, domain=HumanSkin, range=Optional[str])

slots.human_skin_medic_hist_perform = Slot(uri=MIXS['0000897'], name="human_skin_medic_hist_perform", curie=MIXS.curie('0000897'),
                   model_uri=TEMP.human_skin_medic_hist_perform, domain=HumanSkin, range=Optional[str])

slots.human_skin_time_since_last_wash = Slot(uri=MIXS['0000943'], name="human_skin_time_since_last_wash", curie=MIXS.curie('0000943'),
                   model_uri=TEMP.human_skin_time_since_last_wash, domain=HumanSkin, range=Optional[str])

slots.human_skin_dominant_hand = Slot(uri=MIXS['0000944'], name="human_skin_dominant_hand", curie=MIXS.curie('0000944'),
                   model_uri=TEMP.human_skin_dominant_hand, domain=HumanSkin, range=Optional[str])

slots.human_skin_samp_name = Slot(uri=MIXS['0001107'], name="human_skin_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.human_skin_samp_name, domain=HumanSkin, range=Optional[str])

slots.human_skin_host_symbiont = Slot(uri=MIXS['0001298'], name="human_skin_host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=TEMP.human_skin_host_symbiont, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.human_vaginal_host_disease_stat = Slot(uri=MIXS['0000031'], name="human_vaginal_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=TEMP.human_vaginal_host_disease_stat, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.human_vaginal_project_name = Slot(uri=MIXS['0000092'], name="human_vaginal_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.human_vaginal_project_name, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_organism_count = Slot(uri=MIXS['0000103'], name="human_vaginal_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.human_vaginal_organism_count, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.human_vaginal_samp_salinity = Slot(uri=MIXS['0000109'], name="human_vaginal_samp_salinity", curie=MIXS.curie('0000109'),
                   model_uri=TEMP.human_vaginal_samp_salinity, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_samp_store_temp = Slot(uri=MIXS['0000110'], name="human_vaginal_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.human_vaginal_samp_store_temp, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="human_vaginal_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.human_vaginal_samp_vol_we_dna_ext, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_temp = Slot(uri=MIXS['0000113'], name="human_vaginal_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.human_vaginal_temp, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_samp_store_dur = Slot(uri=MIXS['0000116'], name="human_vaginal_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.human_vaginal_samp_store_dur, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_salinity = Slot(uri=MIXS['0000183'], name="human_vaginal_salinity", curie=MIXS.curie('0000183'),
                   model_uri=TEMP.human_vaginal_salinity, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_host_age = Slot(uri=MIXS['0000255'], name="human_vaginal_host_age", curie=MIXS.curie('0000255'),
                   model_uri=TEMP.human_vaginal_host_age, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_host_tot_mass = Slot(uri=MIXS['0000263'], name="human_vaginal_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=TEMP.human_vaginal_host_tot_mass, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_host_height = Slot(uri=MIXS['0000264'], name="human_vaginal_host_height", curie=MIXS.curie('0000264'),
                   model_uri=TEMP.human_vaginal_host_height, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_host_body_temp = Slot(uri=MIXS['0000274'], name="human_vaginal_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=TEMP.human_vaginal_host_body_temp, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_sexual_act = Slot(uri=MIXS['0000285'], name="human_vaginal_sexual_act", curie=MIXS.curie('0000285'),
                   model_uri=TEMP.human_vaginal_sexual_act, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_birth_control = Slot(uri=MIXS['0000286'], name="human_vaginal_birth_control", curie=MIXS.curie('0000286'),
                   model_uri=TEMP.human_vaginal_birth_control, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_hysterectomy = Slot(uri=MIXS['0000287'], name="human_vaginal_hysterectomy", curie=MIXS.curie('0000287'),
                   model_uri=TEMP.human_vaginal_hysterectomy, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_gynecologic_disord = Slot(uri=MIXS['0000288'], name="human_vaginal_gynecologic_disord", curie=MIXS.curie('0000288'),
                   model_uri=TEMP.human_vaginal_gynecologic_disord, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.human_vaginal_urogenit_disord = Slot(uri=MIXS['0000289'], name="human_vaginal_urogenit_disord", curie=MIXS.curie('0000289'),
                   model_uri=TEMP.human_vaginal_urogenit_disord, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.human_vaginal_host_body_mass_index = Slot(uri=MIXS['0000317'], name="human_vaginal_host_body_mass_index", curie=MIXS.curie('0000317'),
                   model_uri=TEMP.human_vaginal_host_body_mass_index, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_host_pulse = Slot(uri=MIXS['0000333'], name="human_vaginal_host_pulse", curie=MIXS.curie('0000333'),
                   model_uri=TEMP.human_vaginal_host_pulse, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_host_genotype = Slot(uri=MIXS['0000365'], name="human_vaginal_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=TEMP.human_vaginal_host_genotype, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_chem_administration = Slot(uri=MIXS['0000751'], name="human_vaginal_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=TEMP.human_vaginal_chem_administration, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.human_vaginal_misc_param = Slot(uri=MIXS['0000752'], name="human_vaginal_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.human_vaginal_misc_param, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.human_vaginal_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="human_vaginal_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.human_vaginal_oxy_stat_samp, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_perturbation = Slot(uri=MIXS['0000754'], name="human_vaginal_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.human_vaginal_perturbation, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.human_vaginal_samp_store_loc = Slot(uri=MIXS['0000755'], name="human_vaginal_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.human_vaginal_samp_store_loc, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_host_sex = Slot(uri=MIXS['0000811'], name="human_vaginal_host_sex", curie=MIXS.curie('0000811'),
                   model_uri=TEMP.human_vaginal_host_sex, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_host_subject_id = Slot(uri=MIXS['0000861'], name="human_vaginal_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=TEMP.human_vaginal_host_subject_id, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_host_body_site = Slot(uri=MIXS['0000867'], name="human_vaginal_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=TEMP.human_vaginal_host_body_site, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_host_diet = Slot(uri=MIXS['0000869'], name="human_vaginal_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=TEMP.human_vaginal_host_diet, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.human_vaginal_host_last_meal = Slot(uri=MIXS['0000870'], name="human_vaginal_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=TEMP.human_vaginal_host_last_meal, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.human_vaginal_host_family_relation = Slot(uri=MIXS['0000872'], name="human_vaginal_host_family_relation", curie=MIXS.curie('0000872'),
                   model_uri=TEMP.human_vaginal_host_family_relation, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.human_vaginal_host_phenotype = Slot(uri=MIXS['0000874'], name="human_vaginal_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=TEMP.human_vaginal_host_phenotype, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_ihmc_medication_code = Slot(uri=MIXS['0000884'], name="human_vaginal_ihmc_medication_code", curie=MIXS.curie('0000884'),
                   model_uri=TEMP.human_vaginal_ihmc_medication_code, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.human_vaginal_host_body_product = Slot(uri=MIXS['0000888'], name="human_vaginal_host_body_product", curie=MIXS.curie('0000888'),
                   model_uri=TEMP.human_vaginal_host_body_product, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_ethnicity = Slot(uri=MIXS['0000895'], name="human_vaginal_ethnicity", curie=MIXS.curie('0000895'),
                   model_uri=TEMP.human_vaginal_ethnicity, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.human_vaginal_host_occupation = Slot(uri=MIXS['0000896'], name="human_vaginal_host_occupation", curie=MIXS.curie('0000896'),
                   model_uri=TEMP.human_vaginal_host_occupation, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_medic_hist_perform = Slot(uri=MIXS['0000897'], name="human_vaginal_medic_hist_perform", curie=MIXS.curie('0000897'),
                   model_uri=TEMP.human_vaginal_medic_hist_perform, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_menarche = Slot(uri=MIXS['0000965'], name="human_vaginal_menarche", curie=MIXS.curie('0000965'),
                   model_uri=TEMP.human_vaginal_menarche, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_pregnancy = Slot(uri=MIXS['0000966'], name="human_vaginal_pregnancy", curie=MIXS.curie('0000966'),
                   model_uri=TEMP.human_vaginal_pregnancy, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_douche = Slot(uri=MIXS['0000967'], name="human_vaginal_douche", curie=MIXS.curie('0000967'),
                   model_uri=TEMP.human_vaginal_douche, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_menopause = Slot(uri=MIXS['0000968'], name="human_vaginal_menopause", curie=MIXS.curie('0000968'),
                   model_uri=TEMP.human_vaginal_menopause, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_hrt = Slot(uri=MIXS['0000969'], name="human_vaginal_hrt", curie=MIXS.curie('0000969'),
                   model_uri=TEMP.human_vaginal_hrt, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_samp_name = Slot(uri=MIXS['0001107'], name="human_vaginal_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.human_vaginal_samp_name, domain=HumanVaginal, range=Optional[str])

slots.human_vaginal_host_symbiont = Slot(uri=MIXS['0001298'], name="human_vaginal_host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=TEMP.human_vaginal_host_symbiont, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.air_project_name = Slot(uri=MIXS['0000092'], name="air_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.air_project_name, domain=Air, range=Optional[str])

slots.air_elev = Slot(uri=MIXS['0000093'], name="air_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.air_elev, domain=Air, range=Optional[str])

slots.air_alt = Slot(uri=MIXS['0000094'], name="air_alt", curie=MIXS.curie('0000094'),
                   model_uri=TEMP.air_alt, domain=Air, range=Optional[str])

slots.air_barometric_press = Slot(uri=MIXS['0000096'], name="air_barometric_press", curie=MIXS.curie('0000096'),
                   model_uri=TEMP.air_barometric_press, domain=Air, range=Optional[str])

slots.air_carb_dioxide = Slot(uri=MIXS['0000097'], name="air_carb_dioxide", curie=MIXS.curie('0000097'),
                   model_uri=TEMP.air_carb_dioxide, domain=Air, range=Optional[str])

slots.air_carb_monoxide = Slot(uri=MIXS['0000098'], name="air_carb_monoxide", curie=MIXS.curie('0000098'),
                   model_uri=TEMP.air_carb_monoxide, domain=Air, range=Optional[str])

slots.air_humidity = Slot(uri=MIXS['0000100'], name="air_humidity", curie=MIXS.curie('0000100'),
                   model_uri=TEMP.air_humidity, domain=Air, range=Optional[str])

slots.air_methane = Slot(uri=MIXS['0000101'], name="air_methane", curie=MIXS.curie('0000101'),
                   model_uri=TEMP.air_methane, domain=Air, range=Optional[str])

slots.air_organism_count = Slot(uri=MIXS['0000103'], name="air_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.air_organism_count, domain=Air, range=Optional[Union[str, List[str]]])

slots.air_oxygen = Slot(uri=MIXS['0000104'], name="air_oxygen", curie=MIXS.curie('0000104'),
                   model_uri=TEMP.air_oxygen, domain=Air, range=Optional[str])

slots.air_pollutants = Slot(uri=MIXS['0000107'], name="air_pollutants", curie=MIXS.curie('0000107'),
                   model_uri=TEMP.air_pollutants, domain=Air, range=Optional[Union[str, List[str]]])

slots.air_air_particulate_matter_concentration = Slot(uri=MIXS['0000108'], name="air_air_particulate_matter_concentration", curie=MIXS.curie('0000108'),
                   model_uri=TEMP.air_air_particulate_matter_concentration, domain=Air, range=Optional[Union[str, List[str]]])

slots.air_samp_store_temp = Slot(uri=MIXS['0000110'], name="air_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.air_samp_store_temp, domain=Air, range=Optional[str])

slots.air_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="air_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.air_samp_vol_we_dna_ext, domain=Air, range=Optional[str])

slots.air_solar_irradiance = Slot(uri=MIXS['0000112'], name="air_solar_irradiance", curie=MIXS.curie('0000112'),
                   model_uri=TEMP.air_solar_irradiance, domain=Air, range=Optional[str])

slots.air_ventilation_rate = Slot(uri=MIXS['0000114'], name="air_ventilation_rate", curie=MIXS.curie('0000114'),
                   model_uri=TEMP.air_ventilation_rate, domain=Air, range=Optional[str])

slots.air_volatile_org_comp = Slot(uri=MIXS['0000115'], name="air_volatile_org_comp", curie=MIXS.curie('0000115'),
                   model_uri=TEMP.air_volatile_org_comp, domain=Air, range=Optional[Union[str, List[str]]])

slots.air_samp_store_dur = Slot(uri=MIXS['0000116'], name="air_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.air_samp_store_dur, domain=Air, range=Optional[str])

slots.air_wind_speed = Slot(uri=MIXS['0000118'], name="air_wind_speed", curie=MIXS.curie('0000118'),
                   model_uri=TEMP.air_wind_speed, domain=Air, range=Optional[str])

slots.air_salinity = Slot(uri=MIXS['0000183'], name="air_salinity", curie=MIXS.curie('0000183'),
                   model_uri=TEMP.air_salinity, domain=Air, range=Optional[str])

slots.air_chem_administration = Slot(uri=MIXS['0000751'], name="air_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=TEMP.air_chem_administration, domain=Air, range=Optional[Union[str, List[str]]])

slots.air_misc_param = Slot(uri=MIXS['0000752'], name="air_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.air_misc_param, domain=Air, range=Optional[Union[str, List[str]]])

slots.air_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="air_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.air_oxy_stat_samp, domain=Air, range=Optional[str])

slots.air_perturbation = Slot(uri=MIXS['0000754'], name="air_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=TEMP.air_perturbation, domain=Air, range=Optional[Union[str, List[str]]])

slots.air_samp_store_loc = Slot(uri=MIXS['0000755'], name="air_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.air_samp_store_loc, domain=Air, range=Optional[str])

slots.air_ventilation_type = Slot(uri=MIXS['0000756'], name="air_ventilation_type", curie=MIXS.curie('0000756'),
                   model_uri=TEMP.air_ventilation_type, domain=Air, range=Optional[str])

slots.air_wind_direction = Slot(uri=MIXS['0000757'], name="air_wind_direction", curie=MIXS.curie('0000757'),
                   model_uri=TEMP.air_wind_direction, domain=Air, range=Optional[str])

slots.air_samp_name = Slot(uri=MIXS['0001107'], name="air_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.air_samp_name, domain=Air, range=Optional[str])

slots.built_environment_project_name = Slot(uri=MIXS['0000092'], name="built_environment_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.built_environment_project_name, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_carb_dioxide = Slot(uri=MIXS['0000097'], name="built_environment_carb_dioxide", curie=MIXS.curie('0000097'),
                   model_uri=TEMP.built_environment_carb_dioxide, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_organism_count = Slot(uri=MIXS['0000103'], name="built_environment_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.built_environment_organism_count, domain=BuiltEnvironment, range=Optional[Union[str, List[str]]])

slots.built_environment_rel_air_humidity = Slot(uri=MIXS['0000121'], name="built_environment_rel_air_humidity", curie=MIXS.curie('0000121'),
                   model_uri=TEMP.built_environment_rel_air_humidity, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_abs_air_humidity = Slot(uri=MIXS['0000122'], name="built_environment_abs_air_humidity", curie=MIXS.curie('0000122'),
                   model_uri=TEMP.built_environment_abs_air_humidity, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_surf_humidity = Slot(uri=MIXS['0000123'], name="built_environment_surf_humidity", curie=MIXS.curie('0000123'),
                   model_uri=TEMP.built_environment_surf_humidity, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_air_temp = Slot(uri=MIXS['0000124'], name="built_environment_air_temp", curie=MIXS.curie('0000124'),
                   model_uri=TEMP.built_environment_air_temp, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_surf_temp = Slot(uri=MIXS['0000125'], name="built_environment_surf_temp", curie=MIXS.curie('0000125'),
                   model_uri=TEMP.built_environment_surf_temp, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_surf_moisture = Slot(uri=MIXS['0000128'], name="built_environment_surf_moisture", curie=MIXS.curie('0000128'),
                   model_uri=TEMP.built_environment_surf_moisture, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_dew_point = Slot(uri=MIXS['0000129'], name="built_environment_dew_point", curie=MIXS.curie('0000129'),
                   model_uri=TEMP.built_environment_dew_point, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_amount_light = Slot(uri=MIXS['0000140'], name="built_environment_amount_light", curie=MIXS.curie('0000140'),
                   model_uri=TEMP.built_environment_amount_light, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_avg_dew_point = Slot(uri=MIXS['0000141'], name="built_environment_avg_dew_point", curie=MIXS.curie('0000141'),
                   model_uri=TEMP.built_environment_avg_dew_point, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_avg_temp = Slot(uri=MIXS['0000142'], name="built_environment_avg_temp", curie=MIXS.curie('0000142'),
                   model_uri=TEMP.built_environment_avg_temp, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_ceil_thermal_mass = Slot(uri=MIXS['0000143'], name="built_environment_ceil_thermal_mass", curie=MIXS.curie('0000143'),
                   model_uri=TEMP.built_environment_ceil_thermal_mass, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_exp_duct = Slot(uri=MIXS['0000144'], name="built_environment_exp_duct", curie=MIXS.curie('0000144'),
                   model_uri=TEMP.built_environment_exp_duct, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_built_struc_age = Slot(uri=MIXS['0000145'], name="built_environment_built_struc_age", curie=MIXS.curie('0000145'),
                   model_uri=TEMP.built_environment_built_struc_age, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_ceil_area = Slot(uri=MIXS['0000148'], name="built_environment_ceil_area", curie=MIXS.curie('0000148'),
                   model_uri=TEMP.built_environment_ceil_area, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_door_size = Slot(uri=MIXS['0000158'], name="built_environment_door_size", curie=MIXS.curie('0000158'),
                   model_uri=TEMP.built_environment_door_size, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_floor_age = Slot(uri=MIXS['0000164'], name="built_environment_floor_age", curie=MIXS.curie('0000164'),
                   model_uri=TEMP.built_environment_floor_age, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_floor_area = Slot(uri=MIXS['0000165'], name="built_environment_floor_area", curie=MIXS.curie('0000165'),
                   model_uri=TEMP.built_environment_floor_area, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_floor_thermal_mass = Slot(uri=MIXS['0000166'], name="built_environment_floor_thermal_mass", curie=MIXS.curie('0000166'),
                   model_uri=TEMP.built_environment_floor_thermal_mass, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_height_carper_fiber = Slot(uri=MIXS['0000167'], name="built_environment_height_carper_fiber", curie=MIXS.curie('0000167'),
                   model_uri=TEMP.built_environment_height_carper_fiber, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_inside_lux = Slot(uri=MIXS['0000168'], name="built_environment_inside_lux", curie=MIXS.curie('0000168'),
                   model_uri=TEMP.built_environment_inside_lux, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_air_exch_rate = Slot(uri=MIXS['0000169'], name="built_environment_room_air_exch_rate", curie=MIXS.curie('0000169'),
                   model_uri=TEMP.built_environment_room_air_exch_rate, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_ext_door = Slot(uri=MIXS['0000170'], name="built_environment_ext_door", curie=MIXS.curie('0000170'),
                   model_uri=TEMP.built_environment_ext_door, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_rel_humidity_out = Slot(uri=MIXS['0000188'], name="built_environment_rel_humidity_out", curie=MIXS.curie('0000188'),
                   model_uri=TEMP.built_environment_rel_humidity_out, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_dim = Slot(uri=MIXS['0000192'], name="built_environment_room_dim", curie=MIXS.curie('0000192'),
                   model_uri=TEMP.built_environment_room_dim, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_door_dist = Slot(uri=MIXS['0000193'], name="built_environment_room_door_dist", curie=MIXS.curie('0000193'),
                   model_uri=TEMP.built_environment_room_door_dist, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_net_area = Slot(uri=MIXS['0000194'], name="built_environment_room_net_area", curie=MIXS.curie('0000194'),
                   model_uri=TEMP.built_environment_room_net_area, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_vol = Slot(uri=MIXS['0000195'], name="built_environment_room_vol", curie=MIXS.curie('0000195'),
                   model_uri=TEMP.built_environment_room_vol, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_samp_time_out = Slot(uri=MIXS['0000196'], name="built_environment_samp_time_out", curie=MIXS.curie('0000196'),
                   model_uri=TEMP.built_environment_samp_time_out, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_temp_out = Slot(uri=MIXS['0000197'], name="built_environment_temp_out", curie=MIXS.curie('0000197'),
                   model_uri=TEMP.built_environment_temp_out, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_wall_area = Slot(uri=MIXS['0000198'], name="built_environment_wall_area", curie=MIXS.curie('0000198'),
                   model_uri=TEMP.built_environment_wall_area, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_specific_humidity = Slot(uri=MIXS['0000214'], name="built_environment_specific_humidity", curie=MIXS.curie('0000214'),
                   model_uri=TEMP.built_environment_specific_humidity, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_samp_sort_meth = Slot(uri=MIXS['0000216'], name="built_environment_samp_sort_meth", curie=MIXS.curie('0000216'),
                   model_uri=TEMP.built_environment_samp_sort_meth, domain=BuiltEnvironment, range=Optional[Union[str, List[str]]])

slots.built_environment_occup_density_samp = Slot(uri=MIXS['0000217'], name="built_environment_occup_density_samp", curie=MIXS.curie('0000217'),
                   model_uri=TEMP.built_environment_occup_density_samp, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_address = Slot(uri=MIXS['0000218'], name="built_environment_address", curie=MIXS.curie('0000218'),
                   model_uri=TEMP.built_environment_address, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_adj_room = Slot(uri=MIXS['0000219'], name="built_environment_adj_room", curie=MIXS.curie('0000219'),
                   model_uri=TEMP.built_environment_adj_room, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_exp_pipe = Slot(uri=MIXS['0000220'], name="built_environment_exp_pipe", curie=MIXS.curie('0000220'),
                   model_uri=TEMP.built_environment_exp_pipe, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_wall_height = Slot(uri=MIXS['0000221'], name="built_environment_wall_height", curie=MIXS.curie('0000221'),
                   model_uri=TEMP.built_environment_wall_height, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_wall_thermal_mass = Slot(uri=MIXS['0000222'], name="built_environment_wall_thermal_mass", curie=MIXS.curie('0000222'),
                   model_uri=TEMP.built_environment_wall_thermal_mass, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_water_feat_size = Slot(uri=MIXS['0000223'], name="built_environment_water_feat_size", curie=MIXS.curie('0000223'),
                   model_uri=TEMP.built_environment_water_feat_size, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_window_size = Slot(uri=MIXS['0000224'], name="built_environment_window_size", curie=MIXS.curie('0000224'),
                   model_uri=TEMP.built_environment_window_size, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_floor_count = Slot(uri=MIXS['0000225'], name="built_environment_floor_count", curie=MIXS.curie('0000225'),
                   model_uri=TEMP.built_environment_floor_count, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_freq_clean = Slot(uri=MIXS['0000226'], name="built_environment_freq_clean", curie=MIXS.curie('0000226'),
                   model_uri=TEMP.built_environment_freq_clean, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_freq_cook = Slot(uri=MIXS['0000227'], name="built_environment_freq_cook", curie=MIXS.curie('0000227'),
                   model_uri=TEMP.built_environment_freq_cook, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_hall_count = Slot(uri=MIXS['0000228'], name="built_environment_hall_count", curie=MIXS.curie('0000228'),
                   model_uri=TEMP.built_environment_hall_count, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_max_occup = Slot(uri=MIXS['0000229'], name="built_environment_max_occup", curie=MIXS.curie('0000229'),
                   model_uri=TEMP.built_environment_max_occup, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_number_plants = Slot(uri=MIXS['0000230'], name="built_environment_number_plants", curie=MIXS.curie('0000230'),
                   model_uri=TEMP.built_environment_number_plants, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_number_pets = Slot(uri=MIXS['0000231'], name="built_environment_number_pets", curie=MIXS.curie('0000231'),
                   model_uri=TEMP.built_environment_number_pets, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_number_resident = Slot(uri=MIXS['0000232'], name="built_environment_number_resident", curie=MIXS.curie('0000232'),
                   model_uri=TEMP.built_environment_number_resident, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_architec_elem = Slot(uri=MIXS['0000233'], name="built_environment_room_architec_elem", curie=MIXS.curie('0000233'),
                   model_uri=TEMP.built_environment_room_architec_elem, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_count = Slot(uri=MIXS['0000234'], name="built_environment_room_count", curie=MIXS.curie('0000234'),
                   model_uri=TEMP.built_environment_room_count, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_moist_dam_hist = Slot(uri=MIXS['0000235'], name="built_environment_room_moist_dam_hist", curie=MIXS.curie('0000235'),
                   model_uri=TEMP.built_environment_room_moist_dam_hist, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_occup = Slot(uri=MIXS['0000236'], name="built_environment_room_occup", curie=MIXS.curie('0000236'),
                   model_uri=TEMP.built_environment_room_occup, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_window_count = Slot(uri=MIXS['0000237'], name="built_environment_room_window_count", curie=MIXS.curie('0000237'),
                   model_uri=TEMP.built_environment_room_window_count, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_hallway = Slot(uri=MIXS['0000238'], name="built_environment_room_hallway", curie=MIXS.curie('0000238'),
                   model_uri=TEMP.built_environment_room_hallway, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_door_share = Slot(uri=MIXS['0000242'], name="built_environment_room_door_share", curie=MIXS.curie('0000242'),
                   model_uri=TEMP.built_environment_room_door_share, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_wall_share = Slot(uri=MIXS['0000243'], name="built_environment_room_wall_share", curie=MIXS.curie('0000243'),
                   model_uri=TEMP.built_environment_room_wall_share, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_samp_room_id = Slot(uri=MIXS['0000244'], name="built_environment_samp_room_id", curie=MIXS.curie('0000244'),
                   model_uri=TEMP.built_environment_samp_room_id, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_shading_device_mat = Slot(uri=MIXS['0000245'], name="built_environment_shading_device_mat", curie=MIXS.curie('0000245'),
                   model_uri=TEMP.built_environment_shading_device_mat, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_window_open_freq = Slot(uri=MIXS['0000246'], name="built_environment_window_open_freq", curie=MIXS.curie('0000246'),
                   model_uri=TEMP.built_environment_window_open_freq, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_built_struc_type = Slot(uri=MIXS['0000721'], name="built_environment_built_struc_type", curie=MIXS.curie('0000721'),
                   model_uri=TEMP.built_environment_built_struc_type, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_ventilation_type = Slot(uri=MIXS['0000756'], name="built_environment_ventilation_type", curie=MIXS.curie('0000756'),
                   model_uri=TEMP.built_environment_ventilation_type, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_surf_material = Slot(uri=MIXS['0000758'], name="built_environment_surf_material", curie=MIXS.curie('0000758'),
                   model_uri=TEMP.built_environment_surf_material, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_surf_air_cont = Slot(uri=MIXS['0000759'], name="built_environment_surf_air_cont", curie=MIXS.curie('0000759'),
                   model_uri=TEMP.built_environment_surf_air_cont, domain=BuiltEnvironment, range=Optional[Union[str, List[str]]])

slots.built_environment_surf_moisture_ph = Slot(uri=MIXS['0000760'], name="built_environment_surf_moisture_ph", curie=MIXS.curie('0000760'),
                   model_uri=TEMP.built_environment_surf_moisture_ph, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_build_occup_type = Slot(uri=MIXS['0000761'], name="built_environment_build_occup_type", curie=MIXS.curie('0000761'),
                   model_uri=TEMP.built_environment_build_occup_type, domain=BuiltEnvironment, range=Optional[Union[str, List[str]]])

slots.built_environment_indoor_space = Slot(uri=MIXS['0000763'], name="built_environment_indoor_space", curie=MIXS.curie('0000763'),
                   model_uri=TEMP.built_environment_indoor_space, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_indoor_surf = Slot(uri=MIXS['0000764'], name="built_environment_indoor_surf", curie=MIXS.curie('0000764'),
                   model_uri=TEMP.built_environment_indoor_surf, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_filter_type = Slot(uri=MIXS['0000765'], name="built_environment_filter_type", curie=MIXS.curie('0000765'),
                   model_uri=TEMP.built_environment_filter_type, domain=BuiltEnvironment, range=Optional[Union[str, List[str]]])

slots.built_environment_heat_cool_type = Slot(uri=MIXS['0000766'], name="built_environment_heat_cool_type", curie=MIXS.curie('0000766'),
                   model_uri=TEMP.built_environment_heat_cool_type, domain=BuiltEnvironment, range=Optional[Union[str, List[str]]])

slots.built_environment_substructure_type = Slot(uri=MIXS['0000767'], name="built_environment_substructure_type", curie=MIXS.curie('0000767'),
                   model_uri=TEMP.built_environment_substructure_type, domain=BuiltEnvironment, range=Optional[Union[str, List[str]]])

slots.built_environment_building_setting = Slot(uri=MIXS['0000768'], name="built_environment_building_setting", curie=MIXS.curie('0000768'),
                   model_uri=TEMP.built_environment_building_setting, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_light_type = Slot(uri=MIXS['0000769'], name="built_environment_light_type", curie=MIXS.curie('0000769'),
                   model_uri=TEMP.built_environment_light_type, domain=BuiltEnvironment, range=Optional[Union[str, List[str]]])

slots.built_environment_space_typ_state = Slot(uri=MIXS['0000770'], name="built_environment_space_typ_state", curie=MIXS.curie('0000770'),
                   model_uri=TEMP.built_environment_space_typ_state, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_typ_occup_density = Slot(uri=MIXS['0000771'], name="built_environment_typ_occup_density", curie=MIXS.curie('0000771'),
                   model_uri=TEMP.built_environment_typ_occup_density, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_occup_samp = Slot(uri=MIXS['0000772'], name="built_environment_occup_samp", curie=MIXS.curie('0000772'),
                   model_uri=TEMP.built_environment_occup_samp, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_aero_struc = Slot(uri=MIXS['0000773'], name="built_environment_aero_struc", curie=MIXS.curie('0000773'),
                   model_uri=TEMP.built_environment_aero_struc, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_arch_struc = Slot(uri=MIXS['0000774'], name="built_environment_arch_struc", curie=MIXS.curie('0000774'),
                   model_uri=TEMP.built_environment_arch_struc, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_avg_occup = Slot(uri=MIXS['0000775'], name="built_environment_avg_occup", curie=MIXS.curie('0000775'),
                   model_uri=TEMP.built_environment_avg_occup, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_bathroom_count = Slot(uri=MIXS['0000776'], name="built_environment_bathroom_count", curie=MIXS.curie('0000776'),
                   model_uri=TEMP.built_environment_bathroom_count, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_bedroom_count = Slot(uri=MIXS['0000777'], name="built_environment_bedroom_count", curie=MIXS.curie('0000777'),
                   model_uri=TEMP.built_environment_bedroom_count, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_built_struc_set = Slot(uri=MIXS['0000778'], name="built_environment_built_struc_set", curie=MIXS.curie('0000778'),
                   model_uri=TEMP.built_environment_built_struc_set, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_ceil_cond = Slot(uri=MIXS['0000779'], name="built_environment_ceil_cond", curie=MIXS.curie('0000779'),
                   model_uri=TEMP.built_environment_ceil_cond, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_ceil_finish_mat = Slot(uri=MIXS['0000780'], name="built_environment_ceil_finish_mat", curie=MIXS.curie('0000780'),
                   model_uri=TEMP.built_environment_ceil_finish_mat, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_ceil_water_mold = Slot(uri=MIXS['0000781'], name="built_environment_ceil_water_mold", curie=MIXS.curie('0000781'),
                   model_uri=TEMP.built_environment_ceil_water_mold, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_ceil_struc = Slot(uri=MIXS['0000782'], name="built_environment_ceil_struc", curie=MIXS.curie('0000782'),
                   model_uri=TEMP.built_environment_ceil_struc, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_ceil_texture = Slot(uri=MIXS['0000783'], name="built_environment_ceil_texture", curie=MIXS.curie('0000783'),
                   model_uri=TEMP.built_environment_ceil_texture, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_ceil_type = Slot(uri=MIXS['0000784'], name="built_environment_ceil_type", curie=MIXS.curie('0000784'),
                   model_uri=TEMP.built_environment_ceil_type, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_cool_syst_id = Slot(uri=MIXS['0000785'], name="built_environment_cool_syst_id", curie=MIXS.curie('0000785'),
                   model_uri=TEMP.built_environment_cool_syst_id, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_date_last_rain = Slot(uri=MIXS['0000786'], name="built_environment_date_last_rain", curie=MIXS.curie('0000786'),
                   model_uri=TEMP.built_environment_date_last_rain, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_build_docs = Slot(uri=MIXS['0000787'], name="built_environment_build_docs", curie=MIXS.curie('0000787'),
                   model_uri=TEMP.built_environment_build_docs, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_door_cond = Slot(uri=MIXS['0000788'], name="built_environment_door_cond", curie=MIXS.curie('0000788'),
                   model_uri=TEMP.built_environment_door_cond, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_door_direct = Slot(uri=MIXS['0000789'], name="built_environment_door_direct", curie=MIXS.curie('0000789'),
                   model_uri=TEMP.built_environment_door_direct, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_door_loc = Slot(uri=MIXS['0000790'], name="built_environment_door_loc", curie=MIXS.curie('0000790'),
                   model_uri=TEMP.built_environment_door_loc, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_door_mat = Slot(uri=MIXS['0000791'], name="built_environment_door_mat", curie=MIXS.curie('0000791'),
                   model_uri=TEMP.built_environment_door_mat, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_door_move = Slot(uri=MIXS['0000792'], name="built_environment_door_move", curie=MIXS.curie('0000792'),
                   model_uri=TEMP.built_environment_door_move, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_door_water_mold = Slot(uri=MIXS['0000793'], name="built_environment_door_water_mold", curie=MIXS.curie('0000793'),
                   model_uri=TEMP.built_environment_door_water_mold, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_door_type = Slot(uri=MIXS['0000794'], name="built_environment_door_type", curie=MIXS.curie('0000794'),
                   model_uri=TEMP.built_environment_door_type, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_door_comp_type = Slot(uri=MIXS['0000795'], name="built_environment_door_comp_type", curie=MIXS.curie('0000795'),
                   model_uri=TEMP.built_environment_door_comp_type, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_door_type_metal = Slot(uri=MIXS['0000796'], name="built_environment_door_type_metal", curie=MIXS.curie('0000796'),
                   model_uri=TEMP.built_environment_door_type_metal, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_door_type_wood = Slot(uri=MIXS['0000797'], name="built_environment_door_type_wood", curie=MIXS.curie('0000797'),
                   model_uri=TEMP.built_environment_door_type_wood, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_drawings = Slot(uri=MIXS['0000798'], name="built_environment_drawings", curie=MIXS.curie('0000798'),
                   model_uri=TEMP.built_environment_drawings, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_elevator = Slot(uri=MIXS['0000799'], name="built_environment_elevator", curie=MIXS.curie('0000799'),
                   model_uri=TEMP.built_environment_elevator, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_escalator = Slot(uri=MIXS['0000800'], name="built_environment_escalator", curie=MIXS.curie('0000800'),
                   model_uri=TEMP.built_environment_escalator, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_fireplace_type = Slot(uri=MIXS['0000802'], name="built_environment_fireplace_type", curie=MIXS.curie('0000802'),
                   model_uri=TEMP.built_environment_fireplace_type, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_floor_cond = Slot(uri=MIXS['0000803'], name="built_environment_floor_cond", curie=MIXS.curie('0000803'),
                   model_uri=TEMP.built_environment_floor_cond, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_floor_finish_mat = Slot(uri=MIXS['0000804'], name="built_environment_floor_finish_mat", curie=MIXS.curie('0000804'),
                   model_uri=TEMP.built_environment_floor_finish_mat, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_floor_water_mold = Slot(uri=MIXS['0000805'], name="built_environment_floor_water_mold", curie=MIXS.curie('0000805'),
                   model_uri=TEMP.built_environment_floor_water_mold, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_floor_struc = Slot(uri=MIXS['0000806'], name="built_environment_floor_struc", curie=MIXS.curie('0000806'),
                   model_uri=TEMP.built_environment_floor_struc, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_furniture = Slot(uri=MIXS['0000807'], name="built_environment_furniture", curie=MIXS.curie('0000807'),
                   model_uri=TEMP.built_environment_furniture, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_gender_restroom = Slot(uri=MIXS['0000808'], name="built_environment_gender_restroom", curie=MIXS.curie('0000808'),
                   model_uri=TEMP.built_environment_gender_restroom, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_handidness = Slot(uri=MIXS['0000809'], name="built_environment_handidness", curie=MIXS.curie('0000809'),
                   model_uri=TEMP.built_environment_handidness, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_heat_deliv_loc = Slot(uri=MIXS['0000810'], name="built_environment_heat_deliv_loc", curie=MIXS.curie('0000810'),
                   model_uri=TEMP.built_environment_heat_deliv_loc, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_heat_sys_deliv_meth = Slot(uri=MIXS['0000812'], name="built_environment_heat_sys_deliv_meth", curie=MIXS.curie('0000812'),
                   model_uri=TEMP.built_environment_heat_sys_deliv_meth, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_int_wall_cond = Slot(uri=MIXS['0000813'], name="built_environment_int_wall_cond", curie=MIXS.curie('0000813'),
                   model_uri=TEMP.built_environment_int_wall_cond, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_last_clean = Slot(uri=MIXS['0000814'], name="built_environment_last_clean", curie=MIXS.curie('0000814'),
                   model_uri=TEMP.built_environment_last_clean, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_mech_struc = Slot(uri=MIXS['0000815'], name="built_environment_mech_struc", curie=MIXS.curie('0000815'),
                   model_uri=TEMP.built_environment_mech_struc, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_occup_document = Slot(uri=MIXS['0000816'], name="built_environment_occup_document", curie=MIXS.curie('0000816'),
                   model_uri=TEMP.built_environment_occup_document, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_ext_wall_orient = Slot(uri=MIXS['0000817'], name="built_environment_ext_wall_orient", curie=MIXS.curie('0000817'),
                   model_uri=TEMP.built_environment_ext_wall_orient, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_ext_window_orient = Slot(uri=MIXS['0000818'], name="built_environment_ext_window_orient", curie=MIXS.curie('0000818'),
                   model_uri=TEMP.built_environment_ext_window_orient, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_pres_animal_insect = Slot(uri=MIXS['0000819'], name="built_environment_pres_animal_insect", curie=MIXS.curie('0000819'),
                   model_uri=TEMP.built_environment_pres_animal_insect, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_quad_pos = Slot(uri=MIXS['0000820'], name="built_environment_quad_pos", curie=MIXS.curie('0000820'),
                   model_uri=TEMP.built_environment_quad_pos, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_rel_samp_loc = Slot(uri=MIXS['0000821'], name="built_environment_rel_samp_loc", curie=MIXS.curie('0000821'),
                   model_uri=TEMP.built_environment_rel_samp_loc, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_condt = Slot(uri=MIXS['0000822'], name="built_environment_room_condt", curie=MIXS.curie('0000822'),
                   model_uri=TEMP.built_environment_room_condt, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_loc = Slot(uri=MIXS['0000823'], name="built_environment_room_loc", curie=MIXS.curie('0000823'),
                   model_uri=TEMP.built_environment_room_loc, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_samp_pos = Slot(uri=MIXS['0000824'], name="built_environment_room_samp_pos", curie=MIXS.curie('0000824'),
                   model_uri=TEMP.built_environment_room_samp_pos, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_type = Slot(uri=MIXS['0000825'], name="built_environment_room_type", curie=MIXS.curie('0000825'),
                   model_uri=TEMP.built_environment_room_type, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_room_connected = Slot(uri=MIXS['0000826'], name="built_environment_room_connected", curie=MIXS.curie('0000826'),
                   model_uri=TEMP.built_environment_room_connected, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_samp_weather = Slot(uri=MIXS['0000827'], name="built_environment_samp_weather", curie=MIXS.curie('0000827'),
                   model_uri=TEMP.built_environment_samp_weather, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_samp_floor = Slot(uri=MIXS['0000828'], name="built_environment_samp_floor", curie=MIXS.curie('0000828'),
                   model_uri=TEMP.built_environment_samp_floor, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_season = Slot(uri=MIXS['0000829'], name="built_environment_season", curie=MIXS.curie('0000829'),
                   model_uri=TEMP.built_environment_season, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_season_use = Slot(uri=MIXS['0000830'], name="built_environment_season_use", curie=MIXS.curie('0000830'),
                   model_uri=TEMP.built_environment_season_use, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_shading_device_cond = Slot(uri=MIXS['0000831'], name="built_environment_shading_device_cond", curie=MIXS.curie('0000831'),
                   model_uri=TEMP.built_environment_shading_device_cond, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_shading_device_loc = Slot(uri=MIXS['0000832'], name="built_environment_shading_device_loc", curie=MIXS.curie('0000832'),
                   model_uri=TEMP.built_environment_shading_device_loc, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_heat_system_id = Slot(uri=MIXS['0000833'], name="built_environment_heat_system_id", curie=MIXS.curie('0000833'),
                   model_uri=TEMP.built_environment_heat_system_id, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_shad_dev_water_mold = Slot(uri=MIXS['0000834'], name="built_environment_shad_dev_water_mold", curie=MIXS.curie('0000834'),
                   model_uri=TEMP.built_environment_shad_dev_water_mold, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_shading_device_type = Slot(uri=MIXS['0000835'], name="built_environment_shading_device_type", curie=MIXS.curie('0000835'),
                   model_uri=TEMP.built_environment_shading_device_type, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_specific = Slot(uri=MIXS['0000836'], name="built_environment_specific", curie=MIXS.curie('0000836'),
                   model_uri=TEMP.built_environment_specific, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_train_line = Slot(uri=MIXS['0000837'], name="built_environment_train_line", curie=MIXS.curie('0000837'),
                   model_uri=TEMP.built_environment_train_line, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_train_stat_loc = Slot(uri=MIXS['0000838'], name="built_environment_train_stat_loc", curie=MIXS.curie('0000838'),
                   model_uri=TEMP.built_environment_train_stat_loc, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_train_stop_loc = Slot(uri=MIXS['0000839'], name="built_environment_train_stop_loc", curie=MIXS.curie('0000839'),
                   model_uri=TEMP.built_environment_train_stop_loc, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_vis_media = Slot(uri=MIXS['0000840'], name="built_environment_vis_media", curie=MIXS.curie('0000840'),
                   model_uri=TEMP.built_environment_vis_media, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_wall_const_type = Slot(uri=MIXS['0000841'], name="built_environment_wall_const_type", curie=MIXS.curie('0000841'),
                   model_uri=TEMP.built_environment_wall_const_type, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_wall_finish_mat = Slot(uri=MIXS['0000842'], name="built_environment_wall_finish_mat", curie=MIXS.curie('0000842'),
                   model_uri=TEMP.built_environment_wall_finish_mat, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_wall_loc = Slot(uri=MIXS['0000843'], name="built_environment_wall_loc", curie=MIXS.curie('0000843'),
                   model_uri=TEMP.built_environment_wall_loc, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_wall_water_mold = Slot(uri=MIXS['0000844'], name="built_environment_wall_water_mold", curie=MIXS.curie('0000844'),
                   model_uri=TEMP.built_environment_wall_water_mold, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_wall_surf_treatment = Slot(uri=MIXS['0000845'], name="built_environment_wall_surf_treatment", curie=MIXS.curie('0000845'),
                   model_uri=TEMP.built_environment_wall_surf_treatment, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_wall_texture = Slot(uri=MIXS['0000846'], name="built_environment_wall_texture", curie=MIXS.curie('0000846'),
                   model_uri=TEMP.built_environment_wall_texture, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_water_feat_type = Slot(uri=MIXS['0000847'], name="built_environment_water_feat_type", curie=MIXS.curie('0000847'),
                   model_uri=TEMP.built_environment_water_feat_type, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_weekday = Slot(uri=MIXS['0000848'], name="built_environment_weekday", curie=MIXS.curie('0000848'),
                   model_uri=TEMP.built_environment_weekday, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_window_cond = Slot(uri=MIXS['0000849'], name="built_environment_window_cond", curie=MIXS.curie('0000849'),
                   model_uri=TEMP.built_environment_window_cond, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_window_cover = Slot(uri=MIXS['0000850'], name="built_environment_window_cover", curie=MIXS.curie('0000850'),
                   model_uri=TEMP.built_environment_window_cover, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_window_horiz_pos = Slot(uri=MIXS['0000851'], name="built_environment_window_horiz_pos", curie=MIXS.curie('0000851'),
                   model_uri=TEMP.built_environment_window_horiz_pos, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_window_loc = Slot(uri=MIXS['0000852'], name="built_environment_window_loc", curie=MIXS.curie('0000852'),
                   model_uri=TEMP.built_environment_window_loc, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_window_mat = Slot(uri=MIXS['0000853'], name="built_environment_window_mat", curie=MIXS.curie('0000853'),
                   model_uri=TEMP.built_environment_window_mat, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_window_water_mold = Slot(uri=MIXS['0000854'], name="built_environment_window_water_mold", curie=MIXS.curie('0000854'),
                   model_uri=TEMP.built_environment_window_water_mold, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_window_status = Slot(uri=MIXS['0000855'], name="built_environment_window_status", curie=MIXS.curie('0000855'),
                   model_uri=TEMP.built_environment_window_status, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_window_type = Slot(uri=MIXS['0000856'], name="built_environment_window_type", curie=MIXS.curie('0000856'),
                   model_uri=TEMP.built_environment_window_type, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_window_vert_pos = Slot(uri=MIXS['0000857'], name="built_environment_window_vert_pos", curie=MIXS.curie('0000857'),
                   model_uri=TEMP.built_environment_window_vert_pos, domain=BuiltEnvironment, range=Optional[str])

slots.built_environment_samp_name = Slot(uri=MIXS['0001107'], name="built_environment_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.built_environment_samp_name, domain=BuiltEnvironment, range=Optional[str])

slots.hydrocarbon_resources_cores_project_name = Slot(uri=MIXS['0000092'], name="hydrocarbon_resources_cores_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.hydrocarbon_resources_cores_project_name, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_elev = Slot(uri=MIXS['0000093'], name="hydrocarbon_resources_cores_elev", curie=MIXS.curie('0000093'),
                   model_uri=TEMP.hydrocarbon_resources_cores_elev, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_org_count_qpcr_info = Slot(uri=MIXS['0000099'], name="hydrocarbon_resources_cores_org_count_qpcr_info", curie=MIXS.curie('0000099'),
                   model_uri=TEMP.hydrocarbon_resources_cores_org_count_qpcr_info, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_tot_nitro = Slot(uri=MIXS['0000102'], name="hydrocarbon_resources_cores_tot_nitro", curie=MIXS.curie('0000102'),
                   model_uri=TEMP.hydrocarbon_resources_cores_tot_nitro, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_organism_count = Slot(uri=MIXS['0000103'], name="hydrocarbon_resources_cores_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.hydrocarbon_resources_cores_organism_count, domain=HydrocarbonResourcesCores, range=Optional[Union[str, List[str]]])

slots.hydrocarbon_resources_cores_tot_iron = Slot(uri=MIXS['0000105'], name="hydrocarbon_resources_cores_tot_iron", curie=MIXS.curie('0000105'),
                   model_uri=TEMP.hydrocarbon_resources_cores_tot_iron, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_diss_inorg_phosp = Slot(uri=MIXS['0000106'], name="hydrocarbon_resources_cores_diss_inorg_phosp", curie=MIXS.curie('0000106'),
                   model_uri=TEMP.hydrocarbon_resources_cores_diss_inorg_phosp, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_samp_store_temp = Slot(uri=MIXS['0000110'], name="hydrocarbon_resources_cores_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.hydrocarbon_resources_cores_samp_store_temp, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="hydrocarbon_resources_cores_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.hydrocarbon_resources_cores_samp_vol_we_dna_ext, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_temp = Slot(uri=MIXS['0000113'], name="hydrocarbon_resources_cores_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.hydrocarbon_resources_cores_temp, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_samp_store_dur = Slot(uri=MIXS['0000116'], name="hydrocarbon_resources_cores_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.hydrocarbon_resources_cores_samp_store_dur, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_tot_phosp = Slot(uri=MIXS['0000117'], name="hydrocarbon_resources_cores_tot_phosp", curie=MIXS.curie('0000117'),
                   model_uri=TEMP.hydrocarbon_resources_cores_tot_phosp, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_tan = Slot(uri=MIXS['0000120'], name="hydrocarbon_resources_cores_tan", curie=MIXS.curie('0000120'),
                   model_uri=TEMP.hydrocarbon_resources_cores_tan, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_viscosity = Slot(uri=MIXS['0000126'], name="hydrocarbon_resources_cores_viscosity", curie=MIXS.curie('0000126'),
                   model_uri=TEMP.hydrocarbon_resources_cores_viscosity, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_pour_point = Slot(uri=MIXS['0000127'], name="hydrocarbon_resources_cores_pour_point", curie=MIXS.curie('0000127'),
                   model_uri=TEMP.hydrocarbon_resources_cores_pour_point, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_saturates_pc = Slot(uri=MIXS['0000131'], name="hydrocarbon_resources_cores_saturates_pc", curie=MIXS.curie('0000131'),
                   model_uri=TEMP.hydrocarbon_resources_cores_saturates_pc, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_aromatics_pc = Slot(uri=MIXS['0000133'], name="hydrocarbon_resources_cores_aromatics_pc", curie=MIXS.curie('0000133'),
                   model_uri=TEMP.hydrocarbon_resources_cores_aromatics_pc, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_resins_pc = Slot(uri=MIXS['0000134'], name="hydrocarbon_resources_cores_resins_pc", curie=MIXS.curie('0000134'),
                   model_uri=TEMP.hydrocarbon_resources_cores_resins_pc, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_asphaltenes_pc = Slot(uri=MIXS['0000135'], name="hydrocarbon_resources_cores_asphaltenes_pc", curie=MIXS.curie('0000135'),
                   model_uri=TEMP.hydrocarbon_resources_cores_asphaltenes_pc, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_diss_iron = Slot(uri=MIXS['0000139'], name="hydrocarbon_resources_cores_diss_iron", curie=MIXS.curie('0000139'),
                   model_uri=TEMP.hydrocarbon_resources_cores_diss_iron, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_suspend_solids = Slot(uri=MIXS['0000150'], name="hydrocarbon_resources_cores_suspend_solids", curie=MIXS.curie('0000150'),
                   model_uri=TEMP.hydrocarbon_resources_cores_suspend_solids, domain=HydrocarbonResourcesCores, range=Optional[Union[str, List[str]]])

slots.hydrocarbon_resources_cores_vfa = Slot(uri=MIXS['0000152'], name="hydrocarbon_resources_cores_vfa", curie=MIXS.curie('0000152'),
                   model_uri=TEMP.hydrocarbon_resources_cores_vfa, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_benzene = Slot(uri=MIXS['0000153'], name="hydrocarbon_resources_cores_benzene", curie=MIXS.curie('0000153'),
                   model_uri=TEMP.hydrocarbon_resources_cores_benzene, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_toluene = Slot(uri=MIXS['0000154'], name="hydrocarbon_resources_cores_toluene", curie=MIXS.curie('0000154'),
                   model_uri=TEMP.hydrocarbon_resources_cores_toluene, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_ethylbenzene = Slot(uri=MIXS['0000155'], name="hydrocarbon_resources_cores_ethylbenzene", curie=MIXS.curie('0000155'),
                   model_uri=TEMP.hydrocarbon_resources_cores_ethylbenzene, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_xylene = Slot(uri=MIXS['0000156'], name="hydrocarbon_resources_cores_xylene", curie=MIXS.curie('0000156'),
                   model_uri=TEMP.hydrocarbon_resources_cores_xylene, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_api = Slot(uri=MIXS['0000157'], name="hydrocarbon_resources_cores_api", curie=MIXS.curie('0000157'),
                   model_uri=TEMP.hydrocarbon_resources_cores_api, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_salinity = Slot(uri=MIXS['0000183'], name="hydrocarbon_resources_cores_salinity", curie=MIXS.curie('0000183'),
                   model_uri=TEMP.hydrocarbon_resources_cores_salinity, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_porosity = Slot(uri=MIXS['0000211'], name="hydrocarbon_resources_cores_porosity", curie=MIXS.curie('0000211'),
                   model_uri=TEMP.hydrocarbon_resources_cores_porosity, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_basin = Slot(uri=MIXS['0000290'], name="hydrocarbon_resources_cores_basin", curie=MIXS.curie('0000290'),
                   model_uri=TEMP.hydrocarbon_resources_cores_basin, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_field = Slot(uri=MIXS['0000291'], name="hydrocarbon_resources_cores_field", curie=MIXS.curie('0000291'),
                   model_uri=TEMP.hydrocarbon_resources_cores_field, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_samp_well_name = Slot(uri=MIXS['0000296'], name="hydrocarbon_resources_cores_samp_well_name", curie=MIXS.curie('0000296'),
                   model_uri=TEMP.hydrocarbon_resources_cores_samp_well_name, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_win = Slot(uri=MIXS['0000297'], name="hydrocarbon_resources_cores_win", curie=MIXS.curie('0000297'),
                   model_uri=TEMP.hydrocarbon_resources_cores_win, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_alkalinity_method = Slot(uri=MIXS['0000298'], name="hydrocarbon_resources_cores_alkalinity_method", curie=MIXS.curie('0000298'),
                   model_uri=TEMP.hydrocarbon_resources_cores_alkalinity_method, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_additional_info = Slot(uri=MIXS['0000300'], name="hydrocarbon_resources_cores_additional_info", curie=MIXS.curie('0000300'),
                   model_uri=TEMP.hydrocarbon_resources_cores_additional_info, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_reservoir = Slot(uri=MIXS['0000303'], name="hydrocarbon_resources_cores_reservoir", curie=MIXS.curie('0000303'),
                   model_uri=TEMP.hydrocarbon_resources_cores_reservoir, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_hcr_temp = Slot(uri=MIXS['0000393'], name="hydrocarbon_resources_cores_hcr_temp", curie=MIXS.curie('0000393'),
                   model_uri=TEMP.hydrocarbon_resources_cores_hcr_temp, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_tvdss_of_hcr_temp = Slot(uri=MIXS['0000394'], name="hydrocarbon_resources_cores_tvdss_of_hcr_temp", curie=MIXS.curie('0000394'),
                   model_uri=TEMP.hydrocarbon_resources_cores_tvdss_of_hcr_temp, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_hcr_pressure = Slot(uri=MIXS['0000395'], name="hydrocarbon_resources_cores_hcr_pressure", curie=MIXS.curie('0000395'),
                   model_uri=TEMP.hydrocarbon_resources_cores_hcr_pressure, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_tvdss_of_hcr_press = Slot(uri=MIXS['0000397'], name="hydrocarbon_resources_cores_tvdss_of_hcr_press", curie=MIXS.curie('0000397'),
                   model_uri=TEMP.hydrocarbon_resources_cores_tvdss_of_hcr_press, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_permeability = Slot(uri=MIXS['0000404'], name="hydrocarbon_resources_cores_permeability", curie=MIXS.curie('0000404'),
                   model_uri=TEMP.hydrocarbon_resources_cores_permeability, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_owc_tvdss = Slot(uri=MIXS['0000405'], name="hydrocarbon_resources_cores_owc_tvdss", curie=MIXS.curie('0000405'),
                   model_uri=TEMP.hydrocarbon_resources_cores_owc_tvdss, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_hcr_fw_salinity = Slot(uri=MIXS['0000406'], name="hydrocarbon_resources_cores_hcr_fw_salinity", curie=MIXS.curie('0000406'),
                   model_uri=TEMP.hydrocarbon_resources_cores_hcr_fw_salinity, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_sulfate_fw = Slot(uri=MIXS['0000407'], name="hydrocarbon_resources_cores_sulfate_fw", curie=MIXS.curie('0000407'),
                   model_uri=TEMP.hydrocarbon_resources_cores_sulfate_fw, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_vfa_fw = Slot(uri=MIXS['0000408'], name="hydrocarbon_resources_cores_vfa_fw", curie=MIXS.curie('0000408'),
                   model_uri=TEMP.hydrocarbon_resources_cores_vfa_fw, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_samp_tvdss = Slot(uri=MIXS['0000409'], name="hydrocarbon_resources_cores_samp_tvdss", curie=MIXS.curie('0000409'),
                   model_uri=TEMP.hydrocarbon_resources_cores_samp_tvdss, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_samp_transport_cond = Slot(uri=MIXS['0000410'], name="hydrocarbon_resources_cores_samp_transport_cond", curie=MIXS.curie('0000410'),
                   model_uri=TEMP.hydrocarbon_resources_cores_samp_transport_cond, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_pressure = Slot(uri=MIXS['0000412'], name="hydrocarbon_resources_cores_pressure", curie=MIXS.curie('0000412'),
                   model_uri=TEMP.hydrocarbon_resources_cores_pressure, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_samp_md = Slot(uri=MIXS['0000413'], name="hydrocarbon_resources_cores_samp_md", curie=MIXS.curie('0000413'),
                   model_uri=TEMP.hydrocarbon_resources_cores_samp_md, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_tot_sulfur = Slot(uri=MIXS['0000419'], name="hydrocarbon_resources_cores_tot_sulfur", curie=MIXS.curie('0000419'),
                   model_uri=TEMP.hydrocarbon_resources_cores_tot_sulfur, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_alkalinity = Slot(uri=MIXS['0000421'], name="hydrocarbon_resources_cores_alkalinity", curie=MIXS.curie('0000421'),
                   model_uri=TEMP.hydrocarbon_resources_cores_alkalinity, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_sulfate = Slot(uri=MIXS['0000423'], name="hydrocarbon_resources_cores_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=TEMP.hydrocarbon_resources_cores_sulfate, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_sulfide = Slot(uri=MIXS['0000424'], name="hydrocarbon_resources_cores_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=TEMP.hydrocarbon_resources_cores_sulfide, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_nitrate = Slot(uri=MIXS['0000425'], name="hydrocarbon_resources_cores_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=TEMP.hydrocarbon_resources_cores_nitrate, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_nitrite = Slot(uri=MIXS['0000426'], name="hydrocarbon_resources_cores_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=TEMP.hydrocarbon_resources_cores_nitrite, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_ammonium = Slot(uri=MIXS['0000427'], name="hydrocarbon_resources_cores_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=TEMP.hydrocarbon_resources_cores_ammonium, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_sodium = Slot(uri=MIXS['0000428'], name="hydrocarbon_resources_cores_sodium", curie=MIXS.curie('0000428'),
                   model_uri=TEMP.hydrocarbon_resources_cores_sodium, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_chloride = Slot(uri=MIXS['0000429'], name="hydrocarbon_resources_cores_chloride", curie=MIXS.curie('0000429'),
                   model_uri=TEMP.hydrocarbon_resources_cores_chloride, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_potassium = Slot(uri=MIXS['0000430'], name="hydrocarbon_resources_cores_potassium", curie=MIXS.curie('0000430'),
                   model_uri=TEMP.hydrocarbon_resources_cores_potassium, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_magnesium = Slot(uri=MIXS['0000431'], name="hydrocarbon_resources_cores_magnesium", curie=MIXS.curie('0000431'),
                   model_uri=TEMP.hydrocarbon_resources_cores_magnesium, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_calcium = Slot(uri=MIXS['0000432'], name="hydrocarbon_resources_cores_calcium", curie=MIXS.curie('0000432'),
                   model_uri=TEMP.hydrocarbon_resources_cores_calcium, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_diss_org_carb = Slot(uri=MIXS['0000433'], name="hydrocarbon_resources_cores_diss_org_carb", curie=MIXS.curie('0000433'),
                   model_uri=TEMP.hydrocarbon_resources_cores_diss_org_carb, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_diss_inorg_carb = Slot(uri=MIXS['0000434'], name="hydrocarbon_resources_cores_diss_inorg_carb", curie=MIXS.curie('0000434'),
                   model_uri=TEMP.hydrocarbon_resources_cores_diss_inorg_carb, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_density = Slot(uri=MIXS['0000435'], name="hydrocarbon_resources_cores_density", curie=MIXS.curie('0000435'),
                   model_uri=TEMP.hydrocarbon_resources_cores_density, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_diss_carb_dioxide = Slot(uri=MIXS['0000436'], name="hydrocarbon_resources_cores_diss_carb_dioxide", curie=MIXS.curie('0000436'),
                   model_uri=TEMP.hydrocarbon_resources_cores_diss_carb_dioxide, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_diss_oxygen_fluid = Slot(uri=MIXS['0000438'], name="hydrocarbon_resources_cores_diss_oxygen_fluid", curie=MIXS.curie('0000438'),
                   model_uri=TEMP.hydrocarbon_resources_cores_diss_oxygen_fluid, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_misc_param = Slot(uri=MIXS['0000752'], name="hydrocarbon_resources_cores_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.hydrocarbon_resources_cores_misc_param, domain=HydrocarbonResourcesCores, range=Optional[Union[str, List[str]]])

slots.hydrocarbon_resources_cores_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="hydrocarbon_resources_cores_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.hydrocarbon_resources_cores_oxy_stat_samp, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_samp_store_loc = Slot(uri=MIXS['0000755'], name="hydrocarbon_resources_cores_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.hydrocarbon_resources_cores_samp_store_loc, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_hcr = Slot(uri=MIXS['0000988'], name="hydrocarbon_resources_cores_hcr", curie=MIXS.curie('0000988'),
                   model_uri=TEMP.hydrocarbon_resources_cores_hcr, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_hc_produced = Slot(uri=MIXS['0000989'], name="hydrocarbon_resources_cores_hc_produced", curie=MIXS.curie('0000989'),
                   model_uri=TEMP.hydrocarbon_resources_cores_hc_produced, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_lithology = Slot(uri=MIXS['0000990'], name="hydrocarbon_resources_cores_lithology", curie=MIXS.curie('0000990'),
                   model_uri=TEMP.hydrocarbon_resources_cores_lithology, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_depos_env = Slot(uri=MIXS['0000992'], name="hydrocarbon_resources_cores_depos_env", curie=MIXS.curie('0000992'),
                   model_uri=TEMP.hydrocarbon_resources_cores_depos_env, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_hcr_geol_age = Slot(uri=MIXS['0000993'], name="hydrocarbon_resources_cores_hcr_geol_age", curie=MIXS.curie('0000993'),
                   model_uri=TEMP.hydrocarbon_resources_cores_hcr_geol_age, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_sr_kerog_type = Slot(uri=MIXS['0000994'], name="hydrocarbon_resources_cores_sr_kerog_type", curie=MIXS.curie('0000994'),
                   model_uri=TEMP.hydrocarbon_resources_cores_sr_kerog_type, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_sr_lithology = Slot(uri=MIXS['0000995'], name="hydrocarbon_resources_cores_sr_lithology", curie=MIXS.curie('0000995'),
                   model_uri=TEMP.hydrocarbon_resources_cores_sr_lithology, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_sr_dep_env = Slot(uri=MIXS['0000996'], name="hydrocarbon_resources_cores_sr_dep_env", curie=MIXS.curie('0000996'),
                   model_uri=TEMP.hydrocarbon_resources_cores_sr_dep_env, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_sr_geol_age = Slot(uri=MIXS['0000997'], name="hydrocarbon_resources_cores_sr_geol_age", curie=MIXS.curie('0000997'),
                   model_uri=TEMP.hydrocarbon_resources_cores_sr_geol_age, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_samp_type = Slot(uri=MIXS['0000998'], name="hydrocarbon_resources_cores_samp_type", curie=MIXS.curie('0000998'),
                   model_uri=TEMP.hydrocarbon_resources_cores_samp_type, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_samp_subtype = Slot(uri=MIXS['0000999'], name="hydrocarbon_resources_cores_samp_subtype", curie=MIXS.curie('0000999'),
                   model_uri=TEMP.hydrocarbon_resources_cores_samp_subtype, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_ph = Slot(uri=MIXS['0001001'], name="hydrocarbon_resources_cores_ph", curie=MIXS.curie('0001001'),
                   model_uri=TEMP.hydrocarbon_resources_cores_ph, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_cores_samp_name = Slot(uri=MIXS['0001107'], name="hydrocarbon_resources_cores_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.hydrocarbon_resources_cores_samp_name, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_project_name = Slot(uri=MIXS['0000092'], name="hydrocarbon_resources_fluids_swabs_project_name", curie=MIXS.curie('0000092'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_project_name, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_org_count_qpcr_info = Slot(uri=MIXS['0000099'], name="hydrocarbon_resources_fluids_swabs_org_count_qpcr_info", curie=MIXS.curie('0000099'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_org_count_qpcr_info, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_tot_nitro = Slot(uri=MIXS['0000102'], name="hydrocarbon_resources_fluids_swabs_tot_nitro", curie=MIXS.curie('0000102'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_tot_nitro, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_organism_count = Slot(uri=MIXS['0000103'], name="hydrocarbon_resources_fluids_swabs_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_organism_count, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[Union[str, List[str]]])

slots.hydrocarbon_resources_fluids_swabs_tot_iron = Slot(uri=MIXS['0000105'], name="hydrocarbon_resources_fluids_swabs_tot_iron", curie=MIXS.curie('0000105'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_tot_iron, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_diss_inorg_phosp = Slot(uri=MIXS['0000106'], name="hydrocarbon_resources_fluids_swabs_diss_inorg_phosp", curie=MIXS.curie('0000106'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_diss_inorg_phosp, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_samp_store_temp = Slot(uri=MIXS['0000110'], name="hydrocarbon_resources_fluids_swabs_samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_samp_store_temp, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="hydrocarbon_resources_fluids_swabs_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_samp_vol_we_dna_ext, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_temp = Slot(uri=MIXS['0000113'], name="hydrocarbon_resources_fluids_swabs_temp", curie=MIXS.curie('0000113'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_temp, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_samp_store_dur = Slot(uri=MIXS['0000116'], name="hydrocarbon_resources_fluids_swabs_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_samp_store_dur, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_tot_phosp = Slot(uri=MIXS['0000117'], name="hydrocarbon_resources_fluids_swabs_tot_phosp", curie=MIXS.curie('0000117'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_tot_phosp, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_tan = Slot(uri=MIXS['0000120'], name="hydrocarbon_resources_fluids_swabs_tan", curie=MIXS.curie('0000120'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_tan, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_viscosity = Slot(uri=MIXS['0000126'], name="hydrocarbon_resources_fluids_swabs_viscosity", curie=MIXS.curie('0000126'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_viscosity, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_pour_point = Slot(uri=MIXS['0000127'], name="hydrocarbon_resources_fluids_swabs_pour_point", curie=MIXS.curie('0000127'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_pour_point, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_saturates_pc = Slot(uri=MIXS['0000131'], name="hydrocarbon_resources_fluids_swabs_saturates_pc", curie=MIXS.curie('0000131'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_saturates_pc, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_aromatics_pc = Slot(uri=MIXS['0000133'], name="hydrocarbon_resources_fluids_swabs_aromatics_pc", curie=MIXS.curie('0000133'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_aromatics_pc, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_resins_pc = Slot(uri=MIXS['0000134'], name="hydrocarbon_resources_fluids_swabs_resins_pc", curie=MIXS.curie('0000134'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_resins_pc, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_asphaltenes_pc = Slot(uri=MIXS['0000135'], name="hydrocarbon_resources_fluids_swabs_asphaltenes_pc", curie=MIXS.curie('0000135'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_asphaltenes_pc, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_samp_loc_corr_rate = Slot(uri=MIXS['0000136'], name="hydrocarbon_resources_fluids_swabs_samp_loc_corr_rate", curie=MIXS.curie('0000136'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_samp_loc_corr_rate, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_diss_iron = Slot(uri=MIXS['0000139'], name="hydrocarbon_resources_fluids_swabs_diss_iron", curie=MIXS.curie('0000139'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_diss_iron, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_suspend_solids = Slot(uri=MIXS['0000150'], name="hydrocarbon_resources_fluids_swabs_suspend_solids", curie=MIXS.curie('0000150'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_suspend_solids, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[Union[str, List[str]]])

slots.hydrocarbon_resources_fluids_swabs_vfa = Slot(uri=MIXS['0000152'], name="hydrocarbon_resources_fluids_swabs_vfa", curie=MIXS.curie('0000152'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_vfa, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_benzene = Slot(uri=MIXS['0000153'], name="hydrocarbon_resources_fluids_swabs_benzene", curie=MIXS.curie('0000153'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_benzene, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_toluene = Slot(uri=MIXS['0000154'], name="hydrocarbon_resources_fluids_swabs_toluene", curie=MIXS.curie('0000154'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_toluene, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_ethylbenzene = Slot(uri=MIXS['0000155'], name="hydrocarbon_resources_fluids_swabs_ethylbenzene", curie=MIXS.curie('0000155'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_ethylbenzene, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_xylene = Slot(uri=MIXS['0000156'], name="hydrocarbon_resources_fluids_swabs_xylene", curie=MIXS.curie('0000156'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_xylene, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_api = Slot(uri=MIXS['0000157'], name="hydrocarbon_resources_fluids_swabs_api", curie=MIXS.curie('0000157'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_api, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_salinity = Slot(uri=MIXS['0000183'], name="hydrocarbon_resources_fluids_swabs_salinity", curie=MIXS.curie('0000183'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_salinity, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_basin = Slot(uri=MIXS['0000290'], name="hydrocarbon_resources_fluids_swabs_basin", curie=MIXS.curie('0000290'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_basin, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_field = Slot(uri=MIXS['0000291'], name="hydrocarbon_resources_fluids_swabs_field", curie=MIXS.curie('0000291'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_field, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_samp_well_name = Slot(uri=MIXS['0000296'], name="hydrocarbon_resources_fluids_swabs_samp_well_name", curie=MIXS.curie('0000296'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_samp_well_name, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_win = Slot(uri=MIXS['0000297'], name="hydrocarbon_resources_fluids_swabs_win", curie=MIXS.curie('0000297'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_win, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_alkalinity_method = Slot(uri=MIXS['0000298'], name="hydrocarbon_resources_fluids_swabs_alkalinity_method", curie=MIXS.curie('0000298'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_alkalinity_method, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_additional_info = Slot(uri=MIXS['0000300'], name="hydrocarbon_resources_fluids_swabs_additional_info", curie=MIXS.curie('0000300'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_additional_info, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_reservoir = Slot(uri=MIXS['0000303'], name="hydrocarbon_resources_fluids_swabs_reservoir", curie=MIXS.curie('0000303'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_reservoir, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_hcr_temp = Slot(uri=MIXS['0000393'], name="hydrocarbon_resources_fluids_swabs_hcr_temp", curie=MIXS.curie('0000393'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_hcr_temp, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_tvdss_of_hcr_temp = Slot(uri=MIXS['0000394'], name="hydrocarbon_resources_fluids_swabs_tvdss_of_hcr_temp", curie=MIXS.curie('0000394'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_tvdss_of_hcr_temp, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_hcr_pressure = Slot(uri=MIXS['0000395'], name="hydrocarbon_resources_fluids_swabs_hcr_pressure", curie=MIXS.curie('0000395'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_hcr_pressure, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_tvdss_of_hcr_press = Slot(uri=MIXS['0000397'], name="hydrocarbon_resources_fluids_swabs_tvdss_of_hcr_press", curie=MIXS.curie('0000397'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_tvdss_of_hcr_press, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_hcr_fw_salinity = Slot(uri=MIXS['0000406'], name="hydrocarbon_resources_fluids_swabs_hcr_fw_salinity", curie=MIXS.curie('0000406'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_hcr_fw_salinity, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_sulfate_fw = Slot(uri=MIXS['0000407'], name="hydrocarbon_resources_fluids_swabs_sulfate_fw", curie=MIXS.curie('0000407'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_sulfate_fw, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_vfa_fw = Slot(uri=MIXS['0000408'], name="hydrocarbon_resources_fluids_swabs_vfa_fw", curie=MIXS.curie('0000408'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_vfa_fw, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_samp_transport_cond = Slot(uri=MIXS['0000410'], name="hydrocarbon_resources_fluids_swabs_samp_transport_cond", curie=MIXS.curie('0000410'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_samp_transport_cond, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_pressure = Slot(uri=MIXS['0000412'], name="hydrocarbon_resources_fluids_swabs_pressure", curie=MIXS.curie('0000412'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_pressure, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_tot_sulfur = Slot(uri=MIXS['0000419'], name="hydrocarbon_resources_fluids_swabs_tot_sulfur", curie=MIXS.curie('0000419'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_tot_sulfur, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_alkalinity = Slot(uri=MIXS['0000421'], name="hydrocarbon_resources_fluids_swabs_alkalinity", curie=MIXS.curie('0000421'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_alkalinity, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_sulfate = Slot(uri=MIXS['0000423'], name="hydrocarbon_resources_fluids_swabs_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_sulfate, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_sulfide = Slot(uri=MIXS['0000424'], name="hydrocarbon_resources_fluids_swabs_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_sulfide, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_nitrate = Slot(uri=MIXS['0000425'], name="hydrocarbon_resources_fluids_swabs_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_nitrate, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_nitrite = Slot(uri=MIXS['0000426'], name="hydrocarbon_resources_fluids_swabs_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_nitrite, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_ammonium = Slot(uri=MIXS['0000427'], name="hydrocarbon_resources_fluids_swabs_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_ammonium, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_sodium = Slot(uri=MIXS['0000428'], name="hydrocarbon_resources_fluids_swabs_sodium", curie=MIXS.curie('0000428'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_sodium, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_chloride = Slot(uri=MIXS['0000429'], name="hydrocarbon_resources_fluids_swabs_chloride", curie=MIXS.curie('0000429'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_chloride, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_potassium = Slot(uri=MIXS['0000430'], name="hydrocarbon_resources_fluids_swabs_potassium", curie=MIXS.curie('0000430'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_potassium, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_magnesium = Slot(uri=MIXS['0000431'], name="hydrocarbon_resources_fluids_swabs_magnesium", curie=MIXS.curie('0000431'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_magnesium, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_calcium = Slot(uri=MIXS['0000432'], name="hydrocarbon_resources_fluids_swabs_calcium", curie=MIXS.curie('0000432'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_calcium, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_diss_org_carb = Slot(uri=MIXS['0000433'], name="hydrocarbon_resources_fluids_swabs_diss_org_carb", curie=MIXS.curie('0000433'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_diss_org_carb, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_diss_inorg_carb = Slot(uri=MIXS['0000434'], name="hydrocarbon_resources_fluids_swabs_diss_inorg_carb", curie=MIXS.curie('0000434'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_diss_inorg_carb, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_density = Slot(uri=MIXS['0000435'], name="hydrocarbon_resources_fluids_swabs_density", curie=MIXS.curie('0000435'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_density, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_diss_carb_dioxide = Slot(uri=MIXS['0000436'], name="hydrocarbon_resources_fluids_swabs_diss_carb_dioxide", curie=MIXS.curie('0000436'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_diss_carb_dioxide, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_diss_oxygen_fluid = Slot(uri=MIXS['0000438'], name="hydrocarbon_resources_fluids_swabs_diss_oxygen_fluid", curie=MIXS.curie('0000438'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_diss_oxygen_fluid, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_prod_rate = Slot(uri=MIXS['0000452'], name="hydrocarbon_resources_fluids_swabs_prod_rate", curie=MIXS.curie('0000452'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_prod_rate, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_water_prod_rate = Slot(uri=MIXS['0000453'], name="hydrocarbon_resources_fluids_swabs_water_prod_rate", curie=MIXS.curie('0000453'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_water_prod_rate, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_water_cut = Slot(uri=MIXS['0000454'], name="hydrocarbon_resources_fluids_swabs_water_cut", curie=MIXS.curie('0000454'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_water_cut, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_iwf = Slot(uri=MIXS['0000455'], name="hydrocarbon_resources_fluids_swabs_iwf", curie=MIXS.curie('0000455'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_iwf, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_biocide_admin_method = Slot(uri=MIXS['0000456'], name="hydrocarbon_resources_fluids_swabs_biocide_admin_method", curie=MIXS.curie('0000456'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_biocide_admin_method, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_chem_treat_method = Slot(uri=MIXS['0000457'], name="hydrocarbon_resources_fluids_swabs_chem_treat_method", curie=MIXS.curie('0000457'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_chem_treat_method, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_samp_preserv = Slot(uri=MIXS['0000463'], name="hydrocarbon_resources_fluids_swabs_samp_preserv", curie=MIXS.curie('0000463'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_samp_preserv, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_misc_param = Slot(uri=MIXS['0000752'], name="hydrocarbon_resources_fluids_swabs_misc_param", curie=MIXS.curie('0000752'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_misc_param, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[Union[str, List[str]]])

slots.hydrocarbon_resources_fluids_swabs_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="hydrocarbon_resources_fluids_swabs_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_oxy_stat_samp, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_samp_store_loc = Slot(uri=MIXS['0000755'], name="hydrocarbon_resources_fluids_swabs_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_samp_store_loc, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_hcr = Slot(uri=MIXS['0000988'], name="hydrocarbon_resources_fluids_swabs_hcr", curie=MIXS.curie('0000988'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_hcr, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_hc_produced = Slot(uri=MIXS['0000989'], name="hydrocarbon_resources_fluids_swabs_hc_produced", curie=MIXS.curie('0000989'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_hc_produced, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_lithology = Slot(uri=MIXS['0000990'], name="hydrocarbon_resources_fluids_swabs_lithology", curie=MIXS.curie('0000990'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_lithology, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_depos_env = Slot(uri=MIXS['0000992'], name="hydrocarbon_resources_fluids_swabs_depos_env", curie=MIXS.curie('0000992'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_depos_env, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_hcr_geol_age = Slot(uri=MIXS['0000993'], name="hydrocarbon_resources_fluids_swabs_hcr_geol_age", curie=MIXS.curie('0000993'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_hcr_geol_age, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_samp_type = Slot(uri=MIXS['0000998'], name="hydrocarbon_resources_fluids_swabs_samp_type", curie=MIXS.curie('0000998'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_samp_type, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_samp_subtype = Slot(uri=MIXS['0000999'], name="hydrocarbon_resources_fluids_swabs_samp_subtype", curie=MIXS.curie('0000999'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_samp_subtype, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_ph = Slot(uri=MIXS['0001001'], name="hydrocarbon_resources_fluids_swabs_ph", curie=MIXS.curie('0001001'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_ph, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_prod_start_date = Slot(uri=MIXS['0001008'], name="hydrocarbon_resources_fluids_swabs_prod_start_date", curie=MIXS.curie('0001008'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_prod_start_date, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_add_recov_method = Slot(uri=MIXS['0001009'], name="hydrocarbon_resources_fluids_swabs_add_recov_method", curie=MIXS.curie('0001009'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_add_recov_method, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_iw_bt_date_well = Slot(uri=MIXS['0001010'], name="hydrocarbon_resources_fluids_swabs_iw_bt_date_well", curie=MIXS.curie('0001010'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_iw_bt_date_well, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_biocide = Slot(uri=MIXS['0001011'], name="hydrocarbon_resources_fluids_swabs_biocide", curie=MIXS.curie('0001011'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_biocide, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_chem_treatment = Slot(uri=MIXS['0001012'], name="hydrocarbon_resources_fluids_swabs_chem_treatment", curie=MIXS.curie('0001012'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_chem_treatment, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_samp_collect_point = Slot(uri=MIXS['0001015'], name="hydrocarbon_resources_fluids_swabs_samp_collect_point", curie=MIXS.curie('0001015'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_samp_collect_point, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.hydrocarbon_resources_fluids_swabs_samp_name = Slot(uri=MIXS['0001107'], name="hydrocarbon_resources_fluids_swabs_samp_name", curie=MIXS.curie('0001107'),
                   model_uri=TEMP.hydrocarbon_resources_fluids_swabs_samp_name, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])
