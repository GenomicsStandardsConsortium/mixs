# Auto generated from mixs_6_2_for_merge.yaml by pythongen.py version: 0.0.1
# Generation date: 2023-10-04T17:32:30
# Schema: mixs_6_2_rc
#
# id: https://w3id.org/mixs-6-2-rc
# description:
# license:

import dataclasses
import re
from jsonasobj2 import JsonObj, as_dict
from typing import Optional, List, Union, Dict, ClassVar, Any
from dataclasses import dataclass
from linkml_runtime.linkml_model.meta import EnumDefinition, PermissibleValue, PvFormulaOptions

from linkml_runtime.utils.slot import Slot
from linkml_runtime.utils.metamodelcore import empty_list, empty_dict, bnode
from linkml_runtime.utils.yamlutils import YAMLRoot, extended_str, extended_float, extended_int
from linkml_runtime.utils.dataclass_extensions_376 import dataclasses_init_fn_with_kwargs
from linkml_runtime.utils.formatutils import camelcase, underscore, sfx
from linkml_runtime.utils.enumerations import EnumDefinitionImpl
from rdflib import Namespace, URIRef
from linkml_runtime.utils.curienamespace import CurieNamespace
from linkml_runtime.utils.metamodelcore import Bool, Curie, Decimal, ElementIdentifier, NCName, NodeIdentifier, URI, URIorCURIE, XSDDate, XSDDateTime, XSDTime

metamodel_version = "1.7.0"
version = None

# Overwrite dataclasses _init_fn to add **kwargs in __init__
dataclasses._init_fn = dataclasses_init_fn_with_kwargs

# Namespaces
AGRO = CurieNamespace('AGRO', 'http://purl.obolibrary.org/obo/AGRO_')
CHEBI = CurieNamespace('CHEBI', 'http://purl.obolibrary.org/obo/CHEBI_')
ENVO = CurieNamespace('ENVO', 'http://purl.obolibrary.org/obo/ENVO_')
MIXS = CurieNamespace('MIXS', 'https://w3id.org/mixs/')
LINKML = CurieNamespace('linkml', 'https://w3id.org/linkml/')
MIXS_6_2_RC = CurieNamespace('mixs_6_2_rc', 'https://w3id.org/mixs-6-2-rc')
SCHEMA = CurieNamespace('schema', 'http://schema.org/')
SHEX = CurieNamespace('shex', 'http://www.w3.org/ns/shex#')
XSD = CurieNamespace('xsd', 'http://www.w3.org/2001/XMLSchema#')
DEFAULT_ = MIXS_6_2_RC


# Types
class String(str):
    """ A character string """
    type_class_uri = XSD.string
    type_class_curie = "xsd:string"
    type_name = "string"
    type_model_uri = MIXS_6_2_RC.String


class Integer(int):
    """ An integer """
    type_class_uri = XSD.integer
    type_class_curie = "xsd:integer"
    type_name = "integer"
    type_model_uri = MIXS_6_2_RC.Integer


class Boolean(Bool):
    """ A binary (true or false) value """
    type_class_uri = XSD.boolean
    type_class_curie = "xsd:boolean"
    type_name = "boolean"
    type_model_uri = MIXS_6_2_RC.Boolean


class Float(float):
    """ A real number that conforms to the xsd:float specification """
    type_class_uri = XSD.float
    type_class_curie = "xsd:float"
    type_name = "float"
    type_model_uri = MIXS_6_2_RC.Float


class Double(float):
    """ A real number that conforms to the xsd:double specification """
    type_class_uri = XSD.double
    type_class_curie = "xsd:double"
    type_name = "double"
    type_model_uri = MIXS_6_2_RC.Double


class Decimal(Decimal):
    """ A real number with arbitrary precision that conforms to the xsd:decimal specification """
    type_class_uri = XSD.decimal
    type_class_curie = "xsd:decimal"
    type_name = "decimal"
    type_model_uri = MIXS_6_2_RC.Decimal


class Time(XSDTime):
    """ A time object represents a (local) time of day, independent of any particular day """
    type_class_uri = XSD.time
    type_class_curie = "xsd:time"
    type_name = "time"
    type_model_uri = MIXS_6_2_RC.Time


class Date(XSDDate):
    """ a date (year, month and day) in an idealized calendar """
    type_class_uri = XSD.date
    type_class_curie = "xsd:date"
    type_name = "date"
    type_model_uri = MIXS_6_2_RC.Date


class Datetime(XSDDateTime):
    """ The combination of a date and time """
    type_class_uri = XSD.dateTime
    type_class_curie = "xsd:dateTime"
    type_name = "datetime"
    type_model_uri = MIXS_6_2_RC.Datetime


class DateOrDatetime(str):
    """ Either a date or a datetime """
    type_class_uri = LINKML.DateOrDatetime
    type_class_curie = "linkml:DateOrDatetime"
    type_name = "date_or_datetime"
    type_model_uri = MIXS_6_2_RC.DateOrDatetime


class Uriorcurie(URIorCURIE):
    """ a URI or a CURIE """
    type_class_uri = XSD.anyURI
    type_class_curie = "xsd:anyURI"
    type_name = "uriorcurie"
    type_model_uri = MIXS_6_2_RC.Uriorcurie


class Curie(Curie):
    """ a compact URI """
    type_class_uri = XSD.string
    type_class_curie = "xsd:string"
    type_name = "curie"
    type_model_uri = MIXS_6_2_RC.Curie


class Uri(URI):
    """ a complete URI """
    type_class_uri = XSD.anyURI
    type_class_curie = "xsd:anyURI"
    type_name = "uri"
    type_model_uri = MIXS_6_2_RC.Uri


class Ncname(NCName):
    """ Prefix part of CURIE """
    type_class_uri = XSD.string
    type_class_curie = "xsd:string"
    type_name = "ncname"
    type_model_uri = MIXS_6_2_RC.Ncname


class Objectidentifier(ElementIdentifier):
    """ A URI or CURIE that represents an object in the model. """
    type_class_uri = SHEX.iri
    type_class_curie = "shex:iri"
    type_name = "objectidentifier"
    type_model_uri = MIXS_6_2_RC.Objectidentifier


class Nodeidentifier(NodeIdentifier):
    """ A URI, CURIE or BNODE that represents a node in a model. """
    type_class_uri = SHEX.nonLiteral
    type_class_curie = "shex:nonLiteral"
    type_name = "nodeidentifier"
    type_model_uri = MIXS_6_2_RC.Nodeidentifier


class Jsonpointer(str):
    """ A string encoding a JSON Pointer. The value of the string MUST conform to JSON Point syntax and SHOULD dereference to a valid object within the current instance document when encoded in tree form. """
    type_class_uri = XSD.string
    type_class_curie = "xsd:string"
    type_name = "jsonpointer"
    type_model_uri = MIXS_6_2_RC.Jsonpointer


class Jsonpath(str):
    """ A string encoding a JSON Path. The value of the string MUST conform to JSON Point syntax and SHOULD dereference to zero or more valid objects within the current instance document when encoded in tree form. """
    type_class_uri = XSD.string
    type_class_curie = "xsd:string"
    type_name = "jsonpath"
    type_model_uri = MIXS_6_2_RC.Jsonpath


class Sparqlpath(str):
    """ A string encoding a SPARQL Property Path. The value of the string MUST conform to SPARQL syntax and SHOULD dereference to zero or more valid objects within the current instance document when encoded as RDF. """
    type_class_uri = XSD.string
    type_class_curie = "xsd:string"
    type_name = "sparqlpath"
    type_model_uri = MIXS_6_2_RC.Sparqlpath


# Class references



class Checklist(YAMLRoot):
    """
    A collection of metadata terms (slots) to minimally describe the sampling and sequencing method of a specimen used
    to generate a nucleotide sequence.
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS_6_2_RC.Checklist
    class_class_curie: ClassVar[str] = "mixs_6_2_rc:Checklist"
    class_name: ClassVar[str] = "Checklist"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.Checklist


@dataclass
class MigsBa(Checklist):
    """
    Minimal Information about a Genome Sequence: cultured bacteria/archaea
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010003"]
    class_class_curie: ClassVar[str] = "MIXS:0010003"
    class_name: ClassVar[str] = "MigsBa"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MigsBa

    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    assembly_qual: str = None
    ref_biomaterial: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_name: str = None
    num_replicons: int = None
    isol_growth_condt: str = None
    project_name: str = None
    samp_taxon_id: str = None
    assembly_software: str = None
    number_contig: int = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    encoded_traits: Optional[str] = None
    tax_class: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    host_disease_stat: Optional[str] = None
    elev: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    feat_pred: Optional[str] = None
    extrachrom_elements: Optional[int] = None
    alt: Optional[str] = None
    ref_db: Optional[str] = None
    compl_software: Optional[str] = None
    assembly_name: Optional[str] = None
    sim_search_meth: Optional[str] = None
    temp: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    depth: Optional[str] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    specific_host: Optional[str] = None
    tax_ident: Optional[Union[str, "TAXIDENTENUM"]] = None
    pathogenicity: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    compl_score: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    subspecf_gen_lin: Optional[str] = None
    estimated_size: Optional[str] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self._is_empty(self.ref_biomaterial):
            self.MissingRequiredField("ref_biomaterial")
        if not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.num_replicons):
            self.MissingRequiredField("num_replicons")
        if not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.number_contig):
            self.MissingRequiredField("number_contig")
        if not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.tax_ident is not None and not isinstance(self.tax_ident, TAXIDENTENUM):
            self.tax_ident = TAXIDENTENUM(self.tax_ident)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MigsEu(Checklist):
    """
    Minimal Information about a Genome Sequence: eukaryote
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010002"]
    class_class_curie: ClassVar[str] = "MIXS:0010002"
    class_name: ClassVar[str] = "MigsEu"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MigsEu

    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    assembly_qual: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_name: str = None
    isol_growth_condt: str = None
    project_name: str = None
    samp_taxon_id: str = None
    assembly_software: str = None
    number_contig: int = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    host_disease_stat: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    feat_pred: Optional[str] = None
    adapters: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    extrachrom_elements: Optional[int] = None
    alt: Optional[str] = None
    ref_db: Optional[str] = None
    compl_software: Optional[str] = None
    assembly_name: Optional[str] = None
    propagation: Optional[str] = None
    sim_search_meth: Optional[str] = None
    temp: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    num_replicons: Optional[int] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    depth: Optional[str] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    ploidy: Optional[str] = None
    specific_host: Optional[str] = None
    tax_ident: Optional[Union[str, "TAXIDENTENUM"]] = None
    pathogenicity: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    compl_score: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    subspecf_gen_lin: Optional[str] = None
    estimated_size: Optional[str] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.number_contig):
            self.MissingRequiredField("number_contig")
        if not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.tax_ident is not None and not isinstance(self.tax_ident, TAXIDENTENUM):
            self.tax_ident = TAXIDENTENUM(self.tax_ident)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MigsOrg(Checklist):
    """
    Minimal Information about a Genome Sequence: organelle
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010006"]
    class_class_curie: ClassVar[str] = "MIXS:0010006"
    class_name: ClassVar[str] = "MigsOrg"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MigsOrg

    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_name: str = None
    project_name: str = None
    samp_taxon_id: str = None
    assembly_software: str = None
    env_medium: str = None
    geo_loc_name: str = None
    isol_growth_condt: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    feat_pred: Optional[str] = None
    adapters: Optional[str] = None
    assembly_qual: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    extrachrom_elements: Optional[int] = None
    alt: Optional[str] = None
    ref_db: Optional[str] = None
    compl_software: Optional[str] = None
    assembly_name: Optional[str] = None
    sim_search_meth: Optional[str] = None
    temp: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    depth: Optional[str] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    tax_ident: Optional[Union[str, "TAXIDENTENUM"]] = None
    number_contig: Optional[int] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    compl_score: Optional[str] = None
    estimated_size: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    subspecf_gen_lin: Optional[str] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.tax_ident is not None and not isinstance(self.tax_ident, TAXIDENTENUM):
            self.tax_ident = TAXIDENTENUM(self.tax_ident)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MigsPl(Checklist):
    """
    Minimal Information about a Genome Sequence: plasmid
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010004"]
    class_class_curie: ClassVar[str] = "MIXS:0010004"
    class_name: ClassVar[str] = "MigsPl"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MigsPl

    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    propagation: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_name: str = None
    isol_growth_condt: str = None
    project_name: str = None
    samp_taxon_id: str = None
    assembly_software: str = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    encoded_traits: Optional[str] = None
    tax_class: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    feat_pred: Optional[str] = None
    adapters: Optional[str] = None
    assembly_qual: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    alt: Optional[str] = None
    ref_db: Optional[str] = None
    compl_software: Optional[str] = None
    assembly_name: Optional[str] = None
    sim_search_meth: Optional[str] = None
    temp: Optional[str] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    depth: Optional[str] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    specific_host: Optional[str] = None
    tax_ident: Optional[Union[str, "TAXIDENTENUM"]] = None
    number_contig: Optional[int] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    compl_score: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    samp_collect_device: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    estimated_size: Optional[str] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.propagation):
            self.MissingRequiredField("propagation")
        if not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.tax_ident is not None and not isinstance(self.tax_ident, TAXIDENTENUM):
            self.tax_ident = TAXIDENTENUM(self.tax_ident)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MigsVi(Checklist):
    """
    Minimal Information about a Genome Sequence: virus
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010005"]
    class_class_curie: ClassVar[str] = "MIXS:0010005"
    class_name: ClassVar[str] = "MigsVi"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MigsVi

    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    propagation: str = None
    env_broad_scale: str = None
    samp_name: str = None
    project_name: str = None
    samp_taxon_id: str = None
    assembly_software: str = None
    env_medium: str = None
    geo_loc_name: str = None
    isol_growth_condt: str = None
    collection_date: Union[str, XSDDateTime] = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    encoded_traits: Optional[str] = None
    tax_class: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    feat_pred: Optional[str] = None
    adapters: Optional[str] = None
    assembly_qual: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    alt: Optional[str] = None
    ref_db: Optional[str] = None
    compl_software: Optional[str] = None
    assembly_name: Optional[str] = None
    sim_search_meth: Optional[str] = None
    temp: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    num_replicons: Optional[int] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    depth: Optional[str] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    virus_enrich_appr: Optional[Union[str, "VIRUSENRICHAPPRENUM"]] = None
    specific_host: Optional[str] = None
    tax_ident: Optional[Union[str, "TAXIDENTENUM"]] = None
    number_contig: Optional[int] = None
    pathogenicity: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    compl_score: Optional[str] = None
    estimated_size: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    subspecf_gen_lin: Optional[str] = None
    host_disease_stat: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.propagation):
            self.MissingRequiredField("propagation")
        if not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.encoded_traits is not None and not isinstance(self.encoded_traits, str):
            self.encoded_traits = str(self.encoded_traits)

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.virus_enrich_appr is not None and not isinstance(self.virus_enrich_appr, VIRUSENRICHAPPRENUM):
            self.virus_enrich_appr = VIRUSENRICHAPPRENUM(self.virus_enrich_appr)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.tax_ident is not None and not isinstance(self.tax_ident, TAXIDENTENUM):
            self.tax_ident = TAXIDENTENUM(self.tax_ident)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class Mimag(Checklist):
    """
    Minimum Information About a Metagenome-Assembled Genome
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010011"]
    class_class_curie: ClassVar[str] = "MIXS:0010011"
    class_name: ClassVar[str] = "Mimag"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.Mimag

    bin_software: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    assembly_qual: str = None
    compl_software: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_name: str = None
    bin_param: Union[str, "BINPARAMENUM"] = None
    project_name: str = None
    samp_taxon_id: str = None
    assembly_software: str = None
    tax_ident: Union[str, "TAXIDENTENUM"] = None
    env_medium: str = None
    contam_score: float = None
    compl_score: str = None
    geo_loc_name: str = None
    x16s_recover_software: Optional[str] = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    ref_db: Optional[str] = None
    x16s_recover: Optional[Union[bool, Bool]] = None
    assembly_name: Optional[str] = None
    contam_screen_param: Optional[str] = None
    sim_search_meth: Optional[str] = None
    reassembly_bin: Optional[Union[bool, Bool]] = None
    temp: Optional[str] = None
    trnas: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    trna_ext_software: Optional[str] = None
    depth: Optional[str] = None
    compl_appr: Optional[Union[str, "COMPLAPPRENUM"]] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    number_contig: Optional[int] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    mag_cov_software: Optional[Union[str, "MAGCOVSOFTWAREENUM"]] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    decontam_software: Optional[str] = None
    contam_screen_input: Optional[Union[str, "CONTAMSCREENINPUTENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.bin_software):
            self.MissingRequiredField("bin_software")
        if not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self._is_empty(self.compl_software):
            self.MissingRequiredField("compl_software")
        if not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.bin_param):
            self.MissingRequiredField("bin_param")
        if not isinstance(self.bin_param, BINPARAMENUM):
            self.bin_param = BINPARAMENUM(self.bin_param)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.tax_ident):
            self.MissingRequiredField("tax_ident")
        if not isinstance(self.tax_ident, TAXIDENTENUM):
            self.tax_ident = TAXIDENTENUM(self.tax_ident)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.contam_score):
            self.MissingRequiredField("contam_score")
        if not isinstance(self.contam_score, float):
            self.contam_score = float(self.contam_score)

        if self._is_empty(self.compl_score):
            self.MissingRequiredField("compl_score")
        if not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.x16s_recover_software is not None and not isinstance(self.x16s_recover_software, str):
            self.x16s_recover_software = str(self.x16s_recover_software)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.x16s_recover is not None and not isinstance(self.x16s_recover, Bool):
            self.x16s_recover = Bool(self.x16s_recover)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, Bool):
            self.reassembly_bin = Bool(self.reassembly_bin)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.trnas is not None and not isinstance(self.trnas, str):
            self.trnas = str(self.trnas)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.compl_appr is not None and not isinstance(self.compl_appr, COMPLAPPRENUM):
            self.compl_appr = COMPLAPPRENUM(self.compl_appr)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, MAGCOVSOFTWAREENUM):
            self.mag_cov_software = MAGCOVSOFTWAREENUM(self.mag_cov_software)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, CONTAMSCREENINPUTENUM):
            self.contam_screen_input = CONTAMSCREENINPUTENUM(self.contam_screen_input)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MimarksC(Checklist):
    """
    Minimal Information about a Marker Specimen: specimen
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010009"]
    class_class_curie: ClassVar[str] = "MIXS:0010009"
    class_name: ClassVar[str] = "MimarksC"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MimarksC

    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    env_broad_scale: str = None
    samp_name: str = None
    project_name: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    target_gene: str = None
    isol_growth_condt: str = None
    collection_date: Union[str, XSDDateTime] = None
    chimera_check: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    samp_vol_we_dna_ext: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    extrachrom_elements: Optional[int] = None
    alt: Optional[str] = None
    pcr_primers: Optional[str] = None
    pcr_cond: Optional[str] = None
    temp: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    samp_size: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    seq_quality_check: Optional[Union[str, "SEQQUALITYCHECKENUM"]] = None
    depth: Optional[str] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    samp_mat_process: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    target_subfragment: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    subspecf_gen_lin: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.target_gene):
            self.MissingRequiredField("target_gene")
        if not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, SEQQUALITYCHECKENUM):
            self.seq_quality_check = SEQQUALITYCHECKENUM(self.seq_quality_check)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MimarksS(Checklist):
    """
    Minimal Information about a Marker Specimen: survey
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010008"]
    class_class_curie: ClassVar[str] = "MIXS:0010008"
    class_name: ClassVar[str] = "MimarksS"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MimarksS

    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_name: str = None
    project_name: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    target_gene: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    chimera_check: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    pcr_primers: Optional[str] = None
    pcr_cond: Optional[str] = None
    temp: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    seq_quality_check: Optional[Union[str, "SEQQUALITYCHECKENUM"]] = None
    depth: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    assembly_software: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_vector: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    target_subfragment: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.target_gene):
            self.MissingRequiredField("target_gene")
        if not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, SEQQUALITYCHECKENUM):
            self.seq_quality_check = SEQQUALITYCHECKENUM(self.seq_quality_check)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class Mims(Checklist):
    """
    Metagenome or Environmental
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010007"]
    class_class_curie: ClassVar[str] = "MIXS:0010007"
    class_name: ClassVar[str] = "Mims"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.Mims

    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_name: str = None
    project_name: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    feat_pred: Optional[str] = None
    assembly_qual: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    ref_db: Optional[str] = None
    assembly_name: Optional[str] = None
    sim_search_meth: Optional[str] = None
    temp: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    depth: Optional[str] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    assembly_software: Optional[str] = None
    number_contig: Optional[int] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class Misag(Checklist):
    """
    Minimum Information About a Single Amplified Genome
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010010"]
    class_class_curie: ClassVar[str] = "MIXS:0010010"
    class_name: ClassVar[str] = "Misag"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.Misag

    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    assembly_qual: str = None
    compl_software: str = None
    env_broad_scale: str = None
    samp_name: str = None
    sc_lysis_approach: Union[str, "SCLYSISAPPROACHENUM"] = None
    sort_tech: Union[str, "SORTTECHENUM"] = None
    project_name: str = None
    samp_taxon_id: str = None
    assembly_software: str = None
    tax_ident: Union[str, "TAXIDENTENUM"] = None
    env_medium: str = None
    wga_amp_appr: Union[str, "WGAAMPAPPRENUM"] = None
    contam_score: float = None
    compl_score: str = None
    geo_loc_name: str = None
    collection_date: Union[str, XSDDateTime] = None
    x16s_recover_software: Optional[str] = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    feat_pred: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    ref_db: Optional[str] = None
    x16s_recover: Optional[Union[bool, Bool]] = None
    wga_amp_kit: Optional[str] = None
    assembly_name: Optional[str] = None
    contam_screen_param: Optional[str] = None
    sim_search_meth: Optional[str] = None
    temp: Optional[str] = None
    trnas: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    samp_size: Optional[str] = None
    trna_ext_software: Optional[str] = None
    depth: Optional[str] = None
    compl_appr: Optional[Union[str, "COMPLAPPRENUM"]] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    sc_lysis_method: Optional[str] = None
    number_contig: Optional[int] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    samp_collect_device: Optional[str] = None
    decontam_software: Optional[str] = None
    contam_screen_input: Optional[Union[str, "CONTAMSCREENINPUTENUM"]] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self._is_empty(self.compl_software):
            self.MissingRequiredField("compl_software")
        if not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.sc_lysis_approach):
            self.MissingRequiredField("sc_lysis_approach")
        if not isinstance(self.sc_lysis_approach, SCLYSISAPPROACHENUM):
            self.sc_lysis_approach = SCLYSISAPPROACHENUM(self.sc_lysis_approach)

        if self._is_empty(self.sort_tech):
            self.MissingRequiredField("sort_tech")
        if not isinstance(self.sort_tech, SORTTECHENUM):
            self.sort_tech = SORTTECHENUM(self.sort_tech)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.tax_ident):
            self.MissingRequiredField("tax_ident")
        if not isinstance(self.tax_ident, TAXIDENTENUM):
            self.tax_ident = TAXIDENTENUM(self.tax_ident)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.wga_amp_appr):
            self.MissingRequiredField("wga_amp_appr")
        if not isinstance(self.wga_amp_appr, WGAAMPAPPRENUM):
            self.wga_amp_appr = WGAAMPAPPRENUM(self.wga_amp_appr)

        if self._is_empty(self.contam_score):
            self.MissingRequiredField("contam_score")
        if not isinstance(self.contam_score, float):
            self.contam_score = float(self.contam_score)

        if self._is_empty(self.compl_score):
            self.MissingRequiredField("compl_score")
        if not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self.x16s_recover_software is not None and not isinstance(self.x16s_recover_software, str):
            self.x16s_recover_software = str(self.x16s_recover_software)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.x16s_recover is not None and not isinstance(self.x16s_recover, Bool):
            self.x16s_recover = Bool(self.x16s_recover)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.contam_screen_param is not None and not isinstance(self.contam_screen_param, str):
            self.contam_screen_param = str(self.contam_screen_param)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.trnas is not None and not isinstance(self.trnas, str):
            self.trnas = str(self.trnas)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.compl_appr is not None and not isinstance(self.compl_appr, COMPLAPPRENUM):
            self.compl_appr = COMPLAPPRENUM(self.compl_appr)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.sc_lysis_method is not None and not isinstance(self.sc_lysis_method, str):
            self.sc_lysis_method = str(self.sc_lysis_method)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.decontam_software is not None and not isinstance(self.decontam_software, str):
            self.decontam_software = str(self.decontam_software)

        if self.contam_screen_input is not None and not isinstance(self.contam_screen_input, CONTAMSCREENINPUTENUM):
            self.contam_screen_input = CONTAMSCREENINPUTENUM(self.contam_screen_input)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class Miuvig(Checklist):
    """
    Minimum Information About an Uncultivated Virus Genome
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010012"]
    class_class_curie: ClassVar[str] = "MIXS:0010012"
    class_name: ClassVar[str] = "Miuvig"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.Miuvig

    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    assembly_qual: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_name: str = None
    source_uvig: str = None
    virus_enrich_appr: Union[str, "VIRUSENRICHAPPRENUM"] = None
    project_name: str = None
    samp_taxon_id: str = None
    assembly_software: str = None
    number_contig: int = None
    env_medium: str = None
    geo_loc_name: str = None
    vir_ident_software: str = None
    pred_genome_type: str = None
    pred_genome_struc: Union[str, "PREDGENOMESTRUCENUM"] = None
    detec_type: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    feat_pred: Optional[str] = None
    adapters: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    ref_db: Optional[str] = None
    compl_software: Optional[str] = None
    assembly_name: Optional[str] = None
    sim_search_meth: Optional[str] = None
    temp: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    trnas: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    trna_ext_software: Optional[str] = None
    depth: Optional[str] = None
    compl_appr: Optional[Union[str, "COMPLAPPRENUM"]] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    specific_host: Optional[str] = None
    tax_ident: Optional[Union[str, "TAXIDENTENUM"]] = None
    pathogenicity: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    compl_score: Optional[str] = None
    estimated_size: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    samp_collect_device: Optional[str] = None
    host_disease_stat: Optional[str] = None
    samp_size: Optional[str] = None
    sort_tech: Optional[Union[str, "SORTTECHENUM"]] = None
    sc_lysis_approach: Optional[Union[str, "SCLYSISAPPROACHENUM"]] = None
    sc_lysis_method: Optional[str] = None
    wga_amp_appr: Optional[Union[str, "WGAAMPAPPRENUM"]] = None
    wga_amp_kit: Optional[str] = None
    bin_param: Optional[Union[str, "BINPARAMENUM"]] = None
    bin_software: Optional[str] = None
    reassembly_bin: Optional[Union[bool, Bool]] = None
    mag_cov_software: Optional[Union[str, "MAGCOVSOFTWAREENUM"]] = None
    otu_class_appr: Optional[str] = None
    otu_seq_comp_appr: Optional[str] = None
    otu_db: Optional[str] = None
    host_pred_appr: Optional[Union[str, "HOSTPREDAPPRENUM"]] = None
    host_pred_est_acc: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.source_uvig):
            self.MissingRequiredField("source_uvig")
        if not isinstance(self.source_uvig, str):
            self.source_uvig = str(self.source_uvig)

        if self._is_empty(self.virus_enrich_appr):
            self.MissingRequiredField("virus_enrich_appr")
        if not isinstance(self.virus_enrich_appr, VIRUSENRICHAPPRENUM):
            self.virus_enrich_appr = VIRUSENRICHAPPRENUM(self.virus_enrich_appr)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.number_contig):
            self.MissingRequiredField("number_contig")
        if not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.vir_ident_software):
            self.MissingRequiredField("vir_ident_software")
        if not isinstance(self.vir_ident_software, str):
            self.vir_ident_software = str(self.vir_ident_software)

        if self._is_empty(self.pred_genome_type):
            self.MissingRequiredField("pred_genome_type")
        if not isinstance(self.pred_genome_type, str):
            self.pred_genome_type = str(self.pred_genome_type)

        if self._is_empty(self.pred_genome_struc):
            self.MissingRequiredField("pred_genome_struc")
        if not isinstance(self.pred_genome_struc, PREDGENOMESTRUCENUM):
            self.pred_genome_struc = PREDGENOMESTRUCENUM(self.pred_genome_struc)

        if self._is_empty(self.detec_type):
            self.MissingRequiredField("detec_type")
        if not isinstance(self.detec_type, str):
            self.detec_type = str(self.detec_type)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if self.trnas is not None and not isinstance(self.trnas, str):
            self.trnas = str(self.trnas)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.trna_ext_software is not None and not isinstance(self.trna_ext_software, str):
            self.trna_ext_software = str(self.trna_ext_software)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.compl_appr is not None and not isinstance(self.compl_appr, COMPLAPPRENUM):
            self.compl_appr = COMPLAPPRENUM(self.compl_appr)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.tax_ident is not None and not isinstance(self.tax_ident, TAXIDENTENUM):
            self.tax_ident = TAXIDENTENUM(self.tax_ident)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.sort_tech is not None and not isinstance(self.sort_tech, SORTTECHENUM):
            self.sort_tech = SORTTECHENUM(self.sort_tech)

        if self.sc_lysis_approach is not None and not isinstance(self.sc_lysis_approach, SCLYSISAPPROACHENUM):
            self.sc_lysis_approach = SCLYSISAPPROACHENUM(self.sc_lysis_approach)

        if self.sc_lysis_method is not None and not isinstance(self.sc_lysis_method, str):
            self.sc_lysis_method = str(self.sc_lysis_method)

        if self.wga_amp_appr is not None and not isinstance(self.wga_amp_appr, WGAAMPAPPRENUM):
            self.wga_amp_appr = WGAAMPAPPRENUM(self.wga_amp_appr)

        if self.wga_amp_kit is not None and not isinstance(self.wga_amp_kit, str):
            self.wga_amp_kit = str(self.wga_amp_kit)

        if self.bin_param is not None and not isinstance(self.bin_param, BINPARAMENUM):
            self.bin_param = BINPARAMENUM(self.bin_param)

        if self.bin_software is not None and not isinstance(self.bin_software, str):
            self.bin_software = str(self.bin_software)

        if self.reassembly_bin is not None and not isinstance(self.reassembly_bin, Bool):
            self.reassembly_bin = Bool(self.reassembly_bin)

        if self.mag_cov_software is not None and not isinstance(self.mag_cov_software, MAGCOVSOFTWAREENUM):
            self.mag_cov_software = MAGCOVSOFTWAREENUM(self.mag_cov_software)

        if self.otu_class_appr is not None and not isinstance(self.otu_class_appr, str):
            self.otu_class_appr = str(self.otu_class_appr)

        if self.otu_seq_comp_appr is not None and not isinstance(self.otu_seq_comp_appr, str):
            self.otu_seq_comp_appr = str(self.otu_seq_comp_appr)

        if self.otu_db is not None and not isinstance(self.otu_db, str):
            self.otu_db = str(self.otu_db)

        if self.host_pred_appr is not None and not isinstance(self.host_pred_appr, HOSTPREDAPPRENUM):
            self.host_pred_appr = HOSTPREDAPPRENUM(self.host_pred_appr)

        if self.host_pred_est_acc is not None and not isinstance(self.host_pred_est_acc, str):
            self.host_pred_est_acc = str(self.host_pred_est_acc)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


class Extension(YAMLRoot):
    """
    A collection of recommended metadata terms (slots) developed by community experts, describing the specific context
    under which a sample was collected.
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS_6_2_RC.Extension
    class_class_curie: ClassVar[str] = "mixs_6_2_rc:Extension"
    class_name: ClassVar[str] = "Extension"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.Extension


@dataclass
class Agriculture(Extension):
    """
    agriculture extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016018"]
    class_class_curie: ClassVar[str] = "MIXS:0016018"
    class_name: ClassVar[str] = "Agriculture"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.Agriculture

    chem_administration: Union[str, List[str]] = None
    food_source: str = None
    specific_host: str = None
    pathogenicity: str = None
    temp: str = None
    samp_store_dur: str = None
    samp_store_loc: str = None
    samp_collect_device: str = None
    samp_mat_process: str = None
    host_age: str = None
    host_common_name: str = None
    host_genotype: str = None
    host_height: str = None
    host_length: str = None
    host_life_stage: str = None
    host_phenotype: str = None
    host_taxid: str = None
    host_tot_mass: str = None
    host_spec_range: Union[str, List[str]] = None
    samp_size: str = None
    seq_meth: str = None
    samp_vol_we_dna_ext: str = None
    pcr_primers: str = None
    nucl_acid_ext: str = None
    nucl_acid_amp: str = None
    lib_reads_seqd: int = None
    lib_vector: str = None
    lib_screen: str = None
    target_gene: str = None
    target_subfragment: str = None
    mid: str = None
    adapters: str = None
    pcr_cond: str = None
    chimera_check: str = None
    assembly_name: str = None
    soil_type: str = None
    soil_type_meth: str = None
    store_cond: str = None
    microbial_biomass: str = None
    micro_biomass_meth: str = None
    sieving: str = None
    pool_dna_extracts: str = None
    plant_growth_med: Optional[str] = None
    photosynt_activ: Optional[str] = None
    photosynt_activ_meth: Optional[Union[str, List[str]]] = empty_list()
    samp_collect_method: Optional[str] = None
    enrichment_protocol: Optional[str] = None
    library_prep_kit: Optional[str] = None
    sequencing_location: Optional[str] = None
    soil_temp: Optional[str] = None
    soil_pH: Optional[float] = None
    soil_conductivity: Optional[str] = None
    rel_location: Optional[str] = None
    soil_cover: Optional[str] = None
    porosity: Optional[str] = None
    soil_texture: Optional[str] = None
    soil_texture_meth: Optional[str] = None
    host_symbiont: Optional[Union[str, List[str]]] = empty_list()
    host_disease_stat: Optional[str] = None
    pres_animal_insect: Optional[str] = None
    plant_water_method: Optional[str] = None
    anim_water_method: Optional[Union[str, List[str]]] = empty_list()
    farm_water_source: Optional[Union[str, "FARMWATERSOURCEENUM"]] = None
    water_source_shared: Optional[Union[str, List[str]]] = empty_list()
    water_pH: Optional[float] = None
    elev: Optional[str] = None
    season: Optional[str] = None
    solar_irradiance: Optional[Union[str, List[str]]] = empty_list()
    crop_yield: Optional[str] = None
    season_humidity: Optional[float] = None
    humidity: Optional[str] = None
    adjacent_environment: Optional[Union[str, List[str]]] = empty_list()
    food_prod: Optional[Union[str, List[str]]] = empty_list()
    lot_number: Optional[Union[str, List[str]]] = empty_list()
    fertilizer_admin: Optional[str] = None
    samp_store_temp: Optional[str] = None
    food_trav_mode: Optional[Union[str, List[str]]] = empty_list()
    food_trav_vehic: Optional[Union[str, List[str]]] = empty_list()
    farm_equip_san: Optional[Union[str, List[str]]] = empty_list()
    farm_equip: Optional[Union[str, List[str]]] = empty_list()
    farm_equip_shared: Optional[Union[str, List[str]]] = empty_list()
    food_harvest_proc: Optional[Union[str, List[str]]] = empty_list()
    plant_struc: Optional[str] = None
    host_dry_mass: Optional[str] = None
    ances_data: Optional[str] = None
    genetic_mod: Optional[str] = None
    food_product_type: Optional[str] = None
    spikein_strain: Optional[Union[str, List[str]]] = empty_list()
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    size_frac_low: Optional[str] = None
    size_frac_up: Optional[str] = None
    cult_isol_date: Optional[Union[str, XSDDateTime]] = None
    samp_pooling: Optional[Union[str, List[str]]] = empty_list()
    root_med_macronutr: Optional[str] = None
    root_med_carbon: Optional[str] = None
    root_med_ph: Optional[float] = None
    depth: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    water_temp_regm: Optional[Union[str, List[str]]] = empty_list()
    watering_regm: Optional[Union[str, List[str]]] = empty_list()
    standing_water_regm: Optional[Union[str, List[str]]] = empty_list()
    gaseous_environment: Optional[Union[str, List[str]]] = empty_list()
    fungicide_regm: Optional[Union[str, List[str]]] = empty_list()
    climate_environment: Optional[Union[str, List[str]]] = empty_list()
    herbicide_regm: Optional[Union[str, List[str]]] = empty_list()
    non_min_nutr_regm: Optional[Union[str, List[str]]] = empty_list()
    pesticide_regm: Optional[Union[str, List[str]]] = empty_list()
    ph_regm: Optional[Union[str, List[str]]] = empty_list()
    salt_regm: Optional[Union[str, List[str]]] = empty_list()
    season_environment: Optional[Union[str, List[str]]] = empty_list()
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    isol_growth_condt: Optional[str] = None
    host_subspecf_genlin: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    plant_product: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    lib_size: Optional[int] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    seq_quality_check: Optional[Union[str, "SEQQUALITYCHECKENUM"]] = None
    assembly_qual: Optional[str] = None
    assembly_software: Optional[str] = None
    annot: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    fao_class: Optional[Union[str, "FAOCLASSENUM"]] = None
    local_class: Optional[str] = None
    local_class_meth: Optional[str] = None
    soil_horizon: Optional[Union[str, "SOILHORIZONENUM"]] = None
    horizon_meth: Optional[str] = None
    link_class_info: Optional[str] = None
    previous_land_use: Optional[str] = None
    prev_land_use_meth: Optional[str] = None
    crop_rotation: Optional[str] = None
    agrochem_addition: Optional[Union[str, List[str]]] = empty_list()
    tillage: Optional[Union[Union[str, "TILLAGEENUM"], List[Union[str, "TILLAGEENUM"]]]] = empty_list()
    fire: Optional[Union[str, XSDDateTime]] = None
    flooding: Optional[Union[str, XSDDateTime]] = None
    extreme_event: Optional[Union[str, XSDDateTime]] = None
    link_climate_info: Optional[str] = None
    annual_temp: Optional[str] = None
    season_temp: Optional[str] = None
    annual_precpt: Optional[str] = None
    season_precpt: Optional[str] = None
    cur_land_use: Optional[str] = None
    slope_gradient: Optional[str] = None
    slope_aspect: Optional[str] = None
    profile_position: Optional[Union[str, "PROFILEPOSITIONENUM"]] = None
    drainage_class: Optional[Union[str, "DRAINAGECLASSENUM"]] = None
    ph_meth: Optional[str] = None
    cur_vegetation: Optional[str] = None
    cur_vegetation_meth: Optional[str] = None
    tot_org_carb: Optional[str] = None
    tot_org_c_meth: Optional[str] = None
    tot_nitro_content: Optional[str] = None
    tot_nitro_cont_meth: Optional[str] = None
    heavy_metals_meth: Optional[str] = None
    tot_carb: Optional[str] = None
    tot_phosphate: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.chem_administration):
            self.MissingRequiredField("chem_administration")
        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if self._is_empty(self.food_source):
            self.MissingRequiredField("food_source")
        if not isinstance(self.food_source, str):
            self.food_source = str(self.food_source)

        if self._is_empty(self.specific_host):
            self.MissingRequiredField("specific_host")
        if not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self._is_empty(self.pathogenicity):
            self.MissingRequiredField("pathogenicity")
        if not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self._is_empty(self.temp):
            self.MissingRequiredField("temp")
        if not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self._is_empty(self.samp_store_dur):
            self.MissingRequiredField("samp_store_dur")
        if not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self._is_empty(self.samp_store_loc):
            self.MissingRequiredField("samp_store_loc")
        if not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self._is_empty(self.samp_collect_device):
            self.MissingRequiredField("samp_collect_device")
        if not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self._is_empty(self.samp_mat_process):
            self.MissingRequiredField("samp_mat_process")
        if not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self._is_empty(self.host_age):
            self.MissingRequiredField("host_age")
        if not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self._is_empty(self.host_common_name):
            self.MissingRequiredField("host_common_name")
        if not isinstance(self.host_common_name, str):
            self.host_common_name = str(self.host_common_name)

        if self._is_empty(self.host_genotype):
            self.MissingRequiredField("host_genotype")
        if not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self._is_empty(self.host_height):
            self.MissingRequiredField("host_height")
        if not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self._is_empty(self.host_length):
            self.MissingRequiredField("host_length")
        if not isinstance(self.host_length, str):
            self.host_length = str(self.host_length)

        if self._is_empty(self.host_life_stage):
            self.MissingRequiredField("host_life_stage")
        if not isinstance(self.host_life_stage, str):
            self.host_life_stage = str(self.host_life_stage)

        if self._is_empty(self.host_phenotype):
            self.MissingRequiredField("host_phenotype")
        if not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self._is_empty(self.host_taxid):
            self.MissingRequiredField("host_taxid")
        if not isinstance(self.host_taxid, str):
            self.host_taxid = str(self.host_taxid)

        if self._is_empty(self.host_tot_mass):
            self.MissingRequiredField("host_tot_mass")
        if not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self._is_empty(self.host_spec_range):
            self.MissingRequiredField("host_spec_range")
        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if self._is_empty(self.samp_size):
            self.MissingRequiredField("samp_size")
        if not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.samp_vol_we_dna_ext):
            self.MissingRequiredField("samp_vol_we_dna_ext")
        if not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self._is_empty(self.pcr_primers):
            self.MissingRequiredField("pcr_primers")
        if not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self._is_empty(self.nucl_acid_ext):
            self.MissingRequiredField("nucl_acid_ext")
        if not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self._is_empty(self.nucl_acid_amp):
            self.MissingRequiredField("nucl_acid_amp")
        if not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self._is_empty(self.lib_reads_seqd):
            self.MissingRequiredField("lib_reads_seqd")
        if not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self._is_empty(self.lib_vector):
            self.MissingRequiredField("lib_vector")
        if not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self._is_empty(self.lib_screen):
            self.MissingRequiredField("lib_screen")
        if not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if self._is_empty(self.target_gene):
            self.MissingRequiredField("target_gene")
        if not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self._is_empty(self.target_subfragment):
            self.MissingRequiredField("target_subfragment")
        if not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self._is_empty(self.mid):
            self.MissingRequiredField("mid")
        if not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self._is_empty(self.adapters):
            self.MissingRequiredField("adapters")
        if not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self._is_empty(self.pcr_cond):
            self.MissingRequiredField("pcr_cond")
        if not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self._is_empty(self.chimera_check):
            self.MissingRequiredField("chimera_check")
        if not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self._is_empty(self.assembly_name):
            self.MissingRequiredField("assembly_name")
        if not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self._is_empty(self.soil_type):
            self.MissingRequiredField("soil_type")
        if not isinstance(self.soil_type, str):
            self.soil_type = str(self.soil_type)

        if self._is_empty(self.soil_type_meth):
            self.MissingRequiredField("soil_type_meth")
        if not isinstance(self.soil_type_meth, str):
            self.soil_type_meth = str(self.soil_type_meth)

        if self._is_empty(self.store_cond):
            self.MissingRequiredField("store_cond")
        if not isinstance(self.store_cond, str):
            self.store_cond = str(self.store_cond)

        if self._is_empty(self.microbial_biomass):
            self.MissingRequiredField("microbial_biomass")
        if not isinstance(self.microbial_biomass, str):
            self.microbial_biomass = str(self.microbial_biomass)

        if self._is_empty(self.micro_biomass_meth):
            self.MissingRequiredField("micro_biomass_meth")
        if not isinstance(self.micro_biomass_meth, str):
            self.micro_biomass_meth = str(self.micro_biomass_meth)

        if self._is_empty(self.sieving):
            self.MissingRequiredField("sieving")
        if not isinstance(self.sieving, str):
            self.sieving = str(self.sieving)

        if self._is_empty(self.pool_dna_extracts):
            self.MissingRequiredField("pool_dna_extracts")
        if not isinstance(self.pool_dna_extracts, str):
            self.pool_dna_extracts = str(self.pool_dna_extracts)

        if self.plant_growth_med is not None and not isinstance(self.plant_growth_med, str):
            self.plant_growth_med = str(self.plant_growth_med)

        if self.photosynt_activ is not None and not isinstance(self.photosynt_activ, str):
            self.photosynt_activ = str(self.photosynt_activ)

        if not isinstance(self.photosynt_activ_meth, list):
            self.photosynt_activ_meth = [self.photosynt_activ_meth] if self.photosynt_activ_meth is not None else []
        self.photosynt_activ_meth = [v if isinstance(v, str) else str(v) for v in self.photosynt_activ_meth]

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if self.enrichment_protocol is not None and not isinstance(self.enrichment_protocol, str):
            self.enrichment_protocol = str(self.enrichment_protocol)

        if self.library_prep_kit is not None and not isinstance(self.library_prep_kit, str):
            self.library_prep_kit = str(self.library_prep_kit)

        if self.sequencing_location is not None and not isinstance(self.sequencing_location, str):
            self.sequencing_location = str(self.sequencing_location)

        if self.soil_temp is not None and not isinstance(self.soil_temp, str):
            self.soil_temp = str(self.soil_temp)

        if self.soil_pH is not None and not isinstance(self.soil_pH, float):
            self.soil_pH = float(self.soil_pH)

        if self.soil_conductivity is not None and not isinstance(self.soil_conductivity, str):
            self.soil_conductivity = str(self.soil_conductivity)

        if self.rel_location is not None and not isinstance(self.rel_location, str):
            self.rel_location = str(self.rel_location)

        if self.soil_cover is not None and not isinstance(self.soil_cover, str):
            self.soil_cover = str(self.soil_cover)

        if self.porosity is not None and not isinstance(self.porosity, str):
            self.porosity = str(self.porosity)

        if self.soil_texture is not None and not isinstance(self.soil_texture, str):
            self.soil_texture = str(self.soil_texture)

        if self.soil_texture_meth is not None and not isinstance(self.soil_texture_meth, str):
            self.soil_texture_meth = str(self.soil_texture_meth)

        if not isinstance(self.host_symbiont, list):
            self.host_symbiont = [self.host_symbiont] if self.host_symbiont is not None else []
        self.host_symbiont = [v if isinstance(v, str) else str(v) for v in self.host_symbiont]

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.pres_animal_insect is not None and not isinstance(self.pres_animal_insect, str):
            self.pres_animal_insect = str(self.pres_animal_insect)

        if self.plant_water_method is not None and not isinstance(self.plant_water_method, str):
            self.plant_water_method = str(self.plant_water_method)

        if not isinstance(self.anim_water_method, list):
            self.anim_water_method = [self.anim_water_method] if self.anim_water_method is not None else []
        self.anim_water_method = [v if isinstance(v, str) else str(v) for v in self.anim_water_method]

        if self.farm_water_source is not None and not isinstance(self.farm_water_source, FARMWATERSOURCEENUM):
            self.farm_water_source = FARMWATERSOURCEENUM(self.farm_water_source)

        if not isinstance(self.water_source_shared, list):
            self.water_source_shared = [self.water_source_shared] if self.water_source_shared is not None else []
        self.water_source_shared = [v if isinstance(v, str) else str(v) for v in self.water_source_shared]

        if self.water_pH is not None and not isinstance(self.water_pH, float):
            self.water_pH = float(self.water_pH)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.season is not None and not isinstance(self.season, str):
            self.season = str(self.season)

        if not isinstance(self.solar_irradiance, list):
            self.solar_irradiance = [self.solar_irradiance] if self.solar_irradiance is not None else []
        self.solar_irradiance = [v if isinstance(v, str) else str(v) for v in self.solar_irradiance]

        if self.crop_yield is not None and not isinstance(self.crop_yield, str):
            self.crop_yield = str(self.crop_yield)

        if self.season_humidity is not None and not isinstance(self.season_humidity, float):
            self.season_humidity = float(self.season_humidity)

        if self.humidity is not None and not isinstance(self.humidity, str):
            self.humidity = str(self.humidity)

        if not isinstance(self.adjacent_environment, list):
            self.adjacent_environment = [self.adjacent_environment] if self.adjacent_environment is not None else []
        self.adjacent_environment = [v if isinstance(v, str) else str(v) for v in self.adjacent_environment]

        if not isinstance(self.food_prod, list):
            self.food_prod = [self.food_prod] if self.food_prod is not None else []
        self.food_prod = [v if isinstance(v, str) else str(v) for v in self.food_prod]

        if not isinstance(self.lot_number, list):
            self.lot_number = [self.lot_number] if self.lot_number is not None else []
        self.lot_number = [v if isinstance(v, str) else str(v) for v in self.lot_number]

        if self.fertilizer_admin is not None and not isinstance(self.fertilizer_admin, str):
            self.fertilizer_admin = str(self.fertilizer_admin)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if not isinstance(self.food_trav_mode, list):
            self.food_trav_mode = [self.food_trav_mode] if self.food_trav_mode is not None else []
        self.food_trav_mode = [v if isinstance(v, str) else str(v) for v in self.food_trav_mode]

        if not isinstance(self.food_trav_vehic, list):
            self.food_trav_vehic = [self.food_trav_vehic] if self.food_trav_vehic is not None else []
        self.food_trav_vehic = [v if isinstance(v, str) else str(v) for v in self.food_trav_vehic]

        if not isinstance(self.farm_equip_san, list):
            self.farm_equip_san = [self.farm_equip_san] if self.farm_equip_san is not None else []
        self.farm_equip_san = [v if isinstance(v, str) else str(v) for v in self.farm_equip_san]

        if not isinstance(self.farm_equip, list):
            self.farm_equip = [self.farm_equip] if self.farm_equip is not None else []
        self.farm_equip = [v if isinstance(v, str) else str(v) for v in self.farm_equip]

        if not isinstance(self.farm_equip_shared, list):
            self.farm_equip_shared = [self.farm_equip_shared] if self.farm_equip_shared is not None else []
        self.farm_equip_shared = [v if isinstance(v, str) else str(v) for v in self.farm_equip_shared]

        if not isinstance(self.food_harvest_proc, list):
            self.food_harvest_proc = [self.food_harvest_proc] if self.food_harvest_proc is not None else []
        self.food_harvest_proc = [v if isinstance(v, str) else str(v) for v in self.food_harvest_proc]

        if self.plant_struc is not None and not isinstance(self.plant_struc, str):
            self.plant_struc = str(self.plant_struc)

        if self.host_dry_mass is not None and not isinstance(self.host_dry_mass, str):
            self.host_dry_mass = str(self.host_dry_mass)

        if self.ances_data is not None and not isinstance(self.ances_data, str):
            self.ances_data = str(self.ances_data)

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if self.food_product_type is not None and not isinstance(self.food_product_type, str):
            self.food_product_type = str(self.food_product_type)

        if not isinstance(self.spikein_strain, list):
            self.spikein_strain = [self.spikein_strain] if self.spikein_strain is not None else []
        self.spikein_strain = [v if isinstance(v, str) else str(v) for v in self.spikein_strain]

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.size_frac_low is not None and not isinstance(self.size_frac_low, str):
            self.size_frac_low = str(self.size_frac_low)

        if self.size_frac_up is not None and not isinstance(self.size_frac_up, str):
            self.size_frac_up = str(self.size_frac_up)

        if self.cult_isol_date is not None and not isinstance(self.cult_isol_date, XSDDateTime):
            self.cult_isol_date = XSDDateTime(self.cult_isol_date)

        if not isinstance(self.samp_pooling, list):
            self.samp_pooling = [self.samp_pooling] if self.samp_pooling is not None else []
        self.samp_pooling = [v if isinstance(v, str) else str(v) for v in self.samp_pooling]

        if self.root_med_macronutr is not None and not isinstance(self.root_med_macronutr, str):
            self.root_med_macronutr = str(self.root_med_macronutr)

        if self.root_med_carbon is not None and not isinstance(self.root_med_carbon, str):
            self.root_med_carbon = str(self.root_med_carbon)

        if self.root_med_ph is not None and not isinstance(self.root_med_ph, float):
            self.root_med_ph = float(self.root_med_ph)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if not isinstance(self.water_temp_regm, list):
            self.water_temp_regm = [self.water_temp_regm] if self.water_temp_regm is not None else []
        self.water_temp_regm = [v if isinstance(v, str) else str(v) for v in self.water_temp_regm]

        if not isinstance(self.watering_regm, list):
            self.watering_regm = [self.watering_regm] if self.watering_regm is not None else []
        self.watering_regm = [v if isinstance(v, str) else str(v) for v in self.watering_regm]

        if not isinstance(self.standing_water_regm, list):
            self.standing_water_regm = [self.standing_water_regm] if self.standing_water_regm is not None else []
        self.standing_water_regm = [v if isinstance(v, str) else str(v) for v in self.standing_water_regm]

        if not isinstance(self.gaseous_environment, list):
            self.gaseous_environment = [self.gaseous_environment] if self.gaseous_environment is not None else []
        self.gaseous_environment = [v if isinstance(v, str) else str(v) for v in self.gaseous_environment]

        if not isinstance(self.fungicide_regm, list):
            self.fungicide_regm = [self.fungicide_regm] if self.fungicide_regm is not None else []
        self.fungicide_regm = [v if isinstance(v, str) else str(v) for v in self.fungicide_regm]

        if not isinstance(self.climate_environment, list):
            self.climate_environment = [self.climate_environment] if self.climate_environment is not None else []
        self.climate_environment = [v if isinstance(v, str) else str(v) for v in self.climate_environment]

        if not isinstance(self.herbicide_regm, list):
            self.herbicide_regm = [self.herbicide_regm] if self.herbicide_regm is not None else []
        self.herbicide_regm = [v if isinstance(v, str) else str(v) for v in self.herbicide_regm]

        if not isinstance(self.non_min_nutr_regm, list):
            self.non_min_nutr_regm = [self.non_min_nutr_regm] if self.non_min_nutr_regm is not None else []
        self.non_min_nutr_regm = [v if isinstance(v, str) else str(v) for v in self.non_min_nutr_regm]

        if not isinstance(self.pesticide_regm, list):
            self.pesticide_regm = [self.pesticide_regm] if self.pesticide_regm is not None else []
        self.pesticide_regm = [v if isinstance(v, str) else str(v) for v in self.pesticide_regm]

        if not isinstance(self.ph_regm, list):
            self.ph_regm = [self.ph_regm] if self.ph_regm is not None else []
        self.ph_regm = [v if isinstance(v, str) else str(v) for v in self.ph_regm]

        if not isinstance(self.salt_regm, list):
            self.salt_regm = [self.salt_regm] if self.salt_regm is not None else []
        self.salt_regm = [v if isinstance(v, str) else str(v) for v in self.salt_regm]

        if not isinstance(self.season_environment, list):
            self.season_environment = [self.season_environment] if self.season_environment is not None else []
        self.season_environment = [v if isinstance(v, str) else str(v) for v in self.season_environment]

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.isol_growth_condt is not None and not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if not isinstance(self.host_subspecf_genlin, list):
            self.host_subspecf_genlin = [self.host_subspecf_genlin] if self.host_subspecf_genlin is not None else []
        self.host_subspecf_genlin = [v if isinstance(v, str) else str(v) for v in self.host_subspecf_genlin]

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.plant_product is not None and not isinstance(self.plant_product, str):
            self.plant_product = str(self.plant_product)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, SEQQUALITYCHECKENUM):
            self.seq_quality_check = SEQQUALITYCHECKENUM(self.seq_quality_check)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.fao_class is not None and not isinstance(self.fao_class, FAOCLASSENUM):
            self.fao_class = FAOCLASSENUM(self.fao_class)

        if self.local_class is not None and not isinstance(self.local_class, str):
            self.local_class = str(self.local_class)

        if self.local_class_meth is not None and not isinstance(self.local_class_meth, str):
            self.local_class_meth = str(self.local_class_meth)

        if self.soil_horizon is not None and not isinstance(self.soil_horizon, SOILHORIZONENUM):
            self.soil_horizon = SOILHORIZONENUM(self.soil_horizon)

        if self.horizon_meth is not None and not isinstance(self.horizon_meth, str):
            self.horizon_meth = str(self.horizon_meth)

        if self.link_class_info is not None and not isinstance(self.link_class_info, str):
            self.link_class_info = str(self.link_class_info)

        if self.previous_land_use is not None and not isinstance(self.previous_land_use, str):
            self.previous_land_use = str(self.previous_land_use)

        if self.prev_land_use_meth is not None and not isinstance(self.prev_land_use_meth, str):
            self.prev_land_use_meth = str(self.prev_land_use_meth)

        if self.crop_rotation is not None and not isinstance(self.crop_rotation, str):
            self.crop_rotation = str(self.crop_rotation)

        if not isinstance(self.agrochem_addition, list):
            self.agrochem_addition = [self.agrochem_addition] if self.agrochem_addition is not None else []
        self.agrochem_addition = [v if isinstance(v, str) else str(v) for v in self.agrochem_addition]

        if not isinstance(self.tillage, list):
            self.tillage = [self.tillage] if self.tillage is not None else []
        self.tillage = [v if isinstance(v, TILLAGEENUM) else TILLAGEENUM(v) for v in self.tillage]

        if self.fire is not None and not isinstance(self.fire, XSDDateTime):
            self.fire = XSDDateTime(self.fire)

        if self.flooding is not None and not isinstance(self.flooding, XSDDateTime):
            self.flooding = XSDDateTime(self.flooding)

        if self.extreme_event is not None and not isinstance(self.extreme_event, XSDDateTime):
            self.extreme_event = XSDDateTime(self.extreme_event)

        if self.link_climate_info is not None and not isinstance(self.link_climate_info, str):
            self.link_climate_info = str(self.link_climate_info)

        if self.annual_temp is not None and not isinstance(self.annual_temp, str):
            self.annual_temp = str(self.annual_temp)

        if self.season_temp is not None and not isinstance(self.season_temp, str):
            self.season_temp = str(self.season_temp)

        if self.annual_precpt is not None and not isinstance(self.annual_precpt, str):
            self.annual_precpt = str(self.annual_precpt)

        if self.season_precpt is not None and not isinstance(self.season_precpt, str):
            self.season_precpt = str(self.season_precpt)

        if self.cur_land_use is not None and not isinstance(self.cur_land_use, str):
            self.cur_land_use = str(self.cur_land_use)

        if self.slope_gradient is not None and not isinstance(self.slope_gradient, str):
            self.slope_gradient = str(self.slope_gradient)

        if self.slope_aspect is not None and not isinstance(self.slope_aspect, str):
            self.slope_aspect = str(self.slope_aspect)

        if self.profile_position is not None and not isinstance(self.profile_position, PROFILEPOSITIONENUM):
            self.profile_position = PROFILEPOSITIONENUM(self.profile_position)

        if self.drainage_class is not None and not isinstance(self.drainage_class, DRAINAGECLASSENUM):
            self.drainage_class = DRAINAGECLASSENUM(self.drainage_class)

        if self.ph_meth is not None and not isinstance(self.ph_meth, str):
            self.ph_meth = str(self.ph_meth)

        if self.cur_vegetation is not None and not isinstance(self.cur_vegetation, str):
            self.cur_vegetation = str(self.cur_vegetation)

        if self.cur_vegetation_meth is not None and not isinstance(self.cur_vegetation_meth, str):
            self.cur_vegetation_meth = str(self.cur_vegetation_meth)

        if self.tot_org_carb is not None and not isinstance(self.tot_org_carb, str):
            self.tot_org_carb = str(self.tot_org_carb)

        if self.tot_org_c_meth is not None and not isinstance(self.tot_org_c_meth, str):
            self.tot_org_c_meth = str(self.tot_org_c_meth)

        if self.tot_nitro_content is not None and not isinstance(self.tot_nitro_content, str):
            self.tot_nitro_content = str(self.tot_nitro_content)

        if self.tot_nitro_cont_meth is not None and not isinstance(self.tot_nitro_cont_meth, str):
            self.tot_nitro_cont_meth = str(self.tot_nitro_cont_meth)

        if self.heavy_metals_meth is not None and not isinstance(self.heavy_metals_meth, str):
            self.heavy_metals_meth = str(self.heavy_metals_meth)

        if self.tot_carb is not None and not isinstance(self.tot_carb, str):
            self.tot_carb = str(self.tot_carb)

        if self.tot_phosphate is not None and not isinstance(self.tot_phosphate, str):
            self.tot_phosphate = str(self.tot_phosphate)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        super().__post_init__(**kwargs)


@dataclass
class Air(Extension):
    """
    air extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016000"]
    class_class_curie: ClassVar[str] = "MIXS:0016000"
    class_name: ClassVar[str] = "Air"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.Air

    samp_name: str = None
    project_name: str = None
    alt: str = None
    elev: Optional[str] = None
    barometric_press: Optional[str] = None
    carb_dioxide: Optional[str] = None
    carb_monoxide: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    humidity: Optional[str] = None
    methane: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    oxygen: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    pollutants: Optional[Union[str, List[str]]] = empty_list()
    air_PM_concen: Optional[Union[str, List[str]]] = empty_list()
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    solar_irradiance: Optional[Union[str, List[str]]] = empty_list()
    temp: Optional[str] = None
    ventilation_rate: Optional[str] = None
    ventilation_type: Optional[Union[str, List[str]]] = empty_list()
    volatile_org_comp: Optional[Union[str, List[str]]] = empty_list()
    wind_direction: Optional[str] = None
    wind_speed: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.alt):
            self.MissingRequiredField("alt")
        if not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.barometric_press is not None and not isinstance(self.barometric_press, str):
            self.barometric_press = str(self.barometric_press)

        if self.carb_dioxide is not None and not isinstance(self.carb_dioxide, str):
            self.carb_dioxide = str(self.carb_dioxide)

        if self.carb_monoxide is not None and not isinstance(self.carb_monoxide, str):
            self.carb_monoxide = str(self.carb_monoxide)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if self.humidity is not None and not isinstance(self.humidity, str):
            self.humidity = str(self.humidity)

        if self.methane is not None and not isinstance(self.methane, str):
            self.methane = str(self.methane)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.oxygen is not None and not isinstance(self.oxygen, str):
            self.oxygen = str(self.oxygen)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if not isinstance(self.pollutants, list):
            self.pollutants = [self.pollutants] if self.pollutants is not None else []
        self.pollutants = [v if isinstance(v, str) else str(v) for v in self.pollutants]

        if not isinstance(self.air_PM_concen, list):
            self.air_PM_concen = [self.air_PM_concen] if self.air_PM_concen is not None else []
        self.air_PM_concen = [v if isinstance(v, str) else str(v) for v in self.air_PM_concen]

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if not isinstance(self.solar_irradiance, list):
            self.solar_irradiance = [self.solar_irradiance] if self.solar_irradiance is not None else []
        self.solar_irradiance = [v if isinstance(v, str) else str(v) for v in self.solar_irradiance]

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.ventilation_rate is not None and not isinstance(self.ventilation_rate, str):
            self.ventilation_rate = str(self.ventilation_rate)

        if not isinstance(self.ventilation_type, list):
            self.ventilation_type = [self.ventilation_type] if self.ventilation_type is not None else []
        self.ventilation_type = [v if isinstance(v, str) else str(v) for v in self.ventilation_type]

        if not isinstance(self.volatile_org_comp, list):
            self.volatile_org_comp = [self.volatile_org_comp] if self.volatile_org_comp is not None else []
        self.volatile_org_comp = [v if isinstance(v, str) else str(v) for v in self.volatile_org_comp]

        if self.wind_direction is not None and not isinstance(self.wind_direction, str):
            self.wind_direction = str(self.wind_direction)

        if self.wind_speed is not None and not isinstance(self.wind_speed, str):
            self.wind_speed = str(self.wind_speed)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        super().__post_init__(**kwargs)


@dataclass
class BuiltEnvironment(Extension):
    """
    built environment extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016001"]
    class_class_curie: ClassVar[str] = "MIXS:0016001"
    class_name: ClassVar[str] = "BuiltEnvironment"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.BuiltEnvironment

    samp_name: str = None
    project_name: str = None
    surf_material: Union[str, "SURFMATERIALENUM"] = None
    rel_air_humidity: float = None
    abs_air_humidity: str = None
    air_temp: str = None
    build_occup_type: Union[Union[str, "BUILDOCCUPTYPEENUM"], List[Union[str, "BUILDOCCUPTYPEENUM"]]] = None
    carb_dioxide: str = None
    ventilation_type: Union[str, List[str]] = None
    organism_count: Union[str, List[str]] = None
    indoor_space: Union[str, "INDOORSPACEENUM"] = None
    indoor_surf: Union[str, "INDOORSURFENUM"] = None
    filter_type: Union[Union[str, "FILTERTYPEENUM"], List[Union[str, "FILTERTYPEENUM"]]] = None
    heat_cool_type: Union[Union[str, "HEATCOOLTYPEENUM"], List[Union[str, "HEATCOOLTYPEENUM"]]] = None
    building_setting: Union[str, "BUILDINGSETTINGENUM"] = None
    light_type: Union[Union[str, "LIGHTTYPEENUM"], List[Union[str, "LIGHTTYPEENUM"]]] = None
    space_typ_state: Union[str, "SPACETYPSTATEENUM"] = None
    typ_occup_density: float = None
    occup_samp: float = None
    occup_density_samp: float = None
    surf_air_cont: Optional[Union[Union[str, "SURFAIRCONTENUM"], List[Union[str, "SURFAIRCONTENUM"]]]] = empty_list()
    surf_humidity: Optional[float] = None
    surf_temp: Optional[str] = None
    surf_moisture_ph: Optional[float] = None
    surf_moisture: Optional[str] = None
    dew_point: Optional[str] = None
    substructure_type: Optional[Union[Union[str, "SUBSTRUCTURETYPEENUM"], List[Union[str, "SUBSTRUCTURETYPEENUM"]]]] = empty_list()
    samp_sort_meth: Optional[Union[str, List[str]]] = empty_list()
    address: Optional[str] = None
    adj_room: Optional[str] = None
    aero_struc: Optional[Union[str, "AEROSTRUCENUM"]] = None
    amount_light: Optional[str] = None
    arch_struc: Optional[Union[str, "ARCHSTRUCENUM"]] = None
    avg_occup: Optional[float] = None
    avg_dew_point: Optional[str] = None
    avg_temp: Optional[str] = None
    bathroom_count: Optional[int] = None
    bedroom_count: Optional[int] = None
    built_struc_age: Optional[str] = None
    built_struc_set: Optional[Union[str, "BUILTSTRUCSETENUM"]] = None
    built_struc_type: Optional[str] = None
    ceil_area: Optional[str] = None
    ceil_cond: Optional[Union[str, "SHAREDENUM3"]] = None
    ceil_finish_mat: Optional[Union[str, "CEILFINISHMATENUM"]] = None
    ceil_water_mold: Optional[Union[str, "SHAREDENUM1"]] = None
    ceil_struc: Optional[Union[str, "CEILSTRUCENUM"]] = None
    ceil_texture: Optional[Union[str, "SHAREDENUM4"]] = None
    ceil_thermal_mass: Optional[str] = None
    ceil_type: Optional[Union[str, "CEILTYPEENUM"]] = None
    cool_syst_id: Optional[int] = None
    date_last_rain: Optional[Union[str, XSDDateTime]] = None
    build_docs: Optional[Union[str, "BUILDDOCSENUM"]] = None
    door_size: Optional[str] = None
    door_cond: Optional[Union[str, "SHAREDENUM2"]] = None
    door_direct: Optional[Union[str, "DOORDIRECTENUM"]] = None
    door_loc: Optional[Union[str, "SHAREDENUM0"]] = None
    door_mat: Optional[Union[str, "DOORMATENUM"]] = None
    door_move: Optional[Union[str, "DOORMOVEENUM"]] = None
    door_water_mold: Optional[Union[str, "SHAREDENUM1"]] = None
    door_type: Optional[Union[str, "DOORTYPEENUM"]] = None
    door_comp_type: Optional[Union[str, "DOORCOMPTYPEENUM"]] = None
    door_type_metal: Optional[Union[str, "DOORTYPEMETALENUM"]] = None
    door_type_wood: Optional[str] = None
    drawings: Optional[Union[str, "DRAWINGSENUM"]] = None
    elevator: Optional[int] = None
    escalator: Optional[int] = None
    exp_duct: Optional[str] = None
    exp_pipe: Optional[str] = None
    ext_door: Optional[int] = None
    fireplace_type: Optional[Union[str, "FIREPLACETYPEENUM"]] = None
    floor_age: Optional[str] = None
    floor_area: Optional[str] = None
    floor_cond: Optional[Union[str, "SHAREDENUM3"]] = None
    floor_count: Optional[int] = None
    floor_finish_mat: Optional[str] = None
    floor_water_mold: Optional[Union[str, "FLOORWATERMOLDENUM"]] = None
    floor_struc: Optional[Union[str, "FLOORSTRUCENUM"]] = None
    floor_thermal_mass: Optional[str] = None
    freq_clean: Optional[Union[str, "FREQCLEANENUM"]] = None
    freq_cook: Optional[str] = None
    furniture: Optional[Union[str, "FURNITUREENUM"]] = None
    gender_restroom: Optional[Union[str, "GENDERRESTROOMENUM"]] = None
    hall_count: Optional[int] = None
    handidness: Optional[Union[str, "HANDIDNESSENUM"]] = None
    heat_deliv_loc: Optional[Union[str, "SHAREDENUM0"]] = None
    heat_sys_deliv_meth: Optional[Union[str, "HEATSYSDELIVMETHENUM"]] = None
    heat_system_id: Optional[int] = None
    height_carper_fiber: Optional[str] = None
    inside_lux: Optional[str] = None
    int_wall_cond: Optional[Union[str, "SHAREDENUM3"]] = None
    last_clean: Optional[Union[str, XSDDateTime]] = None
    max_occup: Optional[str] = None
    mech_struc: Optional[Union[str, "MECHSTRUCENUM"]] = None
    number_plants: Optional[str] = None
    number_pets: Optional[str] = None
    number_resident: Optional[str] = None
    occup_document: Optional[Union[str, "OCCUPDOCUMENTENUM"]] = None
    ext_wall_orient: Optional[Union[str, "SHAREDENUM0"]] = None
    ext_window_orient: Optional[Union[str, "SHAREDENUM0"]] = None
    rel_humidity_out: Optional[str] = None
    pres_animal_insect: Optional[str] = None
    quad_pos: Optional[Union[str, "QUADPOSENUM"]] = None
    rel_samp_loc: Optional[Union[str, "RELSAMPLOCENUM"]] = None
    room_air_exch_rate: Optional[str] = None
    room_architec_elem: Optional[str] = None
    room_condt: Optional[Union[str, "ROOMCONDTENUM"]] = None
    room_count: Optional[int] = None
    room_dim: Optional[str] = None
    room_door_dist: Optional[str] = None
    room_loc: Optional[Union[str, "ROOMLOCENUM"]] = None
    room_moist_dam_hist: Optional[int] = None
    room_net_area: Optional[str] = None
    room_occup: Optional[str] = None
    room_samp_pos: Optional[Union[str, "ROOMSAMPPOSENUM"]] = None
    room_type: Optional[str] = None
    room_vol: Optional[str] = None
    room_window_count: Optional[int] = None
    room_connected: Optional[Union[str, "ROOMCONNECTEDENUM"]] = None
    room_hallway: Optional[str] = None
    room_door_share: Optional[str] = None
    room_wall_share: Optional[str] = None
    samp_weather: Optional[Union[str, "SAMPWEATHERENUM"]] = None
    samp_floor: Optional[str] = None
    samp_room_id: Optional[int] = None
    samp_time_out: Optional[str] = None
    season: Optional[str] = None
    season_use: Optional[Union[str, "SEASONUSEENUM"]] = None
    shading_device_cond: Optional[Union[str, "SHAREDENUM2"]] = None
    shading_device_loc: Optional[Union[str, "SHADINGDEVICELOCENUM"]] = None
    shading_device_mat: Optional[str] = None
    shad_dev_water_mold: Optional[Union[str, "SHAREDENUM1"]] = None
    shading_device_type: Optional[Union[str, "SHADINGDEVICETYPEENUM"]] = None
    specific_humidity: Optional[str] = None
    specific: Optional[Union[str, "SPECIFICENUM"]] = None
    temp_out: Optional[str] = None
    train_line: Optional[Union[str, "TRAINLINEENUM"]] = None
    train_stat_loc: Optional[Union[str, "TRAINSTATLOCENUM"]] = None
    train_stop_loc: Optional[Union[str, "TRAINSTOPLOCENUM"]] = None
    vis_media: Optional[str] = None
    wall_area: Optional[str] = None
    wall_const_type: Optional[Union[str, "WALLCONSTTYPEENUM"]] = None
    wall_finish_mat: Optional[Union[str, "WALLFINISHMATENUM"]] = None
    wall_height: Optional[str] = None
    wall_loc: Optional[Union[str, "SHAREDENUM0"]] = None
    wall_water_mold: Optional[Union[str, "SHAREDENUM1"]] = None
    wall_surf_treatment: Optional[Union[str, "WALLSURFTREATMENTENUM"]] = None
    wall_texture: Optional[Union[str, "SHAREDENUM4"]] = None
    wall_thermal_mass: Optional[str] = None
    water_feat_size: Optional[str] = None
    water_feat_type: Optional[Union[str, "WATERFEATTYPEENUM"]] = None
    weekday: Optional[Union[str, "WEEKDAYENUM"]] = None
    window_size: Optional[str] = None
    window_cond: Optional[Union[str, "SHAREDENUM2"]] = None
    window_cover: Optional[Union[str, "WINDOWCOVERENUM"]] = None
    window_horiz_pos: Optional[Union[str, "WINDOWHORIZPOSENUM"]] = None
    window_loc: Optional[Union[str, "SHAREDENUM0"]] = None
    window_mat: Optional[Union[str, "WINDOWMATENUM"]] = None
    window_open_freq: Optional[int] = None
    window_water_mold: Optional[Union[str, "SHAREDENUM1"]] = None
    window_status: Optional[Union[str, "WINDOWSTATUSENUM"]] = None
    window_type: Optional[Union[str, "WINDOWTYPEENUM"]] = None
    window_vert_pos: Optional[Union[str, "WINDOWVERTPOSENUM"]] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.surf_material):
            self.MissingRequiredField("surf_material")
        if not isinstance(self.surf_material, SURFMATERIALENUM):
            self.surf_material = SURFMATERIALENUM(self.surf_material)

        if self._is_empty(self.rel_air_humidity):
            self.MissingRequiredField("rel_air_humidity")
        if not isinstance(self.rel_air_humidity, float):
            self.rel_air_humidity = float(self.rel_air_humidity)

        if self._is_empty(self.abs_air_humidity):
            self.MissingRequiredField("abs_air_humidity")
        if not isinstance(self.abs_air_humidity, str):
            self.abs_air_humidity = str(self.abs_air_humidity)

        if self._is_empty(self.air_temp):
            self.MissingRequiredField("air_temp")
        if not isinstance(self.air_temp, str):
            self.air_temp = str(self.air_temp)

        if self._is_empty(self.build_occup_type):
            self.MissingRequiredField("build_occup_type")
        if not isinstance(self.build_occup_type, list):
            self.build_occup_type = [self.build_occup_type] if self.build_occup_type is not None else []
        self.build_occup_type = [v if isinstance(v, BUILDOCCUPTYPEENUM) else BUILDOCCUPTYPEENUM(v) for v in self.build_occup_type]

        if self._is_empty(self.carb_dioxide):
            self.MissingRequiredField("carb_dioxide")
        if not isinstance(self.carb_dioxide, str):
            self.carb_dioxide = str(self.carb_dioxide)

        if self._is_empty(self.ventilation_type):
            self.MissingRequiredField("ventilation_type")
        if not isinstance(self.ventilation_type, list):
            self.ventilation_type = [self.ventilation_type] if self.ventilation_type is not None else []
        self.ventilation_type = [v if isinstance(v, str) else str(v) for v in self.ventilation_type]

        if self._is_empty(self.organism_count):
            self.MissingRequiredField("organism_count")
        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self._is_empty(self.indoor_space):
            self.MissingRequiredField("indoor_space")
        if not isinstance(self.indoor_space, INDOORSPACEENUM):
            self.indoor_space = INDOORSPACEENUM(self.indoor_space)

        if self._is_empty(self.indoor_surf):
            self.MissingRequiredField("indoor_surf")
        if not isinstance(self.indoor_surf, INDOORSURFENUM):
            self.indoor_surf = INDOORSURFENUM(self.indoor_surf)

        if self._is_empty(self.filter_type):
            self.MissingRequiredField("filter_type")
        if not isinstance(self.filter_type, list):
            self.filter_type = [self.filter_type] if self.filter_type is not None else []
        self.filter_type = [v if isinstance(v, FILTERTYPEENUM) else FILTERTYPEENUM(v) for v in self.filter_type]

        if self._is_empty(self.heat_cool_type):
            self.MissingRequiredField("heat_cool_type")
        if not isinstance(self.heat_cool_type, list):
            self.heat_cool_type = [self.heat_cool_type] if self.heat_cool_type is not None else []
        self.heat_cool_type = [v if isinstance(v, HEATCOOLTYPEENUM) else HEATCOOLTYPEENUM(v) for v in self.heat_cool_type]

        if self._is_empty(self.building_setting):
            self.MissingRequiredField("building_setting")
        if not isinstance(self.building_setting, BUILDINGSETTINGENUM):
            self.building_setting = BUILDINGSETTINGENUM(self.building_setting)

        if self._is_empty(self.light_type):
            self.MissingRequiredField("light_type")
        if not isinstance(self.light_type, list):
            self.light_type = [self.light_type] if self.light_type is not None else []
        self.light_type = [v if isinstance(v, LIGHTTYPEENUM) else LIGHTTYPEENUM(v) for v in self.light_type]

        if self._is_empty(self.space_typ_state):
            self.MissingRequiredField("space_typ_state")
        if not isinstance(self.space_typ_state, SPACETYPSTATEENUM):
            self.space_typ_state = SPACETYPSTATEENUM(self.space_typ_state)

        if self._is_empty(self.typ_occup_density):
            self.MissingRequiredField("typ_occup_density")
        if not isinstance(self.typ_occup_density, float):
            self.typ_occup_density = float(self.typ_occup_density)

        if self._is_empty(self.occup_samp):
            self.MissingRequiredField("occup_samp")
        if not isinstance(self.occup_samp, float):
            self.occup_samp = float(self.occup_samp)

        if self._is_empty(self.occup_density_samp):
            self.MissingRequiredField("occup_density_samp")
        if not isinstance(self.occup_density_samp, float):
            self.occup_density_samp = float(self.occup_density_samp)

        if not isinstance(self.surf_air_cont, list):
            self.surf_air_cont = [self.surf_air_cont] if self.surf_air_cont is not None else []
        self.surf_air_cont = [v if isinstance(v, SURFAIRCONTENUM) else SURFAIRCONTENUM(v) for v in self.surf_air_cont]

        if self.surf_humidity is not None and not isinstance(self.surf_humidity, float):
            self.surf_humidity = float(self.surf_humidity)

        if self.surf_temp is not None and not isinstance(self.surf_temp, str):
            self.surf_temp = str(self.surf_temp)

        if self.surf_moisture_ph is not None and not isinstance(self.surf_moisture_ph, float):
            self.surf_moisture_ph = float(self.surf_moisture_ph)

        if self.surf_moisture is not None and not isinstance(self.surf_moisture, str):
            self.surf_moisture = str(self.surf_moisture)

        if self.dew_point is not None and not isinstance(self.dew_point, str):
            self.dew_point = str(self.dew_point)

        if not isinstance(self.substructure_type, list):
            self.substructure_type = [self.substructure_type] if self.substructure_type is not None else []
        self.substructure_type = [v if isinstance(v, SUBSTRUCTURETYPEENUM) else SUBSTRUCTURETYPEENUM(v) for v in self.substructure_type]

        if not isinstance(self.samp_sort_meth, list):
            self.samp_sort_meth = [self.samp_sort_meth] if self.samp_sort_meth is not None else []
        self.samp_sort_meth = [v if isinstance(v, str) else str(v) for v in self.samp_sort_meth]

        if self.address is not None and not isinstance(self.address, str):
            self.address = str(self.address)

        if self.adj_room is not None and not isinstance(self.adj_room, str):
            self.adj_room = str(self.adj_room)

        if self.aero_struc is not None and not isinstance(self.aero_struc, AEROSTRUCENUM):
            self.aero_struc = AEROSTRUCENUM(self.aero_struc)

        if self.amount_light is not None and not isinstance(self.amount_light, str):
            self.amount_light = str(self.amount_light)

        if self.arch_struc is not None and not isinstance(self.arch_struc, ARCHSTRUCENUM):
            self.arch_struc = ARCHSTRUCENUM(self.arch_struc)

        if self.avg_occup is not None and not isinstance(self.avg_occup, float):
            self.avg_occup = float(self.avg_occup)

        if self.avg_dew_point is not None and not isinstance(self.avg_dew_point, str):
            self.avg_dew_point = str(self.avg_dew_point)

        if self.avg_temp is not None and not isinstance(self.avg_temp, str):
            self.avg_temp = str(self.avg_temp)

        if self.bathroom_count is not None and not isinstance(self.bathroom_count, int):
            self.bathroom_count = int(self.bathroom_count)

        if self.bedroom_count is not None and not isinstance(self.bedroom_count, int):
            self.bedroom_count = int(self.bedroom_count)

        if self.built_struc_age is not None and not isinstance(self.built_struc_age, str):
            self.built_struc_age = str(self.built_struc_age)

        if self.built_struc_set is not None and not isinstance(self.built_struc_set, BUILTSTRUCSETENUM):
            self.built_struc_set = BUILTSTRUCSETENUM(self.built_struc_set)

        if self.built_struc_type is not None and not isinstance(self.built_struc_type, str):
            self.built_struc_type = str(self.built_struc_type)

        if self.ceil_area is not None and not isinstance(self.ceil_area, str):
            self.ceil_area = str(self.ceil_area)

        if self.ceil_cond is not None and not isinstance(self.ceil_cond, SHAREDENUM3):
            self.ceil_cond = SHAREDENUM3(self.ceil_cond)

        if self.ceil_finish_mat is not None and not isinstance(self.ceil_finish_mat, CEILFINISHMATENUM):
            self.ceil_finish_mat = CEILFINISHMATENUM(self.ceil_finish_mat)

        if self.ceil_water_mold is not None and not isinstance(self.ceil_water_mold, SHAREDENUM1):
            self.ceil_water_mold = SHAREDENUM1(self.ceil_water_mold)

        if self.ceil_struc is not None and not isinstance(self.ceil_struc, CEILSTRUCENUM):
            self.ceil_struc = CEILSTRUCENUM(self.ceil_struc)

        if self.ceil_texture is not None and not isinstance(self.ceil_texture, SHAREDENUM4):
            self.ceil_texture = SHAREDENUM4(self.ceil_texture)

        if self.ceil_thermal_mass is not None and not isinstance(self.ceil_thermal_mass, str):
            self.ceil_thermal_mass = str(self.ceil_thermal_mass)

        if self.ceil_type is not None and not isinstance(self.ceil_type, CEILTYPEENUM):
            self.ceil_type = CEILTYPEENUM(self.ceil_type)

        if self.cool_syst_id is not None and not isinstance(self.cool_syst_id, int):
            self.cool_syst_id = int(self.cool_syst_id)

        if self.date_last_rain is not None and not isinstance(self.date_last_rain, XSDDateTime):
            self.date_last_rain = XSDDateTime(self.date_last_rain)

        if self.build_docs is not None and not isinstance(self.build_docs, BUILDDOCSENUM):
            self.build_docs = BUILDDOCSENUM(self.build_docs)

        if self.door_size is not None and not isinstance(self.door_size, str):
            self.door_size = str(self.door_size)

        if self.door_cond is not None and not isinstance(self.door_cond, SHAREDENUM2):
            self.door_cond = SHAREDENUM2(self.door_cond)

        if self.door_direct is not None and not isinstance(self.door_direct, DOORDIRECTENUM):
            self.door_direct = DOORDIRECTENUM(self.door_direct)

        if self.door_loc is not None and not isinstance(self.door_loc, SHAREDENUM0):
            self.door_loc = SHAREDENUM0(self.door_loc)

        if self.door_mat is not None and not isinstance(self.door_mat, DOORMATENUM):
            self.door_mat = DOORMATENUM(self.door_mat)

        if self.door_move is not None and not isinstance(self.door_move, DOORMOVEENUM):
            self.door_move = DOORMOVEENUM(self.door_move)

        if self.door_water_mold is not None and not isinstance(self.door_water_mold, SHAREDENUM1):
            self.door_water_mold = SHAREDENUM1(self.door_water_mold)

        if self.door_type is not None and not isinstance(self.door_type, DOORTYPEENUM):
            self.door_type = DOORTYPEENUM(self.door_type)

        if self.door_comp_type is not None and not isinstance(self.door_comp_type, DOORCOMPTYPEENUM):
            self.door_comp_type = DOORCOMPTYPEENUM(self.door_comp_type)

        if self.door_type_metal is not None and not isinstance(self.door_type_metal, DOORTYPEMETALENUM):
            self.door_type_metal = DOORTYPEMETALENUM(self.door_type_metal)

        if self.door_type_wood is not None and not isinstance(self.door_type_wood, str):
            self.door_type_wood = str(self.door_type_wood)

        if self.drawings is not None and not isinstance(self.drawings, DRAWINGSENUM):
            self.drawings = DRAWINGSENUM(self.drawings)

        if self.elevator is not None and not isinstance(self.elevator, int):
            self.elevator = int(self.elevator)

        if self.escalator is not None and not isinstance(self.escalator, int):
            self.escalator = int(self.escalator)

        if self.exp_duct is not None and not isinstance(self.exp_duct, str):
            self.exp_duct = str(self.exp_duct)

        if self.exp_pipe is not None and not isinstance(self.exp_pipe, str):
            self.exp_pipe = str(self.exp_pipe)

        if self.ext_door is not None and not isinstance(self.ext_door, int):
            self.ext_door = int(self.ext_door)

        if self.fireplace_type is not None and not isinstance(self.fireplace_type, FIREPLACETYPEENUM):
            self.fireplace_type = FIREPLACETYPEENUM(self.fireplace_type)

        if self.floor_age is not None and not isinstance(self.floor_age, str):
            self.floor_age = str(self.floor_age)

        if self.floor_area is not None and not isinstance(self.floor_area, str):
            self.floor_area = str(self.floor_area)

        if self.floor_cond is not None and not isinstance(self.floor_cond, SHAREDENUM3):
            self.floor_cond = SHAREDENUM3(self.floor_cond)

        if self.floor_count is not None and not isinstance(self.floor_count, int):
            self.floor_count = int(self.floor_count)

        if self.floor_finish_mat is not None and not isinstance(self.floor_finish_mat, str):
            self.floor_finish_mat = str(self.floor_finish_mat)

        if self.floor_water_mold is not None and not isinstance(self.floor_water_mold, FLOORWATERMOLDENUM):
            self.floor_water_mold = FLOORWATERMOLDENUM(self.floor_water_mold)

        if self.floor_struc is not None and not isinstance(self.floor_struc, FLOORSTRUCENUM):
            self.floor_struc = FLOORSTRUCENUM(self.floor_struc)

        if self.floor_thermal_mass is not None and not isinstance(self.floor_thermal_mass, str):
            self.floor_thermal_mass = str(self.floor_thermal_mass)

        if self.freq_clean is not None and not isinstance(self.freq_clean, FREQCLEANENUM):
            self.freq_clean = FREQCLEANENUM(self.freq_clean)

        if self.freq_cook is not None and not isinstance(self.freq_cook, str):
            self.freq_cook = str(self.freq_cook)

        if self.furniture is not None and not isinstance(self.furniture, FURNITUREENUM):
            self.furniture = FURNITUREENUM(self.furniture)

        if self.gender_restroom is not None and not isinstance(self.gender_restroom, GENDERRESTROOMENUM):
            self.gender_restroom = GENDERRESTROOMENUM(self.gender_restroom)

        if self.hall_count is not None and not isinstance(self.hall_count, int):
            self.hall_count = int(self.hall_count)

        if self.handidness is not None and not isinstance(self.handidness, HANDIDNESSENUM):
            self.handidness = HANDIDNESSENUM(self.handidness)

        if self.heat_deliv_loc is not None and not isinstance(self.heat_deliv_loc, SHAREDENUM0):
            self.heat_deliv_loc = SHAREDENUM0(self.heat_deliv_loc)

        if self.heat_sys_deliv_meth is not None and not isinstance(self.heat_sys_deliv_meth, HEATSYSDELIVMETHENUM):
            self.heat_sys_deliv_meth = HEATSYSDELIVMETHENUM(self.heat_sys_deliv_meth)

        if self.heat_system_id is not None and not isinstance(self.heat_system_id, int):
            self.heat_system_id = int(self.heat_system_id)

        if self.height_carper_fiber is not None and not isinstance(self.height_carper_fiber, str):
            self.height_carper_fiber = str(self.height_carper_fiber)

        if self.inside_lux is not None and not isinstance(self.inside_lux, str):
            self.inside_lux = str(self.inside_lux)

        if self.int_wall_cond is not None and not isinstance(self.int_wall_cond, SHAREDENUM3):
            self.int_wall_cond = SHAREDENUM3(self.int_wall_cond)

        if self.last_clean is not None and not isinstance(self.last_clean, XSDDateTime):
            self.last_clean = XSDDateTime(self.last_clean)

        if self.max_occup is not None and not isinstance(self.max_occup, str):
            self.max_occup = str(self.max_occup)

        if self.mech_struc is not None and not isinstance(self.mech_struc, MECHSTRUCENUM):
            self.mech_struc = MECHSTRUCENUM(self.mech_struc)

        if self.number_plants is not None and not isinstance(self.number_plants, str):
            self.number_plants = str(self.number_plants)

        if self.number_pets is not None and not isinstance(self.number_pets, str):
            self.number_pets = str(self.number_pets)

        if self.number_resident is not None and not isinstance(self.number_resident, str):
            self.number_resident = str(self.number_resident)

        if self.occup_document is not None and not isinstance(self.occup_document, OCCUPDOCUMENTENUM):
            self.occup_document = OCCUPDOCUMENTENUM(self.occup_document)

        if self.ext_wall_orient is not None and not isinstance(self.ext_wall_orient, SHAREDENUM0):
            self.ext_wall_orient = SHAREDENUM0(self.ext_wall_orient)

        if self.ext_window_orient is not None and not isinstance(self.ext_window_orient, SHAREDENUM0):
            self.ext_window_orient = SHAREDENUM0(self.ext_window_orient)

        if self.rel_humidity_out is not None and not isinstance(self.rel_humidity_out, str):
            self.rel_humidity_out = str(self.rel_humidity_out)

        if self.pres_animal_insect is not None and not isinstance(self.pres_animal_insect, str):
            self.pres_animal_insect = str(self.pres_animal_insect)

        if self.quad_pos is not None and not isinstance(self.quad_pos, QUADPOSENUM):
            self.quad_pos = QUADPOSENUM(self.quad_pos)

        if self.rel_samp_loc is not None and not isinstance(self.rel_samp_loc, RELSAMPLOCENUM):
            self.rel_samp_loc = RELSAMPLOCENUM(self.rel_samp_loc)

        if self.room_air_exch_rate is not None and not isinstance(self.room_air_exch_rate, str):
            self.room_air_exch_rate = str(self.room_air_exch_rate)

        if self.room_architec_elem is not None and not isinstance(self.room_architec_elem, str):
            self.room_architec_elem = str(self.room_architec_elem)

        if self.room_condt is not None and not isinstance(self.room_condt, ROOMCONDTENUM):
            self.room_condt = ROOMCONDTENUM(self.room_condt)

        if self.room_count is not None and not isinstance(self.room_count, int):
            self.room_count = int(self.room_count)

        if self.room_dim is not None and not isinstance(self.room_dim, str):
            self.room_dim = str(self.room_dim)

        if self.room_door_dist is not None and not isinstance(self.room_door_dist, str):
            self.room_door_dist = str(self.room_door_dist)

        if self.room_loc is not None and not isinstance(self.room_loc, ROOMLOCENUM):
            self.room_loc = ROOMLOCENUM(self.room_loc)

        if self.room_moist_dam_hist is not None and not isinstance(self.room_moist_dam_hist, int):
            self.room_moist_dam_hist = int(self.room_moist_dam_hist)

        if self.room_net_area is not None and not isinstance(self.room_net_area, str):
            self.room_net_area = str(self.room_net_area)

        if self.room_occup is not None and not isinstance(self.room_occup, str):
            self.room_occup = str(self.room_occup)

        if self.room_samp_pos is not None and not isinstance(self.room_samp_pos, ROOMSAMPPOSENUM):
            self.room_samp_pos = ROOMSAMPPOSENUM(self.room_samp_pos)

        if self.room_type is not None and not isinstance(self.room_type, str):
            self.room_type = str(self.room_type)

        if self.room_vol is not None and not isinstance(self.room_vol, str):
            self.room_vol = str(self.room_vol)

        if self.room_window_count is not None and not isinstance(self.room_window_count, int):
            self.room_window_count = int(self.room_window_count)

        if self.room_connected is not None and not isinstance(self.room_connected, ROOMCONNECTEDENUM):
            self.room_connected = ROOMCONNECTEDENUM(self.room_connected)

        if self.room_hallway is not None and not isinstance(self.room_hallway, str):
            self.room_hallway = str(self.room_hallway)

        if self.room_door_share is not None and not isinstance(self.room_door_share, str):
            self.room_door_share = str(self.room_door_share)

        if self.room_wall_share is not None and not isinstance(self.room_wall_share, str):
            self.room_wall_share = str(self.room_wall_share)

        if self.samp_weather is not None and not isinstance(self.samp_weather, SAMPWEATHERENUM):
            self.samp_weather = SAMPWEATHERENUM(self.samp_weather)

        if self.samp_floor is not None and not isinstance(self.samp_floor, str):
            self.samp_floor = str(self.samp_floor)

        if self.samp_room_id is not None and not isinstance(self.samp_room_id, int):
            self.samp_room_id = int(self.samp_room_id)

        if self.samp_time_out is not None and not isinstance(self.samp_time_out, str):
            self.samp_time_out = str(self.samp_time_out)

        if self.season is not None and not isinstance(self.season, str):
            self.season = str(self.season)

        if self.season_use is not None and not isinstance(self.season_use, SEASONUSEENUM):
            self.season_use = SEASONUSEENUM(self.season_use)

        if self.shading_device_cond is not None and not isinstance(self.shading_device_cond, SHAREDENUM2):
            self.shading_device_cond = SHAREDENUM2(self.shading_device_cond)

        if self.shading_device_loc is not None and not isinstance(self.shading_device_loc, SHADINGDEVICELOCENUM):
            self.shading_device_loc = SHADINGDEVICELOCENUM(self.shading_device_loc)

        if self.shading_device_mat is not None and not isinstance(self.shading_device_mat, str):
            self.shading_device_mat = str(self.shading_device_mat)

        if self.shad_dev_water_mold is not None and not isinstance(self.shad_dev_water_mold, SHAREDENUM1):
            self.shad_dev_water_mold = SHAREDENUM1(self.shad_dev_water_mold)

        if self.shading_device_type is not None and not isinstance(self.shading_device_type, SHADINGDEVICETYPEENUM):
            self.shading_device_type = SHADINGDEVICETYPEENUM(self.shading_device_type)

        if self.specific_humidity is not None and not isinstance(self.specific_humidity, str):
            self.specific_humidity = str(self.specific_humidity)

        if self.specific is not None and not isinstance(self.specific, SPECIFICENUM):
            self.specific = SPECIFICENUM(self.specific)

        if self.temp_out is not None and not isinstance(self.temp_out, str):
            self.temp_out = str(self.temp_out)

        if self.train_line is not None and not isinstance(self.train_line, TRAINLINEENUM):
            self.train_line = TRAINLINEENUM(self.train_line)

        if self.train_stat_loc is not None and not isinstance(self.train_stat_loc, TRAINSTATLOCENUM):
            self.train_stat_loc = TRAINSTATLOCENUM(self.train_stat_loc)

        if self.train_stop_loc is not None and not isinstance(self.train_stop_loc, TRAINSTOPLOCENUM):
            self.train_stop_loc = TRAINSTOPLOCENUM(self.train_stop_loc)

        if self.vis_media is not None and not isinstance(self.vis_media, str):
            self.vis_media = str(self.vis_media)

        if self.wall_area is not None and not isinstance(self.wall_area, str):
            self.wall_area = str(self.wall_area)

        if self.wall_const_type is not None and not isinstance(self.wall_const_type, WALLCONSTTYPEENUM):
            self.wall_const_type = WALLCONSTTYPEENUM(self.wall_const_type)

        if self.wall_finish_mat is not None and not isinstance(self.wall_finish_mat, WALLFINISHMATENUM):
            self.wall_finish_mat = WALLFINISHMATENUM(self.wall_finish_mat)

        if self.wall_height is not None and not isinstance(self.wall_height, str):
            self.wall_height = str(self.wall_height)

        if self.wall_loc is not None and not isinstance(self.wall_loc, SHAREDENUM0):
            self.wall_loc = SHAREDENUM0(self.wall_loc)

        if self.wall_water_mold is not None and not isinstance(self.wall_water_mold, SHAREDENUM1):
            self.wall_water_mold = SHAREDENUM1(self.wall_water_mold)

        if self.wall_surf_treatment is not None and not isinstance(self.wall_surf_treatment, WALLSURFTREATMENTENUM):
            self.wall_surf_treatment = WALLSURFTREATMENTENUM(self.wall_surf_treatment)

        if self.wall_texture is not None and not isinstance(self.wall_texture, SHAREDENUM4):
            self.wall_texture = SHAREDENUM4(self.wall_texture)

        if self.wall_thermal_mass is not None and not isinstance(self.wall_thermal_mass, str):
            self.wall_thermal_mass = str(self.wall_thermal_mass)

        if self.water_feat_size is not None and not isinstance(self.water_feat_size, str):
            self.water_feat_size = str(self.water_feat_size)

        if self.water_feat_type is not None and not isinstance(self.water_feat_type, WATERFEATTYPEENUM):
            self.water_feat_type = WATERFEATTYPEENUM(self.water_feat_type)

        if self.weekday is not None and not isinstance(self.weekday, WEEKDAYENUM):
            self.weekday = WEEKDAYENUM(self.weekday)

        if self.window_size is not None and not isinstance(self.window_size, str):
            self.window_size = str(self.window_size)

        if self.window_cond is not None and not isinstance(self.window_cond, SHAREDENUM2):
            self.window_cond = SHAREDENUM2(self.window_cond)

        if self.window_cover is not None and not isinstance(self.window_cover, WINDOWCOVERENUM):
            self.window_cover = WINDOWCOVERENUM(self.window_cover)

        if self.window_horiz_pos is not None and not isinstance(self.window_horiz_pos, WINDOWHORIZPOSENUM):
            self.window_horiz_pos = WINDOWHORIZPOSENUM(self.window_horiz_pos)

        if self.window_loc is not None and not isinstance(self.window_loc, SHAREDENUM0):
            self.window_loc = SHAREDENUM0(self.window_loc)

        if self.window_mat is not None and not isinstance(self.window_mat, WINDOWMATENUM):
            self.window_mat = WINDOWMATENUM(self.window_mat)

        if self.window_open_freq is not None and not isinstance(self.window_open_freq, int):
            self.window_open_freq = int(self.window_open_freq)

        if self.window_water_mold is not None and not isinstance(self.window_water_mold, SHAREDENUM1):
            self.window_water_mold = SHAREDENUM1(self.window_water_mold)

        if self.window_status is not None and not isinstance(self.window_status, WINDOWSTATUSENUM):
            self.window_status = WINDOWSTATUSENUM(self.window_status)

        if self.window_type is not None and not isinstance(self.window_type, WINDOWTYPEENUM):
            self.window_type = WINDOWTYPEENUM(self.window_type)

        if self.window_vert_pos is not None and not isinstance(self.window_vert_pos, WINDOWVERTPOSENUM):
            self.window_vert_pos = WINDOWVERTPOSENUM(self.window_vert_pos)

        super().__post_init__(**kwargs)


@dataclass
class FoodAnimalAndAnimalFeed(Extension):
    """
    food-animal and animal feed extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016019"]
    class_class_curie: ClassVar[str] = "MIXS:0016019"
    class_name: ClassVar[str] = "FoodAnimalAndAnimalFeed"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.FoodAnimalAndAnimalFeed

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    geo_loc_name: str = None
    collection_date: Union[str, XSDDateTime] = None
    seq_meth: str = None
    coll_site_geo_feat: str = None
    food_origin: str = None
    food_prod: Union[str, List[str]] = None
    food_product_type: str = None
    IFSAC_category: Union[str, List[str]] = None
    intended_consumer: Union[str, List[str]] = None
    samp_purpose: str = None
    samp_size: Optional[str] = None
    samp_collect_device: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    nucl_acid_ext: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    spikein_count: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    pool_dna_extracts: Optional[str] = None
    temp: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_transport_cont: Optional[Union[str, "SAMPTRANSPORTCONTENUM"]] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    food_source: Optional[str] = None
    animal_am: Optional[str] = None
    animal_am_dur: Optional[str] = None
    animal_am_freq: Optional[float] = None
    animal_am_route: Optional[str] = None
    animal_am_use: Optional[str] = None
    animal_body_cond: Optional[Union[str, "ANIMALBODYCONDENUM"]] = None
    animal_diet: Optional[Union[str, List[str]]] = empty_list()
    animal_feed_equip: Optional[Union[str, List[str]]] = empty_list()
    animal_group_size: Optional[int] = None
    animal_housing: Optional[Union[str, List[str]]] = empty_list()
    animal_sex: Optional[Union[str, "ANIMALSEXENUM"]] = None
    bacterial_density: Optional[str] = None
    cons_food_stor_dur: Optional[str] = None
    cons_food_stor_temp: Optional[str] = None
    cons_purch_date: Optional[Union[str, XSDDateTime]] = None
    cons_qty_purchased: Optional[str] = None
    cult_isol_date: Optional[Union[str, XSDDateTime]] = None
    cult_result: Optional[Union[str, "CULTRESULTENUM"]] = None
    cult_result_org: Optional[Union[str, List[str]]] = empty_list()
    cult_target: Optional[Union[str, List[str]]] = empty_list()
    enrichment_protocol: Optional[str] = None
    food_additive: Optional[Union[str, List[str]]] = empty_list()
    food_contact_surf: Optional[Union[str, List[str]]] = empty_list()
    food_contain_wrap: Optional[str] = None
    food_cooking_proc: Optional[Union[str, List[str]]] = empty_list()
    food_dis_point: Optional[Union[str, List[str]]] = empty_list()
    food_dis_point_city: Optional[Union[str, List[str]]] = empty_list()
    food_ingredient: Optional[Union[str, List[str]]] = empty_list()
    food_pack_capacity: Optional[str] = None
    food_pack_integrity: Optional[Union[str, List[str]]] = empty_list()
    food_pack_medium: Optional[Union[str, List[str]]] = empty_list()
    food_preserv_proc: Optional[Union[str, List[str]]] = empty_list()
    food_prior_contact: Optional[Union[str, List[str]]] = empty_list()
    food_prod_synonym: Optional[Union[str, List[str]]] = empty_list()
    food_product_qual: Optional[str] = None
    food_quality_date: Optional[str] = None
    food_source_age: Optional[str] = None
    food_trace_list: Optional[Union[str, "FOODTRACELISTENUM"]] = None
    food_trav_mode: Optional[Union[str, List[str]]] = empty_list()
    food_trav_vehic: Optional[Union[str, List[str]]] = empty_list()
    food_treat_proc: Optional[Union[str, List[str]]] = empty_list()
    HACCP_term: Optional[Union[str, List[str]]] = empty_list()
    library_prep_kit: Optional[str] = None
    lot_number: Optional[Union[str, List[str]]] = empty_list()
    microb_cult_med: Optional[str] = None
    part_plant_animal: Optional[Union[str, List[str]]] = empty_list()
    repository_name: Optional[Union[str, List[str]]] = empty_list()
    samp_collect_method: Optional[str] = None
    samp_pooling: Optional[Union[str, List[str]]] = empty_list()
    samp_rep_biol: Optional[str] = None
    samp_rep_tech: Optional[str] = None
    samp_source_mat_cat: Optional[str] = None
    samp_stor_device: Optional[str] = None
    samp_stor_media: Optional[str] = None
    samp_transport_dur: Optional[str] = None
    samp_transport_temp: Optional[str] = None
    sequencing_kit: Optional[str] = None
    sequencing_location: Optional[str] = None
    serovar_or_serotype: Optional[Union[str, List[str]]] = empty_list()
    spikein_AMR: Optional[Union[str, List[str]]] = empty_list()
    spikein_antibiotic: Optional[Union[str, List[str]]] = empty_list()
    spikein_growth_med: Optional[Union[str, List[str]]] = empty_list()
    spikein_metal: Optional[Union[str, List[str]]] = empty_list()
    spikein_org: Optional[Union[str, List[str]]] = empty_list()
    spikein_serovar: Optional[Union[str, List[str]]] = empty_list()
    spikein_strain: Optional[Union[str, List[str]]] = empty_list()
    study_design: Optional[Union[str, List[str]]] = empty_list()
    study_inc_dur: Optional[str] = None
    study_inc_temp: Optional[str] = None
    study_timecourse: Optional[str] = None
    study_tmnt: Optional[Union[str, List[str]]] = empty_list()
    timepoint: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.coll_site_geo_feat):
            self.MissingRequiredField("coll_site_geo_feat")
        if not isinstance(self.coll_site_geo_feat, str):
            self.coll_site_geo_feat = str(self.coll_site_geo_feat)

        if self._is_empty(self.food_origin):
            self.MissingRequiredField("food_origin")
        if not isinstance(self.food_origin, str):
            self.food_origin = str(self.food_origin)

        if self._is_empty(self.food_prod):
            self.MissingRequiredField("food_prod")
        if not isinstance(self.food_prod, list):
            self.food_prod = [self.food_prod] if self.food_prod is not None else []
        self.food_prod = [v if isinstance(v, str) else str(v) for v in self.food_prod]

        if self._is_empty(self.food_product_type):
            self.MissingRequiredField("food_product_type")
        if not isinstance(self.food_product_type, str):
            self.food_product_type = str(self.food_product_type)

        if self._is_empty(self.IFSAC_category):
            self.MissingRequiredField("IFSAC_category")
        if not isinstance(self.IFSAC_category, list):
            self.IFSAC_category = [self.IFSAC_category] if self.IFSAC_category is not None else []
        self.IFSAC_category = [v if isinstance(v, str) else str(v) for v in self.IFSAC_category]

        if self._is_empty(self.intended_consumer):
            self.MissingRequiredField("intended_consumer")
        if not isinstance(self.intended_consumer, list):
            self.intended_consumer = [self.intended_consumer] if self.intended_consumer is not None else []
        self.intended_consumer = [v if isinstance(v, str) else str(v) for v in self.intended_consumer]

        if self._is_empty(self.samp_purpose):
            self.MissingRequiredField("samp_purpose")
        if not isinstance(self.samp_purpose, str):
            self.samp_purpose = str(self.samp_purpose)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.spikein_count is not None and not isinstance(self.spikein_count, str):
            self.spikein_count = str(self.spikein_count)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.pool_dna_extracts is not None and not isinstance(self.pool_dna_extracts, str):
            self.pool_dna_extracts = str(self.pool_dna_extracts)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_transport_cont is not None and not isinstance(self.samp_transport_cont, SAMPTRANSPORTCONTENUM):
            self.samp_transport_cont = SAMPTRANSPORTCONTENUM(self.samp_transport_cont)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.food_source is not None and not isinstance(self.food_source, str):
            self.food_source = str(self.food_source)

        if self.animal_am is not None and not isinstance(self.animal_am, str):
            self.animal_am = str(self.animal_am)

        if self.animal_am_dur is not None and not isinstance(self.animal_am_dur, str):
            self.animal_am_dur = str(self.animal_am_dur)

        if self.animal_am_freq is not None and not isinstance(self.animal_am_freq, float):
            self.animal_am_freq = float(self.animal_am_freq)

        if self.animal_am_route is not None and not isinstance(self.animal_am_route, str):
            self.animal_am_route = str(self.animal_am_route)

        if self.animal_am_use is not None and not isinstance(self.animal_am_use, str):
            self.animal_am_use = str(self.animal_am_use)

        if self.animal_body_cond is not None and not isinstance(self.animal_body_cond, ANIMALBODYCONDENUM):
            self.animal_body_cond = ANIMALBODYCONDENUM(self.animal_body_cond)

        if not isinstance(self.animal_diet, list):
            self.animal_diet = [self.animal_diet] if self.animal_diet is not None else []
        self.animal_diet = [v if isinstance(v, str) else str(v) for v in self.animal_diet]

        if not isinstance(self.animal_feed_equip, list):
            self.animal_feed_equip = [self.animal_feed_equip] if self.animal_feed_equip is not None else []
        self.animal_feed_equip = [v if isinstance(v, str) else str(v) for v in self.animal_feed_equip]

        if self.animal_group_size is not None and not isinstance(self.animal_group_size, int):
            self.animal_group_size = int(self.animal_group_size)

        if not isinstance(self.animal_housing, list):
            self.animal_housing = [self.animal_housing] if self.animal_housing is not None else []
        self.animal_housing = [v if isinstance(v, str) else str(v) for v in self.animal_housing]

        if self.animal_sex is not None and not isinstance(self.animal_sex, ANIMALSEXENUM):
            self.animal_sex = ANIMALSEXENUM(self.animal_sex)

        if self.bacterial_density is not None and not isinstance(self.bacterial_density, str):
            self.bacterial_density = str(self.bacterial_density)

        if self.cons_food_stor_dur is not None and not isinstance(self.cons_food_stor_dur, str):
            self.cons_food_stor_dur = str(self.cons_food_stor_dur)

        if self.cons_food_stor_temp is not None and not isinstance(self.cons_food_stor_temp, str):
            self.cons_food_stor_temp = str(self.cons_food_stor_temp)

        if self.cons_purch_date is not None and not isinstance(self.cons_purch_date, XSDDateTime):
            self.cons_purch_date = XSDDateTime(self.cons_purch_date)

        if self.cons_qty_purchased is not None and not isinstance(self.cons_qty_purchased, str):
            self.cons_qty_purchased = str(self.cons_qty_purchased)

        if self.cult_isol_date is not None and not isinstance(self.cult_isol_date, XSDDateTime):
            self.cult_isol_date = XSDDateTime(self.cult_isol_date)

        if self.cult_result is not None and not isinstance(self.cult_result, CULTRESULTENUM):
            self.cult_result = CULTRESULTENUM(self.cult_result)

        if not isinstance(self.cult_result_org, list):
            self.cult_result_org = [self.cult_result_org] if self.cult_result_org is not None else []
        self.cult_result_org = [v if isinstance(v, str) else str(v) for v in self.cult_result_org]

        if not isinstance(self.cult_target, list):
            self.cult_target = [self.cult_target] if self.cult_target is not None else []
        self.cult_target = [v if isinstance(v, str) else str(v) for v in self.cult_target]

        if self.enrichment_protocol is not None and not isinstance(self.enrichment_protocol, str):
            self.enrichment_protocol = str(self.enrichment_protocol)

        if not isinstance(self.food_additive, list):
            self.food_additive = [self.food_additive] if self.food_additive is not None else []
        self.food_additive = [v if isinstance(v, str) else str(v) for v in self.food_additive]

        if not isinstance(self.food_contact_surf, list):
            self.food_contact_surf = [self.food_contact_surf] if self.food_contact_surf is not None else []
        self.food_contact_surf = [v if isinstance(v, str) else str(v) for v in self.food_contact_surf]

        if self.food_contain_wrap is not None and not isinstance(self.food_contain_wrap, str):
            self.food_contain_wrap = str(self.food_contain_wrap)

        if not isinstance(self.food_cooking_proc, list):
            self.food_cooking_proc = [self.food_cooking_proc] if self.food_cooking_proc is not None else []
        self.food_cooking_proc = [v if isinstance(v, str) else str(v) for v in self.food_cooking_proc]

        if not isinstance(self.food_dis_point, list):
            self.food_dis_point = [self.food_dis_point] if self.food_dis_point is not None else []
        self.food_dis_point = [v if isinstance(v, str) else str(v) for v in self.food_dis_point]

        if not isinstance(self.food_dis_point_city, list):
            self.food_dis_point_city = [self.food_dis_point_city] if self.food_dis_point_city is not None else []
        self.food_dis_point_city = [v if isinstance(v, str) else str(v) for v in self.food_dis_point_city]

        if not isinstance(self.food_ingredient, list):
            self.food_ingredient = [self.food_ingredient] if self.food_ingredient is not None else []
        self.food_ingredient = [v if isinstance(v, str) else str(v) for v in self.food_ingredient]

        if self.food_pack_capacity is not None and not isinstance(self.food_pack_capacity, str):
            self.food_pack_capacity = str(self.food_pack_capacity)

        if not isinstance(self.food_pack_integrity, list):
            self.food_pack_integrity = [self.food_pack_integrity] if self.food_pack_integrity is not None else []
        self.food_pack_integrity = [v if isinstance(v, str) else str(v) for v in self.food_pack_integrity]

        if not isinstance(self.food_pack_medium, list):
            self.food_pack_medium = [self.food_pack_medium] if self.food_pack_medium is not None else []
        self.food_pack_medium = [v if isinstance(v, str) else str(v) for v in self.food_pack_medium]

        if not isinstance(self.food_preserv_proc, list):
            self.food_preserv_proc = [self.food_preserv_proc] if self.food_preserv_proc is not None else []
        self.food_preserv_proc = [v if isinstance(v, str) else str(v) for v in self.food_preserv_proc]

        if not isinstance(self.food_prior_contact, list):
            self.food_prior_contact = [self.food_prior_contact] if self.food_prior_contact is not None else []
        self.food_prior_contact = [v if isinstance(v, str) else str(v) for v in self.food_prior_contact]

        if not isinstance(self.food_prod_synonym, list):
            self.food_prod_synonym = [self.food_prod_synonym] if self.food_prod_synonym is not None else []
        self.food_prod_synonym = [v if isinstance(v, str) else str(v) for v in self.food_prod_synonym]

        if self.food_product_qual is not None and not isinstance(self.food_product_qual, str):
            self.food_product_qual = str(self.food_product_qual)

        if self.food_quality_date is not None and not isinstance(self.food_quality_date, str):
            self.food_quality_date = str(self.food_quality_date)

        if self.food_source_age is not None and not isinstance(self.food_source_age, str):
            self.food_source_age = str(self.food_source_age)

        if self.food_trace_list is not None and not isinstance(self.food_trace_list, FOODTRACELISTENUM):
            self.food_trace_list = FOODTRACELISTENUM(self.food_trace_list)

        if not isinstance(self.food_trav_mode, list):
            self.food_trav_mode = [self.food_trav_mode] if self.food_trav_mode is not None else []
        self.food_trav_mode = [v if isinstance(v, str) else str(v) for v in self.food_trav_mode]

        if not isinstance(self.food_trav_vehic, list):
            self.food_trav_vehic = [self.food_trav_vehic] if self.food_trav_vehic is not None else []
        self.food_trav_vehic = [v if isinstance(v, str) else str(v) for v in self.food_trav_vehic]

        if not isinstance(self.food_treat_proc, list):
            self.food_treat_proc = [self.food_treat_proc] if self.food_treat_proc is not None else []
        self.food_treat_proc = [v if isinstance(v, str) else str(v) for v in self.food_treat_proc]

        if not isinstance(self.HACCP_term, list):
            self.HACCP_term = [self.HACCP_term] if self.HACCP_term is not None else []
        self.HACCP_term = [v if isinstance(v, str) else str(v) for v in self.HACCP_term]

        if self.library_prep_kit is not None and not isinstance(self.library_prep_kit, str):
            self.library_prep_kit = str(self.library_prep_kit)

        if not isinstance(self.lot_number, list):
            self.lot_number = [self.lot_number] if self.lot_number is not None else []
        self.lot_number = [v if isinstance(v, str) else str(v) for v in self.lot_number]

        if self.microb_cult_med is not None and not isinstance(self.microb_cult_med, str):
            self.microb_cult_med = str(self.microb_cult_med)

        if not isinstance(self.part_plant_animal, list):
            self.part_plant_animal = [self.part_plant_animal] if self.part_plant_animal is not None else []
        self.part_plant_animal = [v if isinstance(v, str) else str(v) for v in self.part_plant_animal]

        if not isinstance(self.repository_name, list):
            self.repository_name = [self.repository_name] if self.repository_name is not None else []
        self.repository_name = [v if isinstance(v, str) else str(v) for v in self.repository_name]

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.samp_pooling, list):
            self.samp_pooling = [self.samp_pooling] if self.samp_pooling is not None else []
        self.samp_pooling = [v if isinstance(v, str) else str(v) for v in self.samp_pooling]

        if self.samp_rep_biol is not None and not isinstance(self.samp_rep_biol, str):
            self.samp_rep_biol = str(self.samp_rep_biol)

        if self.samp_rep_tech is not None and not isinstance(self.samp_rep_tech, str):
            self.samp_rep_tech = str(self.samp_rep_tech)

        if self.samp_source_mat_cat is not None and not isinstance(self.samp_source_mat_cat, str):
            self.samp_source_mat_cat = str(self.samp_source_mat_cat)

        if self.samp_stor_device is not None and not isinstance(self.samp_stor_device, str):
            self.samp_stor_device = str(self.samp_stor_device)

        if self.samp_stor_media is not None and not isinstance(self.samp_stor_media, str):
            self.samp_stor_media = str(self.samp_stor_media)

        if self.samp_transport_dur is not None and not isinstance(self.samp_transport_dur, str):
            self.samp_transport_dur = str(self.samp_transport_dur)

        if self.samp_transport_temp is not None and not isinstance(self.samp_transport_temp, str):
            self.samp_transport_temp = str(self.samp_transport_temp)

        if self.sequencing_kit is not None and not isinstance(self.sequencing_kit, str):
            self.sequencing_kit = str(self.sequencing_kit)

        if self.sequencing_location is not None and not isinstance(self.sequencing_location, str):
            self.sequencing_location = str(self.sequencing_location)

        if not isinstance(self.serovar_or_serotype, list):
            self.serovar_or_serotype = [self.serovar_or_serotype] if self.serovar_or_serotype is not None else []
        self.serovar_or_serotype = [v if isinstance(v, str) else str(v) for v in self.serovar_or_serotype]

        if not isinstance(self.spikein_AMR, list):
            self.spikein_AMR = [self.spikein_AMR] if self.spikein_AMR is not None else []
        self.spikein_AMR = [v if isinstance(v, str) else str(v) for v in self.spikein_AMR]

        if not isinstance(self.spikein_antibiotic, list):
            self.spikein_antibiotic = [self.spikein_antibiotic] if self.spikein_antibiotic is not None else []
        self.spikein_antibiotic = [v if isinstance(v, str) else str(v) for v in self.spikein_antibiotic]

        if not isinstance(self.spikein_growth_med, list):
            self.spikein_growth_med = [self.spikein_growth_med] if self.spikein_growth_med is not None else []
        self.spikein_growth_med = [v if isinstance(v, str) else str(v) for v in self.spikein_growth_med]

        if not isinstance(self.spikein_metal, list):
            self.spikein_metal = [self.spikein_metal] if self.spikein_metal is not None else []
        self.spikein_metal = [v if isinstance(v, str) else str(v) for v in self.spikein_metal]

        if not isinstance(self.spikein_org, list):
            self.spikein_org = [self.spikein_org] if self.spikein_org is not None else []
        self.spikein_org = [v if isinstance(v, str) else str(v) for v in self.spikein_org]

        if not isinstance(self.spikein_serovar, list):
            self.spikein_serovar = [self.spikein_serovar] if self.spikein_serovar is not None else []
        self.spikein_serovar = [v if isinstance(v, str) else str(v) for v in self.spikein_serovar]

        if not isinstance(self.spikein_strain, list):
            self.spikein_strain = [self.spikein_strain] if self.spikein_strain is not None else []
        self.spikein_strain = [v if isinstance(v, str) else str(v) for v in self.spikein_strain]

        if not isinstance(self.study_design, list):
            self.study_design = [self.study_design] if self.study_design is not None else []
        self.study_design = [v if isinstance(v, str) else str(v) for v in self.study_design]

        if self.study_inc_dur is not None and not isinstance(self.study_inc_dur, str):
            self.study_inc_dur = str(self.study_inc_dur)

        if self.study_inc_temp is not None and not isinstance(self.study_inc_temp, str):
            self.study_inc_temp = str(self.study_inc_temp)

        if self.study_timecourse is not None and not isinstance(self.study_timecourse, str):
            self.study_timecourse = str(self.study_timecourse)

        if not isinstance(self.study_tmnt, list):
            self.study_tmnt = [self.study_tmnt] if self.study_tmnt is not None else []
        self.study_tmnt = [v if isinstance(v, str) else str(v) for v in self.study_tmnt]

        if self.timepoint is not None and not isinstance(self.timepoint, str):
            self.timepoint = str(self.timepoint)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        super().__post_init__(**kwargs)


@dataclass
class FoodFarmEnvironment(Extension):
    """
    food-farm environment extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016020"]
    class_class_curie: ClassVar[str] = "MIXS:0016020"
    class_name: ClassVar[str] = "FoodFarmEnvironment"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.FoodFarmEnvironment

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    geo_loc_name: str = None
    collection_date: Union[str, XSDDateTime] = None
    seq_meth: str = None
    depth: str = None
    biotic_regm: Union[str, List[str]] = None
    chem_administration: Union[str, List[str]] = None
    food_product_type: str = None
    samp_type: str = None
    IFSAC_category: Union[str, List[str]] = None
    samp_size: Optional[str] = None
    samp_collect_device: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    humidity: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    spikein_count: Optional[str] = None
    samp_store_temp: Optional[str] = None
    solar_irradiance: Optional[Union[str, List[str]]] = empty_list()
    ventilation_rate: Optional[str] = None
    samp_store_dur: Optional[str] = None
    wind_speed: Optional[str] = None
    salinity: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    previous_land_use: Optional[str] = None
    crop_rotation: Optional[str] = None
    soil_type_meth: Optional[str] = None
    tot_org_c_meth: Optional[str] = None
    tot_nitro_cont_meth: Optional[str] = None
    host_age: Optional[str] = None
    host_dry_mass: Optional[str] = None
    host_height: Optional[str] = None
    host_length: Optional[str] = None
    host_tot_mass: Optional[str] = None
    root_med_carbon: Optional[str] = None
    root_med_macronutr: Optional[str] = None
    root_med_micronutr: Optional[str] = None
    season_temp: Optional[str] = None
    season_precpt: Optional[str] = None
    tot_org_carb: Optional[str] = None
    tot_nitro_content: Optional[str] = None
    conduc: Optional[str] = None
    turbidity: Optional[str] = None
    size_frac_low: Optional[str] = None
    size_frac_up: Optional[str] = None
    temp: Optional[str] = None
    ventilation_type: Optional[Union[str, List[str]]] = empty_list()
    wind_direction: Optional[str] = None
    genetic_mod: Optional[str] = None
    host_phenotype: Optional[str] = None
    ph: Optional[float] = None
    ances_data: Optional[str] = None
    growth_habit: Optional[Union[str, "GROWTHHABITENUM"]] = None
    host_disease_stat: Optional[str] = None
    host_genotype: Optional[str] = None
    host_taxid: Optional[str] = None
    mechanical_damage: Optional[Union[str, List[str]]] = empty_list()
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    root_cond: Optional[str] = None
    root_med_ph: Optional[float] = None
    tillage: Optional[Union[Union[str, "TILLAGEENUM"], List[Union[str, "TILLAGEENUM"]]]] = empty_list()
    ph_meth: Optional[str] = None
    growth_medium: Optional[str] = None
    season: Optional[str] = None
    farm_water_source: Optional[Union[str, "FARMWATERSOURCEENUM"]] = None
    plant_water_method: Optional[str] = None
    air_PM_concen: Optional[Union[str, List[str]]] = empty_list()
    animal_feed_equip: Optional[Union[str, List[str]]] = empty_list()
    animal_intrusion: Optional[Union[str, List[str]]] = empty_list()
    anim_water_method: Optional[Union[str, List[str]]] = empty_list()
    crop_yield: Optional[str] = None
    cult_result: Optional[Union[str, "CULTRESULTENUM"]] = None
    cult_result_org: Optional[Union[str, List[str]]] = empty_list()
    cult_target: Optional[Union[str, List[str]]] = empty_list()
    plant_part_maturity: Optional[str] = None
    adjacent_environment: Optional[Union[str, List[str]]] = empty_list()
    water_source_adjac: Optional[Union[str, List[str]]] = empty_list()
    farm_equip_shared: Optional[Union[str, List[str]]] = empty_list()
    farm_equip_san: Optional[Union[str, List[str]]] = empty_list()
    farm_equip_san_freq: Optional[str] = None
    farm_equip: Optional[Union[str, List[str]]] = empty_list()
    fertilizer_admin: Optional[str] = None
    fertilizer_date: Optional[Union[str, XSDDateTime]] = None
    animal_group_size: Optional[int] = None
    animal_diet: Optional[Union[str, List[str]]] = empty_list()
    food_contact_surf: Optional[Union[str, List[str]]] = empty_list()
    food_contain_wrap: Optional[str] = None
    food_harvest_proc: Optional[Union[str, List[str]]] = empty_list()
    food_pack_medium: Optional[Union[str, List[str]]] = empty_list()
    food_preserv_proc: Optional[Union[str, List[str]]] = empty_list()
    food_prod_char: Optional[Union[str, List[str]]] = empty_list()
    prod_label_claims: Optional[Union[str, List[str]]] = empty_list()
    food_trav_mode: Optional[Union[str, List[str]]] = empty_list()
    food_trav_vehic: Optional[Union[str, List[str]]] = empty_list()
    food_source: Optional[str] = None
    food_treat_proc: Optional[Union[str, List[str]]] = empty_list()
    extr_weather_event: Optional[Union[Union[str, "EXTRWEATHEREVENTENUM"], List[Union[str, "EXTRWEATHEREVENTENUM"]]]] = empty_list()
    date_extr_weath: Optional[Union[Union[str, XSDDateTime], List[Union[str, XSDDateTime]]]] = empty_list()
    host_subspecf_genlin: Optional[Union[str, List[str]]] = empty_list()
    intended_consumer: Optional[Union[str, List[str]]] = empty_list()
    library_prep_kit: Optional[str] = None
    air_flow_impede: Optional[Union[str, List[str]]] = empty_list()
    lot_number: Optional[Union[str, List[str]]] = empty_list()
    season_humidity: Optional[float] = None
    part_plant_animal: Optional[Union[str, List[str]]] = empty_list()
    plant_growth_med: Optional[str] = None
    plant_reprod_crop: Optional[Union[Union[str, "PLANTREPRODCROPENUM"], List[Union[str, "PLANTREPRODCROPENUM"]]]] = empty_list()
    samp_purpose: Optional[str] = None
    repository_name: Optional[Union[str, List[str]]] = empty_list()
    samp_pooling: Optional[Union[str, List[str]]] = empty_list()
    samp_source_mat_cat: Optional[str] = None
    sequencing_kit: Optional[str] = None
    sequencing_location: Optional[str] = None
    serovar_or_serotype: Optional[Union[str, List[str]]] = empty_list()
    soil_conductivity: Optional[str] = None
    soil_cover: Optional[str] = None
    soil_pH: Optional[float] = None
    rel_location: Optional[str] = None
    soil_porosity: Optional[str] = None
    soil_temp: Optional[str] = None
    soil_texture_class: Optional[Union[str, "SOILTEXTURECLASSENUM"]] = None
    soil_texture_meth: Optional[str] = None
    soil_type: Optional[str] = None
    spikein_org: Optional[Union[str, List[str]]] = empty_list()
    spikein_serovar: Optional[Union[str, List[str]]] = empty_list()
    spikein_growth_med: Optional[Union[str, List[str]]] = empty_list()
    spikein_strain: Optional[Union[str, List[str]]] = empty_list()
    spikein_antibiotic: Optional[Union[str, List[str]]] = empty_list()
    spikein_metal: Optional[Union[str, List[str]]] = empty_list()
    timepoint: Optional[str] = None
    water_frequency: Optional[str] = None
    water_pH: Optional[float] = None
    water_source_shared: Optional[Union[str, List[str]]] = empty_list()
    enrichment_protocol: Optional[str] = None
    food_quality_date: Optional[str] = None
    animal_housing: Optional[Union[str, List[str]]] = empty_list()
    cult_isol_date: Optional[Union[str, XSDDateTime]] = None
    food_clean_proc: Optional[Union[str, "FOODCLEANPROCENUM"]] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.depth):
            self.MissingRequiredField("depth")
        if not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self._is_empty(self.biotic_regm):
            self.MissingRequiredField("biotic_regm")
        if not isinstance(self.biotic_regm, list):
            self.biotic_regm = [self.biotic_regm] if self.biotic_regm is not None else []
        self.biotic_regm = [v if isinstance(v, str) else str(v) for v in self.biotic_regm]

        if self._is_empty(self.chem_administration):
            self.MissingRequiredField("chem_administration")
        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if self._is_empty(self.food_product_type):
            self.MissingRequiredField("food_product_type")
        if not isinstance(self.food_product_type, str):
            self.food_product_type = str(self.food_product_type)

        if self._is_empty(self.samp_type):
            self.MissingRequiredField("samp_type")
        if not isinstance(self.samp_type, str):
            self.samp_type = str(self.samp_type)

        if self._is_empty(self.IFSAC_category):
            self.MissingRequiredField("IFSAC_category")
        if not isinstance(self.IFSAC_category, list):
            self.IFSAC_category = [self.IFSAC_category] if self.IFSAC_category is not None else []
        self.IFSAC_category = [v if isinstance(v, str) else str(v) for v in self.IFSAC_category]

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.humidity is not None and not isinstance(self.humidity, str):
            self.humidity = str(self.humidity)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.spikein_count is not None and not isinstance(self.spikein_count, str):
            self.spikein_count = str(self.spikein_count)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if not isinstance(self.solar_irradiance, list):
            self.solar_irradiance = [self.solar_irradiance] if self.solar_irradiance is not None else []
        self.solar_irradiance = [v if isinstance(v, str) else str(v) for v in self.solar_irradiance]

        if self.ventilation_rate is not None and not isinstance(self.ventilation_rate, str):
            self.ventilation_rate = str(self.ventilation_rate)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.wind_speed is not None and not isinstance(self.wind_speed, str):
            self.wind_speed = str(self.wind_speed)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.previous_land_use is not None and not isinstance(self.previous_land_use, str):
            self.previous_land_use = str(self.previous_land_use)

        if self.crop_rotation is not None and not isinstance(self.crop_rotation, str):
            self.crop_rotation = str(self.crop_rotation)

        if self.soil_type_meth is not None and not isinstance(self.soil_type_meth, str):
            self.soil_type_meth = str(self.soil_type_meth)

        if self.tot_org_c_meth is not None and not isinstance(self.tot_org_c_meth, str):
            self.tot_org_c_meth = str(self.tot_org_c_meth)

        if self.tot_nitro_cont_meth is not None and not isinstance(self.tot_nitro_cont_meth, str):
            self.tot_nitro_cont_meth = str(self.tot_nitro_cont_meth)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_dry_mass is not None and not isinstance(self.host_dry_mass, str):
            self.host_dry_mass = str(self.host_dry_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_length is not None and not isinstance(self.host_length, str):
            self.host_length = str(self.host_length)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.root_med_carbon is not None and not isinstance(self.root_med_carbon, str):
            self.root_med_carbon = str(self.root_med_carbon)

        if self.root_med_macronutr is not None and not isinstance(self.root_med_macronutr, str):
            self.root_med_macronutr = str(self.root_med_macronutr)

        if self.root_med_micronutr is not None and not isinstance(self.root_med_micronutr, str):
            self.root_med_micronutr = str(self.root_med_micronutr)

        if self.season_temp is not None and not isinstance(self.season_temp, str):
            self.season_temp = str(self.season_temp)

        if self.season_precpt is not None and not isinstance(self.season_precpt, str):
            self.season_precpt = str(self.season_precpt)

        if self.tot_org_carb is not None and not isinstance(self.tot_org_carb, str):
            self.tot_org_carb = str(self.tot_org_carb)

        if self.tot_nitro_content is not None and not isinstance(self.tot_nitro_content, str):
            self.tot_nitro_content = str(self.tot_nitro_content)

        if self.conduc is not None and not isinstance(self.conduc, str):
            self.conduc = str(self.conduc)

        if self.turbidity is not None and not isinstance(self.turbidity, str):
            self.turbidity = str(self.turbidity)

        if self.size_frac_low is not None and not isinstance(self.size_frac_low, str):
            self.size_frac_low = str(self.size_frac_low)

        if self.size_frac_up is not None and not isinstance(self.size_frac_up, str):
            self.size_frac_up = str(self.size_frac_up)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if not isinstance(self.ventilation_type, list):
            self.ventilation_type = [self.ventilation_type] if self.ventilation_type is not None else []
        self.ventilation_type = [v if isinstance(v, str) else str(v) for v in self.ventilation_type]

        if self.wind_direction is not None and not isinstance(self.wind_direction, str):
            self.wind_direction = str(self.wind_direction)

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if self.ances_data is not None and not isinstance(self.ances_data, str):
            self.ances_data = str(self.ances_data)

        if self.growth_habit is not None and not isinstance(self.growth_habit, GROWTHHABITENUM):
            self.growth_habit = GROWTHHABITENUM(self.growth_habit)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_taxid is not None and not isinstance(self.host_taxid, str):
            self.host_taxid = str(self.host_taxid)

        if not isinstance(self.mechanical_damage, list):
            self.mechanical_damage = [self.mechanical_damage] if self.mechanical_damage is not None else []
        self.mechanical_damage = [v if isinstance(v, str) else str(v) for v in self.mechanical_damage]

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.root_cond is not None and not isinstance(self.root_cond, str):
            self.root_cond = str(self.root_cond)

        if self.root_med_ph is not None and not isinstance(self.root_med_ph, float):
            self.root_med_ph = float(self.root_med_ph)

        if not isinstance(self.tillage, list):
            self.tillage = [self.tillage] if self.tillage is not None else []
        self.tillage = [v if isinstance(v, TILLAGEENUM) else TILLAGEENUM(v) for v in self.tillage]

        if self.ph_meth is not None and not isinstance(self.ph_meth, str):
            self.ph_meth = str(self.ph_meth)

        if self.growth_medium is not None and not isinstance(self.growth_medium, str):
            self.growth_medium = str(self.growth_medium)

        if self.season is not None and not isinstance(self.season, str):
            self.season = str(self.season)

        if self.farm_water_source is not None and not isinstance(self.farm_water_source, FARMWATERSOURCEENUM):
            self.farm_water_source = FARMWATERSOURCEENUM(self.farm_water_source)

        if self.plant_water_method is not None and not isinstance(self.plant_water_method, str):
            self.plant_water_method = str(self.plant_water_method)

        if not isinstance(self.air_PM_concen, list):
            self.air_PM_concen = [self.air_PM_concen] if self.air_PM_concen is not None else []
        self.air_PM_concen = [v if isinstance(v, str) else str(v) for v in self.air_PM_concen]

        if not isinstance(self.animal_feed_equip, list):
            self.animal_feed_equip = [self.animal_feed_equip] if self.animal_feed_equip is not None else []
        self.animal_feed_equip = [v if isinstance(v, str) else str(v) for v in self.animal_feed_equip]

        if not isinstance(self.animal_intrusion, list):
            self.animal_intrusion = [self.animal_intrusion] if self.animal_intrusion is not None else []
        self.animal_intrusion = [v if isinstance(v, str) else str(v) for v in self.animal_intrusion]

        if not isinstance(self.anim_water_method, list):
            self.anim_water_method = [self.anim_water_method] if self.anim_water_method is not None else []
        self.anim_water_method = [v if isinstance(v, str) else str(v) for v in self.anim_water_method]

        if self.crop_yield is not None and not isinstance(self.crop_yield, str):
            self.crop_yield = str(self.crop_yield)

        if self.cult_result is not None and not isinstance(self.cult_result, CULTRESULTENUM):
            self.cult_result = CULTRESULTENUM(self.cult_result)

        if not isinstance(self.cult_result_org, list):
            self.cult_result_org = [self.cult_result_org] if self.cult_result_org is not None else []
        self.cult_result_org = [v if isinstance(v, str) else str(v) for v in self.cult_result_org]

        if not isinstance(self.cult_target, list):
            self.cult_target = [self.cult_target] if self.cult_target is not None else []
        self.cult_target = [v if isinstance(v, str) else str(v) for v in self.cult_target]

        if self.plant_part_maturity is not None and not isinstance(self.plant_part_maturity, str):
            self.plant_part_maturity = str(self.plant_part_maturity)

        if not isinstance(self.adjacent_environment, list):
            self.adjacent_environment = [self.adjacent_environment] if self.adjacent_environment is not None else []
        self.adjacent_environment = [v if isinstance(v, str) else str(v) for v in self.adjacent_environment]

        if not isinstance(self.water_source_adjac, list):
            self.water_source_adjac = [self.water_source_adjac] if self.water_source_adjac is not None else []
        self.water_source_adjac = [v if isinstance(v, str) else str(v) for v in self.water_source_adjac]

        if not isinstance(self.farm_equip_shared, list):
            self.farm_equip_shared = [self.farm_equip_shared] if self.farm_equip_shared is not None else []
        self.farm_equip_shared = [v if isinstance(v, str) else str(v) for v in self.farm_equip_shared]

        if not isinstance(self.farm_equip_san, list):
            self.farm_equip_san = [self.farm_equip_san] if self.farm_equip_san is not None else []
        self.farm_equip_san = [v if isinstance(v, str) else str(v) for v in self.farm_equip_san]

        if self.farm_equip_san_freq is not None and not isinstance(self.farm_equip_san_freq, str):
            self.farm_equip_san_freq = str(self.farm_equip_san_freq)

        if not isinstance(self.farm_equip, list):
            self.farm_equip = [self.farm_equip] if self.farm_equip is not None else []
        self.farm_equip = [v if isinstance(v, str) else str(v) for v in self.farm_equip]

        if self.fertilizer_admin is not None and not isinstance(self.fertilizer_admin, str):
            self.fertilizer_admin = str(self.fertilizer_admin)

        if self.fertilizer_date is not None and not isinstance(self.fertilizer_date, XSDDateTime):
            self.fertilizer_date = XSDDateTime(self.fertilizer_date)

        if self.animal_group_size is not None and not isinstance(self.animal_group_size, int):
            self.animal_group_size = int(self.animal_group_size)

        if not isinstance(self.animal_diet, list):
            self.animal_diet = [self.animal_diet] if self.animal_diet is not None else []
        self.animal_diet = [v if isinstance(v, str) else str(v) for v in self.animal_diet]

        if not isinstance(self.food_contact_surf, list):
            self.food_contact_surf = [self.food_contact_surf] if self.food_contact_surf is not None else []
        self.food_contact_surf = [v if isinstance(v, str) else str(v) for v in self.food_contact_surf]

        if self.food_contain_wrap is not None and not isinstance(self.food_contain_wrap, str):
            self.food_contain_wrap = str(self.food_contain_wrap)

        if not isinstance(self.food_harvest_proc, list):
            self.food_harvest_proc = [self.food_harvest_proc] if self.food_harvest_proc is not None else []
        self.food_harvest_proc = [v if isinstance(v, str) else str(v) for v in self.food_harvest_proc]

        if not isinstance(self.food_pack_medium, list):
            self.food_pack_medium = [self.food_pack_medium] if self.food_pack_medium is not None else []
        self.food_pack_medium = [v if isinstance(v, str) else str(v) for v in self.food_pack_medium]

        if not isinstance(self.food_preserv_proc, list):
            self.food_preserv_proc = [self.food_preserv_proc] if self.food_preserv_proc is not None else []
        self.food_preserv_proc = [v if isinstance(v, str) else str(v) for v in self.food_preserv_proc]

        if not isinstance(self.food_prod_char, list):
            self.food_prod_char = [self.food_prod_char] if self.food_prod_char is not None else []
        self.food_prod_char = [v if isinstance(v, str) else str(v) for v in self.food_prod_char]

        if not isinstance(self.prod_label_claims, list):
            self.prod_label_claims = [self.prod_label_claims] if self.prod_label_claims is not None else []
        self.prod_label_claims = [v if isinstance(v, str) else str(v) for v in self.prod_label_claims]

        if not isinstance(self.food_trav_mode, list):
            self.food_trav_mode = [self.food_trav_mode] if self.food_trav_mode is not None else []
        self.food_trav_mode = [v if isinstance(v, str) else str(v) for v in self.food_trav_mode]

        if not isinstance(self.food_trav_vehic, list):
            self.food_trav_vehic = [self.food_trav_vehic] if self.food_trav_vehic is not None else []
        self.food_trav_vehic = [v if isinstance(v, str) else str(v) for v in self.food_trav_vehic]

        if self.food_source is not None and not isinstance(self.food_source, str):
            self.food_source = str(self.food_source)

        if not isinstance(self.food_treat_proc, list):
            self.food_treat_proc = [self.food_treat_proc] if self.food_treat_proc is not None else []
        self.food_treat_proc = [v if isinstance(v, str) else str(v) for v in self.food_treat_proc]

        if not isinstance(self.extr_weather_event, list):
            self.extr_weather_event = [self.extr_weather_event] if self.extr_weather_event is not None else []
        self.extr_weather_event = [v if isinstance(v, EXTRWEATHEREVENTENUM) else EXTRWEATHEREVENTENUM(v) for v in self.extr_weather_event]

        if not isinstance(self.date_extr_weath, list):
            self.date_extr_weath = [self.date_extr_weath] if self.date_extr_weath is not None else []
        self.date_extr_weath = [v if isinstance(v, XSDDateTime) else XSDDateTime(v) for v in self.date_extr_weath]

        if not isinstance(self.host_subspecf_genlin, list):
            self.host_subspecf_genlin = [self.host_subspecf_genlin] if self.host_subspecf_genlin is not None else []
        self.host_subspecf_genlin = [v if isinstance(v, str) else str(v) for v in self.host_subspecf_genlin]

        if not isinstance(self.intended_consumer, list):
            self.intended_consumer = [self.intended_consumer] if self.intended_consumer is not None else []
        self.intended_consumer = [v if isinstance(v, str) else str(v) for v in self.intended_consumer]

        if self.library_prep_kit is not None and not isinstance(self.library_prep_kit, str):
            self.library_prep_kit = str(self.library_prep_kit)

        if not isinstance(self.air_flow_impede, list):
            self.air_flow_impede = [self.air_flow_impede] if self.air_flow_impede is not None else []
        self.air_flow_impede = [v if isinstance(v, str) else str(v) for v in self.air_flow_impede]

        if not isinstance(self.lot_number, list):
            self.lot_number = [self.lot_number] if self.lot_number is not None else []
        self.lot_number = [v if isinstance(v, str) else str(v) for v in self.lot_number]

        if self.season_humidity is not None and not isinstance(self.season_humidity, float):
            self.season_humidity = float(self.season_humidity)

        if not isinstance(self.part_plant_animal, list):
            self.part_plant_animal = [self.part_plant_animal] if self.part_plant_animal is not None else []
        self.part_plant_animal = [v if isinstance(v, str) else str(v) for v in self.part_plant_animal]

        if self.plant_growth_med is not None and not isinstance(self.plant_growth_med, str):
            self.plant_growth_med = str(self.plant_growth_med)

        if not isinstance(self.plant_reprod_crop, list):
            self.plant_reprod_crop = [self.plant_reprod_crop] if self.plant_reprod_crop is not None else []
        self.plant_reprod_crop = [v if isinstance(v, PLANTREPRODCROPENUM) else PLANTREPRODCROPENUM(v) for v in self.plant_reprod_crop]

        if self.samp_purpose is not None and not isinstance(self.samp_purpose, str):
            self.samp_purpose = str(self.samp_purpose)

        if not isinstance(self.repository_name, list):
            self.repository_name = [self.repository_name] if self.repository_name is not None else []
        self.repository_name = [v if isinstance(v, str) else str(v) for v in self.repository_name]

        if not isinstance(self.samp_pooling, list):
            self.samp_pooling = [self.samp_pooling] if self.samp_pooling is not None else []
        self.samp_pooling = [v if isinstance(v, str) else str(v) for v in self.samp_pooling]

        if self.samp_source_mat_cat is not None and not isinstance(self.samp_source_mat_cat, str):
            self.samp_source_mat_cat = str(self.samp_source_mat_cat)

        if self.sequencing_kit is not None and not isinstance(self.sequencing_kit, str):
            self.sequencing_kit = str(self.sequencing_kit)

        if self.sequencing_location is not None and not isinstance(self.sequencing_location, str):
            self.sequencing_location = str(self.sequencing_location)

        if not isinstance(self.serovar_or_serotype, list):
            self.serovar_or_serotype = [self.serovar_or_serotype] if self.serovar_or_serotype is not None else []
        self.serovar_or_serotype = [v if isinstance(v, str) else str(v) for v in self.serovar_or_serotype]

        if self.soil_conductivity is not None and not isinstance(self.soil_conductivity, str):
            self.soil_conductivity = str(self.soil_conductivity)

        if self.soil_cover is not None and not isinstance(self.soil_cover, str):
            self.soil_cover = str(self.soil_cover)

        if self.soil_pH is not None and not isinstance(self.soil_pH, float):
            self.soil_pH = float(self.soil_pH)

        if self.rel_location is not None and not isinstance(self.rel_location, str):
            self.rel_location = str(self.rel_location)

        if self.soil_porosity is not None and not isinstance(self.soil_porosity, str):
            self.soil_porosity = str(self.soil_porosity)

        if self.soil_temp is not None and not isinstance(self.soil_temp, str):
            self.soil_temp = str(self.soil_temp)

        if self.soil_texture_class is not None and not isinstance(self.soil_texture_class, SOILTEXTURECLASSENUM):
            self.soil_texture_class = SOILTEXTURECLASSENUM(self.soil_texture_class)

        if self.soil_texture_meth is not None and not isinstance(self.soil_texture_meth, str):
            self.soil_texture_meth = str(self.soil_texture_meth)

        if self.soil_type is not None and not isinstance(self.soil_type, str):
            self.soil_type = str(self.soil_type)

        if not isinstance(self.spikein_org, list):
            self.spikein_org = [self.spikein_org] if self.spikein_org is not None else []
        self.spikein_org = [v if isinstance(v, str) else str(v) for v in self.spikein_org]

        if not isinstance(self.spikein_serovar, list):
            self.spikein_serovar = [self.spikein_serovar] if self.spikein_serovar is not None else []
        self.spikein_serovar = [v if isinstance(v, str) else str(v) for v in self.spikein_serovar]

        if not isinstance(self.spikein_growth_med, list):
            self.spikein_growth_med = [self.spikein_growth_med] if self.spikein_growth_med is not None else []
        self.spikein_growth_med = [v if isinstance(v, str) else str(v) for v in self.spikein_growth_med]

        if not isinstance(self.spikein_strain, list):
            self.spikein_strain = [self.spikein_strain] if self.spikein_strain is not None else []
        self.spikein_strain = [v if isinstance(v, str) else str(v) for v in self.spikein_strain]

        if not isinstance(self.spikein_antibiotic, list):
            self.spikein_antibiotic = [self.spikein_antibiotic] if self.spikein_antibiotic is not None else []
        self.spikein_antibiotic = [v if isinstance(v, str) else str(v) for v in self.spikein_antibiotic]

        if not isinstance(self.spikein_metal, list):
            self.spikein_metal = [self.spikein_metal] if self.spikein_metal is not None else []
        self.spikein_metal = [v if isinstance(v, str) else str(v) for v in self.spikein_metal]

        if self.timepoint is not None and not isinstance(self.timepoint, str):
            self.timepoint = str(self.timepoint)

        if self.water_frequency is not None and not isinstance(self.water_frequency, str):
            self.water_frequency = str(self.water_frequency)

        if self.water_pH is not None and not isinstance(self.water_pH, float):
            self.water_pH = float(self.water_pH)

        if not isinstance(self.water_source_shared, list):
            self.water_source_shared = [self.water_source_shared] if self.water_source_shared is not None else []
        self.water_source_shared = [v if isinstance(v, str) else str(v) for v in self.water_source_shared]

        if self.enrichment_protocol is not None and not isinstance(self.enrichment_protocol, str):
            self.enrichment_protocol = str(self.enrichment_protocol)

        if self.food_quality_date is not None and not isinstance(self.food_quality_date, str):
            self.food_quality_date = str(self.food_quality_date)

        if not isinstance(self.animal_housing, list):
            self.animal_housing = [self.animal_housing] if self.animal_housing is not None else []
        self.animal_housing = [v if isinstance(v, str) else str(v) for v in self.animal_housing]

        if self.cult_isol_date is not None and not isinstance(self.cult_isol_date, XSDDateTime):
            self.cult_isol_date = XSDDateTime(self.cult_isol_date)

        if self.food_clean_proc is not None and not isinstance(self.food_clean_proc, FOODCLEANPROCENUM):
            self.food_clean_proc = FOODCLEANPROCENUM(self.food_clean_proc)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        super().__post_init__(**kwargs)


@dataclass
class FoodFoodProductionFacility(Extension):
    """
    food-food production facility extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016021"]
    class_class_curie: ClassVar[str] = "MIXS:0016021"
    class_name: ClassVar[str] = "FoodFoodProductionFacility"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.FoodFoodProductionFacility

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    geo_loc_name: str = None
    collection_date: Union[str, XSDDateTime] = None
    seq_meth: str = None
    coll_site_geo_feat: str = None
    samp_source_mat_cat: str = None
    samp_type: str = None
    samp_stor_media: str = None
    samp_stor_device: str = None
    food_product_type: str = None
    IFSAC_category: Union[str, List[str]] = None
    food_product_qual: str = None
    food_contact_surf: Union[str, List[str]] = None
    samp_size: Optional[str] = None
    samp_collect_device: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    nucl_acid_ext: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_store_temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    air_temp: Optional[str] = None
    room_dim: Optional[str] = None
    freq_clean: Optional[Union[str, "FREQCLEANENUM"]] = None
    samp_room_id: Optional[int] = None
    samp_vol_we_dna_ext: Optional[str] = None
    pool_dna_extracts: Optional[str] = None
    samp_store_loc: Optional[str] = None
    surf_material: Optional[Union[str, "SURFMATERIALENUM"]] = None
    indoor_surf: Optional[Union[str, "INDOORSURFENUM"]] = None
    avg_occup: Optional[float] = None
    samp_floor: Optional[str] = None
    genetic_mod: Optional[str] = None
    facility_type: Optional[Union[Union[str, "FACILITYTYPEENUM"], List[Union[str, "FACILITYTYPEENUM"]]]] = empty_list()
    food_trav_mode: Optional[Union[str, List[str]]] = empty_list()
    food_trav_vehic: Optional[Union[str, List[str]]] = empty_list()
    samp_transport_dur: Optional[str] = None
    samp_transport_temp: Optional[str] = None
    samp_collect_method: Optional[str] = None
    num_samp_collect: Optional[str] = None
    lot_number: Optional[Union[str, List[str]]] = empty_list()
    hygienic_area: Optional[str] = None
    env_monitoring_zone: Optional[str] = None
    area_samp_size: Optional[str] = None
    samp_surf_moisture: Optional[Union[Union[str, "SAMPSURFMOISTUREENUM"], List[Union[str, "SAMPSURFMOISTUREENUM"]]]] = empty_list()
    samp_loc_condition: Optional[Union[str, "SAMPLOCCONDITIONENUM"]] = None
    biocide_used: Optional[Union[str, List[str]]] = empty_list()
    ster_meth_samp_room: Optional[Union[str, List[str]]] = empty_list()
    enrichment_protocol: Optional[str] = None
    cult_target: Optional[Union[str, List[str]]] = empty_list()
    microb_cult_med: Optional[str] = None
    timepoint: Optional[str] = None
    bacterial_density: Optional[str] = None
    cult_isol_date: Optional[Union[str, XSDDateTime]] = None
    cult_result: Optional[Union[str, "CULTRESULTENUM"]] = None
    cult_result_org: Optional[Union[str, List[str]]] = empty_list()
    subspecf_gen_lin: Optional[str] = None
    samp_pooling: Optional[Union[str, List[str]]] = empty_list()
    samp_purpose: Optional[str] = None
    samp_rep_tech: Optional[str] = None
    samp_rep_biol: Optional[str] = None
    samp_transport_cont: Optional[Union[str, "SAMPTRANSPORTCONTENUM"]] = None
    study_design: Optional[Union[str, List[str]]] = empty_list()
    nucl_acid_ext_kit: Optional[Union[str, List[str]]] = empty_list()
    library_prep_kit: Optional[str] = None
    sequencing_kit: Optional[str] = None
    sequencing_location: Optional[str] = None
    study_inc_temp: Optional[str] = None
    study_inc_dur: Optional[str] = None
    study_timecourse: Optional[str] = None
    study_tmnt: Optional[Union[str, List[str]]] = empty_list()
    food_source: Optional[str] = None
    food_dis_point: Optional[Union[str, List[str]]] = empty_list()
    food_dis_point_city: Optional[Union[str, List[str]]] = empty_list()
    food_origin: Optional[str] = None
    food_prod_synonym: Optional[Union[str, List[str]]] = empty_list()
    food_additive: Optional[Union[str, List[str]]] = empty_list()
    food_trace_list: Optional[Union[str, "FOODTRACELISTENUM"]] = None
    part_plant_animal: Optional[Union[str, List[str]]] = empty_list()
    food_ingredient: Optional[Union[str, List[str]]] = empty_list()
    spec_intended_cons: Optional[Union[str, List[str]]] = empty_list()
    HACCP_term: Optional[Union[str, List[str]]] = empty_list()
    dietary_claim_use: Optional[Union[str, List[str]]] = empty_list()
    food_allergen_label: Optional[Union[str, List[str]]] = empty_list()
    food_prod_char: Optional[Union[str, List[str]]] = empty_list()
    prod_label_claims: Optional[Union[str, List[str]]] = empty_list()
    food_name_status: Optional[str] = None
    food_preserv_proc: Optional[Union[str, List[str]]] = empty_list()
    food_cooking_proc: Optional[Union[str, List[str]]] = empty_list()
    food_treat_proc: Optional[Union[str, List[str]]] = empty_list()
    food_contain_wrap: Optional[str] = None
    food_pack_capacity: Optional[str] = None
    food_pack_medium: Optional[Union[str, List[str]]] = empty_list()
    food_prior_contact: Optional[Union[str, List[str]]] = empty_list()
    food_prod: Optional[Union[str, List[str]]] = empty_list()
    food_quality_date: Optional[str] = None
    repository_name: Optional[Union[str, List[str]]] = empty_list()
    intended_consumer: Optional[Union[str, List[str]]] = empty_list()
    food_pack_integrity: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.coll_site_geo_feat):
            self.MissingRequiredField("coll_site_geo_feat")
        if not isinstance(self.coll_site_geo_feat, str):
            self.coll_site_geo_feat = str(self.coll_site_geo_feat)

        if self._is_empty(self.samp_source_mat_cat):
            self.MissingRequiredField("samp_source_mat_cat")
        if not isinstance(self.samp_source_mat_cat, str):
            self.samp_source_mat_cat = str(self.samp_source_mat_cat)

        if self._is_empty(self.samp_type):
            self.MissingRequiredField("samp_type")
        if not isinstance(self.samp_type, str):
            self.samp_type = str(self.samp_type)

        if self._is_empty(self.samp_stor_media):
            self.MissingRequiredField("samp_stor_media")
        if not isinstance(self.samp_stor_media, str):
            self.samp_stor_media = str(self.samp_stor_media)

        if self._is_empty(self.samp_stor_device):
            self.MissingRequiredField("samp_stor_device")
        if not isinstance(self.samp_stor_device, str):
            self.samp_stor_device = str(self.samp_stor_device)

        if self._is_empty(self.food_product_type):
            self.MissingRequiredField("food_product_type")
        if not isinstance(self.food_product_type, str):
            self.food_product_type = str(self.food_product_type)

        if self._is_empty(self.IFSAC_category):
            self.MissingRequiredField("IFSAC_category")
        if not isinstance(self.IFSAC_category, list):
            self.IFSAC_category = [self.IFSAC_category] if self.IFSAC_category is not None else []
        self.IFSAC_category = [v if isinstance(v, str) else str(v) for v in self.IFSAC_category]

        if self._is_empty(self.food_product_qual):
            self.MissingRequiredField("food_product_qual")
        if not isinstance(self.food_product_qual, str):
            self.food_product_qual = str(self.food_product_qual)

        if self._is_empty(self.food_contact_surf):
            self.MissingRequiredField("food_contact_surf")
        if not isinstance(self.food_contact_surf, list):
            self.food_contact_surf = [self.food_contact_surf] if self.food_contact_surf is not None else []
        self.food_contact_surf = [v if isinstance(v, str) else str(v) for v in self.food_contact_surf]

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.air_temp is not None and not isinstance(self.air_temp, str):
            self.air_temp = str(self.air_temp)

        if self.room_dim is not None and not isinstance(self.room_dim, str):
            self.room_dim = str(self.room_dim)

        if self.freq_clean is not None and not isinstance(self.freq_clean, FREQCLEANENUM):
            self.freq_clean = FREQCLEANENUM(self.freq_clean)

        if self.samp_room_id is not None and not isinstance(self.samp_room_id, int):
            self.samp_room_id = int(self.samp_room_id)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.pool_dna_extracts is not None and not isinstance(self.pool_dna_extracts, str):
            self.pool_dna_extracts = str(self.pool_dna_extracts)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.surf_material is not None and not isinstance(self.surf_material, SURFMATERIALENUM):
            self.surf_material = SURFMATERIALENUM(self.surf_material)

        if self.indoor_surf is not None and not isinstance(self.indoor_surf, INDOORSURFENUM):
            self.indoor_surf = INDOORSURFENUM(self.indoor_surf)

        if self.avg_occup is not None and not isinstance(self.avg_occup, float):
            self.avg_occup = float(self.avg_occup)

        if self.samp_floor is not None and not isinstance(self.samp_floor, str):
            self.samp_floor = str(self.samp_floor)

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if not isinstance(self.facility_type, list):
            self.facility_type = [self.facility_type] if self.facility_type is not None else []
        self.facility_type = [v if isinstance(v, FACILITYTYPEENUM) else FACILITYTYPEENUM(v) for v in self.facility_type]

        if not isinstance(self.food_trav_mode, list):
            self.food_trav_mode = [self.food_trav_mode] if self.food_trav_mode is not None else []
        self.food_trav_mode = [v if isinstance(v, str) else str(v) for v in self.food_trav_mode]

        if not isinstance(self.food_trav_vehic, list):
            self.food_trav_vehic = [self.food_trav_vehic] if self.food_trav_vehic is not None else []
        self.food_trav_vehic = [v if isinstance(v, str) else str(v) for v in self.food_trav_vehic]

        if self.samp_transport_dur is not None and not isinstance(self.samp_transport_dur, str):
            self.samp_transport_dur = str(self.samp_transport_dur)

        if self.samp_transport_temp is not None and not isinstance(self.samp_transport_temp, str):
            self.samp_transport_temp = str(self.samp_transport_temp)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if self.num_samp_collect is not None and not isinstance(self.num_samp_collect, str):
            self.num_samp_collect = str(self.num_samp_collect)

        if not isinstance(self.lot_number, list):
            self.lot_number = [self.lot_number] if self.lot_number is not None else []
        self.lot_number = [v if isinstance(v, str) else str(v) for v in self.lot_number]

        if self.hygienic_area is not None and not isinstance(self.hygienic_area, str):
            self.hygienic_area = str(self.hygienic_area)

        if self.env_monitoring_zone is not None and not isinstance(self.env_monitoring_zone, str):
            self.env_monitoring_zone = str(self.env_monitoring_zone)

        if self.area_samp_size is not None and not isinstance(self.area_samp_size, str):
            self.area_samp_size = str(self.area_samp_size)

        if not isinstance(self.samp_surf_moisture, list):
            self.samp_surf_moisture = [self.samp_surf_moisture] if self.samp_surf_moisture is not None else []
        self.samp_surf_moisture = [v if isinstance(v, SAMPSURFMOISTUREENUM) else SAMPSURFMOISTUREENUM(v) for v in self.samp_surf_moisture]

        if self.samp_loc_condition is not None and not isinstance(self.samp_loc_condition, SAMPLOCCONDITIONENUM):
            self.samp_loc_condition = SAMPLOCCONDITIONENUM(self.samp_loc_condition)

        if not isinstance(self.biocide_used, list):
            self.biocide_used = [self.biocide_used] if self.biocide_used is not None else []
        self.biocide_used = [v if isinstance(v, str) else str(v) for v in self.biocide_used]

        if not isinstance(self.ster_meth_samp_room, list):
            self.ster_meth_samp_room = [self.ster_meth_samp_room] if self.ster_meth_samp_room is not None else []
        self.ster_meth_samp_room = [v if isinstance(v, str) else str(v) for v in self.ster_meth_samp_room]

        if self.enrichment_protocol is not None and not isinstance(self.enrichment_protocol, str):
            self.enrichment_protocol = str(self.enrichment_protocol)

        if not isinstance(self.cult_target, list):
            self.cult_target = [self.cult_target] if self.cult_target is not None else []
        self.cult_target = [v if isinstance(v, str) else str(v) for v in self.cult_target]

        if self.microb_cult_med is not None and not isinstance(self.microb_cult_med, str):
            self.microb_cult_med = str(self.microb_cult_med)

        if self.timepoint is not None and not isinstance(self.timepoint, str):
            self.timepoint = str(self.timepoint)

        if self.bacterial_density is not None and not isinstance(self.bacterial_density, str):
            self.bacterial_density = str(self.bacterial_density)

        if self.cult_isol_date is not None and not isinstance(self.cult_isol_date, XSDDateTime):
            self.cult_isol_date = XSDDateTime(self.cult_isol_date)

        if self.cult_result is not None and not isinstance(self.cult_result, CULTRESULTENUM):
            self.cult_result = CULTRESULTENUM(self.cult_result)

        if not isinstance(self.cult_result_org, list):
            self.cult_result_org = [self.cult_result_org] if self.cult_result_org is not None else []
        self.cult_result_org = [v if isinstance(v, str) else str(v) for v in self.cult_result_org]

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if not isinstance(self.samp_pooling, list):
            self.samp_pooling = [self.samp_pooling] if self.samp_pooling is not None else []
        self.samp_pooling = [v if isinstance(v, str) else str(v) for v in self.samp_pooling]

        if self.samp_purpose is not None and not isinstance(self.samp_purpose, str):
            self.samp_purpose = str(self.samp_purpose)

        if self.samp_rep_tech is not None and not isinstance(self.samp_rep_tech, str):
            self.samp_rep_tech = str(self.samp_rep_tech)

        if self.samp_rep_biol is not None and not isinstance(self.samp_rep_biol, str):
            self.samp_rep_biol = str(self.samp_rep_biol)

        if self.samp_transport_cont is not None and not isinstance(self.samp_transport_cont, SAMPTRANSPORTCONTENUM):
            self.samp_transport_cont = SAMPTRANSPORTCONTENUM(self.samp_transport_cont)

        if not isinstance(self.study_design, list):
            self.study_design = [self.study_design] if self.study_design is not None else []
        self.study_design = [v if isinstance(v, str) else str(v) for v in self.study_design]

        if not isinstance(self.nucl_acid_ext_kit, list):
            self.nucl_acid_ext_kit = [self.nucl_acid_ext_kit] if self.nucl_acid_ext_kit is not None else []
        self.nucl_acid_ext_kit = [v if isinstance(v, str) else str(v) for v in self.nucl_acid_ext_kit]

        if self.library_prep_kit is not None and not isinstance(self.library_prep_kit, str):
            self.library_prep_kit = str(self.library_prep_kit)

        if self.sequencing_kit is not None and not isinstance(self.sequencing_kit, str):
            self.sequencing_kit = str(self.sequencing_kit)

        if self.sequencing_location is not None and not isinstance(self.sequencing_location, str):
            self.sequencing_location = str(self.sequencing_location)

        if self.study_inc_temp is not None and not isinstance(self.study_inc_temp, str):
            self.study_inc_temp = str(self.study_inc_temp)

        if self.study_inc_dur is not None and not isinstance(self.study_inc_dur, str):
            self.study_inc_dur = str(self.study_inc_dur)

        if self.study_timecourse is not None and not isinstance(self.study_timecourse, str):
            self.study_timecourse = str(self.study_timecourse)

        if not isinstance(self.study_tmnt, list):
            self.study_tmnt = [self.study_tmnt] if self.study_tmnt is not None else []
        self.study_tmnt = [v if isinstance(v, str) else str(v) for v in self.study_tmnt]

        if self.food_source is not None and not isinstance(self.food_source, str):
            self.food_source = str(self.food_source)

        if not isinstance(self.food_dis_point, list):
            self.food_dis_point = [self.food_dis_point] if self.food_dis_point is not None else []
        self.food_dis_point = [v if isinstance(v, str) else str(v) for v in self.food_dis_point]

        if not isinstance(self.food_dis_point_city, list):
            self.food_dis_point_city = [self.food_dis_point_city] if self.food_dis_point_city is not None else []
        self.food_dis_point_city = [v if isinstance(v, str) else str(v) for v in self.food_dis_point_city]

        if self.food_origin is not None and not isinstance(self.food_origin, str):
            self.food_origin = str(self.food_origin)

        if not isinstance(self.food_prod_synonym, list):
            self.food_prod_synonym = [self.food_prod_synonym] if self.food_prod_synonym is not None else []
        self.food_prod_synonym = [v if isinstance(v, str) else str(v) for v in self.food_prod_synonym]

        if not isinstance(self.food_additive, list):
            self.food_additive = [self.food_additive] if self.food_additive is not None else []
        self.food_additive = [v if isinstance(v, str) else str(v) for v in self.food_additive]

        if self.food_trace_list is not None and not isinstance(self.food_trace_list, FOODTRACELISTENUM):
            self.food_trace_list = FOODTRACELISTENUM(self.food_trace_list)

        if not isinstance(self.part_plant_animal, list):
            self.part_plant_animal = [self.part_plant_animal] if self.part_plant_animal is not None else []
        self.part_plant_animal = [v if isinstance(v, str) else str(v) for v in self.part_plant_animal]

        if not isinstance(self.food_ingredient, list):
            self.food_ingredient = [self.food_ingredient] if self.food_ingredient is not None else []
        self.food_ingredient = [v if isinstance(v, str) else str(v) for v in self.food_ingredient]

        if not isinstance(self.spec_intended_cons, list):
            self.spec_intended_cons = [self.spec_intended_cons] if self.spec_intended_cons is not None else []
        self.spec_intended_cons = [v if isinstance(v, str) else str(v) for v in self.spec_intended_cons]

        if not isinstance(self.HACCP_term, list):
            self.HACCP_term = [self.HACCP_term] if self.HACCP_term is not None else []
        self.HACCP_term = [v if isinstance(v, str) else str(v) for v in self.HACCP_term]

        if not isinstance(self.dietary_claim_use, list):
            self.dietary_claim_use = [self.dietary_claim_use] if self.dietary_claim_use is not None else []
        self.dietary_claim_use = [v if isinstance(v, str) else str(v) for v in self.dietary_claim_use]

        if not isinstance(self.food_allergen_label, list):
            self.food_allergen_label = [self.food_allergen_label] if self.food_allergen_label is not None else []
        self.food_allergen_label = [v if isinstance(v, str) else str(v) for v in self.food_allergen_label]

        if not isinstance(self.food_prod_char, list):
            self.food_prod_char = [self.food_prod_char] if self.food_prod_char is not None else []
        self.food_prod_char = [v if isinstance(v, str) else str(v) for v in self.food_prod_char]

        if not isinstance(self.prod_label_claims, list):
            self.prod_label_claims = [self.prod_label_claims] if self.prod_label_claims is not None else []
        self.prod_label_claims = [v if isinstance(v, str) else str(v) for v in self.prod_label_claims]

        if self.food_name_status is not None and not isinstance(self.food_name_status, str):
            self.food_name_status = str(self.food_name_status)

        if not isinstance(self.food_preserv_proc, list):
            self.food_preserv_proc = [self.food_preserv_proc] if self.food_preserv_proc is not None else []
        self.food_preserv_proc = [v if isinstance(v, str) else str(v) for v in self.food_preserv_proc]

        if not isinstance(self.food_cooking_proc, list):
            self.food_cooking_proc = [self.food_cooking_proc] if self.food_cooking_proc is not None else []
        self.food_cooking_proc = [v if isinstance(v, str) else str(v) for v in self.food_cooking_proc]

        if not isinstance(self.food_treat_proc, list):
            self.food_treat_proc = [self.food_treat_proc] if self.food_treat_proc is not None else []
        self.food_treat_proc = [v if isinstance(v, str) else str(v) for v in self.food_treat_proc]

        if self.food_contain_wrap is not None and not isinstance(self.food_contain_wrap, str):
            self.food_contain_wrap = str(self.food_contain_wrap)

        if self.food_pack_capacity is not None and not isinstance(self.food_pack_capacity, str):
            self.food_pack_capacity = str(self.food_pack_capacity)

        if not isinstance(self.food_pack_medium, list):
            self.food_pack_medium = [self.food_pack_medium] if self.food_pack_medium is not None else []
        self.food_pack_medium = [v if isinstance(v, str) else str(v) for v in self.food_pack_medium]

        if not isinstance(self.food_prior_contact, list):
            self.food_prior_contact = [self.food_prior_contact] if self.food_prior_contact is not None else []
        self.food_prior_contact = [v if isinstance(v, str) else str(v) for v in self.food_prior_contact]

        if not isinstance(self.food_prod, list):
            self.food_prod = [self.food_prod] if self.food_prod is not None else []
        self.food_prod = [v if isinstance(v, str) else str(v) for v in self.food_prod]

        if self.food_quality_date is not None and not isinstance(self.food_quality_date, str):
            self.food_quality_date = str(self.food_quality_date)

        if not isinstance(self.repository_name, list):
            self.repository_name = [self.repository_name] if self.repository_name is not None else []
        self.repository_name = [v if isinstance(v, str) else str(v) for v in self.repository_name]

        if not isinstance(self.intended_consumer, list):
            self.intended_consumer = [self.intended_consumer] if self.intended_consumer is not None else []
        self.intended_consumer = [v if isinstance(v, str) else str(v) for v in self.intended_consumer]

        if not isinstance(self.food_pack_integrity, list):
            self.food_pack_integrity = [self.food_pack_integrity] if self.food_pack_integrity is not None else []
        self.food_pack_integrity = [v if isinstance(v, str) else str(v) for v in self.food_pack_integrity]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        super().__post_init__(**kwargs)


@dataclass
class FoodHumanFoods(Extension):
    """
    food-human foods extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016022"]
    class_class_curie: ClassVar[str] = "MIXS:0016022"
    class_name: ClassVar[str] = "FoodHumanFoods"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.FoodHumanFoods

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    geo_loc_name: str = None
    collection_date: Union[str, XSDDateTime] = None
    seq_meth: str = None
    coll_site_geo_feat: str = None
    food_product_type: str = None
    IFSAC_category: Union[str, List[str]] = None
    samp_size: Optional[str] = None
    samp_collect_device: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    nucl_acid_ext: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    spikein_count: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    pool_dna_extracts: Optional[str] = None
    temp: Optional[str] = None
    samp_store_loc: Optional[str] = None
    genetic_mod: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    ferm_chem_add: Optional[Union[str, List[str]]] = empty_list()
    ferm_chem_add_perc: Optional[Union[float, List[float]]] = empty_list()
    ferm_headspace_oxy: Optional[float] = None
    ferm_medium: Optional[str] = None
    ferm_pH: Optional[float] = None
    ferm_rel_humidity: Optional[str] = None
    ferm_temp: Optional[str] = None
    ferm_time: Optional[str] = None
    ferm_vessel: Optional[str] = None
    bacterial_density: Optional[str] = None
    cons_food_stor_dur: Optional[str] = None
    cons_food_stor_temp: Optional[str] = None
    cons_purch_date: Optional[Union[str, XSDDateTime]] = None
    cons_qty_purchased: Optional[str] = None
    cult_isol_date: Optional[Union[str, XSDDateTime]] = None
    cult_result: Optional[Union[str, "CULTRESULTENUM"]] = None
    cult_result_org: Optional[Union[str, List[str]]] = empty_list()
    cult_target: Optional[Union[str, List[str]]] = empty_list()
    dietary_claim_use: Optional[Union[str, List[str]]] = empty_list()
    enrichment_protocol: Optional[str] = None
    food_additive: Optional[Union[str, List[str]]] = empty_list()
    food_allergen_label: Optional[Union[str, List[str]]] = empty_list()
    food_contact_surf: Optional[Union[str, List[str]]] = empty_list()
    food_contain_wrap: Optional[str] = None
    food_cooking_proc: Optional[Union[str, List[str]]] = empty_list()
    food_dis_point: Optional[Union[str, List[str]]] = empty_list()
    food_ingredient: Optional[Union[str, List[str]]] = empty_list()
    food_name_status: Optional[str] = None
    food_origin: Optional[str] = None
    food_pack_capacity: Optional[str] = None
    food_pack_integrity: Optional[Union[str, List[str]]] = empty_list()
    food_pack_medium: Optional[Union[str, List[str]]] = empty_list()
    food_preserv_proc: Optional[Union[str, List[str]]] = empty_list()
    food_prior_contact: Optional[Union[str, List[str]]] = empty_list()
    food_prod: Optional[Union[str, List[str]]] = empty_list()
    food_prod_synonym: Optional[Union[str, List[str]]] = empty_list()
    food_product_qual: Optional[str] = None
    food_quality_date: Optional[str] = None
    food_source: Optional[str] = None
    food_trace_list: Optional[Union[str, "FOODTRACELISTENUM"]] = None
    food_trav_mode: Optional[Union[str, List[str]]] = empty_list()
    food_trav_vehic: Optional[Union[str, List[str]]] = empty_list()
    food_treat_proc: Optional[Union[str, List[str]]] = empty_list()
    HACCP_term: Optional[Union[str, List[str]]] = empty_list()
    intended_consumer: Optional[Union[str, List[str]]] = empty_list()
    library_prep_kit: Optional[str] = None
    lot_number: Optional[Union[str, List[str]]] = empty_list()
    microb_cult_med: Optional[str] = None
    microb_start: Optional[str] = None
    microb_start_count: Optional[str] = None
    microb_start_inoc: Optional[str] = None
    microb_start_prep: Optional[str] = None
    microb_start_source: Optional[str] = None
    microb_start_taxID: Optional[str] = None
    nucl_acid_ext_kit: Optional[Union[str, List[str]]] = empty_list()
    num_samp_collect: Optional[str] = None
    part_plant_animal: Optional[Union[str, List[str]]] = empty_list()
    repository_name: Optional[Union[str, List[str]]] = empty_list()
    samp_collect_method: Optional[str] = None
    samp_pooling: Optional[Union[str, List[str]]] = empty_list()
    samp_rep_biol: Optional[str] = None
    samp_rep_tech: Optional[str] = None
    samp_source_mat_cat: Optional[str] = None
    samp_stor_device: Optional[str] = None
    samp_stor_media: Optional[str] = None
    samp_transport_cont: Optional[Union[str, "SAMPTRANSPORTCONTENUM"]] = None
    samp_transport_dur: Optional[str] = None
    samp_transport_temp: Optional[str] = None
    samp_purpose: Optional[str] = None
    sequencing_kit: Optional[str] = None
    sequencing_location: Optional[str] = None
    serovar_or_serotype: Optional[Union[str, List[str]]] = empty_list()
    spikein_AMR: Optional[Union[str, List[str]]] = empty_list()
    spikein_antibiotic: Optional[Union[str, List[str]]] = empty_list()
    spikein_growth_med: Optional[Union[str, List[str]]] = empty_list()
    spikein_metal: Optional[Union[str, List[str]]] = empty_list()
    spikein_org: Optional[Union[str, List[str]]] = empty_list()
    spikein_serovar: Optional[Union[str, List[str]]] = empty_list()
    spikein_strain: Optional[Union[str, List[str]]] = empty_list()
    study_design: Optional[Union[str, List[str]]] = empty_list()
    study_inc_dur: Optional[str] = None
    study_inc_temp: Optional[str] = None
    study_timecourse: Optional[str] = None
    study_tmnt: Optional[Union[str, List[str]]] = empty_list()
    timepoint: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.coll_site_geo_feat):
            self.MissingRequiredField("coll_site_geo_feat")
        if not isinstance(self.coll_site_geo_feat, str):
            self.coll_site_geo_feat = str(self.coll_site_geo_feat)

        if self._is_empty(self.food_product_type):
            self.MissingRequiredField("food_product_type")
        if not isinstance(self.food_product_type, str):
            self.food_product_type = str(self.food_product_type)

        if self._is_empty(self.IFSAC_category):
            self.MissingRequiredField("IFSAC_category")
        if not isinstance(self.IFSAC_category, list):
            self.IFSAC_category = [self.IFSAC_category] if self.IFSAC_category is not None else []
        self.IFSAC_category = [v if isinstance(v, str) else str(v) for v in self.IFSAC_category]

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.spikein_count is not None and not isinstance(self.spikein_count, str):
            self.spikein_count = str(self.spikein_count)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.pool_dna_extracts is not None and not isinstance(self.pool_dna_extracts, str):
            self.pool_dna_extracts = str(self.pool_dna_extracts)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if not isinstance(self.ferm_chem_add, list):
            self.ferm_chem_add = [self.ferm_chem_add] if self.ferm_chem_add is not None else []
        self.ferm_chem_add = [v if isinstance(v, str) else str(v) for v in self.ferm_chem_add]

        if not isinstance(self.ferm_chem_add_perc, list):
            self.ferm_chem_add_perc = [self.ferm_chem_add_perc] if self.ferm_chem_add_perc is not None else []
        self.ferm_chem_add_perc = [v if isinstance(v, float) else float(v) for v in self.ferm_chem_add_perc]

        if self.ferm_headspace_oxy is not None and not isinstance(self.ferm_headspace_oxy, float):
            self.ferm_headspace_oxy = float(self.ferm_headspace_oxy)

        if self.ferm_medium is not None and not isinstance(self.ferm_medium, str):
            self.ferm_medium = str(self.ferm_medium)

        if self.ferm_pH is not None and not isinstance(self.ferm_pH, float):
            self.ferm_pH = float(self.ferm_pH)

        if self.ferm_rel_humidity is not None and not isinstance(self.ferm_rel_humidity, str):
            self.ferm_rel_humidity = str(self.ferm_rel_humidity)

        if self.ferm_temp is not None and not isinstance(self.ferm_temp, str):
            self.ferm_temp = str(self.ferm_temp)

        if self.ferm_time is not None and not isinstance(self.ferm_time, str):
            self.ferm_time = str(self.ferm_time)

        if self.ferm_vessel is not None and not isinstance(self.ferm_vessel, str):
            self.ferm_vessel = str(self.ferm_vessel)

        if self.bacterial_density is not None and not isinstance(self.bacterial_density, str):
            self.bacterial_density = str(self.bacterial_density)

        if self.cons_food_stor_dur is not None and not isinstance(self.cons_food_stor_dur, str):
            self.cons_food_stor_dur = str(self.cons_food_stor_dur)

        if self.cons_food_stor_temp is not None and not isinstance(self.cons_food_stor_temp, str):
            self.cons_food_stor_temp = str(self.cons_food_stor_temp)

        if self.cons_purch_date is not None and not isinstance(self.cons_purch_date, XSDDateTime):
            self.cons_purch_date = XSDDateTime(self.cons_purch_date)

        if self.cons_qty_purchased is not None and not isinstance(self.cons_qty_purchased, str):
            self.cons_qty_purchased = str(self.cons_qty_purchased)

        if self.cult_isol_date is not None and not isinstance(self.cult_isol_date, XSDDateTime):
            self.cult_isol_date = XSDDateTime(self.cult_isol_date)

        if self.cult_result is not None and not isinstance(self.cult_result, CULTRESULTENUM):
            self.cult_result = CULTRESULTENUM(self.cult_result)

        if not isinstance(self.cult_result_org, list):
            self.cult_result_org = [self.cult_result_org] if self.cult_result_org is not None else []
        self.cult_result_org = [v if isinstance(v, str) else str(v) for v in self.cult_result_org]

        if not isinstance(self.cult_target, list):
            self.cult_target = [self.cult_target] if self.cult_target is not None else []
        self.cult_target = [v if isinstance(v, str) else str(v) for v in self.cult_target]

        if not isinstance(self.dietary_claim_use, list):
            self.dietary_claim_use = [self.dietary_claim_use] if self.dietary_claim_use is not None else []
        self.dietary_claim_use = [v if isinstance(v, str) else str(v) for v in self.dietary_claim_use]

        if self.enrichment_protocol is not None and not isinstance(self.enrichment_protocol, str):
            self.enrichment_protocol = str(self.enrichment_protocol)

        if not isinstance(self.food_additive, list):
            self.food_additive = [self.food_additive] if self.food_additive is not None else []
        self.food_additive = [v if isinstance(v, str) else str(v) for v in self.food_additive]

        if not isinstance(self.food_allergen_label, list):
            self.food_allergen_label = [self.food_allergen_label] if self.food_allergen_label is not None else []
        self.food_allergen_label = [v if isinstance(v, str) else str(v) for v in self.food_allergen_label]

        if not isinstance(self.food_contact_surf, list):
            self.food_contact_surf = [self.food_contact_surf] if self.food_contact_surf is not None else []
        self.food_contact_surf = [v if isinstance(v, str) else str(v) for v in self.food_contact_surf]

        if self.food_contain_wrap is not None and not isinstance(self.food_contain_wrap, str):
            self.food_contain_wrap = str(self.food_contain_wrap)

        if not isinstance(self.food_cooking_proc, list):
            self.food_cooking_proc = [self.food_cooking_proc] if self.food_cooking_proc is not None else []
        self.food_cooking_proc = [v if isinstance(v, str) else str(v) for v in self.food_cooking_proc]

        if not isinstance(self.food_dis_point, list):
            self.food_dis_point = [self.food_dis_point] if self.food_dis_point is not None else []
        self.food_dis_point = [v if isinstance(v, str) else str(v) for v in self.food_dis_point]

        if not isinstance(self.food_ingredient, list):
            self.food_ingredient = [self.food_ingredient] if self.food_ingredient is not None else []
        self.food_ingredient = [v if isinstance(v, str) else str(v) for v in self.food_ingredient]

        if self.food_name_status is not None and not isinstance(self.food_name_status, str):
            self.food_name_status = str(self.food_name_status)

        if self.food_origin is not None and not isinstance(self.food_origin, str):
            self.food_origin = str(self.food_origin)

        if self.food_pack_capacity is not None and not isinstance(self.food_pack_capacity, str):
            self.food_pack_capacity = str(self.food_pack_capacity)

        if not isinstance(self.food_pack_integrity, list):
            self.food_pack_integrity = [self.food_pack_integrity] if self.food_pack_integrity is not None else []
        self.food_pack_integrity = [v if isinstance(v, str) else str(v) for v in self.food_pack_integrity]

        if not isinstance(self.food_pack_medium, list):
            self.food_pack_medium = [self.food_pack_medium] if self.food_pack_medium is not None else []
        self.food_pack_medium = [v if isinstance(v, str) else str(v) for v in self.food_pack_medium]

        if not isinstance(self.food_preserv_proc, list):
            self.food_preserv_proc = [self.food_preserv_proc] if self.food_preserv_proc is not None else []
        self.food_preserv_proc = [v if isinstance(v, str) else str(v) for v in self.food_preserv_proc]

        if not isinstance(self.food_prior_contact, list):
            self.food_prior_contact = [self.food_prior_contact] if self.food_prior_contact is not None else []
        self.food_prior_contact = [v if isinstance(v, str) else str(v) for v in self.food_prior_contact]

        if not isinstance(self.food_prod, list):
            self.food_prod = [self.food_prod] if self.food_prod is not None else []
        self.food_prod = [v if isinstance(v, str) else str(v) for v in self.food_prod]

        if not isinstance(self.food_prod_synonym, list):
            self.food_prod_synonym = [self.food_prod_synonym] if self.food_prod_synonym is not None else []
        self.food_prod_synonym = [v if isinstance(v, str) else str(v) for v in self.food_prod_synonym]

        if self.food_product_qual is not None and not isinstance(self.food_product_qual, str):
            self.food_product_qual = str(self.food_product_qual)

        if self.food_quality_date is not None and not isinstance(self.food_quality_date, str):
            self.food_quality_date = str(self.food_quality_date)

        if self.food_source is not None and not isinstance(self.food_source, str):
            self.food_source = str(self.food_source)

        if self.food_trace_list is not None and not isinstance(self.food_trace_list, FOODTRACELISTENUM):
            self.food_trace_list = FOODTRACELISTENUM(self.food_trace_list)

        if not isinstance(self.food_trav_mode, list):
            self.food_trav_mode = [self.food_trav_mode] if self.food_trav_mode is not None else []
        self.food_trav_mode = [v if isinstance(v, str) else str(v) for v in self.food_trav_mode]

        if not isinstance(self.food_trav_vehic, list):
            self.food_trav_vehic = [self.food_trav_vehic] if self.food_trav_vehic is not None else []
        self.food_trav_vehic = [v if isinstance(v, str) else str(v) for v in self.food_trav_vehic]

        if not isinstance(self.food_treat_proc, list):
            self.food_treat_proc = [self.food_treat_proc] if self.food_treat_proc is not None else []
        self.food_treat_proc = [v if isinstance(v, str) else str(v) for v in self.food_treat_proc]

        if not isinstance(self.HACCP_term, list):
            self.HACCP_term = [self.HACCP_term] if self.HACCP_term is not None else []
        self.HACCP_term = [v if isinstance(v, str) else str(v) for v in self.HACCP_term]

        if not isinstance(self.intended_consumer, list):
            self.intended_consumer = [self.intended_consumer] if self.intended_consumer is not None else []
        self.intended_consumer = [v if isinstance(v, str) else str(v) for v in self.intended_consumer]

        if self.library_prep_kit is not None and not isinstance(self.library_prep_kit, str):
            self.library_prep_kit = str(self.library_prep_kit)

        if not isinstance(self.lot_number, list):
            self.lot_number = [self.lot_number] if self.lot_number is not None else []
        self.lot_number = [v if isinstance(v, str) else str(v) for v in self.lot_number]

        if self.microb_cult_med is not None and not isinstance(self.microb_cult_med, str):
            self.microb_cult_med = str(self.microb_cult_med)

        if self.microb_start is not None and not isinstance(self.microb_start, str):
            self.microb_start = str(self.microb_start)

        if self.microb_start_count is not None and not isinstance(self.microb_start_count, str):
            self.microb_start_count = str(self.microb_start_count)

        if self.microb_start_inoc is not None and not isinstance(self.microb_start_inoc, str):
            self.microb_start_inoc = str(self.microb_start_inoc)

        if self.microb_start_prep is not None and not isinstance(self.microb_start_prep, str):
            self.microb_start_prep = str(self.microb_start_prep)

        if self.microb_start_source is not None and not isinstance(self.microb_start_source, str):
            self.microb_start_source = str(self.microb_start_source)

        if self.microb_start_taxID is not None and not isinstance(self.microb_start_taxID, str):
            self.microb_start_taxID = str(self.microb_start_taxID)

        if not isinstance(self.nucl_acid_ext_kit, list):
            self.nucl_acid_ext_kit = [self.nucl_acid_ext_kit] if self.nucl_acid_ext_kit is not None else []
        self.nucl_acid_ext_kit = [v if isinstance(v, str) else str(v) for v in self.nucl_acid_ext_kit]

        if self.num_samp_collect is not None and not isinstance(self.num_samp_collect, str):
            self.num_samp_collect = str(self.num_samp_collect)

        if not isinstance(self.part_plant_animal, list):
            self.part_plant_animal = [self.part_plant_animal] if self.part_plant_animal is not None else []
        self.part_plant_animal = [v if isinstance(v, str) else str(v) for v in self.part_plant_animal]

        if not isinstance(self.repository_name, list):
            self.repository_name = [self.repository_name] if self.repository_name is not None else []
        self.repository_name = [v if isinstance(v, str) else str(v) for v in self.repository_name]

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.samp_pooling, list):
            self.samp_pooling = [self.samp_pooling] if self.samp_pooling is not None else []
        self.samp_pooling = [v if isinstance(v, str) else str(v) for v in self.samp_pooling]

        if self.samp_rep_biol is not None and not isinstance(self.samp_rep_biol, str):
            self.samp_rep_biol = str(self.samp_rep_biol)

        if self.samp_rep_tech is not None and not isinstance(self.samp_rep_tech, str):
            self.samp_rep_tech = str(self.samp_rep_tech)

        if self.samp_source_mat_cat is not None and not isinstance(self.samp_source_mat_cat, str):
            self.samp_source_mat_cat = str(self.samp_source_mat_cat)

        if self.samp_stor_device is not None and not isinstance(self.samp_stor_device, str):
            self.samp_stor_device = str(self.samp_stor_device)

        if self.samp_stor_media is not None and not isinstance(self.samp_stor_media, str):
            self.samp_stor_media = str(self.samp_stor_media)

        if self.samp_transport_cont is not None and not isinstance(self.samp_transport_cont, SAMPTRANSPORTCONTENUM):
            self.samp_transport_cont = SAMPTRANSPORTCONTENUM(self.samp_transport_cont)

        if self.samp_transport_dur is not None and not isinstance(self.samp_transport_dur, str):
            self.samp_transport_dur = str(self.samp_transport_dur)

        if self.samp_transport_temp is not None and not isinstance(self.samp_transport_temp, str):
            self.samp_transport_temp = str(self.samp_transport_temp)

        if self.samp_purpose is not None and not isinstance(self.samp_purpose, str):
            self.samp_purpose = str(self.samp_purpose)

        if self.sequencing_kit is not None and not isinstance(self.sequencing_kit, str):
            self.sequencing_kit = str(self.sequencing_kit)

        if self.sequencing_location is not None and not isinstance(self.sequencing_location, str):
            self.sequencing_location = str(self.sequencing_location)

        if not isinstance(self.serovar_or_serotype, list):
            self.serovar_or_serotype = [self.serovar_or_serotype] if self.serovar_or_serotype is not None else []
        self.serovar_or_serotype = [v if isinstance(v, str) else str(v) for v in self.serovar_or_serotype]

        if not isinstance(self.spikein_AMR, list):
            self.spikein_AMR = [self.spikein_AMR] if self.spikein_AMR is not None else []
        self.spikein_AMR = [v if isinstance(v, str) else str(v) for v in self.spikein_AMR]

        if not isinstance(self.spikein_antibiotic, list):
            self.spikein_antibiotic = [self.spikein_antibiotic] if self.spikein_antibiotic is not None else []
        self.spikein_antibiotic = [v if isinstance(v, str) else str(v) for v in self.spikein_antibiotic]

        if not isinstance(self.spikein_growth_med, list):
            self.spikein_growth_med = [self.spikein_growth_med] if self.spikein_growth_med is not None else []
        self.spikein_growth_med = [v if isinstance(v, str) else str(v) for v in self.spikein_growth_med]

        if not isinstance(self.spikein_metal, list):
            self.spikein_metal = [self.spikein_metal] if self.spikein_metal is not None else []
        self.spikein_metal = [v if isinstance(v, str) else str(v) for v in self.spikein_metal]

        if not isinstance(self.spikein_org, list):
            self.spikein_org = [self.spikein_org] if self.spikein_org is not None else []
        self.spikein_org = [v if isinstance(v, str) else str(v) for v in self.spikein_org]

        if not isinstance(self.spikein_serovar, list):
            self.spikein_serovar = [self.spikein_serovar] if self.spikein_serovar is not None else []
        self.spikein_serovar = [v if isinstance(v, str) else str(v) for v in self.spikein_serovar]

        if not isinstance(self.spikein_strain, list):
            self.spikein_strain = [self.spikein_strain] if self.spikein_strain is not None else []
        self.spikein_strain = [v if isinstance(v, str) else str(v) for v in self.spikein_strain]

        if not isinstance(self.study_design, list):
            self.study_design = [self.study_design] if self.study_design is not None else []
        self.study_design = [v if isinstance(v, str) else str(v) for v in self.study_design]

        if self.study_inc_dur is not None and not isinstance(self.study_inc_dur, str):
            self.study_inc_dur = str(self.study_inc_dur)

        if self.study_inc_temp is not None and not isinstance(self.study_inc_temp, str):
            self.study_inc_temp = str(self.study_inc_temp)

        if self.study_timecourse is not None and not isinstance(self.study_timecourse, str):
            self.study_timecourse = str(self.study_timecourse)

        if not isinstance(self.study_tmnt, list):
            self.study_tmnt = [self.study_tmnt] if self.study_tmnt is not None else []
        self.study_tmnt = [v if isinstance(v, str) else str(v) for v in self.study_tmnt]

        if self.timepoint is not None and not isinstance(self.timepoint, str):
            self.timepoint = str(self.timepoint)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        super().__post_init__(**kwargs)


@dataclass
class HostAssociated(Extension):
    """
    host-associated extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016002"]
    class_class_curie: ClassVar[str] = "MIXS:0016002"
    class_name: ClassVar[str] = "HostAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.HostAssociated

    samp_name: str = None
    project_name: str = None
    alt: Optional[str] = None
    depth: Optional[str] = None
    elev: Optional[str] = None
    ances_data: Optional[str] = None
    biol_stat: Optional[str] = None
    genetic_mod: Optional[str] = None
    host_common_name: Optional[str] = None
    samp_capt_status: Optional[Union[str, "SAMPCAPTSTATUSENUM"]] = None
    samp_dis_stage: Optional[Union[str, "SAMPDISSTAGEENUM"]] = None
    host_taxid: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_age: Optional[str] = None
    host_life_stage: Optional[str] = None
    host_sex: Optional[str] = None
    host_disease_stat: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    host_body_habitat: Optional[str] = None
    host_body_site: Optional[str] = None
    host_body_product: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    host_length: Optional[str] = None
    host_diet: Optional[Union[str, List[str]]] = empty_list()
    host_last_meal: Optional[Union[str, List[str]]] = empty_list()
    host_growth_cond: Optional[str] = None
    host_substrate: Optional[str] = None
    host_fam_rel: Optional[Union[str, List[str]]] = empty_list()
    host_subspecf_genlin: Optional[Union[str, List[str]]] = empty_list()
    host_genotype: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_body_temp: Optional[str] = None
    host_dry_mass: Optional[str] = None
    blood_press_diast: Optional[str] = None
    blood_press_syst: Optional[str] = None
    host_color: Optional[str] = None
    host_shape: Optional[str] = None
    gravidity: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    salinity: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    temp: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_vol_we_dna_ext: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    host_symbiont: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.ances_data is not None and not isinstance(self.ances_data, str):
            self.ances_data = str(self.ances_data)

        if self.biol_stat is not None and not isinstance(self.biol_stat, str):
            self.biol_stat = str(self.biol_stat)

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if self.host_common_name is not None and not isinstance(self.host_common_name, str):
            self.host_common_name = str(self.host_common_name)

        if self.samp_capt_status is not None and not isinstance(self.samp_capt_status, SAMPCAPTSTATUSENUM):
            self.samp_capt_status = SAMPCAPTSTATUSENUM(self.samp_capt_status)

        if self.samp_dis_stage is not None and not isinstance(self.samp_dis_stage, SAMPDISSTAGEENUM):
            self.samp_dis_stage = SAMPDISSTAGEENUM(self.samp_dis_stage)

        if self.host_taxid is not None and not isinstance(self.host_taxid, str):
            self.host_taxid = str(self.host_taxid)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_life_stage is not None and not isinstance(self.host_life_stage, str):
            self.host_life_stage = str(self.host_life_stage)

        if self.host_sex is not None and not isinstance(self.host_sex, str):
            self.host_sex = str(self.host_sex)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if self.host_body_habitat is not None and not isinstance(self.host_body_habitat, str):
            self.host_body_habitat = str(self.host_body_habitat)

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if self.host_body_product is not None and not isinstance(self.host_body_product, str):
            self.host_body_product = str(self.host_body_product)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_length is not None and not isinstance(self.host_length, str):
            self.host_length = str(self.host_length)

        if not isinstance(self.host_diet, list):
            self.host_diet = [self.host_diet] if self.host_diet is not None else []
        self.host_diet = [v if isinstance(v, str) else str(v) for v in self.host_diet]

        if not isinstance(self.host_last_meal, list):
            self.host_last_meal = [self.host_last_meal] if self.host_last_meal is not None else []
        self.host_last_meal = [v if isinstance(v, str) else str(v) for v in self.host_last_meal]

        if self.host_growth_cond is not None and not isinstance(self.host_growth_cond, str):
            self.host_growth_cond = str(self.host_growth_cond)

        if self.host_substrate is not None and not isinstance(self.host_substrate, str):
            self.host_substrate = str(self.host_substrate)

        if not isinstance(self.host_fam_rel, list):
            self.host_fam_rel = [self.host_fam_rel] if self.host_fam_rel is not None else []
        self.host_fam_rel = [v if isinstance(v, str) else str(v) for v in self.host_fam_rel]

        if not isinstance(self.host_subspecf_genlin, list):
            self.host_subspecf_genlin = [self.host_subspecf_genlin] if self.host_subspecf_genlin is not None else []
        self.host_subspecf_genlin = [v if isinstance(v, str) else str(v) for v in self.host_subspecf_genlin]

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if self.host_dry_mass is not None and not isinstance(self.host_dry_mass, str):
            self.host_dry_mass = str(self.host_dry_mass)

        if self.blood_press_diast is not None and not isinstance(self.blood_press_diast, str):
            self.blood_press_diast = str(self.blood_press_diast)

        if self.blood_press_syst is not None and not isinstance(self.blood_press_syst, str):
            self.blood_press_syst = str(self.blood_press_syst)

        if self.host_color is not None and not isinstance(self.host_color, str):
            self.host_color = str(self.host_color)

        if self.host_shape is not None and not isinstance(self.host_shape, str):
            self.host_shape = str(self.host_shape)

        if self.gravidity is not None and not isinstance(self.gravidity, str):
            self.gravidity = str(self.gravidity)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if not isinstance(self.host_symbiont, list):
            self.host_symbiont = [self.host_symbiont] if self.host_symbiont is not None else []
        self.host_symbiont = [v if isinstance(v, str) else str(v) for v in self.host_symbiont]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        super().__post_init__(**kwargs)


@dataclass
class HumanAssociated(Extension):
    """
    human-associated extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016003"]
    class_class_curie: ClassVar[str] = "MIXS:0016003"
    class_name: ClassVar[str] = "HumanAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.HumanAssociated

    samp_name: str = None
    project_name: str = None
    host_subject_id: Optional[str] = None
    host_age: Optional[str] = None
    host_sex: Optional[str] = None
    host_disease_stat: Optional[str] = None
    ihmc_medication_code: Optional[Union[int, List[int]]] = empty_list()
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    host_body_site: Optional[str] = None
    host_body_product: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    host_diet: Optional[Union[str, List[str]]] = empty_list()
    host_last_meal: Optional[Union[str, List[str]]] = empty_list()
    host_fam_rel: Optional[Union[str, List[str]]] = empty_list()
    host_genotype: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_body_temp: Optional[str] = None
    smoker: Optional[Union[bool, Bool]] = None
    host_hiv_stat: Optional[str] = None
    drug_usage: Optional[Union[str, List[str]]] = empty_list()
    host_body_mass_index: Optional[str] = None
    diet_last_six_month: Optional[str] = None
    weight_loss_3_month: Optional[str] = None
    ethnicity: Optional[Union[str, List[str]]] = empty_list()
    host_occupation: Optional[str] = None
    pet_farm_animal: Optional[Union[str, List[str]]] = empty_list()
    travel_out_six_month: Optional[Union[str, List[str]]] = empty_list()
    twin_sibling: Optional[Union[bool, Bool]] = None
    medic_hist_perform: Optional[Union[bool, Bool]] = None
    study_complt_stat: Optional[str] = None
    pulmonary_disord: Optional[Union[str, List[str]]] = empty_list()
    nose_throat_disord: Optional[Union[str, List[str]]] = empty_list()
    blood_blood_disord: Optional[Union[str, List[str]]] = empty_list()
    host_pulse: Optional[str] = None
    gestation_state: Optional[str] = None
    maternal_health_stat: Optional[str] = None
    foetal_health_stat: Optional[str] = None
    amniotic_fluid_color: Optional[str] = None
    kidney_disord: Optional[Union[str, List[str]]] = empty_list()
    urogenit_tract_disor: Optional[Union[str, List[str]]] = empty_list()
    urine_collect_meth: Optional[Union[str, "URINECOLLECTMETHENUM"]] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    salinity: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    temp: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_vol_we_dna_ext: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    host_symbiont: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_sex is not None and not isinstance(self.host_sex, str):
            self.host_sex = str(self.host_sex)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if not isinstance(self.ihmc_medication_code, list):
            self.ihmc_medication_code = [self.ihmc_medication_code] if self.ihmc_medication_code is not None else []
        self.ihmc_medication_code = [v if isinstance(v, int) else int(v) for v in self.ihmc_medication_code]

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if self.host_body_product is not None and not isinstance(self.host_body_product, str):
            self.host_body_product = str(self.host_body_product)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if not isinstance(self.host_diet, list):
            self.host_diet = [self.host_diet] if self.host_diet is not None else []
        self.host_diet = [v if isinstance(v, str) else str(v) for v in self.host_diet]

        if not isinstance(self.host_last_meal, list):
            self.host_last_meal = [self.host_last_meal] if self.host_last_meal is not None else []
        self.host_last_meal = [v if isinstance(v, str) else str(v) for v in self.host_last_meal]

        if not isinstance(self.host_fam_rel, list):
            self.host_fam_rel = [self.host_fam_rel] if self.host_fam_rel is not None else []
        self.host_fam_rel = [v if isinstance(v, str) else str(v) for v in self.host_fam_rel]

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if self.smoker is not None and not isinstance(self.smoker, Bool):
            self.smoker = Bool(self.smoker)

        if self.host_hiv_stat is not None and not isinstance(self.host_hiv_stat, str):
            self.host_hiv_stat = str(self.host_hiv_stat)

        if not isinstance(self.drug_usage, list):
            self.drug_usage = [self.drug_usage] if self.drug_usage is not None else []
        self.drug_usage = [v if isinstance(v, str) else str(v) for v in self.drug_usage]

        if self.host_body_mass_index is not None and not isinstance(self.host_body_mass_index, str):
            self.host_body_mass_index = str(self.host_body_mass_index)

        if self.diet_last_six_month is not None and not isinstance(self.diet_last_six_month, str):
            self.diet_last_six_month = str(self.diet_last_six_month)

        if self.weight_loss_3_month is not None and not isinstance(self.weight_loss_3_month, str):
            self.weight_loss_3_month = str(self.weight_loss_3_month)

        if not isinstance(self.ethnicity, list):
            self.ethnicity = [self.ethnicity] if self.ethnicity is not None else []
        self.ethnicity = [v if isinstance(v, str) else str(v) for v in self.ethnicity]

        if self.host_occupation is not None and not isinstance(self.host_occupation, str):
            self.host_occupation = str(self.host_occupation)

        if not isinstance(self.pet_farm_animal, list):
            self.pet_farm_animal = [self.pet_farm_animal] if self.pet_farm_animal is not None else []
        self.pet_farm_animal = [v if isinstance(v, str) else str(v) for v in self.pet_farm_animal]

        if not isinstance(self.travel_out_six_month, list):
            self.travel_out_six_month = [self.travel_out_six_month] if self.travel_out_six_month is not None else []
        self.travel_out_six_month = [v if isinstance(v, str) else str(v) for v in self.travel_out_six_month]

        if self.twin_sibling is not None and not isinstance(self.twin_sibling, Bool):
            self.twin_sibling = Bool(self.twin_sibling)

        if self.medic_hist_perform is not None and not isinstance(self.medic_hist_perform, Bool):
            self.medic_hist_perform = Bool(self.medic_hist_perform)

        if self.study_complt_stat is not None and not isinstance(self.study_complt_stat, str):
            self.study_complt_stat = str(self.study_complt_stat)

        if not isinstance(self.pulmonary_disord, list):
            self.pulmonary_disord = [self.pulmonary_disord] if self.pulmonary_disord is not None else []
        self.pulmonary_disord = [v if isinstance(v, str) else str(v) for v in self.pulmonary_disord]

        if not isinstance(self.nose_throat_disord, list):
            self.nose_throat_disord = [self.nose_throat_disord] if self.nose_throat_disord is not None else []
        self.nose_throat_disord = [v if isinstance(v, str) else str(v) for v in self.nose_throat_disord]

        if not isinstance(self.blood_blood_disord, list):
            self.blood_blood_disord = [self.blood_blood_disord] if self.blood_blood_disord is not None else []
        self.blood_blood_disord = [v if isinstance(v, str) else str(v) for v in self.blood_blood_disord]

        if self.host_pulse is not None and not isinstance(self.host_pulse, str):
            self.host_pulse = str(self.host_pulse)

        if self.gestation_state is not None and not isinstance(self.gestation_state, str):
            self.gestation_state = str(self.gestation_state)

        if self.maternal_health_stat is not None and not isinstance(self.maternal_health_stat, str):
            self.maternal_health_stat = str(self.maternal_health_stat)

        if self.foetal_health_stat is not None and not isinstance(self.foetal_health_stat, str):
            self.foetal_health_stat = str(self.foetal_health_stat)

        if self.amniotic_fluid_color is not None and not isinstance(self.amniotic_fluid_color, str):
            self.amniotic_fluid_color = str(self.amniotic_fluid_color)

        if not isinstance(self.kidney_disord, list):
            self.kidney_disord = [self.kidney_disord] if self.kidney_disord is not None else []
        self.kidney_disord = [v if isinstance(v, str) else str(v) for v in self.kidney_disord]

        if not isinstance(self.urogenit_tract_disor, list):
            self.urogenit_tract_disor = [self.urogenit_tract_disor] if self.urogenit_tract_disor is not None else []
        self.urogenit_tract_disor = [v if isinstance(v, str) else str(v) for v in self.urogenit_tract_disor]

        if self.urine_collect_meth is not None and not isinstance(self.urine_collect_meth, URINECOLLECTMETHENUM):
            self.urine_collect_meth = URINECOLLECTMETHENUM(self.urine_collect_meth)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if not isinstance(self.host_symbiont, list):
            self.host_symbiont = [self.host_symbiont] if self.host_symbiont is not None else []
        self.host_symbiont = [v if isinstance(v, str) else str(v) for v in self.host_symbiont]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        super().__post_init__(**kwargs)


@dataclass
class HumanGut(Extension):
    """
    human-gut extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016004"]
    class_class_curie: ClassVar[str] = "MIXS:0016004"
    class_name: ClassVar[str] = "HumanGut"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.HumanGut

    samp_name: str = None
    project_name: str = None
    gastrointest_disord: Optional[Union[str, List[str]]] = empty_list()
    liver_disord: Optional[Union[str, List[str]]] = empty_list()
    special_diet: Optional[Union[str, List[str]]] = empty_list()
    host_subject_id: Optional[str] = None
    host_age: Optional[str] = None
    host_sex: Optional[str] = None
    host_disease_stat: Optional[str] = None
    ihmc_medication_code: Optional[Union[int, List[int]]] = empty_list()
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    host_body_site: Optional[str] = None
    host_body_product: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    host_diet: Optional[Union[str, List[str]]] = empty_list()
    host_last_meal: Optional[Union[str, List[str]]] = empty_list()
    host_fam_rel: Optional[Union[str, List[str]]] = empty_list()
    host_genotype: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_body_temp: Optional[str] = None
    host_body_mass_index: Optional[str] = None
    ethnicity: Optional[Union[str, List[str]]] = empty_list()
    host_occupation: Optional[str] = None
    medic_hist_perform: Optional[Union[bool, Bool]] = None
    host_pulse: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    salinity: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    temp: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    samp_store_dur: Optional[str] = None
    host_symbiont: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if not isinstance(self.gastrointest_disord, list):
            self.gastrointest_disord = [self.gastrointest_disord] if self.gastrointest_disord is not None else []
        self.gastrointest_disord = [v if isinstance(v, str) else str(v) for v in self.gastrointest_disord]

        if not isinstance(self.liver_disord, list):
            self.liver_disord = [self.liver_disord] if self.liver_disord is not None else []
        self.liver_disord = [v if isinstance(v, str) else str(v) for v in self.liver_disord]

        if not isinstance(self.special_diet, list):
            self.special_diet = [self.special_diet] if self.special_diet is not None else []
        self.special_diet = [v if isinstance(v, str) else str(v) for v in self.special_diet]

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_sex is not None and not isinstance(self.host_sex, str):
            self.host_sex = str(self.host_sex)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if not isinstance(self.ihmc_medication_code, list):
            self.ihmc_medication_code = [self.ihmc_medication_code] if self.ihmc_medication_code is not None else []
        self.ihmc_medication_code = [v if isinstance(v, int) else int(v) for v in self.ihmc_medication_code]

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if self.host_body_product is not None and not isinstance(self.host_body_product, str):
            self.host_body_product = str(self.host_body_product)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if not isinstance(self.host_diet, list):
            self.host_diet = [self.host_diet] if self.host_diet is not None else []
        self.host_diet = [v if isinstance(v, str) else str(v) for v in self.host_diet]

        if not isinstance(self.host_last_meal, list):
            self.host_last_meal = [self.host_last_meal] if self.host_last_meal is not None else []
        self.host_last_meal = [v if isinstance(v, str) else str(v) for v in self.host_last_meal]

        if not isinstance(self.host_fam_rel, list):
            self.host_fam_rel = [self.host_fam_rel] if self.host_fam_rel is not None else []
        self.host_fam_rel = [v if isinstance(v, str) else str(v) for v in self.host_fam_rel]

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if self.host_body_mass_index is not None and not isinstance(self.host_body_mass_index, str):
            self.host_body_mass_index = str(self.host_body_mass_index)

        if not isinstance(self.ethnicity, list):
            self.ethnicity = [self.ethnicity] if self.ethnicity is not None else []
        self.ethnicity = [v if isinstance(v, str) else str(v) for v in self.ethnicity]

        if self.host_occupation is not None and not isinstance(self.host_occupation, str):
            self.host_occupation = str(self.host_occupation)

        if self.medic_hist_perform is not None and not isinstance(self.medic_hist_perform, Bool):
            self.medic_hist_perform = Bool(self.medic_hist_perform)

        if self.host_pulse is not None and not isinstance(self.host_pulse, str):
            self.host_pulse = str(self.host_pulse)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if not isinstance(self.host_symbiont, list):
            self.host_symbiont = [self.host_symbiont] if self.host_symbiont is not None else []
        self.host_symbiont = [v if isinstance(v, str) else str(v) for v in self.host_symbiont]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        super().__post_init__(**kwargs)


@dataclass
class HumanOral(Extension):
    """
    human-oral extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016005"]
    class_class_curie: ClassVar[str] = "MIXS:0016005"
    class_name: ClassVar[str] = "HumanOral"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.HumanOral

    samp_name: str = None
    project_name: str = None
    nose_mouth_teeth_throat_disord: Optional[Union[str, List[str]]] = empty_list()
    time_last_toothbrush: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_age: Optional[str] = None
    host_sex: Optional[str] = None
    host_disease_stat: Optional[str] = None
    ihmc_medication_code: Optional[Union[int, List[int]]] = empty_list()
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    host_body_site: Optional[str] = None
    host_body_product: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    host_diet: Optional[Union[str, List[str]]] = empty_list()
    host_last_meal: Optional[Union[str, List[str]]] = empty_list()
    host_fam_rel: Optional[Union[str, List[str]]] = empty_list()
    host_genotype: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_body_temp: Optional[str] = None
    host_body_mass_index: Optional[str] = None
    ethnicity: Optional[Union[str, List[str]]] = empty_list()
    host_occupation: Optional[str] = None
    medic_hist_perform: Optional[Union[bool, Bool]] = None
    host_pulse: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    salinity: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    temp: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_vol_we_dna_ext: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    host_symbiont: Optional[Union[str, List[str]]] = empty_list()
    samp_store_loc: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if not isinstance(self.nose_mouth_teeth_throat_disord, list):
            self.nose_mouth_teeth_throat_disord = [self.nose_mouth_teeth_throat_disord] if self.nose_mouth_teeth_throat_disord is not None else []
        self.nose_mouth_teeth_throat_disord = [v if isinstance(v, str) else str(v) for v in self.nose_mouth_teeth_throat_disord]

        if self.time_last_toothbrush is not None and not isinstance(self.time_last_toothbrush, str):
            self.time_last_toothbrush = str(self.time_last_toothbrush)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_sex is not None and not isinstance(self.host_sex, str):
            self.host_sex = str(self.host_sex)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if not isinstance(self.ihmc_medication_code, list):
            self.ihmc_medication_code = [self.ihmc_medication_code] if self.ihmc_medication_code is not None else []
        self.ihmc_medication_code = [v if isinstance(v, int) else int(v) for v in self.ihmc_medication_code]

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if self.host_body_product is not None and not isinstance(self.host_body_product, str):
            self.host_body_product = str(self.host_body_product)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if not isinstance(self.host_diet, list):
            self.host_diet = [self.host_diet] if self.host_diet is not None else []
        self.host_diet = [v if isinstance(v, str) else str(v) for v in self.host_diet]

        if not isinstance(self.host_last_meal, list):
            self.host_last_meal = [self.host_last_meal] if self.host_last_meal is not None else []
        self.host_last_meal = [v if isinstance(v, str) else str(v) for v in self.host_last_meal]

        if not isinstance(self.host_fam_rel, list):
            self.host_fam_rel = [self.host_fam_rel] if self.host_fam_rel is not None else []
        self.host_fam_rel = [v if isinstance(v, str) else str(v) for v in self.host_fam_rel]

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if self.host_body_mass_index is not None and not isinstance(self.host_body_mass_index, str):
            self.host_body_mass_index = str(self.host_body_mass_index)

        if not isinstance(self.ethnicity, list):
            self.ethnicity = [self.ethnicity] if self.ethnicity is not None else []
        self.ethnicity = [v if isinstance(v, str) else str(v) for v in self.ethnicity]

        if self.host_occupation is not None and not isinstance(self.host_occupation, str):
            self.host_occupation = str(self.host_occupation)

        if self.medic_hist_perform is not None and not isinstance(self.medic_hist_perform, Bool):
            self.medic_hist_perform = Bool(self.medic_hist_perform)

        if self.host_pulse is not None and not isinstance(self.host_pulse, str):
            self.host_pulse = str(self.host_pulse)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if not isinstance(self.host_symbiont, list):
            self.host_symbiont = [self.host_symbiont] if self.host_symbiont is not None else []
        self.host_symbiont = [v if isinstance(v, str) else str(v) for v in self.host_symbiont]

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        super().__post_init__(**kwargs)


@dataclass
class HumanSkin(Extension):
    """
    human-skin extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016006"]
    class_class_curie: ClassVar[str] = "MIXS:0016006"
    class_name: ClassVar[str] = "HumanSkin"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.HumanSkin

    samp_name: str = None
    project_name: str = None
    dermatology_disord: Optional[Union[str, List[str]]] = empty_list()
    time_since_last_wash: Optional[str] = None
    dominant_hand: Optional[Union[str, "DOMINANTHANDENUM"]] = None
    host_subject_id: Optional[str] = None
    host_age: Optional[str] = None
    host_sex: Optional[str] = None
    host_disease_stat: Optional[str] = None
    ihmc_medication_code: Optional[Union[int, List[int]]] = empty_list()
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    host_body_site: Optional[str] = None
    host_body_product: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    host_diet: Optional[Union[str, List[str]]] = empty_list()
    host_last_meal: Optional[Union[str, List[str]]] = empty_list()
    host_fam_rel: Optional[Union[str, List[str]]] = empty_list()
    host_genotype: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_body_temp: Optional[str] = None
    host_body_mass_index: Optional[str] = None
    ethnicity: Optional[Union[str, List[str]]] = empty_list()
    host_occupation: Optional[str] = None
    medic_hist_perform: Optional[Union[bool, Bool]] = None
    host_pulse: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    salinity: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    temp: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_vol_we_dna_ext: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    host_symbiont: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if not isinstance(self.dermatology_disord, list):
            self.dermatology_disord = [self.dermatology_disord] if self.dermatology_disord is not None else []
        self.dermatology_disord = [v if isinstance(v, str) else str(v) for v in self.dermatology_disord]

        if self.time_since_last_wash is not None and not isinstance(self.time_since_last_wash, str):
            self.time_since_last_wash = str(self.time_since_last_wash)

        if self.dominant_hand is not None and not isinstance(self.dominant_hand, DOMINANTHANDENUM):
            self.dominant_hand = DOMINANTHANDENUM(self.dominant_hand)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_sex is not None and not isinstance(self.host_sex, str):
            self.host_sex = str(self.host_sex)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if not isinstance(self.ihmc_medication_code, list):
            self.ihmc_medication_code = [self.ihmc_medication_code] if self.ihmc_medication_code is not None else []
        self.ihmc_medication_code = [v if isinstance(v, int) else int(v) for v in self.ihmc_medication_code]

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if self.host_body_product is not None and not isinstance(self.host_body_product, str):
            self.host_body_product = str(self.host_body_product)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if not isinstance(self.host_diet, list):
            self.host_diet = [self.host_diet] if self.host_diet is not None else []
        self.host_diet = [v if isinstance(v, str) else str(v) for v in self.host_diet]

        if not isinstance(self.host_last_meal, list):
            self.host_last_meal = [self.host_last_meal] if self.host_last_meal is not None else []
        self.host_last_meal = [v if isinstance(v, str) else str(v) for v in self.host_last_meal]

        if not isinstance(self.host_fam_rel, list):
            self.host_fam_rel = [self.host_fam_rel] if self.host_fam_rel is not None else []
        self.host_fam_rel = [v if isinstance(v, str) else str(v) for v in self.host_fam_rel]

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if self.host_body_mass_index is not None and not isinstance(self.host_body_mass_index, str):
            self.host_body_mass_index = str(self.host_body_mass_index)

        if not isinstance(self.ethnicity, list):
            self.ethnicity = [self.ethnicity] if self.ethnicity is not None else []
        self.ethnicity = [v if isinstance(v, str) else str(v) for v in self.ethnicity]

        if self.host_occupation is not None and not isinstance(self.host_occupation, str):
            self.host_occupation = str(self.host_occupation)

        if self.medic_hist_perform is not None and not isinstance(self.medic_hist_perform, Bool):
            self.medic_hist_perform = Bool(self.medic_hist_perform)

        if self.host_pulse is not None and not isinstance(self.host_pulse, str):
            self.host_pulse = str(self.host_pulse)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if not isinstance(self.host_symbiont, list):
            self.host_symbiont = [self.host_symbiont] if self.host_symbiont is not None else []
        self.host_symbiont = [v if isinstance(v, str) else str(v) for v in self.host_symbiont]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        super().__post_init__(**kwargs)


@dataclass
class HumanVaginal(Extension):
    """
    human-vaginal extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016007"]
    class_class_curie: ClassVar[str] = "MIXS:0016007"
    class_name: ClassVar[str] = "HumanVaginal"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.HumanVaginal

    samp_name: str = None
    project_name: str = None
    menarche: Optional[Union[str, XSDDateTime]] = None
    sexual_act: Optional[str] = None
    pregnancy: Optional[Union[str, XSDDateTime]] = None
    douche: Optional[Union[str, XSDDateTime]] = None
    birth_control: Optional[str] = None
    menopause: Optional[Union[str, XSDDateTime]] = None
    hrt: Optional[Union[str, XSDDateTime]] = None
    hysterectomy: Optional[Union[bool, Bool]] = None
    gynecologic_disord: Optional[Union[str, List[str]]] = empty_list()
    urogenit_disord: Optional[Union[str, List[str]]] = empty_list()
    host_subject_id: Optional[str] = None
    host_age: Optional[str] = None
    host_sex: Optional[str] = None
    host_disease_stat: Optional[str] = None
    ihmc_medication_code: Optional[Union[int, List[int]]] = empty_list()
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    host_body_site: Optional[str] = None
    host_body_product: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    host_diet: Optional[Union[str, List[str]]] = empty_list()
    host_last_meal: Optional[Union[str, List[str]]] = empty_list()
    host_fam_rel: Optional[Union[str, List[str]]] = empty_list()
    host_genotype: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_body_temp: Optional[str] = None
    host_body_mass_index: Optional[str] = None
    ethnicity: Optional[Union[str, List[str]]] = empty_list()
    host_occupation: Optional[str] = None
    medic_hist_perform: Optional[Union[bool, Bool]] = None
    host_pulse: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    salinity: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    temp: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_vol_we_dna_ext: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_dur: Optional[str] = None
    host_symbiont: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.menarche is not None and not isinstance(self.menarche, XSDDateTime):
            self.menarche = XSDDateTime(self.menarche)

        if self.sexual_act is not None and not isinstance(self.sexual_act, str):
            self.sexual_act = str(self.sexual_act)

        if self.pregnancy is not None and not isinstance(self.pregnancy, XSDDateTime):
            self.pregnancy = XSDDateTime(self.pregnancy)

        if self.douche is not None and not isinstance(self.douche, XSDDateTime):
            self.douche = XSDDateTime(self.douche)

        if self.birth_control is not None and not isinstance(self.birth_control, str):
            self.birth_control = str(self.birth_control)

        if self.menopause is not None and not isinstance(self.menopause, XSDDateTime):
            self.menopause = XSDDateTime(self.menopause)

        if self.hrt is not None and not isinstance(self.hrt, XSDDateTime):
            self.hrt = XSDDateTime(self.hrt)

        if self.hysterectomy is not None and not isinstance(self.hysterectomy, Bool):
            self.hysterectomy = Bool(self.hysterectomy)

        if not isinstance(self.gynecologic_disord, list):
            self.gynecologic_disord = [self.gynecologic_disord] if self.gynecologic_disord is not None else []
        self.gynecologic_disord = [v if isinstance(v, str) else str(v) for v in self.gynecologic_disord]

        if not isinstance(self.urogenit_disord, list):
            self.urogenit_disord = [self.urogenit_disord] if self.urogenit_disord is not None else []
        self.urogenit_disord = [v if isinstance(v, str) else str(v) for v in self.urogenit_disord]

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_sex is not None and not isinstance(self.host_sex, str):
            self.host_sex = str(self.host_sex)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if not isinstance(self.ihmc_medication_code, list):
            self.ihmc_medication_code = [self.ihmc_medication_code] if self.ihmc_medication_code is not None else []
        self.ihmc_medication_code = [v if isinstance(v, int) else int(v) for v in self.ihmc_medication_code]

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if self.host_body_product is not None and not isinstance(self.host_body_product, str):
            self.host_body_product = str(self.host_body_product)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if not isinstance(self.host_diet, list):
            self.host_diet = [self.host_diet] if self.host_diet is not None else []
        self.host_diet = [v if isinstance(v, str) else str(v) for v in self.host_diet]

        if not isinstance(self.host_last_meal, list):
            self.host_last_meal = [self.host_last_meal] if self.host_last_meal is not None else []
        self.host_last_meal = [v if isinstance(v, str) else str(v) for v in self.host_last_meal]

        if not isinstance(self.host_fam_rel, list):
            self.host_fam_rel = [self.host_fam_rel] if self.host_fam_rel is not None else []
        self.host_fam_rel = [v if isinstance(v, str) else str(v) for v in self.host_fam_rel]

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_body_temp is not None and not isinstance(self.host_body_temp, str):
            self.host_body_temp = str(self.host_body_temp)

        if self.host_body_mass_index is not None and not isinstance(self.host_body_mass_index, str):
            self.host_body_mass_index = str(self.host_body_mass_index)

        if not isinstance(self.ethnicity, list):
            self.ethnicity = [self.ethnicity] if self.ethnicity is not None else []
        self.ethnicity = [v if isinstance(v, str) else str(v) for v in self.ethnicity]

        if self.host_occupation is not None and not isinstance(self.host_occupation, str):
            self.host_occupation = str(self.host_occupation)

        if self.medic_hist_perform is not None and not isinstance(self.medic_hist_perform, Bool):
            self.medic_hist_perform = Bool(self.medic_hist_perform)

        if self.host_pulse is not None and not isinstance(self.host_pulse, str):
            self.host_pulse = str(self.host_pulse)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if not isinstance(self.host_symbiont, list):
            self.host_symbiont = [self.host_symbiont] if self.host_symbiont is not None else []
        self.host_symbiont = [v if isinstance(v, str) else str(v) for v in self.host_symbiont]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        super().__post_init__(**kwargs)


@dataclass
class HydrocarbonResourcesCores(Extension):
    """
    hydrocarbon resources-cores extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016015"]
    class_class_curie: ClassVar[str] = "MIXS:0016015"
    class_name: ClassVar[str] = "HydrocarbonResourcesCores"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.HydrocarbonResourcesCores

    samp_name: str = None
    project_name: str = None
    hcr: Union[str, "HCRENUM"] = None
    hc_produced: Union[str, "HCPRODUCEDENUM"] = None
    basin: str = None
    hcr_temp: str = None
    sulfate_fw: str = None
    vfa_fw: str = None
    samp_type: str = None
    temp: str = None
    api: str = None
    field: Optional[str] = None
    reservoir: Optional[str] = None
    tvdss_of_hcr_temp: Optional[str] = None
    hcr_pressure: Optional[str] = None
    tvdss_of_hcr_press: Optional[str] = None
    permeability: Optional[str] = None
    porosity: Optional[str] = None
    lithology: Optional[Union[str, "LITHOLOGYENUM"]] = None
    depos_env: Optional[Union[str, "DEPOSENVENUM"]] = None
    hcr_geol_age: Optional[Union[str, "SHAREDENUM5"]] = None
    owc_tvdss: Optional[str] = None
    hcr_fw_salinity: Optional[str] = None
    sr_kerog_type: Optional[Union[str, "SRKEROGTYPEENUM"]] = None
    sr_lithology: Optional[Union[str, "SRLITHOLOGYENUM"]] = None
    sr_dep_env: Optional[Union[str, "SRDEPENVENUM"]] = None
    sr_geol_age: Optional[Union[str, "SHAREDENUM5"]] = None
    samp_well_name: Optional[str] = None
    win: Optional[str] = None
    samp_subtype: Optional[Union[str, "SAMPSUBTYPEENUM"]] = None
    pressure: Optional[str] = None
    samp_tvdss: Optional[str] = None
    samp_md: Optional[str] = None
    elev: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    samp_transport_cond: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    org_count_qpcr_info: Optional[str] = None
    ph: Optional[float] = None
    salinity: Optional[str] = None
    alkalinity: Optional[str] = None
    alkalinity_method: Optional[str] = None
    sulfate: Optional[str] = None
    sulfide: Optional[str] = None
    tot_sulfur: Optional[str] = None
    nitrate: Optional[str] = None
    nitrite: Optional[str] = None
    ammonium: Optional[str] = None
    tot_nitro: Optional[str] = None
    diss_iron: Optional[str] = None
    sodium: Optional[str] = None
    chloride: Optional[str] = None
    potassium: Optional[str] = None
    magnesium: Optional[str] = None
    calcium: Optional[str] = None
    tot_iron: Optional[str] = None
    diss_org_carb: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    diss_inorg_phosp: Optional[str] = None
    tot_phosp: Optional[str] = None
    suspend_solids: Optional[Union[str, List[str]]] = empty_list()
    density: Optional[str] = None
    diss_carb_dioxide: Optional[str] = None
    diss_oxygen_fluid: Optional[str] = None
    vfa: Optional[str] = None
    benzene: Optional[str] = None
    toluene: Optional[str] = None
    ethylbenzene: Optional[str] = None
    xylene: Optional[str] = None
    tan: Optional[str] = None
    viscosity: Optional[str] = None
    pour_point: Optional[str] = None
    saturates_pc: Optional[str] = None
    aromatics_pc: Optional[str] = None
    resins_pc: Optional[str] = None
    asphaltenes_pc: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    additional_info: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.hcr):
            self.MissingRequiredField("hcr")
        if not isinstance(self.hcr, HCRENUM):
            self.hcr = HCRENUM(self.hcr)

        if self._is_empty(self.hc_produced):
            self.MissingRequiredField("hc_produced")
        if not isinstance(self.hc_produced, HCPRODUCEDENUM):
            self.hc_produced = HCPRODUCEDENUM(self.hc_produced)

        if self._is_empty(self.basin):
            self.MissingRequiredField("basin")
        if not isinstance(self.basin, str):
            self.basin = str(self.basin)

        if self._is_empty(self.hcr_temp):
            self.MissingRequiredField("hcr_temp")
        if not isinstance(self.hcr_temp, str):
            self.hcr_temp = str(self.hcr_temp)

        if self._is_empty(self.sulfate_fw):
            self.MissingRequiredField("sulfate_fw")
        if not isinstance(self.sulfate_fw, str):
            self.sulfate_fw = str(self.sulfate_fw)

        if self._is_empty(self.vfa_fw):
            self.MissingRequiredField("vfa_fw")
        if not isinstance(self.vfa_fw, str):
            self.vfa_fw = str(self.vfa_fw)

        if self._is_empty(self.samp_type):
            self.MissingRequiredField("samp_type")
        if not isinstance(self.samp_type, str):
            self.samp_type = str(self.samp_type)

        if self._is_empty(self.temp):
            self.MissingRequiredField("temp")
        if not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self._is_empty(self.api):
            self.MissingRequiredField("api")
        if not isinstance(self.api, str):
            self.api = str(self.api)

        if self.field is not None and not isinstance(self.field, str):
            self.field = str(self.field)

        if self.reservoir is not None and not isinstance(self.reservoir, str):
            self.reservoir = str(self.reservoir)

        if self.tvdss_of_hcr_temp is not None and not isinstance(self.tvdss_of_hcr_temp, str):
            self.tvdss_of_hcr_temp = str(self.tvdss_of_hcr_temp)

        if self.hcr_pressure is not None and not isinstance(self.hcr_pressure, str):
            self.hcr_pressure = str(self.hcr_pressure)

        if self.tvdss_of_hcr_press is not None and not isinstance(self.tvdss_of_hcr_press, str):
            self.tvdss_of_hcr_press = str(self.tvdss_of_hcr_press)

        if self.permeability is not None and not isinstance(self.permeability, str):
            self.permeability = str(self.permeability)

        if self.porosity is not None and not isinstance(self.porosity, str):
            self.porosity = str(self.porosity)

        if self.lithology is not None and not isinstance(self.lithology, LITHOLOGYENUM):
            self.lithology = LITHOLOGYENUM(self.lithology)

        if self.depos_env is not None and not isinstance(self.depos_env, DEPOSENVENUM):
            self.depos_env = DEPOSENVENUM(self.depos_env)

        if self.hcr_geol_age is not None and not isinstance(self.hcr_geol_age, SHAREDENUM5):
            self.hcr_geol_age = SHAREDENUM5(self.hcr_geol_age)

        if self.owc_tvdss is not None and not isinstance(self.owc_tvdss, str):
            self.owc_tvdss = str(self.owc_tvdss)

        if self.hcr_fw_salinity is not None and not isinstance(self.hcr_fw_salinity, str):
            self.hcr_fw_salinity = str(self.hcr_fw_salinity)

        if self.sr_kerog_type is not None and not isinstance(self.sr_kerog_type, SRKEROGTYPEENUM):
            self.sr_kerog_type = SRKEROGTYPEENUM(self.sr_kerog_type)

        if self.sr_lithology is not None and not isinstance(self.sr_lithology, SRLITHOLOGYENUM):
            self.sr_lithology = SRLITHOLOGYENUM(self.sr_lithology)

        if self.sr_dep_env is not None and not isinstance(self.sr_dep_env, SRDEPENVENUM):
            self.sr_dep_env = SRDEPENVENUM(self.sr_dep_env)

        if self.sr_geol_age is not None and not isinstance(self.sr_geol_age, SHAREDENUM5):
            self.sr_geol_age = SHAREDENUM5(self.sr_geol_age)

        if self.samp_well_name is not None and not isinstance(self.samp_well_name, str):
            self.samp_well_name = str(self.samp_well_name)

        if self.win is not None and not isinstance(self.win, str):
            self.win = str(self.win)

        if self.samp_subtype is not None and not isinstance(self.samp_subtype, SAMPSUBTYPEENUM):
            self.samp_subtype = SAMPSUBTYPEENUM(self.samp_subtype)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.samp_tvdss is not None and not isinstance(self.samp_tvdss, str):
            self.samp_tvdss = str(self.samp_tvdss)

        if self.samp_md is not None and not isinstance(self.samp_md, str):
            self.samp_md = str(self.samp_md)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.samp_transport_cond is not None and not isinstance(self.samp_transport_cond, str):
            self.samp_transport_cond = str(self.samp_transport_cond)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.org_count_qpcr_info is not None and not isinstance(self.org_count_qpcr_info, str):
            self.org_count_qpcr_info = str(self.org_count_qpcr_info)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.alkalinity_method is not None and not isinstance(self.alkalinity_method, str):
            self.alkalinity_method = str(self.alkalinity_method)

        if self.sulfate is not None and not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self.sulfide is not None and not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self.tot_sulfur is not None and not isinstance(self.tot_sulfur, str):
            self.tot_sulfur = str(self.tot_sulfur)

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if self.tot_nitro is not None and not isinstance(self.tot_nitro, str):
            self.tot_nitro = str(self.tot_nitro)

        if self.diss_iron is not None and not isinstance(self.diss_iron, str):
            self.diss_iron = str(self.diss_iron)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.magnesium is not None and not isinstance(self.magnesium, str):
            self.magnesium = str(self.magnesium)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.tot_iron is not None and not isinstance(self.tot_iron, str):
            self.tot_iron = str(self.tot_iron)

        if self.diss_org_carb is not None and not isinstance(self.diss_org_carb, str):
            self.diss_org_carb = str(self.diss_org_carb)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.diss_inorg_phosp is not None and not isinstance(self.diss_inorg_phosp, str):
            self.diss_inorg_phosp = str(self.diss_inorg_phosp)

        if self.tot_phosp is not None and not isinstance(self.tot_phosp, str):
            self.tot_phosp = str(self.tot_phosp)

        if not isinstance(self.suspend_solids, list):
            self.suspend_solids = [self.suspend_solids] if self.suspend_solids is not None else []
        self.suspend_solids = [v if isinstance(v, str) else str(v) for v in self.suspend_solids]

        if self.density is not None and not isinstance(self.density, str):
            self.density = str(self.density)

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.diss_oxygen_fluid is not None and not isinstance(self.diss_oxygen_fluid, str):
            self.diss_oxygen_fluid = str(self.diss_oxygen_fluid)

        if self.vfa is not None and not isinstance(self.vfa, str):
            self.vfa = str(self.vfa)

        if self.benzene is not None and not isinstance(self.benzene, str):
            self.benzene = str(self.benzene)

        if self.toluene is not None and not isinstance(self.toluene, str):
            self.toluene = str(self.toluene)

        if self.ethylbenzene is not None and not isinstance(self.ethylbenzene, str):
            self.ethylbenzene = str(self.ethylbenzene)

        if self.xylene is not None and not isinstance(self.xylene, str):
            self.xylene = str(self.xylene)

        if self.tan is not None and not isinstance(self.tan, str):
            self.tan = str(self.tan)

        if self.viscosity is not None and not isinstance(self.viscosity, str):
            self.viscosity = str(self.viscosity)

        if self.pour_point is not None and not isinstance(self.pour_point, str):
            self.pour_point = str(self.pour_point)

        if self.saturates_pc is not None and not isinstance(self.saturates_pc, str):
            self.saturates_pc = str(self.saturates_pc)

        if self.aromatics_pc is not None and not isinstance(self.aromatics_pc, str):
            self.aromatics_pc = str(self.aromatics_pc)

        if self.resins_pc is not None and not isinstance(self.resins_pc, str):
            self.resins_pc = str(self.resins_pc)

        if self.asphaltenes_pc is not None and not isinstance(self.asphaltenes_pc, str):
            self.asphaltenes_pc = str(self.asphaltenes_pc)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.additional_info is not None and not isinstance(self.additional_info, str):
            self.additional_info = str(self.additional_info)

        super().__post_init__(**kwargs)


@dataclass
class HydrocarbonResourcesFluidsSwabs(Extension):
    """
    hydrocarbon resources-fluids/swabs extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016016"]
    class_class_curie: ClassVar[str] = "MIXS:0016016"
    class_name: ClassVar[str] = "HydrocarbonResourcesFluidsSwabs"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs

    samp_name: str = None
    project_name: str = None
    hcr: Union[str, "HCRENUM"] = None
    hc_produced: Union[str, "HCPRODUCEDENUM"] = None
    basin: str = None
    water_cut: str = None
    iwf: float = None
    add_recov_method: str = None
    samp_type: str = None
    samp_collect_point: Union[str, "SAMPCOLLECTPOINTENUM"] = None
    temp: str = None
    sulfate: str = None
    sulfide: str = None
    nitrate: str = None
    api: str = None
    field: Optional[str] = None
    reservoir: Optional[str] = None
    hcr_temp: Optional[str] = None
    tvdss_of_hcr_temp: Optional[str] = None
    hcr_pressure: Optional[str] = None
    tvdss_of_hcr_press: Optional[str] = None
    lithology: Optional[Union[str, "LITHOLOGYENUM"]] = None
    depos_env: Optional[Union[str, "DEPOSENVENUM"]] = None
    hcr_geol_age: Optional[Union[str, "SHAREDENUM5"]] = None
    hcr_fw_salinity: Optional[str] = None
    sulfate_fw: Optional[str] = None
    vfa_fw: Optional[str] = None
    prod_start_date: Optional[Union[str, XSDDateTime]] = None
    prod_rate: Optional[str] = None
    water_prod_rate: Optional[str] = None
    iw_bt_date_well: Optional[Union[str, XSDDateTime]] = None
    biocide: Optional[str] = None
    biocide_admin_method: Optional[str] = None
    chem_treatment: Optional[str] = None
    chem_treat_method: Optional[str] = None
    samp_loc_corr_rate: Optional[str] = None
    samp_well_name: Optional[str] = None
    win: Optional[str] = None
    samp_subtype: Optional[Union[str, "SAMPSUBTYPEENUM"]] = None
    pressure: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    samp_preserv: Optional[str] = None
    samp_transport_cond: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    org_count_qpcr_info: Optional[str] = None
    ph: Optional[float] = None
    salinity: Optional[str] = None
    alkalinity: Optional[str] = None
    alkalinity_method: Optional[str] = None
    tot_sulfur: Optional[str] = None
    nitrite: Optional[str] = None
    ammonium: Optional[str] = None
    tot_nitro: Optional[str] = None
    diss_iron: Optional[str] = None
    sodium: Optional[str] = None
    chloride: Optional[str] = None
    potassium: Optional[str] = None
    magnesium: Optional[str] = None
    calcium: Optional[str] = None
    tot_iron: Optional[str] = None
    diss_org_carb: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    diss_inorg_phosp: Optional[str] = None
    tot_phosp: Optional[str] = None
    suspend_solids: Optional[Union[str, List[str]]] = empty_list()
    density: Optional[str] = None
    diss_carb_dioxide: Optional[str] = None
    diss_oxygen_fluid: Optional[str] = None
    vfa: Optional[str] = None
    benzene: Optional[str] = None
    toluene: Optional[str] = None
    ethylbenzene: Optional[str] = None
    xylene: Optional[str] = None
    tan: Optional[str] = None
    viscosity: Optional[str] = None
    pour_point: Optional[str] = None
    saturates_pc: Optional[str] = None
    aromatics_pc: Optional[str] = None
    resins_pc: Optional[str] = None
    asphaltenes_pc: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    additional_info: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.hcr):
            self.MissingRequiredField("hcr")
        if not isinstance(self.hcr, HCRENUM):
            self.hcr = HCRENUM(self.hcr)

        if self._is_empty(self.hc_produced):
            self.MissingRequiredField("hc_produced")
        if not isinstance(self.hc_produced, HCPRODUCEDENUM):
            self.hc_produced = HCPRODUCEDENUM(self.hc_produced)

        if self._is_empty(self.basin):
            self.MissingRequiredField("basin")
        if not isinstance(self.basin, str):
            self.basin = str(self.basin)

        if self._is_empty(self.water_cut):
            self.MissingRequiredField("water_cut")
        if not isinstance(self.water_cut, str):
            self.water_cut = str(self.water_cut)

        if self._is_empty(self.iwf):
            self.MissingRequiredField("iwf")
        if not isinstance(self.iwf, float):
            self.iwf = float(self.iwf)

        if self._is_empty(self.add_recov_method):
            self.MissingRequiredField("add_recov_method")
        if not isinstance(self.add_recov_method, str):
            self.add_recov_method = str(self.add_recov_method)

        if self._is_empty(self.samp_type):
            self.MissingRequiredField("samp_type")
        if not isinstance(self.samp_type, str):
            self.samp_type = str(self.samp_type)

        if self._is_empty(self.samp_collect_point):
            self.MissingRequiredField("samp_collect_point")
        if not isinstance(self.samp_collect_point, SAMPCOLLECTPOINTENUM):
            self.samp_collect_point = SAMPCOLLECTPOINTENUM(self.samp_collect_point)

        if self._is_empty(self.temp):
            self.MissingRequiredField("temp")
        if not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self._is_empty(self.sulfate):
            self.MissingRequiredField("sulfate")
        if not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self._is_empty(self.sulfide):
            self.MissingRequiredField("sulfide")
        if not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self._is_empty(self.nitrate):
            self.MissingRequiredField("nitrate")
        if not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self._is_empty(self.api):
            self.MissingRequiredField("api")
        if not isinstance(self.api, str):
            self.api = str(self.api)

        if self.field is not None and not isinstance(self.field, str):
            self.field = str(self.field)

        if self.reservoir is not None and not isinstance(self.reservoir, str):
            self.reservoir = str(self.reservoir)

        if self.hcr_temp is not None and not isinstance(self.hcr_temp, str):
            self.hcr_temp = str(self.hcr_temp)

        if self.tvdss_of_hcr_temp is not None and not isinstance(self.tvdss_of_hcr_temp, str):
            self.tvdss_of_hcr_temp = str(self.tvdss_of_hcr_temp)

        if self.hcr_pressure is not None and not isinstance(self.hcr_pressure, str):
            self.hcr_pressure = str(self.hcr_pressure)

        if self.tvdss_of_hcr_press is not None and not isinstance(self.tvdss_of_hcr_press, str):
            self.tvdss_of_hcr_press = str(self.tvdss_of_hcr_press)

        if self.lithology is not None and not isinstance(self.lithology, LITHOLOGYENUM):
            self.lithology = LITHOLOGYENUM(self.lithology)

        if self.depos_env is not None and not isinstance(self.depos_env, DEPOSENVENUM):
            self.depos_env = DEPOSENVENUM(self.depos_env)

        if self.hcr_geol_age is not None and not isinstance(self.hcr_geol_age, SHAREDENUM5):
            self.hcr_geol_age = SHAREDENUM5(self.hcr_geol_age)

        if self.hcr_fw_salinity is not None and not isinstance(self.hcr_fw_salinity, str):
            self.hcr_fw_salinity = str(self.hcr_fw_salinity)

        if self.sulfate_fw is not None and not isinstance(self.sulfate_fw, str):
            self.sulfate_fw = str(self.sulfate_fw)

        if self.vfa_fw is not None and not isinstance(self.vfa_fw, str):
            self.vfa_fw = str(self.vfa_fw)

        if self.prod_start_date is not None and not isinstance(self.prod_start_date, XSDDateTime):
            self.prod_start_date = XSDDateTime(self.prod_start_date)

        if self.prod_rate is not None and not isinstance(self.prod_rate, str):
            self.prod_rate = str(self.prod_rate)

        if self.water_prod_rate is not None and not isinstance(self.water_prod_rate, str):
            self.water_prod_rate = str(self.water_prod_rate)

        if self.iw_bt_date_well is not None and not isinstance(self.iw_bt_date_well, XSDDateTime):
            self.iw_bt_date_well = XSDDateTime(self.iw_bt_date_well)

        if self.biocide is not None and not isinstance(self.biocide, str):
            self.biocide = str(self.biocide)

        if self.biocide_admin_method is not None and not isinstance(self.biocide_admin_method, str):
            self.biocide_admin_method = str(self.biocide_admin_method)

        if self.chem_treatment is not None and not isinstance(self.chem_treatment, str):
            self.chem_treatment = str(self.chem_treatment)

        if self.chem_treat_method is not None and not isinstance(self.chem_treat_method, str):
            self.chem_treat_method = str(self.chem_treat_method)

        if self.samp_loc_corr_rate is not None and not isinstance(self.samp_loc_corr_rate, str):
            self.samp_loc_corr_rate = str(self.samp_loc_corr_rate)

        if self.samp_well_name is not None and not isinstance(self.samp_well_name, str):
            self.samp_well_name = str(self.samp_well_name)

        if self.win is not None and not isinstance(self.win, str):
            self.win = str(self.win)

        if self.samp_subtype is not None and not isinstance(self.samp_subtype, SAMPSUBTYPEENUM):
            self.samp_subtype = SAMPSUBTYPEENUM(self.samp_subtype)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.samp_preserv is not None and not isinstance(self.samp_preserv, str):
            self.samp_preserv = str(self.samp_preserv)

        if self.samp_transport_cond is not None and not isinstance(self.samp_transport_cond, str):
            self.samp_transport_cond = str(self.samp_transport_cond)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.org_count_qpcr_info is not None and not isinstance(self.org_count_qpcr_info, str):
            self.org_count_qpcr_info = str(self.org_count_qpcr_info)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.alkalinity_method is not None and not isinstance(self.alkalinity_method, str):
            self.alkalinity_method = str(self.alkalinity_method)

        if self.tot_sulfur is not None and not isinstance(self.tot_sulfur, str):
            self.tot_sulfur = str(self.tot_sulfur)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if self.tot_nitro is not None and not isinstance(self.tot_nitro, str):
            self.tot_nitro = str(self.tot_nitro)

        if self.diss_iron is not None and not isinstance(self.diss_iron, str):
            self.diss_iron = str(self.diss_iron)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.magnesium is not None and not isinstance(self.magnesium, str):
            self.magnesium = str(self.magnesium)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.tot_iron is not None and not isinstance(self.tot_iron, str):
            self.tot_iron = str(self.tot_iron)

        if self.diss_org_carb is not None and not isinstance(self.diss_org_carb, str):
            self.diss_org_carb = str(self.diss_org_carb)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.diss_inorg_phosp is not None and not isinstance(self.diss_inorg_phosp, str):
            self.diss_inorg_phosp = str(self.diss_inorg_phosp)

        if self.tot_phosp is not None and not isinstance(self.tot_phosp, str):
            self.tot_phosp = str(self.tot_phosp)

        if not isinstance(self.suspend_solids, list):
            self.suspend_solids = [self.suspend_solids] if self.suspend_solids is not None else []
        self.suspend_solids = [v if isinstance(v, str) else str(v) for v in self.suspend_solids]

        if self.density is not None and not isinstance(self.density, str):
            self.density = str(self.density)

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.diss_oxygen_fluid is not None and not isinstance(self.diss_oxygen_fluid, str):
            self.diss_oxygen_fluid = str(self.diss_oxygen_fluid)

        if self.vfa is not None and not isinstance(self.vfa, str):
            self.vfa = str(self.vfa)

        if self.benzene is not None and not isinstance(self.benzene, str):
            self.benzene = str(self.benzene)

        if self.toluene is not None and not isinstance(self.toluene, str):
            self.toluene = str(self.toluene)

        if self.ethylbenzene is not None and not isinstance(self.ethylbenzene, str):
            self.ethylbenzene = str(self.ethylbenzene)

        if self.xylene is not None and not isinstance(self.xylene, str):
            self.xylene = str(self.xylene)

        if self.tan is not None and not isinstance(self.tan, str):
            self.tan = str(self.tan)

        if self.viscosity is not None and not isinstance(self.viscosity, str):
            self.viscosity = str(self.viscosity)

        if self.pour_point is not None and not isinstance(self.pour_point, str):
            self.pour_point = str(self.pour_point)

        if self.saturates_pc is not None and not isinstance(self.saturates_pc, str):
            self.saturates_pc = str(self.saturates_pc)

        if self.aromatics_pc is not None and not isinstance(self.aromatics_pc, str):
            self.aromatics_pc = str(self.aromatics_pc)

        if self.resins_pc is not None and not isinstance(self.resins_pc, str):
            self.resins_pc = str(self.resins_pc)

        if self.asphaltenes_pc is not None and not isinstance(self.asphaltenes_pc, str):
            self.asphaltenes_pc = str(self.asphaltenes_pc)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.additional_info is not None and not isinstance(self.additional_info, str):
            self.additional_info = str(self.additional_info)

        super().__post_init__(**kwargs)


@dataclass
class MicrobialMatBiofilm(Extension):
    """
    microbial mat/biofilm extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016008"]
    class_class_curie: ClassVar[str] = "MIXS:0016008"
    class_name: ClassVar[str] = "MicrobialMatBiofilm"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MicrobialMatBiofilm

    samp_name: str = None
    project_name: str = None
    depth: Optional[str] = None
    elev: Optional[str] = None
    alkalinity: Optional[str] = None
    alkyl_diethers: Optional[str] = None
    aminopept_act: Optional[str] = None
    ammonium: Optional[str] = None
    bacteria_carb_prod: Optional[str] = None
    biomass: Optional[Union[str, List[str]]] = empty_list()
    bishomohopanol: Optional[str] = None
    bromide: Optional[str] = None
    calcium: Optional[str] = None
    carb_nitro_ratio: Optional[float] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    chloride: Optional[str] = None
    chlorophyll: Optional[str] = None
    diether_lipids: Optional[Union[str, List[str]]] = empty_list()
    diss_carb_dioxide: Optional[str] = None
    diss_hydrogen: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    diss_org_carb: Optional[str] = None
    diss_org_nitro: Optional[str] = None
    diss_oxygen: Optional[str] = None
    glucosidase_act: Optional[str] = None
    magnesium: Optional[str] = None
    mean_frict_vel: Optional[str] = None
    mean_peak_frict_vel: Optional[str] = None
    methane: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    n_alkanes: Optional[Union[str, List[str]]] = empty_list()
    nitrate: Optional[str] = None
    nitrite: Optional[str] = None
    nitro: Optional[str] = None
    org_carb: Optional[str] = None
    org_matter: Optional[str] = None
    org_nitro: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    ph: Optional[float] = None
    part_org_carb: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    petroleum_hydrocarb: Optional[str] = None
    phaeopigments: Optional[Union[str, List[str]]] = empty_list()
    phosphate: Optional[str] = None
    phosplipid_fatt_acid: Optional[Union[str, List[str]]] = empty_list()
    potassium: Optional[str] = None
    pressure: Optional[str] = None
    redox_potential: Optional[str] = None
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    silicate: Optional[str] = None
    sodium: Optional[str] = None
    sulfate: Optional[str] = None
    sulfide: Optional[str] = None
    temp: Optional[str] = None
    tot_carb: Optional[str] = None
    tot_nitro_content: Optional[str] = None
    tot_org_carb: Optional[str] = None
    turbidity: Optional[str] = None
    water_content: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.alkyl_diethers is not None and not isinstance(self.alkyl_diethers, str):
            self.alkyl_diethers = str(self.alkyl_diethers)

        if self.aminopept_act is not None and not isinstance(self.aminopept_act, str):
            self.aminopept_act = str(self.aminopept_act)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if self.bacteria_carb_prod is not None and not isinstance(self.bacteria_carb_prod, str):
            self.bacteria_carb_prod = str(self.bacteria_carb_prod)

        if not isinstance(self.biomass, list):
            self.biomass = [self.biomass] if self.biomass is not None else []
        self.biomass = [v if isinstance(v, str) else str(v) for v in self.biomass]

        if self.bishomohopanol is not None and not isinstance(self.bishomohopanol, str):
            self.bishomohopanol = str(self.bishomohopanol)

        if self.bromide is not None and not isinstance(self.bromide, str):
            self.bromide = str(self.bromide)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.carb_nitro_ratio is not None and not isinstance(self.carb_nitro_ratio, float):
            self.carb_nitro_ratio = float(self.carb_nitro_ratio)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.chlorophyll is not None and not isinstance(self.chlorophyll, str):
            self.chlorophyll = str(self.chlorophyll)

        if not isinstance(self.diether_lipids, list):
            self.diether_lipids = [self.diether_lipids] if self.diether_lipids is not None else []
        self.diether_lipids = [v if isinstance(v, str) else str(v) for v in self.diether_lipids]

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.diss_hydrogen is not None and not isinstance(self.diss_hydrogen, str):
            self.diss_hydrogen = str(self.diss_hydrogen)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.diss_org_carb is not None and not isinstance(self.diss_org_carb, str):
            self.diss_org_carb = str(self.diss_org_carb)

        if self.diss_org_nitro is not None and not isinstance(self.diss_org_nitro, str):
            self.diss_org_nitro = str(self.diss_org_nitro)

        if self.diss_oxygen is not None and not isinstance(self.diss_oxygen, str):
            self.diss_oxygen = str(self.diss_oxygen)

        if self.glucosidase_act is not None and not isinstance(self.glucosidase_act, str):
            self.glucosidase_act = str(self.glucosidase_act)

        if self.magnesium is not None and not isinstance(self.magnesium, str):
            self.magnesium = str(self.magnesium)

        if self.mean_frict_vel is not None and not isinstance(self.mean_frict_vel, str):
            self.mean_frict_vel = str(self.mean_frict_vel)

        if self.mean_peak_frict_vel is not None and not isinstance(self.mean_peak_frict_vel, str):
            self.mean_peak_frict_vel = str(self.mean_peak_frict_vel)

        if self.methane is not None and not isinstance(self.methane, str):
            self.methane = str(self.methane)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if not isinstance(self.n_alkanes, list):
            self.n_alkanes = [self.n_alkanes] if self.n_alkanes is not None else []
        self.n_alkanes = [v if isinstance(v, str) else str(v) for v in self.n_alkanes]

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.nitro is not None and not isinstance(self.nitro, str):
            self.nitro = str(self.nitro)

        if self.org_carb is not None and not isinstance(self.org_carb, str):
            self.org_carb = str(self.org_carb)

        if self.org_matter is not None and not isinstance(self.org_matter, str):
            self.org_matter = str(self.org_matter)

        if self.org_nitro is not None and not isinstance(self.org_nitro, str):
            self.org_nitro = str(self.org_nitro)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if self.part_org_carb is not None and not isinstance(self.part_org_carb, str):
            self.part_org_carb = str(self.part_org_carb)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.petroleum_hydrocarb is not None and not isinstance(self.petroleum_hydrocarb, str):
            self.petroleum_hydrocarb = str(self.petroleum_hydrocarb)

        if not isinstance(self.phaeopigments, list):
            self.phaeopigments = [self.phaeopigments] if self.phaeopigments is not None else []
        self.phaeopigments = [v if isinstance(v, str) else str(v) for v in self.phaeopigments]

        if self.phosphate is not None and not isinstance(self.phosphate, str):
            self.phosphate = str(self.phosphate)

        if not isinstance(self.phosplipid_fatt_acid, list):
            self.phosplipid_fatt_acid = [self.phosplipid_fatt_acid] if self.phosplipid_fatt_acid is not None else []
        self.phosplipid_fatt_acid = [v if isinstance(v, str) else str(v) for v in self.phosplipid_fatt_acid]

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.redox_potential is not None and not isinstance(self.redox_potential, str):
            self.redox_potential = str(self.redox_potential)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.silicate is not None and not isinstance(self.silicate, str):
            self.silicate = str(self.silicate)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.sulfate is not None and not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self.sulfide is not None and not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.tot_carb is not None and not isinstance(self.tot_carb, str):
            self.tot_carb = str(self.tot_carb)

        if self.tot_nitro_content is not None and not isinstance(self.tot_nitro_content, str):
            self.tot_nitro_content = str(self.tot_nitro_content)

        if self.tot_org_carb is not None and not isinstance(self.tot_org_carb, str):
            self.tot_org_carb = str(self.tot_org_carb)

        if self.turbidity is not None and not isinstance(self.turbidity, str):
            self.turbidity = str(self.turbidity)

        if self.water_content is not None and not isinstance(self.water_content, str):
            self.water_content = str(self.water_content)

        super().__post_init__(**kwargs)


@dataclass
class MiscellaneousNaturalOrArtificialEnvironment(Extension):
    """
    miscellaneous natural or artificial environment extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016009"]
    class_class_curie: ClassVar[str] = "MIXS:0016009"
    class_name: ClassVar[str] = "MiscellaneousNaturalOrArtificialEnvironment"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment

    samp_name: str = None
    project_name: str = None
    alt: Optional[str] = None
    depth: Optional[str] = None
    elev: Optional[str] = None
    alkalinity: Optional[str] = None
    ammonium: Optional[str] = None
    biomass: Optional[Union[str, List[str]]] = empty_list()
    bromide: Optional[str] = None
    calcium: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    chloride: Optional[str] = None
    chlorophyll: Optional[str] = None
    density: Optional[str] = None
    diether_lipids: Optional[Union[str, List[str]]] = empty_list()
    diss_carb_dioxide: Optional[str] = None
    diss_hydrogen: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    diss_org_nitro: Optional[str] = None
    diss_oxygen: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    nitrate: Optional[str] = None
    nitrite: Optional[str] = None
    nitro: Optional[str] = None
    org_carb: Optional[str] = None
    org_matter: Optional[str] = None
    org_nitro: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    ph: Optional[float] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    phosphate: Optional[str] = None
    phosplipid_fatt_acid: Optional[Union[str, List[str]]] = empty_list()
    potassium: Optional[str] = None
    pressure: Optional[str] = None
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    silicate: Optional[str] = None
    sodium: Optional[str] = None
    sulfate: Optional[str] = None
    sulfide: Optional[str] = None
    temp: Optional[str] = None
    water_current: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if not isinstance(self.biomass, list):
            self.biomass = [self.biomass] if self.biomass is not None else []
        self.biomass = [v if isinstance(v, str) else str(v) for v in self.biomass]

        if self.bromide is not None and not isinstance(self.bromide, str):
            self.bromide = str(self.bromide)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.chlorophyll is not None and not isinstance(self.chlorophyll, str):
            self.chlorophyll = str(self.chlorophyll)

        if self.density is not None and not isinstance(self.density, str):
            self.density = str(self.density)

        if not isinstance(self.diether_lipids, list):
            self.diether_lipids = [self.diether_lipids] if self.diether_lipids is not None else []
        self.diether_lipids = [v if isinstance(v, str) else str(v) for v in self.diether_lipids]

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.diss_hydrogen is not None and not isinstance(self.diss_hydrogen, str):
            self.diss_hydrogen = str(self.diss_hydrogen)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.diss_org_nitro is not None and not isinstance(self.diss_org_nitro, str):
            self.diss_org_nitro = str(self.diss_org_nitro)

        if self.diss_oxygen is not None and not isinstance(self.diss_oxygen, str):
            self.diss_oxygen = str(self.diss_oxygen)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.nitro is not None and not isinstance(self.nitro, str):
            self.nitro = str(self.nitro)

        if self.org_carb is not None and not isinstance(self.org_carb, str):
            self.org_carb = str(self.org_carb)

        if self.org_matter is not None and not isinstance(self.org_matter, str):
            self.org_matter = str(self.org_matter)

        if self.org_nitro is not None and not isinstance(self.org_nitro, str):
            self.org_nitro = str(self.org_nitro)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.phosphate is not None and not isinstance(self.phosphate, str):
            self.phosphate = str(self.phosphate)

        if not isinstance(self.phosplipid_fatt_acid, list):
            self.phosplipid_fatt_acid = [self.phosplipid_fatt_acid] if self.phosplipid_fatt_acid is not None else []
        self.phosplipid_fatt_acid = [v if isinstance(v, str) else str(v) for v in self.phosplipid_fatt_acid]

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.silicate is not None and not isinstance(self.silicate, str):
            self.silicate = str(self.silicate)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.sulfate is not None and not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self.sulfide is not None and not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.water_current is not None and not isinstance(self.water_current, str):
            self.water_current = str(self.water_current)

        super().__post_init__(**kwargs)


@dataclass
class PlantAssociated(Extension):
    """
    plant-associated extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016010"]
    class_class_curie: ClassVar[str] = "MIXS:0016010"
    class_name: ClassVar[str] = "PlantAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.PlantAssociated

    samp_name: str = None
    project_name: str = None
    depth: Optional[str] = None
    elev: Optional[str] = None
    air_temp_regm: Optional[Union[str, List[str]]] = empty_list()
    ances_data: Optional[str] = None
    antibiotic_regm: Optional[Union[str, List[str]]] = empty_list()
    biol_stat: Optional[str] = None
    biotic_regm: Optional[Union[str, List[str]]] = empty_list()
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    chem_mutagen: Optional[Union[str, List[str]]] = empty_list()
    climate_environment: Optional[Union[str, List[str]]] = empty_list()
    cult_root_med: Optional[str] = None
    fertilizer_regm: Optional[Union[str, List[str]]] = empty_list()
    fungicide_regm: Optional[Union[str, List[str]]] = empty_list()
    gaseous_environment: Optional[Union[str, List[str]]] = empty_list()
    genetic_mod: Optional[str] = None
    gravity: Optional[Union[str, List[str]]] = empty_list()
    growth_facil: Optional[str] = None
    growth_habit: Optional[Union[str, "GROWTHHABITENUM"]] = None
    growth_hormone_regm: Optional[Union[str, List[str]]] = empty_list()
    herbicide_regm: Optional[Union[str, List[str]]] = empty_list()
    host_age: Optional[str] = None
    host_common_name: Optional[str] = None
    host_disease_stat: Optional[str] = None
    host_dry_mass: Optional[str] = None
    host_genotype: Optional[str] = None
    host_height: Optional[str] = None
    host_subspecf_genlin: Optional[Union[str, List[str]]] = empty_list()
    host_length: Optional[str] = None
    host_life_stage: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_taxid: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_wet_mass: Optional[str] = None
    humidity_regm: Optional[Union[str, List[str]]] = empty_list()
    light_regm: Optional[str] = None
    mechanical_damage: Optional[Union[str, List[str]]] = empty_list()
    mineral_nutr_regm: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    non_min_nutr_regm: Optional[Union[str, List[str]]] = empty_list()
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    ph_regm: Optional[Union[str, List[str]]] = empty_list()
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    pesticide_regm: Optional[Union[str, List[str]]] = empty_list()
    plant_growth_med: Optional[str] = None
    plant_product: Optional[str] = None
    plant_sex: Optional[Union[str, "PLANTSEXENUM"]] = None
    plant_struc: Optional[str] = None
    radiation_regm: Optional[Union[str, List[str]]] = empty_list()
    rainfall_regm: Optional[Union[str, List[str]]] = empty_list()
    root_cond: Optional[str] = None
    root_med_carbon: Optional[str] = None
    root_med_macronutr: Optional[str] = None
    root_med_micronutr: Optional[str] = None
    root_med_suppl: Optional[str] = None
    root_med_ph: Optional[float] = None
    root_med_regl: Optional[str] = None
    root_med_solid: Optional[str] = None
    salt_regm: Optional[Union[str, List[str]]] = empty_list()
    samp_capt_status: Optional[Union[str, "SAMPCAPTSTATUSENUM"]] = None
    samp_dis_stage: Optional[Union[str, "SAMPDISSTAGEENUM"]] = None
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    season_environment: Optional[Union[str, List[str]]] = empty_list()
    standing_water_regm: Optional[Union[str, List[str]]] = empty_list()
    temp: Optional[str] = None
    tiss_cult_growth_med: Optional[str] = None
    water_temp_regm: Optional[Union[str, List[str]]] = empty_list()
    watering_regm: Optional[Union[str, List[str]]] = empty_list()
    host_symbiont: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if not isinstance(self.air_temp_regm, list):
            self.air_temp_regm = [self.air_temp_regm] if self.air_temp_regm is not None else []
        self.air_temp_regm = [v if isinstance(v, str) else str(v) for v in self.air_temp_regm]

        if self.ances_data is not None and not isinstance(self.ances_data, str):
            self.ances_data = str(self.ances_data)

        if not isinstance(self.antibiotic_regm, list):
            self.antibiotic_regm = [self.antibiotic_regm] if self.antibiotic_regm is not None else []
        self.antibiotic_regm = [v if isinstance(v, str) else str(v) for v in self.antibiotic_regm]

        if self.biol_stat is not None and not isinstance(self.biol_stat, str):
            self.biol_stat = str(self.biol_stat)

        if not isinstance(self.biotic_regm, list):
            self.biotic_regm = [self.biotic_regm] if self.biotic_regm is not None else []
        self.biotic_regm = [v if isinstance(v, str) else str(v) for v in self.biotic_regm]

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.chem_mutagen, list):
            self.chem_mutagen = [self.chem_mutagen] if self.chem_mutagen is not None else []
        self.chem_mutagen = [v if isinstance(v, str) else str(v) for v in self.chem_mutagen]

        if not isinstance(self.climate_environment, list):
            self.climate_environment = [self.climate_environment] if self.climate_environment is not None else []
        self.climate_environment = [v if isinstance(v, str) else str(v) for v in self.climate_environment]

        if self.cult_root_med is not None and not isinstance(self.cult_root_med, str):
            self.cult_root_med = str(self.cult_root_med)

        if not isinstance(self.fertilizer_regm, list):
            self.fertilizer_regm = [self.fertilizer_regm] if self.fertilizer_regm is not None else []
        self.fertilizer_regm = [v if isinstance(v, str) else str(v) for v in self.fertilizer_regm]

        if not isinstance(self.fungicide_regm, list):
            self.fungicide_regm = [self.fungicide_regm] if self.fungicide_regm is not None else []
        self.fungicide_regm = [v if isinstance(v, str) else str(v) for v in self.fungicide_regm]

        if not isinstance(self.gaseous_environment, list):
            self.gaseous_environment = [self.gaseous_environment] if self.gaseous_environment is not None else []
        self.gaseous_environment = [v if isinstance(v, str) else str(v) for v in self.gaseous_environment]

        if self.genetic_mod is not None and not isinstance(self.genetic_mod, str):
            self.genetic_mod = str(self.genetic_mod)

        if not isinstance(self.gravity, list):
            self.gravity = [self.gravity] if self.gravity is not None else []
        self.gravity = [v if isinstance(v, str) else str(v) for v in self.gravity]

        if self.growth_facil is not None and not isinstance(self.growth_facil, str):
            self.growth_facil = str(self.growth_facil)

        if self.growth_habit is not None and not isinstance(self.growth_habit, GROWTHHABITENUM):
            self.growth_habit = GROWTHHABITENUM(self.growth_habit)

        if not isinstance(self.growth_hormone_regm, list):
            self.growth_hormone_regm = [self.growth_hormone_regm] if self.growth_hormone_regm is not None else []
        self.growth_hormone_regm = [v if isinstance(v, str) else str(v) for v in self.growth_hormone_regm]

        if not isinstance(self.herbicide_regm, list):
            self.herbicide_regm = [self.herbicide_regm] if self.herbicide_regm is not None else []
        self.herbicide_regm = [v if isinstance(v, str) else str(v) for v in self.herbicide_regm]

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.host_common_name is not None and not isinstance(self.host_common_name, str):
            self.host_common_name = str(self.host_common_name)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.host_dry_mass is not None and not isinstance(self.host_dry_mass, str):
            self.host_dry_mass = str(self.host_dry_mass)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if not isinstance(self.host_subspecf_genlin, list):
            self.host_subspecf_genlin = [self.host_subspecf_genlin] if self.host_subspecf_genlin is not None else []
        self.host_subspecf_genlin = [v if isinstance(v, str) else str(v) for v in self.host_subspecf_genlin]

        if self.host_length is not None and not isinstance(self.host_length, str):
            self.host_length = str(self.host_length)

        if self.host_life_stage is not None and not isinstance(self.host_life_stage, str):
            self.host_life_stage = str(self.host_life_stage)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_taxid is not None and not isinstance(self.host_taxid, str):
            self.host_taxid = str(self.host_taxid)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_wet_mass is not None and not isinstance(self.host_wet_mass, str):
            self.host_wet_mass = str(self.host_wet_mass)

        if not isinstance(self.humidity_regm, list):
            self.humidity_regm = [self.humidity_regm] if self.humidity_regm is not None else []
        self.humidity_regm = [v if isinstance(v, str) else str(v) for v in self.humidity_regm]

        if self.light_regm is not None and not isinstance(self.light_regm, str):
            self.light_regm = str(self.light_regm)

        if not isinstance(self.mechanical_damage, list):
            self.mechanical_damage = [self.mechanical_damage] if self.mechanical_damage is not None else []
        self.mechanical_damage = [v if isinstance(v, str) else str(v) for v in self.mechanical_damage]

        if not isinstance(self.mineral_nutr_regm, list):
            self.mineral_nutr_regm = [self.mineral_nutr_regm] if self.mineral_nutr_regm is not None else []
        self.mineral_nutr_regm = [v if isinstance(v, str) else str(v) for v in self.mineral_nutr_regm]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if not isinstance(self.non_min_nutr_regm, list):
            self.non_min_nutr_regm = [self.non_min_nutr_regm] if self.non_min_nutr_regm is not None else []
        self.non_min_nutr_regm = [v if isinstance(v, str) else str(v) for v in self.non_min_nutr_regm]

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if not isinstance(self.ph_regm, list):
            self.ph_regm = [self.ph_regm] if self.ph_regm is not None else []
        self.ph_regm = [v if isinstance(v, str) else str(v) for v in self.ph_regm]

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if not isinstance(self.pesticide_regm, list):
            self.pesticide_regm = [self.pesticide_regm] if self.pesticide_regm is not None else []
        self.pesticide_regm = [v if isinstance(v, str) else str(v) for v in self.pesticide_regm]

        if self.plant_growth_med is not None and not isinstance(self.plant_growth_med, str):
            self.plant_growth_med = str(self.plant_growth_med)

        if self.plant_product is not None and not isinstance(self.plant_product, str):
            self.plant_product = str(self.plant_product)

        if self.plant_sex is not None and not isinstance(self.plant_sex, PLANTSEXENUM):
            self.plant_sex = PLANTSEXENUM(self.plant_sex)

        if self.plant_struc is not None and not isinstance(self.plant_struc, str):
            self.plant_struc = str(self.plant_struc)

        if not isinstance(self.radiation_regm, list):
            self.radiation_regm = [self.radiation_regm] if self.radiation_regm is not None else []
        self.radiation_regm = [v if isinstance(v, str) else str(v) for v in self.radiation_regm]

        if not isinstance(self.rainfall_regm, list):
            self.rainfall_regm = [self.rainfall_regm] if self.rainfall_regm is not None else []
        self.rainfall_regm = [v if isinstance(v, str) else str(v) for v in self.rainfall_regm]

        if self.root_cond is not None and not isinstance(self.root_cond, str):
            self.root_cond = str(self.root_cond)

        if self.root_med_carbon is not None and not isinstance(self.root_med_carbon, str):
            self.root_med_carbon = str(self.root_med_carbon)

        if self.root_med_macronutr is not None and not isinstance(self.root_med_macronutr, str):
            self.root_med_macronutr = str(self.root_med_macronutr)

        if self.root_med_micronutr is not None and not isinstance(self.root_med_micronutr, str):
            self.root_med_micronutr = str(self.root_med_micronutr)

        if self.root_med_suppl is not None and not isinstance(self.root_med_suppl, str):
            self.root_med_suppl = str(self.root_med_suppl)

        if self.root_med_ph is not None and not isinstance(self.root_med_ph, float):
            self.root_med_ph = float(self.root_med_ph)

        if self.root_med_regl is not None and not isinstance(self.root_med_regl, str):
            self.root_med_regl = str(self.root_med_regl)

        if self.root_med_solid is not None and not isinstance(self.root_med_solid, str):
            self.root_med_solid = str(self.root_med_solid)

        if not isinstance(self.salt_regm, list):
            self.salt_regm = [self.salt_regm] if self.salt_regm is not None else []
        self.salt_regm = [v if isinstance(v, str) else str(v) for v in self.salt_regm]

        if self.samp_capt_status is not None and not isinstance(self.samp_capt_status, SAMPCAPTSTATUSENUM):
            self.samp_capt_status = SAMPCAPTSTATUSENUM(self.samp_capt_status)

        if self.samp_dis_stage is not None and not isinstance(self.samp_dis_stage, SAMPDISSTAGEENUM):
            self.samp_dis_stage = SAMPDISSTAGEENUM(self.samp_dis_stage)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if not isinstance(self.season_environment, list):
            self.season_environment = [self.season_environment] if self.season_environment is not None else []
        self.season_environment = [v if isinstance(v, str) else str(v) for v in self.season_environment]

        if not isinstance(self.standing_water_regm, list):
            self.standing_water_regm = [self.standing_water_regm] if self.standing_water_regm is not None else []
        self.standing_water_regm = [v if isinstance(v, str) else str(v) for v in self.standing_water_regm]

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.tiss_cult_growth_med is not None and not isinstance(self.tiss_cult_growth_med, str):
            self.tiss_cult_growth_med = str(self.tiss_cult_growth_med)

        if not isinstance(self.water_temp_regm, list):
            self.water_temp_regm = [self.water_temp_regm] if self.water_temp_regm is not None else []
        self.water_temp_regm = [v if isinstance(v, str) else str(v) for v in self.water_temp_regm]

        if not isinstance(self.watering_regm, list):
            self.watering_regm = [self.watering_regm] if self.watering_regm is not None else []
        self.watering_regm = [v if isinstance(v, str) else str(v) for v in self.watering_regm]

        if not isinstance(self.host_symbiont, list):
            self.host_symbiont = [self.host_symbiont] if self.host_symbiont is not None else []
        self.host_symbiont = [v if isinstance(v, str) else str(v) for v in self.host_symbiont]

        super().__post_init__(**kwargs)


@dataclass
class Sediment(Extension):
    """
    sediment extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016011"]
    class_class_curie: ClassVar[str] = "MIXS:0016011"
    class_name: ClassVar[str] = "Sediment"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.Sediment

    samp_name: str = None
    project_name: str = None
    depth: str = None
    elev: Optional[str] = None
    alkalinity: Optional[str] = None
    alkyl_diethers: Optional[str] = None
    aminopept_act: Optional[str] = None
    ammonium: Optional[str] = None
    bacteria_carb_prod: Optional[str] = None
    biomass: Optional[Union[str, List[str]]] = empty_list()
    bishomohopanol: Optional[str] = None
    bromide: Optional[str] = None
    calcium: Optional[str] = None
    carb_nitro_ratio: Optional[float] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    chloride: Optional[str] = None
    chlorophyll: Optional[str] = None
    density: Optional[str] = None
    diether_lipids: Optional[Union[str, List[str]]] = empty_list()
    diss_carb_dioxide: Optional[str] = None
    diss_hydrogen: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    diss_org_carb: Optional[str] = None
    diss_org_nitro: Optional[str] = None
    diss_oxygen: Optional[str] = None
    glucosidase_act: Optional[str] = None
    magnesium: Optional[str] = None
    mean_frict_vel: Optional[str] = None
    mean_peak_frict_vel: Optional[str] = None
    methane: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    n_alkanes: Optional[Union[str, List[str]]] = empty_list()
    nitrate: Optional[str] = None
    nitrite: Optional[str] = None
    nitro: Optional[str] = None
    org_carb: Optional[str] = None
    org_matter: Optional[str] = None
    org_nitro: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    ph: Optional[float] = None
    particle_class: Optional[Union[str, List[str]]] = empty_list()
    part_org_carb: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    petroleum_hydrocarb: Optional[str] = None
    phaeopigments: Optional[Union[str, List[str]]] = empty_list()
    phosphate: Optional[str] = None
    phosplipid_fatt_acid: Optional[Union[str, List[str]]] = empty_list()
    porosity: Optional[str] = None
    potassium: Optional[str] = None
    pressure: Optional[str] = None
    redox_potential: Optional[str] = None
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    sediment_type: Optional[Union[str, "SEDIMENTTYPEENUM"]] = None
    silicate: Optional[str] = None
    sodium: Optional[str] = None
    sulfate: Optional[str] = None
    sulfide: Optional[str] = None
    temp: Optional[str] = None
    tidal_stage: Optional[Union[str, "TIDALSTAGEENUM"]] = None
    tot_carb: Optional[str] = None
    tot_depth_water_col: Optional[str] = None
    tot_nitro_content: Optional[str] = None
    tot_org_carb: Optional[str] = None
    turbidity: Optional[str] = None
    water_content: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.depth):
            self.MissingRequiredField("depth")
        if not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.alkyl_diethers is not None and not isinstance(self.alkyl_diethers, str):
            self.alkyl_diethers = str(self.alkyl_diethers)

        if self.aminopept_act is not None and not isinstance(self.aminopept_act, str):
            self.aminopept_act = str(self.aminopept_act)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if self.bacteria_carb_prod is not None and not isinstance(self.bacteria_carb_prod, str):
            self.bacteria_carb_prod = str(self.bacteria_carb_prod)

        if not isinstance(self.biomass, list):
            self.biomass = [self.biomass] if self.biomass is not None else []
        self.biomass = [v if isinstance(v, str) else str(v) for v in self.biomass]

        if self.bishomohopanol is not None and not isinstance(self.bishomohopanol, str):
            self.bishomohopanol = str(self.bishomohopanol)

        if self.bromide is not None and not isinstance(self.bromide, str):
            self.bromide = str(self.bromide)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.carb_nitro_ratio is not None and not isinstance(self.carb_nitro_ratio, float):
            self.carb_nitro_ratio = float(self.carb_nitro_ratio)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.chlorophyll is not None and not isinstance(self.chlorophyll, str):
            self.chlorophyll = str(self.chlorophyll)

        if self.density is not None and not isinstance(self.density, str):
            self.density = str(self.density)

        if not isinstance(self.diether_lipids, list):
            self.diether_lipids = [self.diether_lipids] if self.diether_lipids is not None else []
        self.diether_lipids = [v if isinstance(v, str) else str(v) for v in self.diether_lipids]

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.diss_hydrogen is not None and not isinstance(self.diss_hydrogen, str):
            self.diss_hydrogen = str(self.diss_hydrogen)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.diss_org_carb is not None and not isinstance(self.diss_org_carb, str):
            self.diss_org_carb = str(self.diss_org_carb)

        if self.diss_org_nitro is not None and not isinstance(self.diss_org_nitro, str):
            self.diss_org_nitro = str(self.diss_org_nitro)

        if self.diss_oxygen is not None and not isinstance(self.diss_oxygen, str):
            self.diss_oxygen = str(self.diss_oxygen)

        if self.glucosidase_act is not None and not isinstance(self.glucosidase_act, str):
            self.glucosidase_act = str(self.glucosidase_act)

        if self.magnesium is not None and not isinstance(self.magnesium, str):
            self.magnesium = str(self.magnesium)

        if self.mean_frict_vel is not None and not isinstance(self.mean_frict_vel, str):
            self.mean_frict_vel = str(self.mean_frict_vel)

        if self.mean_peak_frict_vel is not None and not isinstance(self.mean_peak_frict_vel, str):
            self.mean_peak_frict_vel = str(self.mean_peak_frict_vel)

        if self.methane is not None and not isinstance(self.methane, str):
            self.methane = str(self.methane)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if not isinstance(self.n_alkanes, list):
            self.n_alkanes = [self.n_alkanes] if self.n_alkanes is not None else []
        self.n_alkanes = [v if isinstance(v, str) else str(v) for v in self.n_alkanes]

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.nitro is not None and not isinstance(self.nitro, str):
            self.nitro = str(self.nitro)

        if self.org_carb is not None and not isinstance(self.org_carb, str):
            self.org_carb = str(self.org_carb)

        if self.org_matter is not None and not isinstance(self.org_matter, str):
            self.org_matter = str(self.org_matter)

        if self.org_nitro is not None and not isinstance(self.org_nitro, str):
            self.org_nitro = str(self.org_nitro)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if not isinstance(self.particle_class, list):
            self.particle_class = [self.particle_class] if self.particle_class is not None else []
        self.particle_class = [v if isinstance(v, str) else str(v) for v in self.particle_class]

        if self.part_org_carb is not None and not isinstance(self.part_org_carb, str):
            self.part_org_carb = str(self.part_org_carb)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.petroleum_hydrocarb is not None and not isinstance(self.petroleum_hydrocarb, str):
            self.petroleum_hydrocarb = str(self.petroleum_hydrocarb)

        if not isinstance(self.phaeopigments, list):
            self.phaeopigments = [self.phaeopigments] if self.phaeopigments is not None else []
        self.phaeopigments = [v if isinstance(v, str) else str(v) for v in self.phaeopigments]

        if self.phosphate is not None and not isinstance(self.phosphate, str):
            self.phosphate = str(self.phosphate)

        if not isinstance(self.phosplipid_fatt_acid, list):
            self.phosplipid_fatt_acid = [self.phosplipid_fatt_acid] if self.phosplipid_fatt_acid is not None else []
        self.phosplipid_fatt_acid = [v if isinstance(v, str) else str(v) for v in self.phosplipid_fatt_acid]

        if self.porosity is not None and not isinstance(self.porosity, str):
            self.porosity = str(self.porosity)

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.redox_potential is not None and not isinstance(self.redox_potential, str):
            self.redox_potential = str(self.redox_potential)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.sediment_type is not None and not isinstance(self.sediment_type, SEDIMENTTYPEENUM):
            self.sediment_type = SEDIMENTTYPEENUM(self.sediment_type)

        if self.silicate is not None and not isinstance(self.silicate, str):
            self.silicate = str(self.silicate)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.sulfate is not None and not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self.sulfide is not None and not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.tidal_stage is not None and not isinstance(self.tidal_stage, TIDALSTAGEENUM):
            self.tidal_stage = TIDALSTAGEENUM(self.tidal_stage)

        if self.tot_carb is not None and not isinstance(self.tot_carb, str):
            self.tot_carb = str(self.tot_carb)

        if self.tot_depth_water_col is not None and not isinstance(self.tot_depth_water_col, str):
            self.tot_depth_water_col = str(self.tot_depth_water_col)

        if self.tot_nitro_content is not None and not isinstance(self.tot_nitro_content, str):
            self.tot_nitro_content = str(self.tot_nitro_content)

        if self.tot_org_carb is not None and not isinstance(self.tot_org_carb, str):
            self.tot_org_carb = str(self.tot_org_carb)

        if self.turbidity is not None and not isinstance(self.turbidity, str):
            self.turbidity = str(self.turbidity)

        if self.water_content is not None and not isinstance(self.water_content, str):
            self.water_content = str(self.water_content)

        super().__post_init__(**kwargs)


@dataclass
class Soil(Extension):
    """
    soil extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016012"]
    class_class_curie: ClassVar[str] = "MIXS:0016012"
    class_name: ClassVar[str] = "Soil"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.Soil

    samp_name: str = None
    project_name: str = None
    depth: str = None
    elev: str = None
    cur_land_use: Optional[str] = None
    cur_vegetation: Optional[str] = None
    cur_vegetation_meth: Optional[str] = None
    previous_land_use: Optional[str] = None
    prev_land_use_meth: Optional[str] = None
    crop_rotation: Optional[str] = None
    agrochem_addition: Optional[Union[str, List[str]]] = empty_list()
    tillage: Optional[Union[Union[str, "TILLAGEENUM"], List[Union[str, "TILLAGEENUM"]]]] = empty_list()
    fire: Optional[Union[str, XSDDateTime]] = None
    flooding: Optional[Union[str, XSDDateTime]] = None
    extreme_event: Optional[Union[str, XSDDateTime]] = None
    soil_horizon: Optional[Union[str, "SOILHORIZONENUM"]] = None
    horizon_meth: Optional[str] = None
    sieving: Optional[str] = None
    water_content: Optional[str] = None
    water_cont_soil_meth: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    pool_dna_extracts: Optional[str] = None
    store_cond: Optional[str] = None
    link_climate_info: Optional[str] = None
    annual_temp: Optional[str] = None
    season_temp: Optional[str] = None
    annual_precpt: Optional[str] = None
    season_precpt: Optional[str] = None
    link_class_info: Optional[str] = None
    fao_class: Optional[Union[str, "FAOCLASSENUM"]] = None
    local_class: Optional[str] = None
    local_class_meth: Optional[str] = None
    org_nitro: Optional[str] = None
    temp: Optional[str] = None
    soil_type: Optional[str] = None
    soil_type_meth: Optional[str] = None
    slope_gradient: Optional[str] = None
    slope_aspect: Optional[str] = None
    profile_position: Optional[Union[str, "PROFILEPOSITIONENUM"]] = None
    drainage_class: Optional[Union[str, "DRAINAGECLASSENUM"]] = None
    soil_texture: Optional[str] = None
    soil_texture_meth: Optional[str] = None
    ph: Optional[float] = None
    ph_meth: Optional[str] = None
    org_matter: Optional[str] = None
    tot_org_carb: Optional[str] = None
    tot_org_c_meth: Optional[str] = None
    tot_nitro_content: Optional[str] = None
    tot_nitro_cont_meth: Optional[str] = None
    microbial_biomass: Optional[str] = None
    micro_biomass_meth: Optional[str] = None
    link_addit_analys: Optional[str] = None
    heavy_metals: Optional[Union[str, List[str]]] = empty_list()
    heavy_metals_meth: Optional[str] = None
    al_sat: Optional[str] = None
    al_sat_meth: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.depth):
            self.MissingRequiredField("depth")
        if not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self._is_empty(self.elev):
            self.MissingRequiredField("elev")
        if not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.cur_land_use is not None and not isinstance(self.cur_land_use, str):
            self.cur_land_use = str(self.cur_land_use)

        if self.cur_vegetation is not None and not isinstance(self.cur_vegetation, str):
            self.cur_vegetation = str(self.cur_vegetation)

        if self.cur_vegetation_meth is not None and not isinstance(self.cur_vegetation_meth, str):
            self.cur_vegetation_meth = str(self.cur_vegetation_meth)

        if self.previous_land_use is not None and not isinstance(self.previous_land_use, str):
            self.previous_land_use = str(self.previous_land_use)

        if self.prev_land_use_meth is not None and not isinstance(self.prev_land_use_meth, str):
            self.prev_land_use_meth = str(self.prev_land_use_meth)

        if self.crop_rotation is not None and not isinstance(self.crop_rotation, str):
            self.crop_rotation = str(self.crop_rotation)

        if not isinstance(self.agrochem_addition, list):
            self.agrochem_addition = [self.agrochem_addition] if self.agrochem_addition is not None else []
        self.agrochem_addition = [v if isinstance(v, str) else str(v) for v in self.agrochem_addition]

        if not isinstance(self.tillage, list):
            self.tillage = [self.tillage] if self.tillage is not None else []
        self.tillage = [v if isinstance(v, TILLAGEENUM) else TILLAGEENUM(v) for v in self.tillage]

        if self.fire is not None and not isinstance(self.fire, XSDDateTime):
            self.fire = XSDDateTime(self.fire)

        if self.flooding is not None and not isinstance(self.flooding, XSDDateTime):
            self.flooding = XSDDateTime(self.flooding)

        if self.extreme_event is not None and not isinstance(self.extreme_event, XSDDateTime):
            self.extreme_event = XSDDateTime(self.extreme_event)

        if self.soil_horizon is not None and not isinstance(self.soil_horizon, SOILHORIZONENUM):
            self.soil_horizon = SOILHORIZONENUM(self.soil_horizon)

        if self.horizon_meth is not None and not isinstance(self.horizon_meth, str):
            self.horizon_meth = str(self.horizon_meth)

        if self.sieving is not None and not isinstance(self.sieving, str):
            self.sieving = str(self.sieving)

        if self.water_content is not None and not isinstance(self.water_content, str):
            self.water_content = str(self.water_content)

        if self.water_cont_soil_meth is not None and not isinstance(self.water_cont_soil_meth, str):
            self.water_cont_soil_meth = str(self.water_cont_soil_meth)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.pool_dna_extracts is not None and not isinstance(self.pool_dna_extracts, str):
            self.pool_dna_extracts = str(self.pool_dna_extracts)

        if self.store_cond is not None and not isinstance(self.store_cond, str):
            self.store_cond = str(self.store_cond)

        if self.link_climate_info is not None and not isinstance(self.link_climate_info, str):
            self.link_climate_info = str(self.link_climate_info)

        if self.annual_temp is not None and not isinstance(self.annual_temp, str):
            self.annual_temp = str(self.annual_temp)

        if self.season_temp is not None and not isinstance(self.season_temp, str):
            self.season_temp = str(self.season_temp)

        if self.annual_precpt is not None and not isinstance(self.annual_precpt, str):
            self.annual_precpt = str(self.annual_precpt)

        if self.season_precpt is not None and not isinstance(self.season_precpt, str):
            self.season_precpt = str(self.season_precpt)

        if self.link_class_info is not None and not isinstance(self.link_class_info, str):
            self.link_class_info = str(self.link_class_info)

        if self.fao_class is not None and not isinstance(self.fao_class, FAOCLASSENUM):
            self.fao_class = FAOCLASSENUM(self.fao_class)

        if self.local_class is not None and not isinstance(self.local_class, str):
            self.local_class = str(self.local_class)

        if self.local_class_meth is not None and not isinstance(self.local_class_meth, str):
            self.local_class_meth = str(self.local_class_meth)

        if self.org_nitro is not None and not isinstance(self.org_nitro, str):
            self.org_nitro = str(self.org_nitro)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.soil_type is not None and not isinstance(self.soil_type, str):
            self.soil_type = str(self.soil_type)

        if self.soil_type_meth is not None and not isinstance(self.soil_type_meth, str):
            self.soil_type_meth = str(self.soil_type_meth)

        if self.slope_gradient is not None and not isinstance(self.slope_gradient, str):
            self.slope_gradient = str(self.slope_gradient)

        if self.slope_aspect is not None and not isinstance(self.slope_aspect, str):
            self.slope_aspect = str(self.slope_aspect)

        if self.profile_position is not None and not isinstance(self.profile_position, PROFILEPOSITIONENUM):
            self.profile_position = PROFILEPOSITIONENUM(self.profile_position)

        if self.drainage_class is not None and not isinstance(self.drainage_class, DRAINAGECLASSENUM):
            self.drainage_class = DRAINAGECLASSENUM(self.drainage_class)

        if self.soil_texture is not None and not isinstance(self.soil_texture, str):
            self.soil_texture = str(self.soil_texture)

        if self.soil_texture_meth is not None and not isinstance(self.soil_texture_meth, str):
            self.soil_texture_meth = str(self.soil_texture_meth)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if self.ph_meth is not None and not isinstance(self.ph_meth, str):
            self.ph_meth = str(self.ph_meth)

        if self.org_matter is not None and not isinstance(self.org_matter, str):
            self.org_matter = str(self.org_matter)

        if self.tot_org_carb is not None and not isinstance(self.tot_org_carb, str):
            self.tot_org_carb = str(self.tot_org_carb)

        if self.tot_org_c_meth is not None and not isinstance(self.tot_org_c_meth, str):
            self.tot_org_c_meth = str(self.tot_org_c_meth)

        if self.tot_nitro_content is not None and not isinstance(self.tot_nitro_content, str):
            self.tot_nitro_content = str(self.tot_nitro_content)

        if self.tot_nitro_cont_meth is not None and not isinstance(self.tot_nitro_cont_meth, str):
            self.tot_nitro_cont_meth = str(self.tot_nitro_cont_meth)

        if self.microbial_biomass is not None and not isinstance(self.microbial_biomass, str):
            self.microbial_biomass = str(self.microbial_biomass)

        if self.micro_biomass_meth is not None and not isinstance(self.micro_biomass_meth, str):
            self.micro_biomass_meth = str(self.micro_biomass_meth)

        if self.link_addit_analys is not None and not isinstance(self.link_addit_analys, str):
            self.link_addit_analys = str(self.link_addit_analys)

        if not isinstance(self.heavy_metals, list):
            self.heavy_metals = [self.heavy_metals] if self.heavy_metals is not None else []
        self.heavy_metals = [v if isinstance(v, str) else str(v) for v in self.heavy_metals]

        if self.heavy_metals_meth is not None and not isinstance(self.heavy_metals_meth, str):
            self.heavy_metals_meth = str(self.heavy_metals_meth)

        if self.al_sat is not None and not isinstance(self.al_sat, str):
            self.al_sat = str(self.al_sat)

        if self.al_sat_meth is not None and not isinstance(self.al_sat_meth, str):
            self.al_sat_meth = str(self.al_sat_meth)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        super().__post_init__(**kwargs)


@dataclass
class SymbiontAssociated(Extension):
    """
    symbiont-associated extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016023"]
    class_class_curie: ClassVar[str] = "MIXS:0016023"
    class_name: ClassVar[str] = "SymbiontAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.SymbiontAssociated

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    geo_loc_name: str = None
    collection_date: Union[str, XSDDateTime] = None
    host_dependence: Union[str, "HOSTDEPENDENCEENUM"] = None
    sym_life_cycle_type: Union[str, "SYMLIFECYCLETYPEENUM"] = None
    host_life_stage: str = None
    alt: Optional[str] = None
    depth: Optional[str] = None
    elev: Optional[str] = None
    host_subject_id: Optional[str] = None
    host_common_name: Optional[str] = None
    host_taxid: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    type_of_symbiosis: Optional[Union[str, "TYPEOFSYMBIOSISENUM"]] = None
    host_age: Optional[str] = None
    urobiom_sex: Optional[Union[str, "UROBIOMSEXENUM"]] = None
    mode_transmission: Optional[Union[str, "MODETRANSMISSIONENUM"]] = None
    route_transmission: Optional[Union[str, "ROUTETRANSMISSIONENUM"]] = None
    host_body_habitat: Optional[str] = None
    host_body_site: Optional[str] = None
    host_body_product: Optional[str] = None
    host_tot_mass: Optional[str] = None
    host_height: Optional[str] = None
    host_length: Optional[str] = None
    host_growth_cond: Optional[str] = None
    host_substrate: Optional[str] = None
    host_fam_rel: Optional[Union[str, List[str]]] = empty_list()
    host_infra_spec_name: Optional[str] = None
    host_infra_spec_rank: Optional[str] = None
    host_genotype: Optional[str] = None
    host_phenotype: Optional[str] = None
    host_dry_mass: Optional[str] = None
    host_color: Optional[str] = None
    host_shape: Optional[str] = None
    gravidity: Optional[str] = None
    host_number: Optional[str] = None
    host_symbiont: Optional[Union[str, List[str]]] = empty_list()
    host_specificity: Optional[Union[str, "HOSTSPECIFICITYENUM"]] = None
    symbiont_host_role: Optional[Union[str, "SYMBIONTHOSTROLEENUM"]] = None
    host_cellular_loc: Optional[Union[str, "HOSTCELLULARLOCENUM"]] = None
    association_duration: Optional[str] = None
    host_of_host_coinf: Optional[str] = None
    host_of_host_name: Optional[str] = None
    host_of_host_env_loc: Optional[Union[str, List[str]]] = empty_list()
    host_of_host_env_med: Optional[str] = None
    host_of_host_taxid: Optional[str] = None
    host_of_host_sub_id: Optional[str] = None
    host_of_host_disease: Optional[Union[str, List[str]]] = empty_list()
    host_of_host_fam_rel: Optional[Union[str, List[str]]] = empty_list()
    host_of_host_infname: Optional[str] = None
    host_of_host_infrank: Optional[str] = None
    host_of_host_geno: Optional[str] = None
    host_of_host_pheno: Optional[str] = None
    host_of_host_gravid: Optional[str] = None
    host_of_host_totmass: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    salinity: Optional[str] = None
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    temp: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    samp_vol_we_dna_ext: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_sol: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.host_dependence):
            self.MissingRequiredField("host_dependence")
        if not isinstance(self.host_dependence, HOSTDEPENDENCEENUM):
            self.host_dependence = HOSTDEPENDENCEENUM(self.host_dependence)

        if self._is_empty(self.sym_life_cycle_type):
            self.MissingRequiredField("sym_life_cycle_type")
        if not isinstance(self.sym_life_cycle_type, SYMLIFECYCLETYPEENUM):
            self.sym_life_cycle_type = SYMLIFECYCLETYPEENUM(self.sym_life_cycle_type)

        if self._is_empty(self.host_life_stage):
            self.MissingRequiredField("host_life_stage")
        if not isinstance(self.host_life_stage, str):
            self.host_life_stage = str(self.host_life_stage)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.host_subject_id is not None and not isinstance(self.host_subject_id, str):
            self.host_subject_id = str(self.host_subject_id)

        if self.host_common_name is not None and not isinstance(self.host_common_name, str):
            self.host_common_name = str(self.host_common_name)

        if self.host_taxid is not None and not isinstance(self.host_taxid, str):
            self.host_taxid = str(self.host_taxid)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.type_of_symbiosis is not None and not isinstance(self.type_of_symbiosis, TYPEOFSYMBIOSISENUM):
            self.type_of_symbiosis = TYPEOFSYMBIOSISENUM(self.type_of_symbiosis)

        if self.host_age is not None and not isinstance(self.host_age, str):
            self.host_age = str(self.host_age)

        if self.urobiom_sex is not None and not isinstance(self.urobiom_sex, UROBIOMSEXENUM):
            self.urobiom_sex = UROBIOMSEXENUM(self.urobiom_sex)

        if self.mode_transmission is not None and not isinstance(self.mode_transmission, MODETRANSMISSIONENUM):
            self.mode_transmission = MODETRANSMISSIONENUM(self.mode_transmission)

        if self.route_transmission is not None and not isinstance(self.route_transmission, ROUTETRANSMISSIONENUM):
            self.route_transmission = ROUTETRANSMISSIONENUM(self.route_transmission)

        if self.host_body_habitat is not None and not isinstance(self.host_body_habitat, str):
            self.host_body_habitat = str(self.host_body_habitat)

        if self.host_body_site is not None and not isinstance(self.host_body_site, str):
            self.host_body_site = str(self.host_body_site)

        if self.host_body_product is not None and not isinstance(self.host_body_product, str):
            self.host_body_product = str(self.host_body_product)

        if self.host_tot_mass is not None and not isinstance(self.host_tot_mass, str):
            self.host_tot_mass = str(self.host_tot_mass)

        if self.host_height is not None and not isinstance(self.host_height, str):
            self.host_height = str(self.host_height)

        if self.host_length is not None and not isinstance(self.host_length, str):
            self.host_length = str(self.host_length)

        if self.host_growth_cond is not None and not isinstance(self.host_growth_cond, str):
            self.host_growth_cond = str(self.host_growth_cond)

        if self.host_substrate is not None and not isinstance(self.host_substrate, str):
            self.host_substrate = str(self.host_substrate)

        if not isinstance(self.host_fam_rel, list):
            self.host_fam_rel = [self.host_fam_rel] if self.host_fam_rel is not None else []
        self.host_fam_rel = [v if isinstance(v, str) else str(v) for v in self.host_fam_rel]

        if self.host_infra_spec_name is not None and not isinstance(self.host_infra_spec_name, str):
            self.host_infra_spec_name = str(self.host_infra_spec_name)

        if self.host_infra_spec_rank is not None and not isinstance(self.host_infra_spec_rank, str):
            self.host_infra_spec_rank = str(self.host_infra_spec_rank)

        if self.host_genotype is not None and not isinstance(self.host_genotype, str):
            self.host_genotype = str(self.host_genotype)

        if self.host_phenotype is not None and not isinstance(self.host_phenotype, str):
            self.host_phenotype = str(self.host_phenotype)

        if self.host_dry_mass is not None and not isinstance(self.host_dry_mass, str):
            self.host_dry_mass = str(self.host_dry_mass)

        if self.host_color is not None and not isinstance(self.host_color, str):
            self.host_color = str(self.host_color)

        if self.host_shape is not None and not isinstance(self.host_shape, str):
            self.host_shape = str(self.host_shape)

        if self.gravidity is not None and not isinstance(self.gravidity, str):
            self.gravidity = str(self.gravidity)

        if self.host_number is not None and not isinstance(self.host_number, str):
            self.host_number = str(self.host_number)

        if not isinstance(self.host_symbiont, list):
            self.host_symbiont = [self.host_symbiont] if self.host_symbiont is not None else []
        self.host_symbiont = [v if isinstance(v, str) else str(v) for v in self.host_symbiont]

        if self.host_specificity is not None and not isinstance(self.host_specificity, HOSTSPECIFICITYENUM):
            self.host_specificity = HOSTSPECIFICITYENUM(self.host_specificity)

        if self.symbiont_host_role is not None and not isinstance(self.symbiont_host_role, SYMBIONTHOSTROLEENUM):
            self.symbiont_host_role = SYMBIONTHOSTROLEENUM(self.symbiont_host_role)

        if self.host_cellular_loc is not None and not isinstance(self.host_cellular_loc, HOSTCELLULARLOCENUM):
            self.host_cellular_loc = HOSTCELLULARLOCENUM(self.host_cellular_loc)

        if self.association_duration is not None and not isinstance(self.association_duration, str):
            self.association_duration = str(self.association_duration)

        if self.host_of_host_coinf is not None and not isinstance(self.host_of_host_coinf, str):
            self.host_of_host_coinf = str(self.host_of_host_coinf)

        if self.host_of_host_name is not None and not isinstance(self.host_of_host_name, str):
            self.host_of_host_name = str(self.host_of_host_name)

        if not isinstance(self.host_of_host_env_loc, list):
            self.host_of_host_env_loc = [self.host_of_host_env_loc] if self.host_of_host_env_loc is not None else []
        self.host_of_host_env_loc = [v if isinstance(v, str) else str(v) for v in self.host_of_host_env_loc]

        if self.host_of_host_env_med is not None and not isinstance(self.host_of_host_env_med, str):
            self.host_of_host_env_med = str(self.host_of_host_env_med)

        if self.host_of_host_taxid is not None and not isinstance(self.host_of_host_taxid, str):
            self.host_of_host_taxid = str(self.host_of_host_taxid)

        if self.host_of_host_sub_id is not None and not isinstance(self.host_of_host_sub_id, str):
            self.host_of_host_sub_id = str(self.host_of_host_sub_id)

        if not isinstance(self.host_of_host_disease, list):
            self.host_of_host_disease = [self.host_of_host_disease] if self.host_of_host_disease is not None else []
        self.host_of_host_disease = [v if isinstance(v, str) else str(v) for v in self.host_of_host_disease]

        if not isinstance(self.host_of_host_fam_rel, list):
            self.host_of_host_fam_rel = [self.host_of_host_fam_rel] if self.host_of_host_fam_rel is not None else []
        self.host_of_host_fam_rel = [v if isinstance(v, str) else str(v) for v in self.host_of_host_fam_rel]

        if self.host_of_host_infname is not None and not isinstance(self.host_of_host_infname, str):
            self.host_of_host_infname = str(self.host_of_host_infname)

        if self.host_of_host_infrank is not None and not isinstance(self.host_of_host_infrank, str):
            self.host_of_host_infrank = str(self.host_of_host_infrank)

        if self.host_of_host_geno is not None and not isinstance(self.host_of_host_geno, str):
            self.host_of_host_geno = str(self.host_of_host_geno)

        if self.host_of_host_pheno is not None and not isinstance(self.host_of_host_pheno, str):
            self.host_of_host_pheno = str(self.host_of_host_pheno)

        if self.host_of_host_gravid is not None and not isinstance(self.host_of_host_gravid, str):
            self.host_of_host_gravid = str(self.host_of_host_gravid)

        if self.host_of_host_totmass is not None and not isinstance(self.host_of_host_totmass, str):
            self.host_of_host_totmass = str(self.host_of_host_totmass)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_sol is not None and not isinstance(self.samp_store_sol, str):
            self.samp_store_sol = str(self.samp_store_sol)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        super().__post_init__(**kwargs)


@dataclass
class WastewaterSludge(Extension):
    """
    wastewater/sludge extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016013"]
    class_class_curie: ClassVar[str] = "MIXS:0016013"
    class_name: ClassVar[str] = "WastewaterSludge"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.WastewaterSludge

    samp_name: str = None
    project_name: str = None
    depth: Optional[str] = None
    alkalinity: Optional[str] = None
    biochem_oxygen_dem: Optional[str] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    chem_oxygen_dem: Optional[str] = None
    efficiency_percent: Optional[str] = None
    emulsions: Optional[Union[str, List[str]]] = empty_list()
    gaseous_substances: Optional[Union[str, List[str]]] = empty_list()
    indust_eff_percent: Optional[str] = None
    inorg_particles: Optional[Union[str, List[str]]] = empty_list()
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    nitrate: Optional[str] = None
    org_particles: Optional[Union[str, List[str]]] = empty_list()
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    ph: Optional[float] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    phosphate: Optional[str] = None
    pre_treatment: Optional[str] = None
    primary_treatment: Optional[str] = None
    reactor_type: Optional[str] = None
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    secondary_treatment: Optional[str] = None
    sewage_type: Optional[str] = None
    sludge_retent_time: Optional[str] = None
    sodium: Optional[str] = None
    soluble_inorg_mat: Optional[Union[str, List[str]]] = empty_list()
    soluble_org_mat: Optional[Union[str, List[str]]] = empty_list()
    suspend_solids: Optional[Union[str, List[str]]] = empty_list()
    temp: Optional[str] = None
    tertiary_treatment: Optional[str] = None
    tot_nitro: Optional[str] = None
    tot_phosphate: Optional[str] = None
    wastewater_type: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.biochem_oxygen_dem is not None and not isinstance(self.biochem_oxygen_dem, str):
            self.biochem_oxygen_dem = str(self.biochem_oxygen_dem)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if self.chem_oxygen_dem is not None and not isinstance(self.chem_oxygen_dem, str):
            self.chem_oxygen_dem = str(self.chem_oxygen_dem)

        if self.efficiency_percent is not None and not isinstance(self.efficiency_percent, str):
            self.efficiency_percent = str(self.efficiency_percent)

        if not isinstance(self.emulsions, list):
            self.emulsions = [self.emulsions] if self.emulsions is not None else []
        self.emulsions = [v if isinstance(v, str) else str(v) for v in self.emulsions]

        if not isinstance(self.gaseous_substances, list):
            self.gaseous_substances = [self.gaseous_substances] if self.gaseous_substances is not None else []
        self.gaseous_substances = [v if isinstance(v, str) else str(v) for v in self.gaseous_substances]

        if self.indust_eff_percent is not None and not isinstance(self.indust_eff_percent, str):
            self.indust_eff_percent = str(self.indust_eff_percent)

        if not isinstance(self.inorg_particles, list):
            self.inorg_particles = [self.inorg_particles] if self.inorg_particles is not None else []
        self.inorg_particles = [v if isinstance(v, str) else str(v) for v in self.inorg_particles]

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if not isinstance(self.org_particles, list):
            self.org_particles = [self.org_particles] if self.org_particles is not None else []
        self.org_particles = [v if isinstance(v, str) else str(v) for v in self.org_particles]

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.phosphate is not None and not isinstance(self.phosphate, str):
            self.phosphate = str(self.phosphate)

        if self.pre_treatment is not None and not isinstance(self.pre_treatment, str):
            self.pre_treatment = str(self.pre_treatment)

        if self.primary_treatment is not None and not isinstance(self.primary_treatment, str):
            self.primary_treatment = str(self.primary_treatment)

        if self.reactor_type is not None and not isinstance(self.reactor_type, str):
            self.reactor_type = str(self.reactor_type)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.secondary_treatment is not None and not isinstance(self.secondary_treatment, str):
            self.secondary_treatment = str(self.secondary_treatment)

        if self.sewage_type is not None and not isinstance(self.sewage_type, str):
            self.sewage_type = str(self.sewage_type)

        if self.sludge_retent_time is not None and not isinstance(self.sludge_retent_time, str):
            self.sludge_retent_time = str(self.sludge_retent_time)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if not isinstance(self.soluble_inorg_mat, list):
            self.soluble_inorg_mat = [self.soluble_inorg_mat] if self.soluble_inorg_mat is not None else []
        self.soluble_inorg_mat = [v if isinstance(v, str) else str(v) for v in self.soluble_inorg_mat]

        if not isinstance(self.soluble_org_mat, list):
            self.soluble_org_mat = [self.soluble_org_mat] if self.soluble_org_mat is not None else []
        self.soluble_org_mat = [v if isinstance(v, str) else str(v) for v in self.soluble_org_mat]

        if not isinstance(self.suspend_solids, list):
            self.suspend_solids = [self.suspend_solids] if self.suspend_solids is not None else []
        self.suspend_solids = [v if isinstance(v, str) else str(v) for v in self.suspend_solids]

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.tertiary_treatment is not None and not isinstance(self.tertiary_treatment, str):
            self.tertiary_treatment = str(self.tertiary_treatment)

        if self.tot_nitro is not None and not isinstance(self.tot_nitro, str):
            self.tot_nitro = str(self.tot_nitro)

        if self.tot_phosphate is not None and not isinstance(self.tot_phosphate, str):
            self.tot_phosphate = str(self.tot_phosphate)

        if self.wastewater_type is not None and not isinstance(self.wastewater_type, str):
            self.wastewater_type = str(self.wastewater_type)

        super().__post_init__(**kwargs)


@dataclass
class Water(Extension):
    """
    water extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0016014"]
    class_class_curie: ClassVar[str] = "MIXS:0016014"
    class_name: ClassVar[str] = "Water"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.Water

    samp_name: str = None
    project_name: str = None
    depth: str = None
    elev: Optional[str] = None
    alkalinity: Optional[str] = None
    alkalinity_method: Optional[str] = None
    alkyl_diethers: Optional[str] = None
    aminopept_act: Optional[str] = None
    ammonium: Optional[str] = None
    atmospheric_data: Optional[Union[str, List[str]]] = empty_list()
    bacteria_carb_prod: Optional[str] = None
    bac_prod: Optional[str] = None
    bac_resp: Optional[str] = None
    biomass: Optional[Union[str, List[str]]] = empty_list()
    bishomohopanol: Optional[str] = None
    bromide: Optional[str] = None
    calcium: Optional[str] = None
    carb_nitro_ratio: Optional[float] = None
    chem_administration: Optional[Union[str, List[str]]] = empty_list()
    chloride: Optional[str] = None
    chlorophyll: Optional[str] = None
    conduc: Optional[str] = None
    density: Optional[str] = None
    diether_lipids: Optional[Union[str, List[str]]] = empty_list()
    diss_carb_dioxide: Optional[str] = None
    diss_hydrogen: Optional[str] = None
    diss_inorg_carb: Optional[str] = None
    diss_inorg_nitro: Optional[str] = None
    diss_inorg_phosp: Optional[str] = None
    diss_org_carb: Optional[str] = None
    diss_org_nitro: Optional[str] = None
    diss_oxygen: Optional[str] = None
    down_par: Optional[str] = None
    fluor: Optional[str] = None
    glucosidase_act: Optional[str] = None
    light_intensity: Optional[str] = None
    magnesium: Optional[str] = None
    mean_frict_vel: Optional[str] = None
    mean_peak_frict_vel: Optional[str] = None
    misc_param: Optional[Union[str, List[str]]] = empty_list()
    n_alkanes: Optional[Union[str, List[str]]] = empty_list()
    nitrate: Optional[str] = None
    nitrite: Optional[str] = None
    nitro: Optional[str] = None
    org_carb: Optional[str] = None
    org_matter: Optional[str] = None
    org_nitro: Optional[str] = None
    organism_count: Optional[Union[str, List[str]]] = empty_list()
    oxy_stat_samp: Optional[Union[str, "OXYSTATSAMPENUM"]] = None
    ph: Optional[float] = None
    part_org_carb: Optional[str] = None
    part_org_nitro: Optional[str] = None
    perturbation: Optional[Union[str, List[str]]] = empty_list()
    petroleum_hydrocarb: Optional[str] = None
    phaeopigments: Optional[Union[str, List[str]]] = empty_list()
    phosphate: Optional[str] = None
    phosplipid_fatt_acid: Optional[Union[str, List[str]]] = empty_list()
    photon_flux: Optional[str] = None
    potassium: Optional[str] = None
    pressure: Optional[str] = None
    primary_prod: Optional[str] = None
    redox_potential: Optional[str] = None
    salinity: Optional[str] = None
    samp_store_dur: Optional[str] = None
    samp_store_loc: Optional[str] = None
    samp_store_temp: Optional[str] = None
    samp_vol_we_dna_ext: Optional[str] = None
    silicate: Optional[str] = None
    size_frac_low: Optional[str] = None
    size_frac_up: Optional[str] = None
    sodium: Optional[str] = None
    soluble_react_phosp: Optional[str] = None
    sulfate: Optional[str] = None
    sulfide: Optional[str] = None
    suspend_part_matter: Optional[str] = None
    temp: Optional[str] = None
    tidal_stage: Optional[Union[str, "TIDALSTAGEENUM"]] = None
    tot_depth_water_col: Optional[str] = None
    tot_diss_nitro: Optional[str] = None
    tot_inorg_nitro: Optional[str] = None
    tot_nitro: Optional[str] = None
    tot_part_carb: Optional[str] = None
    tot_phosp: Optional[str] = None
    turbidity: Optional[str] = None
    water_current: Optional[str] = None

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.depth):
            self.MissingRequiredField("depth")
        if not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.alkalinity is not None and not isinstance(self.alkalinity, str):
            self.alkalinity = str(self.alkalinity)

        if self.alkalinity_method is not None and not isinstance(self.alkalinity_method, str):
            self.alkalinity_method = str(self.alkalinity_method)

        if self.alkyl_diethers is not None and not isinstance(self.alkyl_diethers, str):
            self.alkyl_diethers = str(self.alkyl_diethers)

        if self.aminopept_act is not None and not isinstance(self.aminopept_act, str):
            self.aminopept_act = str(self.aminopept_act)

        if self.ammonium is not None and not isinstance(self.ammonium, str):
            self.ammonium = str(self.ammonium)

        if not isinstance(self.atmospheric_data, list):
            self.atmospheric_data = [self.atmospheric_data] if self.atmospheric_data is not None else []
        self.atmospheric_data = [v if isinstance(v, str) else str(v) for v in self.atmospheric_data]

        if self.bacteria_carb_prod is not None and not isinstance(self.bacteria_carb_prod, str):
            self.bacteria_carb_prod = str(self.bacteria_carb_prod)

        if self.bac_prod is not None and not isinstance(self.bac_prod, str):
            self.bac_prod = str(self.bac_prod)

        if self.bac_resp is not None and not isinstance(self.bac_resp, str):
            self.bac_resp = str(self.bac_resp)

        if not isinstance(self.biomass, list):
            self.biomass = [self.biomass] if self.biomass is not None else []
        self.biomass = [v if isinstance(v, str) else str(v) for v in self.biomass]

        if self.bishomohopanol is not None and not isinstance(self.bishomohopanol, str):
            self.bishomohopanol = str(self.bishomohopanol)

        if self.bromide is not None and not isinstance(self.bromide, str):
            self.bromide = str(self.bromide)

        if self.calcium is not None and not isinstance(self.calcium, str):
            self.calcium = str(self.calcium)

        if self.carb_nitro_ratio is not None and not isinstance(self.carb_nitro_ratio, float):
            self.carb_nitro_ratio = float(self.carb_nitro_ratio)

        if not isinstance(self.chem_administration, list):
            self.chem_administration = [self.chem_administration] if self.chem_administration is not None else []
        self.chem_administration = [v if isinstance(v, str) else str(v) for v in self.chem_administration]

        if self.chloride is not None and not isinstance(self.chloride, str):
            self.chloride = str(self.chloride)

        if self.chlorophyll is not None and not isinstance(self.chlorophyll, str):
            self.chlorophyll = str(self.chlorophyll)

        if self.conduc is not None and not isinstance(self.conduc, str):
            self.conduc = str(self.conduc)

        if self.density is not None and not isinstance(self.density, str):
            self.density = str(self.density)

        if not isinstance(self.diether_lipids, list):
            self.diether_lipids = [self.diether_lipids] if self.diether_lipids is not None else []
        self.diether_lipids = [v if isinstance(v, str) else str(v) for v in self.diether_lipids]

        if self.diss_carb_dioxide is not None and not isinstance(self.diss_carb_dioxide, str):
            self.diss_carb_dioxide = str(self.diss_carb_dioxide)

        if self.diss_hydrogen is not None and not isinstance(self.diss_hydrogen, str):
            self.diss_hydrogen = str(self.diss_hydrogen)

        if self.diss_inorg_carb is not None and not isinstance(self.diss_inorg_carb, str):
            self.diss_inorg_carb = str(self.diss_inorg_carb)

        if self.diss_inorg_nitro is not None and not isinstance(self.diss_inorg_nitro, str):
            self.diss_inorg_nitro = str(self.diss_inorg_nitro)

        if self.diss_inorg_phosp is not None and not isinstance(self.diss_inorg_phosp, str):
            self.diss_inorg_phosp = str(self.diss_inorg_phosp)

        if self.diss_org_carb is not None and not isinstance(self.diss_org_carb, str):
            self.diss_org_carb = str(self.diss_org_carb)

        if self.diss_org_nitro is not None and not isinstance(self.diss_org_nitro, str):
            self.diss_org_nitro = str(self.diss_org_nitro)

        if self.diss_oxygen is not None and not isinstance(self.diss_oxygen, str):
            self.diss_oxygen = str(self.diss_oxygen)

        if self.down_par is not None and not isinstance(self.down_par, str):
            self.down_par = str(self.down_par)

        if self.fluor is not None and not isinstance(self.fluor, str):
            self.fluor = str(self.fluor)

        if self.glucosidase_act is not None and not isinstance(self.glucosidase_act, str):
            self.glucosidase_act = str(self.glucosidase_act)

        if self.light_intensity is not None and not isinstance(self.light_intensity, str):
            self.light_intensity = str(self.light_intensity)

        if self.magnesium is not None and not isinstance(self.magnesium, str):
            self.magnesium = str(self.magnesium)

        if self.mean_frict_vel is not None and not isinstance(self.mean_frict_vel, str):
            self.mean_frict_vel = str(self.mean_frict_vel)

        if self.mean_peak_frict_vel is not None and not isinstance(self.mean_peak_frict_vel, str):
            self.mean_peak_frict_vel = str(self.mean_peak_frict_vel)

        if not isinstance(self.misc_param, list):
            self.misc_param = [self.misc_param] if self.misc_param is not None else []
        self.misc_param = [v if isinstance(v, str) else str(v) for v in self.misc_param]

        if not isinstance(self.n_alkanes, list):
            self.n_alkanes = [self.n_alkanes] if self.n_alkanes is not None else []
        self.n_alkanes = [v if isinstance(v, str) else str(v) for v in self.n_alkanes]

        if self.nitrate is not None and not isinstance(self.nitrate, str):
            self.nitrate = str(self.nitrate)

        if self.nitrite is not None and not isinstance(self.nitrite, str):
            self.nitrite = str(self.nitrite)

        if self.nitro is not None and not isinstance(self.nitro, str):
            self.nitro = str(self.nitro)

        if self.org_carb is not None and not isinstance(self.org_carb, str):
            self.org_carb = str(self.org_carb)

        if self.org_matter is not None and not isinstance(self.org_matter, str):
            self.org_matter = str(self.org_matter)

        if self.org_nitro is not None and not isinstance(self.org_nitro, str):
            self.org_nitro = str(self.org_nitro)

        if not isinstance(self.organism_count, list):
            self.organism_count = [self.organism_count] if self.organism_count is not None else []
        self.organism_count = [v if isinstance(v, str) else str(v) for v in self.organism_count]

        if self.oxy_stat_samp is not None and not isinstance(self.oxy_stat_samp, OXYSTATSAMPENUM):
            self.oxy_stat_samp = OXYSTATSAMPENUM(self.oxy_stat_samp)

        if self.ph is not None and not isinstance(self.ph, float):
            self.ph = float(self.ph)

        if self.part_org_carb is not None and not isinstance(self.part_org_carb, str):
            self.part_org_carb = str(self.part_org_carb)

        if self.part_org_nitro is not None and not isinstance(self.part_org_nitro, str):
            self.part_org_nitro = str(self.part_org_nitro)

        if not isinstance(self.perturbation, list):
            self.perturbation = [self.perturbation] if self.perturbation is not None else []
        self.perturbation = [v if isinstance(v, str) else str(v) for v in self.perturbation]

        if self.petroleum_hydrocarb is not None and not isinstance(self.petroleum_hydrocarb, str):
            self.petroleum_hydrocarb = str(self.petroleum_hydrocarb)

        if not isinstance(self.phaeopigments, list):
            self.phaeopigments = [self.phaeopigments] if self.phaeopigments is not None else []
        self.phaeopigments = [v if isinstance(v, str) else str(v) for v in self.phaeopigments]

        if self.phosphate is not None and not isinstance(self.phosphate, str):
            self.phosphate = str(self.phosphate)

        if not isinstance(self.phosplipid_fatt_acid, list):
            self.phosplipid_fatt_acid = [self.phosplipid_fatt_acid] if self.phosplipid_fatt_acid is not None else []
        self.phosplipid_fatt_acid = [v if isinstance(v, str) else str(v) for v in self.phosplipid_fatt_acid]

        if self.photon_flux is not None and not isinstance(self.photon_flux, str):
            self.photon_flux = str(self.photon_flux)

        if self.potassium is not None and not isinstance(self.potassium, str):
            self.potassium = str(self.potassium)

        if self.pressure is not None and not isinstance(self.pressure, str):
            self.pressure = str(self.pressure)

        if self.primary_prod is not None and not isinstance(self.primary_prod, str):
            self.primary_prod = str(self.primary_prod)

        if self.redox_potential is not None and not isinstance(self.redox_potential, str):
            self.redox_potential = str(self.redox_potential)

        if self.salinity is not None and not isinstance(self.salinity, str):
            self.salinity = str(self.salinity)

        if self.samp_store_dur is not None and not isinstance(self.samp_store_dur, str):
            self.samp_store_dur = str(self.samp_store_dur)

        if self.samp_store_loc is not None and not isinstance(self.samp_store_loc, str):
            self.samp_store_loc = str(self.samp_store_loc)

        if self.samp_store_temp is not None and not isinstance(self.samp_store_temp, str):
            self.samp_store_temp = str(self.samp_store_temp)

        if self.samp_vol_we_dna_ext is not None and not isinstance(self.samp_vol_we_dna_ext, str):
            self.samp_vol_we_dna_ext = str(self.samp_vol_we_dna_ext)

        if self.silicate is not None and not isinstance(self.silicate, str):
            self.silicate = str(self.silicate)

        if self.size_frac_low is not None and not isinstance(self.size_frac_low, str):
            self.size_frac_low = str(self.size_frac_low)

        if self.size_frac_up is not None and not isinstance(self.size_frac_up, str):
            self.size_frac_up = str(self.size_frac_up)

        if self.sodium is not None and not isinstance(self.sodium, str):
            self.sodium = str(self.sodium)

        if self.soluble_react_phosp is not None and not isinstance(self.soluble_react_phosp, str):
            self.soluble_react_phosp = str(self.soluble_react_phosp)

        if self.sulfate is not None and not isinstance(self.sulfate, str):
            self.sulfate = str(self.sulfate)

        if self.sulfide is not None and not isinstance(self.sulfide, str):
            self.sulfide = str(self.sulfide)

        if self.suspend_part_matter is not None and not isinstance(self.suspend_part_matter, str):
            self.suspend_part_matter = str(self.suspend_part_matter)

        if self.temp is not None and not isinstance(self.temp, str):
            self.temp = str(self.temp)

        if self.tidal_stage is not None and not isinstance(self.tidal_stage, TIDALSTAGEENUM):
            self.tidal_stage = TIDALSTAGEENUM(self.tidal_stage)

        if self.tot_depth_water_col is not None and not isinstance(self.tot_depth_water_col, str):
            self.tot_depth_water_col = str(self.tot_depth_water_col)

        if self.tot_diss_nitro is not None and not isinstance(self.tot_diss_nitro, str):
            self.tot_diss_nitro = str(self.tot_diss_nitro)

        if self.tot_inorg_nitro is not None and not isinstance(self.tot_inorg_nitro, str):
            self.tot_inorg_nitro = str(self.tot_inorg_nitro)

        if self.tot_nitro is not None and not isinstance(self.tot_nitro, str):
            self.tot_nitro = str(self.tot_nitro)

        if self.tot_part_carb is not None and not isinstance(self.tot_part_carb, str):
            self.tot_part_carb = str(self.tot_part_carb)

        if self.tot_phosp is not None and not isinstance(self.tot_phosp, str):
            self.tot_phosp = str(self.tot_phosp)

        if self.turbidity is not None and not isinstance(self.turbidity, str):
            self.turbidity = str(self.turbidity)

        if self.water_current is not None and not isinstance(self.water_current, str):
            self.water_current = str(self.water_current)

        super().__post_init__(**kwargs)


@dataclass
class MixsCompliantData(YAMLRoot):
    """
    A collection of data that complies with some combination of a MIxS checklist and environmental extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS_6_2_RC.MixsCompliantData
    class_class_curie: ClassVar[str] = "mixs_6_2_rc:MixsCompliantData"
    class_name: ClassVar[str] = "MixsCompliantData"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MixsCompliantData

    migs_eu_data: Optional[Union[Union[dict, MigsEu], List[Union[dict, MigsEu]]]] = empty_list()
    plant_associated_data: Optional[Union[Union[dict, PlantAssociated], List[Union[dict, PlantAssociated]]]] = empty_list()
    migs_eu_plant_associated_data: Optional[Union[Union[dict, "MigsEuPlantAssociated"], List[Union[dict, "MigsEuPlantAssociated"]]]] = empty_list()
    host_associated_data: Optional[Union[Union[dict, HostAssociated], List[Union[dict, HostAssociated]]]] = empty_list()
    migs_eu_host_associated_data: Optional[Union[Union[dict, "MigsEuHostAssociated"], List[Union[dict, "MigsEuHostAssociated"]]]] = empty_list()
    human_associated_data: Optional[Union[Union[dict, HumanAssociated], List[Union[dict, HumanAssociated]]]] = empty_list()
    migs_eu_human_associated_data: Optional[Union[Union[dict, "MigsEuHumanAssociated"], List[Union[dict, "MigsEuHumanAssociated"]]]] = empty_list()
    human_gut_data: Optional[Union[Union[dict, HumanGut], List[Union[dict, HumanGut]]]] = empty_list()
    migs_eu_human_gut_data: Optional[Union[Union[dict, "MigsEuHumanGut"], List[Union[dict, "MigsEuHumanGut"]]]] = empty_list()
    human_oral_data: Optional[Union[Union[dict, HumanOral], List[Union[dict, HumanOral]]]] = empty_list()
    migs_eu_human_oral_data: Optional[Union[Union[dict, "MigsEuHumanOral"], List[Union[dict, "MigsEuHumanOral"]]]] = empty_list()
    soil_data: Optional[Union[Union[dict, Soil], List[Union[dict, Soil]]]] = empty_list()
    migs_eu_soil_data: Optional[Union[Union[dict, "MigsEuSoil"], List[Union[dict, "MigsEuSoil"]]]] = empty_list()
    water_data: Optional[Union[Union[dict, Water], List[Union[dict, Water]]]] = empty_list()
    migs_eu_water_data: Optional[Union[Union[dict, "MigsEuWater"], List[Union[dict, "MigsEuWater"]]]] = empty_list()
    mims_data: Optional[Union[Union[dict, Mims], List[Union[dict, Mims]]]] = empty_list()
    mims_plant_associated_data: Optional[Union[Union[dict, "MimsPlantAssociated"], List[Union[dict, "MimsPlantAssociated"]]]] = empty_list()
    mims_host_associated_data: Optional[Union[Union[dict, "MimsHostAssociated"], List[Union[dict, "MimsHostAssociated"]]]] = empty_list()
    mims_human_associated_data: Optional[Union[Union[dict, "MimsHumanAssociated"], List[Union[dict, "MimsHumanAssociated"]]]] = empty_list()
    mims_human_gut_data: Optional[Union[Union[dict, "MimsHumanGut"], List[Union[dict, "MimsHumanGut"]]]] = empty_list()
    mims_human_oral_data: Optional[Union[Union[dict, "MimsHumanOral"], List[Union[dict, "MimsHumanOral"]]]] = empty_list()
    mims_soil_data: Optional[Union[Union[dict, "MimsSoil"], List[Union[dict, "MimsSoil"]]]] = empty_list()
    mims_water_data: Optional[Union[Union[dict, "MimsWater"], List[Union[dict, "MimsWater"]]]] = empty_list()
    mimarks_s_data: Optional[Union[Union[dict, MimarksS], List[Union[dict, MimarksS]]]] = empty_list()
    mimarks_s_plant_associated_data: Optional[Union[Union[dict, "MimarksSPlantAssociated"], List[Union[dict, "MimarksSPlantAssociated"]]]] = empty_list()
    mimarks_s_host_associated_data: Optional[Union[Union[dict, "MimarksSHostAssociated"], List[Union[dict, "MimarksSHostAssociated"]]]] = empty_list()
    mimarks_s_human_associated_data: Optional[Union[Union[dict, "MimarksSHumanAssociated"], List[Union[dict, "MimarksSHumanAssociated"]]]] = empty_list()
    mimarks_s_human_gut_data: Optional[Union[Union[dict, "MimarksSHumanGut"], List[Union[dict, "MimarksSHumanGut"]]]] = empty_list()
    mimarks_s_human_oral_data: Optional[Union[Union[dict, "MimarksSHumanOral"], List[Union[dict, "MimarksSHumanOral"]]]] = empty_list()
    mimarks_s_soil_data: Optional[Union[Union[dict, "MimarksSSoil"], List[Union[dict, "MimarksSSoil"]]]] = empty_list()
    mimarks_s_water_data: Optional[Union[Union[dict, "MimarksSWater"], List[Union[dict, "MimarksSWater"]]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if not isinstance(self.migs_eu_data, list):
            self.migs_eu_data = [self.migs_eu_data] if self.migs_eu_data is not None else []
        self.migs_eu_data = [v if isinstance(v, MigsEu) else MigsEu(**as_dict(v)) for v in self.migs_eu_data]

        if not isinstance(self.plant_associated_data, list):
            self.plant_associated_data = [self.plant_associated_data] if self.plant_associated_data is not None else []
        self.plant_associated_data = [v if isinstance(v, PlantAssociated) else PlantAssociated(**as_dict(v)) for v in self.plant_associated_data]

        if not isinstance(self.migs_eu_plant_associated_data, list):
            self.migs_eu_plant_associated_data = [self.migs_eu_plant_associated_data] if self.migs_eu_plant_associated_data is not None else []
        self.migs_eu_plant_associated_data = [v if isinstance(v, MigsEuPlantAssociated) else MigsEuPlantAssociated(**as_dict(v)) for v in self.migs_eu_plant_associated_data]

        if not isinstance(self.host_associated_data, list):
            self.host_associated_data = [self.host_associated_data] if self.host_associated_data is not None else []
        self.host_associated_data = [v if isinstance(v, HostAssociated) else HostAssociated(**as_dict(v)) for v in self.host_associated_data]

        if not isinstance(self.migs_eu_host_associated_data, list):
            self.migs_eu_host_associated_data = [self.migs_eu_host_associated_data] if self.migs_eu_host_associated_data is not None else []
        self.migs_eu_host_associated_data = [v if isinstance(v, MigsEuHostAssociated) else MigsEuHostAssociated(**as_dict(v)) for v in self.migs_eu_host_associated_data]

        if not isinstance(self.human_associated_data, list):
            self.human_associated_data = [self.human_associated_data] if self.human_associated_data is not None else []
        self.human_associated_data = [v if isinstance(v, HumanAssociated) else HumanAssociated(**as_dict(v)) for v in self.human_associated_data]

        if not isinstance(self.migs_eu_human_associated_data, list):
            self.migs_eu_human_associated_data = [self.migs_eu_human_associated_data] if self.migs_eu_human_associated_data is not None else []
        self.migs_eu_human_associated_data = [v if isinstance(v, MigsEuHumanAssociated) else MigsEuHumanAssociated(**as_dict(v)) for v in self.migs_eu_human_associated_data]

        if not isinstance(self.human_gut_data, list):
            self.human_gut_data = [self.human_gut_data] if self.human_gut_data is not None else []
        self.human_gut_data = [v if isinstance(v, HumanGut) else HumanGut(**as_dict(v)) for v in self.human_gut_data]

        if not isinstance(self.migs_eu_human_gut_data, list):
            self.migs_eu_human_gut_data = [self.migs_eu_human_gut_data] if self.migs_eu_human_gut_data is not None else []
        self.migs_eu_human_gut_data = [v if isinstance(v, MigsEuHumanGut) else MigsEuHumanGut(**as_dict(v)) for v in self.migs_eu_human_gut_data]

        if not isinstance(self.human_oral_data, list):
            self.human_oral_data = [self.human_oral_data] if self.human_oral_data is not None else []
        self.human_oral_data = [v if isinstance(v, HumanOral) else HumanOral(**as_dict(v)) for v in self.human_oral_data]

        if not isinstance(self.migs_eu_human_oral_data, list):
            self.migs_eu_human_oral_data = [self.migs_eu_human_oral_data] if self.migs_eu_human_oral_data is not None else []
        self.migs_eu_human_oral_data = [v if isinstance(v, MigsEuHumanOral) else MigsEuHumanOral(**as_dict(v)) for v in self.migs_eu_human_oral_data]

        if not isinstance(self.soil_data, list):
            self.soil_data = [self.soil_data] if self.soil_data is not None else []
        self.soil_data = [v if isinstance(v, Soil) else Soil(**as_dict(v)) for v in self.soil_data]

        if not isinstance(self.migs_eu_soil_data, list):
            self.migs_eu_soil_data = [self.migs_eu_soil_data] if self.migs_eu_soil_data is not None else []
        self.migs_eu_soil_data = [v if isinstance(v, MigsEuSoil) else MigsEuSoil(**as_dict(v)) for v in self.migs_eu_soil_data]

        if not isinstance(self.water_data, list):
            self.water_data = [self.water_data] if self.water_data is not None else []
        self.water_data = [v if isinstance(v, Water) else Water(**as_dict(v)) for v in self.water_data]

        if not isinstance(self.migs_eu_water_data, list):
            self.migs_eu_water_data = [self.migs_eu_water_data] if self.migs_eu_water_data is not None else []
        self.migs_eu_water_data = [v if isinstance(v, MigsEuWater) else MigsEuWater(**as_dict(v)) for v in self.migs_eu_water_data]

        if not isinstance(self.mims_data, list):
            self.mims_data = [self.mims_data] if self.mims_data is not None else []
        self.mims_data = [v if isinstance(v, Mims) else Mims(**as_dict(v)) for v in self.mims_data]

        if not isinstance(self.mims_plant_associated_data, list):
            self.mims_plant_associated_data = [self.mims_plant_associated_data] if self.mims_plant_associated_data is not None else []
        self.mims_plant_associated_data = [v if isinstance(v, MimsPlantAssociated) else MimsPlantAssociated(**as_dict(v)) for v in self.mims_plant_associated_data]

        if not isinstance(self.mims_host_associated_data, list):
            self.mims_host_associated_data = [self.mims_host_associated_data] if self.mims_host_associated_data is not None else []
        self.mims_host_associated_data = [v if isinstance(v, MimsHostAssociated) else MimsHostAssociated(**as_dict(v)) for v in self.mims_host_associated_data]

        if not isinstance(self.mims_human_associated_data, list):
            self.mims_human_associated_data = [self.mims_human_associated_data] if self.mims_human_associated_data is not None else []
        self.mims_human_associated_data = [v if isinstance(v, MimsHumanAssociated) else MimsHumanAssociated(**as_dict(v)) for v in self.mims_human_associated_data]

        if not isinstance(self.mims_human_gut_data, list):
            self.mims_human_gut_data = [self.mims_human_gut_data] if self.mims_human_gut_data is not None else []
        self.mims_human_gut_data = [v if isinstance(v, MimsHumanGut) else MimsHumanGut(**as_dict(v)) for v in self.mims_human_gut_data]

        if not isinstance(self.mims_human_oral_data, list):
            self.mims_human_oral_data = [self.mims_human_oral_data] if self.mims_human_oral_data is not None else []
        self.mims_human_oral_data = [v if isinstance(v, MimsHumanOral) else MimsHumanOral(**as_dict(v)) for v in self.mims_human_oral_data]

        if not isinstance(self.mims_soil_data, list):
            self.mims_soil_data = [self.mims_soil_data] if self.mims_soil_data is not None else []
        self.mims_soil_data = [v if isinstance(v, MimsSoil) else MimsSoil(**as_dict(v)) for v in self.mims_soil_data]

        if not isinstance(self.mims_water_data, list):
            self.mims_water_data = [self.mims_water_data] if self.mims_water_data is not None else []
        self.mims_water_data = [v if isinstance(v, MimsWater) else MimsWater(**as_dict(v)) for v in self.mims_water_data]

        if not isinstance(self.mimarks_s_data, list):
            self.mimarks_s_data = [self.mimarks_s_data] if self.mimarks_s_data is not None else []
        self.mimarks_s_data = [v if isinstance(v, MimarksS) else MimarksS(**as_dict(v)) for v in self.mimarks_s_data]

        if not isinstance(self.mimarks_s_plant_associated_data, list):
            self.mimarks_s_plant_associated_data = [self.mimarks_s_plant_associated_data] if self.mimarks_s_plant_associated_data is not None else []
        self.mimarks_s_plant_associated_data = [v if isinstance(v, MimarksSPlantAssociated) else MimarksSPlantAssociated(**as_dict(v)) for v in self.mimarks_s_plant_associated_data]

        if not isinstance(self.mimarks_s_host_associated_data, list):
            self.mimarks_s_host_associated_data = [self.mimarks_s_host_associated_data] if self.mimarks_s_host_associated_data is not None else []
        self.mimarks_s_host_associated_data = [v if isinstance(v, MimarksSHostAssociated) else MimarksSHostAssociated(**as_dict(v)) for v in self.mimarks_s_host_associated_data]

        if not isinstance(self.mimarks_s_human_associated_data, list):
            self.mimarks_s_human_associated_data = [self.mimarks_s_human_associated_data] if self.mimarks_s_human_associated_data is not None else []
        self.mimarks_s_human_associated_data = [v if isinstance(v, MimarksSHumanAssociated) else MimarksSHumanAssociated(**as_dict(v)) for v in self.mimarks_s_human_associated_data]

        if not isinstance(self.mimarks_s_human_gut_data, list):
            self.mimarks_s_human_gut_data = [self.mimarks_s_human_gut_data] if self.mimarks_s_human_gut_data is not None else []
        self.mimarks_s_human_gut_data = [v if isinstance(v, MimarksSHumanGut) else MimarksSHumanGut(**as_dict(v)) for v in self.mimarks_s_human_gut_data]

        if not isinstance(self.mimarks_s_human_oral_data, list):
            self.mimarks_s_human_oral_data = [self.mimarks_s_human_oral_data] if self.mimarks_s_human_oral_data is not None else []
        self.mimarks_s_human_oral_data = [v if isinstance(v, MimarksSHumanOral) else MimarksSHumanOral(**as_dict(v)) for v in self.mimarks_s_human_oral_data]

        if not isinstance(self.mimarks_s_soil_data, list):
            self.mimarks_s_soil_data = [self.mimarks_s_soil_data] if self.mimarks_s_soil_data is not None else []
        self.mimarks_s_soil_data = [v if isinstance(v, MimarksSSoil) else MimarksSSoil(**as_dict(v)) for v in self.mimarks_s_soil_data]

        if not isinstance(self.mimarks_s_water_data, list):
            self.mimarks_s_water_data = [self.mimarks_s_water_data] if self.mimarks_s_water_data is not None else []
        self.mimarks_s_water_data = [v if isinstance(v, MimarksSWater) else MimarksSWater(**as_dict(v)) for v in self.mimarks_s_water_data]

        super().__post_init__(**kwargs)


@dataclass
class MigsEuPlantAssociated(PlantAssociated):
    """
    MIxS data that complies with the MigsEu checklist and the PlantAssociated Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010002_0016010"]
    class_class_curie: ClassVar[str] = "MIXS:0010002_0016010"
    class_name: ClassVar[str] = "MigsEuPlantAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MigsEuPlantAssociated

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    assembly_qual: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    isol_growth_condt: str = None
    samp_taxon_id: str = None
    assembly_software: str = None
    number_contig: int = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    feat_pred: Optional[str] = None
    adapters: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    extrachrom_elements: Optional[int] = None
    alt: Optional[str] = None
    ref_db: Optional[str] = None
    compl_software: Optional[str] = None
    assembly_name: Optional[str] = None
    propagation: Optional[str] = None
    sim_search_meth: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    num_replicons: Optional[int] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    ploidy: Optional[str] = None
    specific_host: Optional[str] = None
    tax_ident: Optional[Union[str, "TAXIDENTENUM"]] = None
    pathogenicity: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    compl_score: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    subspecf_gen_lin: Optional[str] = None
    estimated_size: Optional[str] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.number_contig):
            self.MissingRequiredField("number_contig")
        if not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.tax_ident is not None and not isinstance(self.tax_ident, TAXIDENTENUM):
            self.tax_ident = TAXIDENTENUM(self.tax_ident)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MigsEuHostAssociated(HostAssociated):
    """
    MIxS data that complies with the MigsEu checklist and the HostAssociated Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010002_0016002"]
    class_class_curie: ClassVar[str] = "MIXS:0010002_0016002"
    class_name: ClassVar[str] = "MigsEuHostAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MigsEuHostAssociated

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    assembly_qual: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    isol_growth_condt: str = None
    samp_taxon_id: str = None
    assembly_software: str = None
    number_contig: int = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    feat_pred: Optional[str] = None
    adapters: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    extrachrom_elements: Optional[int] = None
    ref_db: Optional[str] = None
    compl_software: Optional[str] = None
    assembly_name: Optional[str] = None
    propagation: Optional[str] = None
    sim_search_meth: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    num_replicons: Optional[int] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    ploidy: Optional[str] = None
    specific_host: Optional[str] = None
    tax_ident: Optional[Union[str, "TAXIDENTENUM"]] = None
    pathogenicity: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    compl_score: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    subspecf_gen_lin: Optional[str] = None
    estimated_size: Optional[str] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.number_contig):
            self.MissingRequiredField("number_contig")
        if not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.tax_ident is not None and not isinstance(self.tax_ident, TAXIDENTENUM):
            self.tax_ident = TAXIDENTENUM(self.tax_ident)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MigsEuHumanAssociated(HumanAssociated):
    """
    MIxS data that complies with the MigsEu checklist and the HumanAssociated Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010002_0016003"]
    class_class_curie: ClassVar[str] = "MIXS:0010002_0016003"
    class_name: ClassVar[str] = "MigsEuHumanAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MigsEuHumanAssociated

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    assembly_qual: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    isol_growth_condt: str = None
    samp_taxon_id: str = None
    assembly_software: str = None
    number_contig: int = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    feat_pred: Optional[str] = None
    adapters: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    extrachrom_elements: Optional[int] = None
    alt: Optional[str] = None
    ref_db: Optional[str] = None
    compl_software: Optional[str] = None
    assembly_name: Optional[str] = None
    propagation: Optional[str] = None
    sim_search_meth: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    num_replicons: Optional[int] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    depth: Optional[str] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    ploidy: Optional[str] = None
    specific_host: Optional[str] = None
    tax_ident: Optional[Union[str, "TAXIDENTENUM"]] = None
    pathogenicity: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    compl_score: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    subspecf_gen_lin: Optional[str] = None
    estimated_size: Optional[str] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.number_contig):
            self.MissingRequiredField("number_contig")
        if not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.tax_ident is not None and not isinstance(self.tax_ident, TAXIDENTENUM):
            self.tax_ident = TAXIDENTENUM(self.tax_ident)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MigsEuHumanGut(HumanGut):
    """
    MIxS data that complies with the MigsEu checklist and the HumanGut Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010002_0016004"]
    class_class_curie: ClassVar[str] = "MIXS:0010002_0016004"
    class_name: ClassVar[str] = "MigsEuHumanGut"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MigsEuHumanGut

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    assembly_qual: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    isol_growth_condt: str = None
    samp_taxon_id: str = None
    assembly_software: str = None
    number_contig: int = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    feat_pred: Optional[str] = None
    adapters: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    extrachrom_elements: Optional[int] = None
    alt: Optional[str] = None
    ref_db: Optional[str] = None
    compl_software: Optional[str] = None
    assembly_name: Optional[str] = None
    propagation: Optional[str] = None
    sim_search_meth: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    num_replicons: Optional[int] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    depth: Optional[str] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    ploidy: Optional[str] = None
    specific_host: Optional[str] = None
    tax_ident: Optional[Union[str, "TAXIDENTENUM"]] = None
    pathogenicity: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    compl_score: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    subspecf_gen_lin: Optional[str] = None
    estimated_size: Optional[str] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.number_contig):
            self.MissingRequiredField("number_contig")
        if not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.tax_ident is not None and not isinstance(self.tax_ident, TAXIDENTENUM):
            self.tax_ident = TAXIDENTENUM(self.tax_ident)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MigsEuHumanOral(HumanOral):
    """
    MIxS data that complies with the MigsEu checklist and the HumanOral Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010002_0016005"]
    class_class_curie: ClassVar[str] = "MIXS:0010002_0016005"
    class_name: ClassVar[str] = "MigsEuHumanOral"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MigsEuHumanOral

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    assembly_qual: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    isol_growth_condt: str = None
    samp_taxon_id: str = None
    assembly_software: str = None
    number_contig: int = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    feat_pred: Optional[str] = None
    adapters: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    extrachrom_elements: Optional[int] = None
    alt: Optional[str] = None
    ref_db: Optional[str] = None
    compl_software: Optional[str] = None
    assembly_name: Optional[str] = None
    propagation: Optional[str] = None
    sim_search_meth: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    num_replicons: Optional[int] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    depth: Optional[str] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    ploidy: Optional[str] = None
    specific_host: Optional[str] = None
    tax_ident: Optional[Union[str, "TAXIDENTENUM"]] = None
    pathogenicity: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    compl_score: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    subspecf_gen_lin: Optional[str] = None
    estimated_size: Optional[str] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.number_contig):
            self.MissingRequiredField("number_contig")
        if not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.tax_ident is not None and not isinstance(self.tax_ident, TAXIDENTENUM):
            self.tax_ident = TAXIDENTENUM(self.tax_ident)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MigsEuSoil(Soil):
    """
    MIxS data that complies with the MigsEu checklist and the Soil Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010002_0016012"]
    class_class_curie: ClassVar[str] = "MIXS:0010002_0016012"
    class_name: ClassVar[str] = "MigsEuSoil"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MigsEuSoil

    samp_name: str = None
    project_name: str = None
    depth: str = None
    elev: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    assembly_qual: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    isol_growth_condt: str = None
    samp_taxon_id: str = None
    assembly_software: str = None
    number_contig: int = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    host_disease_stat: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    feat_pred: Optional[str] = None
    adapters: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    extrachrom_elements: Optional[int] = None
    alt: Optional[str] = None
    ref_db: Optional[str] = None
    compl_software: Optional[str] = None
    assembly_name: Optional[str] = None
    propagation: Optional[str] = None
    sim_search_meth: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    num_replicons: Optional[int] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    ploidy: Optional[str] = None
    specific_host: Optional[str] = None
    tax_ident: Optional[Union[str, "TAXIDENTENUM"]] = None
    pathogenicity: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    compl_score: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    subspecf_gen_lin: Optional[str] = None
    estimated_size: Optional[str] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.number_contig):
            self.MissingRequiredField("number_contig")
        if not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.tax_ident is not None and not isinstance(self.tax_ident, TAXIDENTENUM):
            self.tax_ident = TAXIDENTENUM(self.tax_ident)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MigsEuWater(Water):
    """
    MIxS data that complies with the MigsEu checklist and the Water Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010002_0016014"]
    class_class_curie: ClassVar[str] = "MIXS:0010002_0016014"
    class_name: ClassVar[str] = "MigsEuWater"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MigsEuWater

    samp_name: str = None
    project_name: str = None
    depth: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    assembly_qual: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    isol_growth_condt: str = None
    samp_taxon_id: str = None
    assembly_software: str = None
    number_contig: int = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    host_disease_stat: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    feat_pred: Optional[str] = None
    adapters: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    extrachrom_elements: Optional[int] = None
    alt: Optional[str] = None
    ref_db: Optional[str] = None
    compl_software: Optional[str] = None
    assembly_name: Optional[str] = None
    propagation: Optional[str] = None
    sim_search_meth: Optional[str] = None
    biotic_relationship: Optional[Union[str, "BIOTICRELATIONSHIPENUM"]] = None
    host_spec_range: Optional[Union[str, List[str]]] = empty_list()
    num_replicons: Optional[int] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    trophic_level: Optional[Union[str, "TROPHICLEVELENUM"]] = None
    ploidy: Optional[str] = None
    specific_host: Optional[str] = None
    tax_ident: Optional[Union[str, "TAXIDENTENUM"]] = None
    pathogenicity: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    compl_score: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    subspecf_gen_lin: Optional[str] = None
    estimated_size: Optional[str] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.assembly_qual):
            self.MissingRequiredField("assembly_qual")
        if not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.isol_growth_condt):
            self.MissingRequiredField("isol_growth_condt")
        if not isinstance(self.isol_growth_condt, str):
            self.isol_growth_condt = str(self.isol_growth_condt)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.assembly_software):
            self.MissingRequiredField("assembly_software")
        if not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self._is_empty(self.number_contig):
            self.MissingRequiredField("number_contig")
        if not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.host_disease_stat is not None and not isinstance(self.host_disease_stat, str):
            self.host_disease_stat = str(self.host_disease_stat)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.extrachrom_elements is not None and not isinstance(self.extrachrom_elements, int):
            self.extrachrom_elements = int(self.extrachrom_elements)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.compl_software is not None and not isinstance(self.compl_software, str):
            self.compl_software = str(self.compl_software)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.propagation is not None and not isinstance(self.propagation, str):
            self.propagation = str(self.propagation)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.biotic_relationship is not None and not isinstance(self.biotic_relationship, BIOTICRELATIONSHIPENUM):
            self.biotic_relationship = BIOTICRELATIONSHIPENUM(self.biotic_relationship)

        if not isinstance(self.host_spec_range, list):
            self.host_spec_range = [self.host_spec_range] if self.host_spec_range is not None else []
        self.host_spec_range = [v if isinstance(v, str) else str(v) for v in self.host_spec_range]

        if self.num_replicons is not None and not isinstance(self.num_replicons, int):
            self.num_replicons = int(self.num_replicons)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.trophic_level is not None and not isinstance(self.trophic_level, TROPHICLEVELENUM):
            self.trophic_level = TROPHICLEVELENUM(self.trophic_level)

        if self.ploidy is not None and not isinstance(self.ploidy, str):
            self.ploidy = str(self.ploidy)

        if self.specific_host is not None and not isinstance(self.specific_host, str):
            self.specific_host = str(self.specific_host)

        if self.tax_ident is not None and not isinstance(self.tax_ident, TAXIDENTENUM):
            self.tax_ident = TAXIDENTENUM(self.tax_ident)

        if self.pathogenicity is not None and not isinstance(self.pathogenicity, str):
            self.pathogenicity = str(self.pathogenicity)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.compl_score is not None and not isinstance(self.compl_score, str):
            self.compl_score = str(self.compl_score)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.subspecf_gen_lin is not None and not isinstance(self.subspecf_gen_lin, str):
            self.subspecf_gen_lin = str(self.subspecf_gen_lin)

        if self.estimated_size is not None and not isinstance(self.estimated_size, str):
            self.estimated_size = str(self.estimated_size)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MimsPlantAssociated(PlantAssociated):
    """
    MIxS data that complies with the Mims checklist and the PlantAssociated Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010007_0016010"]
    class_class_curie: ClassVar[str] = "MIXS:0010007_0016010"
    class_name: ClassVar[str] = "MimsPlantAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MimsPlantAssociated

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    feat_pred: Optional[str] = None
    assembly_qual: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    ref_db: Optional[str] = None
    assembly_name: Optional[str] = None
    sim_search_meth: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    assembly_software: Optional[str] = None
    number_contig: Optional[int] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MimsHostAssociated(HostAssociated):
    """
    MIxS data that complies with the Mims checklist and the HostAssociated Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010007_0016002"]
    class_class_curie: ClassVar[str] = "MIXS:0010007_0016002"
    class_name: ClassVar[str] = "MimsHostAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MimsHostAssociated

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    feat_pred: Optional[str] = None
    assembly_qual: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    mid: Optional[str] = None
    ref_db: Optional[str] = None
    assembly_name: Optional[str] = None
    sim_search_meth: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    assembly_software: Optional[str] = None
    number_contig: Optional[int] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MimsHumanAssociated(HumanAssociated):
    """
    MIxS data that complies with the Mims checklist and the HumanAssociated Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010007_0016003"]
    class_class_curie: ClassVar[str] = "MIXS:0010007_0016003"
    class_name: ClassVar[str] = "MimsHumanAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MimsHumanAssociated

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    feat_pred: Optional[str] = None
    assembly_qual: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    ref_db: Optional[str] = None
    assembly_name: Optional[str] = None
    sim_search_meth: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    depth: Optional[str] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    assembly_software: Optional[str] = None
    number_contig: Optional[int] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MimsHumanGut(HumanGut):
    """
    MIxS data that complies with the Mims checklist and the HumanGut Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010007_0016004"]
    class_class_curie: ClassVar[str] = "MIXS:0010007_0016004"
    class_name: ClassVar[str] = "MimsHumanGut"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MimsHumanGut

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    feat_pred: Optional[str] = None
    assembly_qual: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    ref_db: Optional[str] = None
    assembly_name: Optional[str] = None
    sim_search_meth: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    depth: Optional[str] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    assembly_software: Optional[str] = None
    number_contig: Optional[int] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MimsHumanOral(HumanOral):
    """
    MIxS data that complies with the Mims checklist and the HumanOral Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010007_0016005"]
    class_class_curie: ClassVar[str] = "MIXS:0010007_0016005"
    class_name: ClassVar[str] = "MimsHumanOral"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MimsHumanOral

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    feat_pred: Optional[str] = None
    assembly_qual: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    ref_db: Optional[str] = None
    assembly_name: Optional[str] = None
    sim_search_meth: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    depth: Optional[str] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    assembly_software: Optional[str] = None
    number_contig: Optional[int] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MimsSoil(Soil):
    """
    MIxS data that complies with the Mims checklist and the Soil Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010007_0016012"]
    class_class_curie: ClassVar[str] = "MIXS:0010007_0016012"
    class_name: ClassVar[str] = "MimsSoil"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MimsSoil

    samp_name: str = None
    project_name: str = None
    depth: str = None
    elev: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    feat_pred: Optional[str] = None
    assembly_qual: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    ref_db: Optional[str] = None
    assembly_name: Optional[str] = None
    sim_search_meth: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    assembly_software: Optional[str] = None
    number_contig: Optional[int] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MimsWater(Water):
    """
    MIxS data that complies with the Mims checklist and the Water Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010007_0016014"]
    class_class_curie: ClassVar[str] = "MIXS:0010007_0016014"
    class_name: ClassVar[str] = "MimsWater"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MimsWater

    samp_name: str = None
    project_name: str = None
    depth: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    tax_class: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    feat_pred: Optional[str] = None
    assembly_qual: Optional[str] = None
    ref_biomaterial: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    ref_db: Optional[str] = None
    assembly_name: Optional[str] = None
    sim_search_meth: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    annot: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    assembly_software: Optional[str] = None
    number_contig: Optional[int] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    lib_vector: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.tax_class is not None and not isinstance(self.tax_class, str):
            self.tax_class = str(self.tax_class)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.feat_pred is not None and not isinstance(self.feat_pred, str):
            self.feat_pred = str(self.feat_pred)

        if self.assembly_qual is not None and not isinstance(self.assembly_qual, str):
            self.assembly_qual = str(self.assembly_qual)

        if self.ref_biomaterial is not None and not isinstance(self.ref_biomaterial, str):
            self.ref_biomaterial = str(self.ref_biomaterial)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.ref_db is not None and not isinstance(self.ref_db, str):
            self.ref_db = str(self.ref_db)

        if self.assembly_name is not None and not isinstance(self.assembly_name, str):
            self.assembly_name = str(self.assembly_name)

        if self.sim_search_meth is not None and not isinstance(self.sim_search_meth, str):
            self.sim_search_meth = str(self.sim_search_meth)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.annot is not None and not isinstance(self.annot, str):
            self.annot = str(self.annot)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.number_contig is not None and not isinstance(self.number_contig, int):
            self.number_contig = int(self.number_contig)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MimarksSPlantAssociated(PlantAssociated):
    """
    MIxS data that complies with the MimarksS checklist and the PlantAssociated Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010008_0016010"]
    class_class_curie: ClassVar[str] = "MIXS:0010008_0016010"
    class_name: ClassVar[str] = "MimarksSPlantAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MimarksSPlantAssociated

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    target_gene: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    chimera_check: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    pcr_primers: Optional[str] = None
    pcr_cond: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    seq_quality_check: Optional[Union[str, "SEQQUALITYCHECKENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    assembly_software: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_vector: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    target_subfragment: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.target_gene):
            self.MissingRequiredField("target_gene")
        if not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, SEQQUALITYCHECKENUM):
            self.seq_quality_check = SEQQUALITYCHECKENUM(self.seq_quality_check)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MimarksSHostAssociated(HostAssociated):
    """
    MIxS data that complies with the MimarksS checklist and the HostAssociated Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010008_0016002"]
    class_class_curie: ClassVar[str] = "MIXS:0010008_0016002"
    class_name: ClassVar[str] = "MimarksSHostAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MimarksSHostAssociated

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    target_gene: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    chimera_check: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    mid: Optional[str] = None
    pcr_primers: Optional[str] = None
    pcr_cond: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    seq_quality_check: Optional[Union[str, "SEQQUALITYCHECKENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    assembly_software: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_vector: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    target_subfragment: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.target_gene):
            self.MissingRequiredField("target_gene")
        if not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, SEQQUALITYCHECKENUM):
            self.seq_quality_check = SEQQUALITYCHECKENUM(self.seq_quality_check)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MimarksSHumanAssociated(HumanAssociated):
    """
    MIxS data that complies with the MimarksS checklist and the HumanAssociated Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010008_0016003"]
    class_class_curie: ClassVar[str] = "MIXS:0010008_0016003"
    class_name: ClassVar[str] = "MimarksSHumanAssociated"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MimarksSHumanAssociated

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    target_gene: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    chimera_check: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    pcr_primers: Optional[str] = None
    pcr_cond: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    seq_quality_check: Optional[Union[str, "SEQQUALITYCHECKENUM"]] = None
    depth: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    assembly_software: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_vector: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    target_subfragment: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.target_gene):
            self.MissingRequiredField("target_gene")
        if not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, SEQQUALITYCHECKENUM):
            self.seq_quality_check = SEQQUALITYCHECKENUM(self.seq_quality_check)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MimarksSHumanGut(HumanGut):
    """
    MIxS data that complies with the MimarksS checklist and the HumanGut Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010008_0016004"]
    class_class_curie: ClassVar[str] = "MIXS:0010008_0016004"
    class_name: ClassVar[str] = "MimarksSHumanGut"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MimarksSHumanGut

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    target_gene: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    chimera_check: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    pcr_primers: Optional[str] = None
    pcr_cond: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    seq_quality_check: Optional[Union[str, "SEQQUALITYCHECKENUM"]] = None
    depth: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    assembly_software: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_vector: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    target_subfragment: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.target_gene):
            self.MissingRequiredField("target_gene")
        if not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, SEQQUALITYCHECKENUM):
            self.seq_quality_check = SEQQUALITYCHECKENUM(self.seq_quality_check)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MimarksSHumanOral(HumanOral):
    """
    MIxS data that complies with the MimarksS checklist and the HumanOral Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010008_0016005"]
    class_class_curie: ClassVar[str] = "MIXS:0010008_0016005"
    class_name: ClassVar[str] = "MimarksSHumanOral"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MimarksSHumanOral

    samp_name: str = None
    project_name: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    target_gene: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    chimera_check: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    elev: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    pcr_primers: Optional[str] = None
    pcr_cond: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    seq_quality_check: Optional[Union[str, "SEQQUALITYCHECKENUM"]] = None
    depth: Optional[str] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    assembly_software: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_vector: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    target_subfragment: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.target_gene):
            self.MissingRequiredField("target_gene")
        if not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.elev is not None and not isinstance(self.elev, str):
            self.elev = str(self.elev)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, SEQQUALITYCHECKENUM):
            self.seq_quality_check = SEQQUALITYCHECKENUM(self.seq_quality_check)

        if self.depth is not None and not isinstance(self.depth, str):
            self.depth = str(self.depth)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MimarksSSoil(Soil):
    """
    MIxS data that complies with the MimarksS checklist and the Soil Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010008_0016012"]
    class_class_curie: ClassVar[str] = "MIXS:0010008_0016012"
    class_name: ClassVar[str] = "MimarksSSoil"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MimarksSSoil

    samp_name: str = None
    project_name: str = None
    depth: str = None
    elev: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    target_gene: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    chimera_check: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    pcr_primers: Optional[str] = None
    pcr_cond: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    seq_quality_check: Optional[Union[str, "SEQQUALITYCHECKENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    assembly_software: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_vector: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    target_subfragment: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.target_gene):
            self.MissingRequiredField("target_gene")
        if not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, SEQQUALITYCHECKENUM):
            self.seq_quality_check = SEQQUALITYCHECKENUM(self.seq_quality_check)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


@dataclass
class MimarksSWater(Water):
    """
    MIxS data that complies with the MimarksS checklist and the Water Extension
    """
    _inherited_slots: ClassVar[List[str]] = []

    class_class_uri: ClassVar[URIRef] = MIXS["0010008_0016014"]
    class_class_curie: ClassVar[str] = "MIXS:0010008_0016014"
    class_name: ClassVar[str] = "MimarksSWater"
    class_model_uri: ClassVar[URIRef] = MIXS_6_2_RC.MimarksSWater

    samp_name: str = None
    project_name: str = None
    depth: str = None
    lat_lon: str = None
    env_local_scale: str = None
    seq_meth: str = None
    collection_date: Union[str, XSDDateTime] = None
    env_broad_scale: str = None
    samp_taxon_id: str = None
    env_medium: str = None
    geo_loc_name: str = None
    target_gene: str = None
    lib_screen: Optional[str] = None
    source_mat_id: Optional[Union[str, List[str]]] = empty_list()
    chimera_check: Optional[str] = None
    nucl_acid_ext: Optional[str] = None
    rel_to_oxygen: Optional[Union[str, "RELTOOXYGENENUM"]] = None
    adapters: Optional[str] = None
    alt: Optional[str] = None
    mid: Optional[str] = None
    pcr_primers: Optional[str] = None
    pcr_cond: Optional[str] = None
    nucl_acid_amp: Optional[str] = None
    lib_size: Optional[int] = None
    seq_quality_check: Optional[Union[str, "SEQQUALITYCHECKENUM"]] = None
    lib_reads_seqd: Optional[int] = None
    samp_collect_method: Optional[str] = None
    experimental_factor: Optional[Union[str, List[str]]] = empty_list()
    size_frac: Optional[str] = None
    assembly_software: Optional[str] = None
    samp_mat_process: Optional[str] = None
    lib_layout: Optional[Union[str, "LIBLAYOUTENUM"]] = None
    lib_vector: Optional[str] = None
    samp_collect_device: Optional[str] = None
    pos_cont_type: Optional[str] = None
    target_subfragment: Optional[str] = None
    neg_cont_type: Optional[Union[str, "NEGCONTTYPEENUM"]] = None
    samp_size: Optional[str] = None
    associated_resource: Optional[Union[str, List[str]]] = empty_list()
    sop: Optional[Union[str, List[str]]] = empty_list()

    def __post_init__(self, *_: List[str], **kwargs: Dict[str, Any]):
        if self._is_empty(self.samp_name):
            self.MissingRequiredField("samp_name")
        if not isinstance(self.samp_name, str):
            self.samp_name = str(self.samp_name)

        if self._is_empty(self.project_name):
            self.MissingRequiredField("project_name")
        if not isinstance(self.project_name, str):
            self.project_name = str(self.project_name)

        if self._is_empty(self.lat_lon):
            self.MissingRequiredField("lat_lon")
        if not isinstance(self.lat_lon, str):
            self.lat_lon = str(self.lat_lon)

        if self._is_empty(self.env_local_scale):
            self.MissingRequiredField("env_local_scale")
        if not isinstance(self.env_local_scale, str):
            self.env_local_scale = str(self.env_local_scale)

        if self._is_empty(self.seq_meth):
            self.MissingRequiredField("seq_meth")
        if not isinstance(self.seq_meth, str):
            self.seq_meth = str(self.seq_meth)

        if self._is_empty(self.collection_date):
            self.MissingRequiredField("collection_date")
        if not isinstance(self.collection_date, XSDDateTime):
            self.collection_date = XSDDateTime(self.collection_date)

        if self._is_empty(self.env_broad_scale):
            self.MissingRequiredField("env_broad_scale")
        if not isinstance(self.env_broad_scale, str):
            self.env_broad_scale = str(self.env_broad_scale)

        if self._is_empty(self.samp_taxon_id):
            self.MissingRequiredField("samp_taxon_id")
        if not isinstance(self.samp_taxon_id, str):
            self.samp_taxon_id = str(self.samp_taxon_id)

        if self._is_empty(self.env_medium):
            self.MissingRequiredField("env_medium")
        if not isinstance(self.env_medium, str):
            self.env_medium = str(self.env_medium)

        if self._is_empty(self.geo_loc_name):
            self.MissingRequiredField("geo_loc_name")
        if not isinstance(self.geo_loc_name, str):
            self.geo_loc_name = str(self.geo_loc_name)

        if self._is_empty(self.target_gene):
            self.MissingRequiredField("target_gene")
        if not isinstance(self.target_gene, str):
            self.target_gene = str(self.target_gene)

        if self.lib_screen is not None and not isinstance(self.lib_screen, str):
            self.lib_screen = str(self.lib_screen)

        if not isinstance(self.source_mat_id, list):
            self.source_mat_id = [self.source_mat_id] if self.source_mat_id is not None else []
        self.source_mat_id = [v if isinstance(v, str) else str(v) for v in self.source_mat_id]

        if self.chimera_check is not None and not isinstance(self.chimera_check, str):
            self.chimera_check = str(self.chimera_check)

        if self.nucl_acid_ext is not None and not isinstance(self.nucl_acid_ext, str):
            self.nucl_acid_ext = str(self.nucl_acid_ext)

        if self.rel_to_oxygen is not None and not isinstance(self.rel_to_oxygen, RELTOOXYGENENUM):
            self.rel_to_oxygen = RELTOOXYGENENUM(self.rel_to_oxygen)

        if self.adapters is not None and not isinstance(self.adapters, str):
            self.adapters = str(self.adapters)

        if self.alt is not None and not isinstance(self.alt, str):
            self.alt = str(self.alt)

        if self.mid is not None and not isinstance(self.mid, str):
            self.mid = str(self.mid)

        if self.pcr_primers is not None and not isinstance(self.pcr_primers, str):
            self.pcr_primers = str(self.pcr_primers)

        if self.pcr_cond is not None and not isinstance(self.pcr_cond, str):
            self.pcr_cond = str(self.pcr_cond)

        if self.nucl_acid_amp is not None and not isinstance(self.nucl_acid_amp, str):
            self.nucl_acid_amp = str(self.nucl_acid_amp)

        if self.lib_size is not None and not isinstance(self.lib_size, int):
            self.lib_size = int(self.lib_size)

        if self.seq_quality_check is not None and not isinstance(self.seq_quality_check, SEQQUALITYCHECKENUM):
            self.seq_quality_check = SEQQUALITYCHECKENUM(self.seq_quality_check)

        if self.lib_reads_seqd is not None and not isinstance(self.lib_reads_seqd, int):
            self.lib_reads_seqd = int(self.lib_reads_seqd)

        if self.samp_collect_method is not None and not isinstance(self.samp_collect_method, str):
            self.samp_collect_method = str(self.samp_collect_method)

        if not isinstance(self.experimental_factor, list):
            self.experimental_factor = [self.experimental_factor] if self.experimental_factor is not None else []
        self.experimental_factor = [v if isinstance(v, str) else str(v) for v in self.experimental_factor]

        if self.size_frac is not None and not isinstance(self.size_frac, str):
            self.size_frac = str(self.size_frac)

        if self.assembly_software is not None and not isinstance(self.assembly_software, str):
            self.assembly_software = str(self.assembly_software)

        if self.samp_mat_process is not None and not isinstance(self.samp_mat_process, str):
            self.samp_mat_process = str(self.samp_mat_process)

        if self.lib_layout is not None and not isinstance(self.lib_layout, LIBLAYOUTENUM):
            self.lib_layout = LIBLAYOUTENUM(self.lib_layout)

        if self.lib_vector is not None and not isinstance(self.lib_vector, str):
            self.lib_vector = str(self.lib_vector)

        if self.samp_collect_device is not None and not isinstance(self.samp_collect_device, str):
            self.samp_collect_device = str(self.samp_collect_device)

        if self.pos_cont_type is not None and not isinstance(self.pos_cont_type, str):
            self.pos_cont_type = str(self.pos_cont_type)

        if self.target_subfragment is not None and not isinstance(self.target_subfragment, str):
            self.target_subfragment = str(self.target_subfragment)

        if self.neg_cont_type is not None and not isinstance(self.neg_cont_type, NEGCONTTYPEENUM):
            self.neg_cont_type = NEGCONTTYPEENUM(self.neg_cont_type)

        if self.samp_size is not None and not isinstance(self.samp_size, str):
            self.samp_size = str(self.samp_size)

        if not isinstance(self.associated_resource, list):
            self.associated_resource = [self.associated_resource] if self.associated_resource is not None else []
        self.associated_resource = [v if isinstance(v, str) else str(v) for v in self.associated_resource]

        if not isinstance(self.sop, list):
            self.sop = [self.sop] if self.sop is not None else []
        self.sop = [v if isinstance(v, str) else str(v) for v in self.sop]

        super().__post_init__(**kwargs)


# Enumerations
class NEGCONTTYPEENUM(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="NEGCONTTYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "DNA-free PCR mix",
            PermissibleValue(text="DNA-free PCR mix"))
        setattr(cls, "distilled water",
            PermissibleValue(text="distilled water"))
        setattr(cls, "empty collection device",
            PermissibleValue(text="empty collection device"))
        setattr(cls, "empty collection tube",
            PermissibleValue(text="empty collection tube"))
        setattr(cls, "phosphate buffer",
            PermissibleValue(text="phosphate buffer"))
        setattr(cls, "sterile swab",
            PermissibleValue(text="sterile swab"))
        setattr(cls, "sterile syringe",
            PermissibleValue(text="sterile syringe"))

class BIOTICRELATIONSHIPENUM(EnumDefinitionImpl):

    commensalism = PermissibleValue(text="commensalism")
    mutualism = PermissibleValue(text="mutualism")
    parasitism = PermissibleValue(text="parasitism")
    symbiotic = PermissibleValue(text="symbiotic")

    _defn = EnumDefinition(
        name="BIOTICRELATIONSHIPENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "free living",
            PermissibleValue(text="free living"))

class TROPHICLEVELENUM(EnumDefinitionImpl):

    autotroph = PermissibleValue(text="autotroph")
    carboxydotroph = PermissibleValue(text="carboxydotroph")
    chemoautolithotroph = PermissibleValue(text="chemoautolithotroph")
    chemoautotroph = PermissibleValue(text="chemoautotroph")
    chemoheterotroph = PermissibleValue(text="chemoheterotroph")
    chemolithoautotroph = PermissibleValue(text="chemolithoautotroph")
    chemolithotroph = PermissibleValue(text="chemolithotroph")
    chemoorganoheterotroph = PermissibleValue(text="chemoorganoheterotroph")
    chemoorganotroph = PermissibleValue(text="chemoorganotroph")
    chemosynthetic = PermissibleValue(text="chemosynthetic")
    chemotroph = PermissibleValue(text="chemotroph")
    copiotroph = PermissibleValue(text="copiotroph")
    diazotroph = PermissibleValue(text="diazotroph")
    facultative = PermissibleValue(text="facultative")
    heterotroph = PermissibleValue(text="heterotroph")
    lithoautotroph = PermissibleValue(text="lithoautotroph")
    lithoheterotroph = PermissibleValue(text="lithoheterotroph")
    lithotroph = PermissibleValue(text="lithotroph")
    methanotroph = PermissibleValue(text="methanotroph")
    methylotroph = PermissibleValue(text="methylotroph")
    mixotroph = PermissibleValue(text="mixotroph")
    obligate = PermissibleValue(text="obligate")
    oligotroph = PermissibleValue(text="oligotroph")
    organoheterotroph = PermissibleValue(text="organoheterotroph")
    organotroph = PermissibleValue(text="organotroph")
    photoautotroph = PermissibleValue(text="photoautotroph")
    photoheterotroph = PermissibleValue(text="photoheterotroph")
    photolithoautotroph = PermissibleValue(text="photolithoautotroph")
    photolithotroph = PermissibleValue(text="photolithotroph")
    photosynthetic = PermissibleValue(text="photosynthetic")
    phototroph = PermissibleValue(text="phototroph")

    _defn = EnumDefinition(
        name="TROPHICLEVELENUM",
    )

class RELTOOXYGENENUM(EnumDefinitionImpl):

    aerobe = PermissibleValue(text="aerobe")
    anaerobe = PermissibleValue(text="anaerobe")
    facultative = PermissibleValue(text="facultative")
    microaerophilic = PermissibleValue(text="microaerophilic")
    microanaerobe = PermissibleValue(text="microanaerobe")

    _defn = EnumDefinition(
        name="RELTOOXYGENENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "obligate aerobe",
            PermissibleValue(text="obligate aerobe"))
        setattr(cls, "obligate anaerobe",
            PermissibleValue(text="obligate anaerobe"))

class VIRUSENRICHAPPRENUM(EnumDefinitionImpl):

    DNAse = PermissibleValue(text="DNAse")
    RNAse = PermissibleValue(text="RNAse")
    centrifugation = PermissibleValue(text="centrifugation")
    filtration = PermissibleValue(text="filtration")
    none = PermissibleValue(text="none")
    other = PermissibleValue(text="other")
    ultracentrifugation = PermissibleValue(text="ultracentrifugation")
    ultrafiltration = PermissibleValue(text="ultrafiltration")

    _defn = EnumDefinition(
        name="VIRUSENRICHAPPRENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "CsCl density gradient",
            PermissibleValue(text="CsCl density gradient"))
        setattr(cls, "FeCl Precipitation",
            PermissibleValue(text="FeCl Precipitation"))
        setattr(cls, "PEG Precipitation",
            PermissibleValue(text="PEG Precipitation"))
        setattr(cls, "targeted sequence capture",
            PermissibleValue(text="targeted sequence capture"))

class LIBLAYOUTENUM(EnumDefinitionImpl):

    other = PermissibleValue(text="other")
    paired = PermissibleValue(text="paired")
    single = PermissibleValue(text="single")
    vector = PermissibleValue(text="vector")

    _defn = EnumDefinition(
        name="LIBLAYOUTENUM",
    )

class SEQQUALITYCHECKENUM(EnumDefinitionImpl):

    none = PermissibleValue(text="none")

    _defn = EnumDefinition(
        name="SEQQUALITYCHECKENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "manually edited",
            PermissibleValue(text="manually edited"))

class TAXIDENTENUM(EnumDefinitionImpl):

    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="TAXIDENTENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "16S rRNA gene",
            PermissibleValue(text="16S rRNA gene"))
        setattr(cls, "multi-marker approach",
            PermissibleValue(text="multi-marker approach"))

class COMPLAPPRENUM(EnumDefinitionImpl):

    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="COMPLAPPRENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "marker gene",
            PermissibleValue(text="marker gene"))
        setattr(cls, "reference based",
            PermissibleValue(text="reference based"))

class CONTAMSCREENINPUTENUM(EnumDefinitionImpl):

    contigs = PermissibleValue(text="contigs")
    reads = PermissibleValue(text="reads")

    _defn = EnumDefinition(
        name="CONTAMSCREENINPUTENUM",
    )

class SORTTECHENUM(EnumDefinitionImpl):

    microfluidics = PermissibleValue(text="microfluidics")
    micromanipulation = PermissibleValue(text="micromanipulation")
    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="SORTTECHENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "flow cytometric cell sorting",
            PermissibleValue(text="flow cytometric cell sorting"))
        setattr(cls, "lazer-tweezing",
            PermissibleValue(text="lazer-tweezing"))
        setattr(cls, "optical manipulation",
            PermissibleValue(text="optical manipulation"))

class SCLYSISAPPROACHENUM(EnumDefinitionImpl):

    chemical = PermissibleValue(text="chemical")
    combination = PermissibleValue(text="combination")
    enzymatic = PermissibleValue(text="enzymatic")
    physical = PermissibleValue(text="physical")

    _defn = EnumDefinition(
        name="SCLYSISAPPROACHENUM",
    )

class WGAAMPAPPRENUM(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="WGAAMPAPPRENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "mda based",
            PermissibleValue(text="mda based"))
        setattr(cls, "pcr based",
            PermissibleValue(text="pcr based"))

class BINPARAMENUM(EnumDefinitionImpl):

    combination = PermissibleValue(text="combination")
    coverage = PermissibleValue(text="coverage")
    kmer = PermissibleValue(text="kmer")

    _defn = EnumDefinition(
        name="BINPARAMENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "codon usage",
            PermissibleValue(text="codon usage"))
        setattr(cls, "homology search",
            PermissibleValue(text="homology search"))

class MAGCOVSOFTWAREENUM(EnumDefinitionImpl):

    bbmap = PermissibleValue(text="bbmap")
    bowtie = PermissibleValue(text="bowtie")
    bwa = PermissibleValue(text="bwa")
    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="MAGCOVSOFTWAREENUM",
    )

class PREDGENOMESTRUCENUM(EnumDefinitionImpl):

    segmented = PermissibleValue(text="segmented")
    undetermined = PermissibleValue(text="undetermined")

    _defn = EnumDefinition(
        name="PREDGENOMESTRUCENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "non-segmented",
            PermissibleValue(text="non-segmented"))

class HOSTPREDAPPRENUM(EnumDefinitionImpl):

    combination = PermissibleValue(text="combination")
    other = PermissibleValue(text="other")
    provirus = PermissibleValue(text="provirus")

    _defn = EnumDefinition(
        name="HOSTPREDAPPRENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "CRISPR spacer match",
            PermissibleValue(text="CRISPR spacer match"))
        setattr(cls, "co-occurrence",
            PermissibleValue(text="co-occurrence"))
        setattr(cls, "host sequence similarity",
            PermissibleValue(text="host sequence similarity"))
        setattr(cls, "kmer similarity",
            PermissibleValue(text="kmer similarity"))

class OXYSTATSAMPENUM(EnumDefinitionImpl):

    aerobic = PermissibleValue(text="aerobic")
    anaerobic = PermissibleValue(text="anaerobic")
    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="OXYSTATSAMPENUM",
    )

class SURFMATERIALENUM(EnumDefinitionImpl):

    adobe = PermissibleValue(text="adobe")
    carpet = PermissibleValue(text="carpet")
    concrete = PermissibleValue(text="concrete")
    glass = PermissibleValue(text="glass")
    metal = PermissibleValue(text="metal")
    paint = PermissibleValue(text="paint")
    plastic = PermissibleValue(text="plastic")
    stone = PermissibleValue(text="stone")
    stucco = PermissibleValue(text="stucco")
    tile = PermissibleValue(text="tile")
    vinyl = PermissibleValue(text="vinyl")
    wood = PermissibleValue(text="wood")

    _defn = EnumDefinition(
        name="SURFMATERIALENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "cinder blocks",
            PermissibleValue(text="cinder blocks"))
        setattr(cls, "hay bales",
            PermissibleValue(text="hay bales"))
        setattr(cls, "stainless steel",
            PermissibleValue(text="stainless steel"))

class SURFAIRCONTENUM(EnumDefinitionImpl):

    biocides = PermissibleValue(text="biocides")
    dust = PermissibleValue(text="dust")
    nutrients = PermissibleValue(text="nutrients")
    radon = PermissibleValue(text="radon")

    _defn = EnumDefinition(
        name="SURFAIRCONTENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "biological contaminants",
            PermissibleValue(text="biological contaminants"))
        setattr(cls, "organic matter",
            PermissibleValue(text="organic matter"))
        setattr(cls, "particulate matter",
            PermissibleValue(text="particulate matter"))
        setattr(cls, "volatile organic compounds",
            PermissibleValue(text="volatile organic compounds"))

class BUILDOCCUPTYPEENUM(EnumDefinitionImpl):

    airport = PermissibleValue(text="airport")
    commercial = PermissibleValue(text="commercial")
    market = PermissibleValue(text="market")
    office = PermissibleValue(text="office")
    residence = PermissibleValue(text="residence")
    residential = PermissibleValue(text="residential")
    restaurant = PermissibleValue(text="restaurant")
    school = PermissibleValue(text="school")

    _defn = EnumDefinition(
        name="BUILDOCCUPTYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "health care",
            PermissibleValue(text="health care"))
        setattr(cls, "high rise",
            PermissibleValue(text="high rise"))
        setattr(cls, "low rise",
            PermissibleValue(text="low rise"))
        setattr(cls, "sports complex",
            PermissibleValue(text="sports complex"))
        setattr(cls, "wood framed",
            PermissibleValue(text="wood framed"))

class INDOORSPACEENUM(EnumDefinitionImpl):

    bathroom = PermissibleValue(text="bathroom")
    bedroom = PermissibleValue(text="bedroom")
    elevator = PermissibleValue(text="elevator")
    foyer = PermissibleValue(text="foyer")
    hallway = PermissibleValue(text="hallway")
    kitchen = PermissibleValue(text="kitchen")
    office = PermissibleValue(text="office")

    _defn = EnumDefinition(
        name="INDOORSPACEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "locker room",
            PermissibleValue(text="locker room"))

class INDOORSURFENUM(EnumDefinitionImpl):

    cabinet = PermissibleValue(text="cabinet")
    ceiling = PermissibleValue(text="ceiling")
    door = PermissibleValue(text="door")
    shelving = PermissibleValue(text="shelving")
    wall = PermissibleValue(text="wall")
    window = PermissibleValue(text="window")

    _defn = EnumDefinition(
        name="INDOORSURFENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "counter top",
            PermissibleValue(text="counter top"))
        setattr(cls, "vent cover",
            PermissibleValue(text="vent cover"))

class FILTERTYPEENUM(EnumDefinitionImpl):

    HEPA = PermissibleValue(text="HEPA")
    electrostatic = PermissibleValue(text="electrostatic")

    _defn = EnumDefinition(
        name="FILTERTYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "chemical air filter",
            PermissibleValue(text="chemical air filter"))
        setattr(cls, "gas-phase or ultraviolet air treatments",
            PermissibleValue(text="gas-phase or ultraviolet air treatments"))
        setattr(cls, "low-MERV pleated media",
            PermissibleValue(text="low-MERV pleated media"))
        setattr(cls, "particulate air filter",
            PermissibleValue(text="particulate air filter"))

class HEATCOOLTYPEENUM(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="HEATCOOLTYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "forced air system",
            PermissibleValue(text="forced air system"))
        setattr(cls, "heat pump",
            PermissibleValue(text="heat pump"))
        setattr(cls, "radiant system",
            PermissibleValue(text="radiant system"))
        setattr(cls, "steam forced heat",
            PermissibleValue(text="steam forced heat"))
        setattr(cls, "wood stove",
            PermissibleValue(text="wood stove"))

class SUBSTRUCTURETYPEENUM(EnumDefinitionImpl):

    basement = PermissibleValue(text="basement")
    crawlspace = PermissibleValue(text="crawlspace")

    _defn = EnumDefinition(
        name="SUBSTRUCTURETYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "slab on grade",
            PermissibleValue(text="slab on grade"))

class BUILDINGSETTINGENUM(EnumDefinitionImpl):

    exurban = PermissibleValue(text="exurban")
    rural = PermissibleValue(text="rural")
    suburban = PermissibleValue(text="suburban")
    urban = PermissibleValue(text="urban")

    _defn = EnumDefinition(
        name="BUILDINGSETTINGENUM",
    )

class LIGHTTYPEENUM(EnumDefinitionImpl):

    none = PermissibleValue(text="none")

    _defn = EnumDefinition(
        name="LIGHTTYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "desk lamp",
            PermissibleValue(text="desk lamp"))
        setattr(cls, "electric light",
            PermissibleValue(text="electric light"))
        setattr(cls, "flourescent lights",
            PermissibleValue(text="flourescent lights"))
        setattr(cls, "natural light",
            PermissibleValue(text="natural light"))

class SPACETYPSTATEENUM(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="SPACETYPSTATEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "typically occupied",
            PermissibleValue(text="typically occupied"))
        setattr(cls, "typically unoccupied",
            PermissibleValue(text="typically unoccupied"))

class AEROSTRUCENUM(EnumDefinitionImpl):

    glider = PermissibleValue(text="glider")
    plane = PermissibleValue(text="plane")

    _defn = EnumDefinition(
        name="AEROSTRUCENUM",
    )

class ARCHSTRUCENUM(EnumDefinitionImpl):

    building = PermissibleValue(text="building")
    home = PermissibleValue(text="home")
    shed = PermissibleValue(text="shed")

    _defn = EnumDefinition(
        name="ARCHSTRUCENUM",
    )

class BUILTSTRUCSETENUM(EnumDefinitionImpl):

    rural = PermissibleValue(text="rural")
    urban = PermissibleValue(text="urban")

    _defn = EnumDefinition(
        name="BUILTSTRUCSETENUM",
    )

class CEILFINISHMATENUM(EnumDefinitionImpl):

    PVC = PermissibleValue(text="PVC")
    drywall = PermissibleValue(text="drywall")
    fiberglass = PermissibleValue(text="fiberglass")
    metal = PermissibleValue(text="metal")
    plasterboard = PermissibleValue(text="plasterboard")
    stucco = PermissibleValue(text="stucco")
    tiles = PermissibleValue(text="tiles")
    wood = PermissibleValue(text="wood")

    _defn = EnumDefinition(
        name="CEILFINISHMATENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "mineral fibre",
            PermissibleValue(text="mineral fibre"))
        setattr(cls, "mineral wool/calcium silicate",
            PermissibleValue(text="mineral wool/calcium silicate"))

class CEILSTRUCENUM(EnumDefinitionImpl):

    concrete = PermissibleValue(text="concrete")

    _defn = EnumDefinition(
        name="CEILSTRUCENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "wood frame",
            PermissibleValue(text="wood frame"))

class CEILTYPEENUM(EnumDefinitionImpl):

    cathedral = PermissibleValue(text="cathedral")
    coffered = PermissibleValue(text="coffered")
    concave = PermissibleValue(text="concave")
    cove = PermissibleValue(text="cove")
    dropped = PermissibleValue(text="dropped")
    stretched = PermissibleValue(text="stretched")

    _defn = EnumDefinition(
        name="CEILTYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "barrel-shaped",
            PermissibleValue(text="barrel-shaped"))

class BUILDDOCSENUM(EnumDefinitionImpl):

    schedule = PermissibleValue(text="schedule")
    sections = PermissibleValue(text="sections")
    submittals = PermissibleValue(text="submittals")
    windows = PermissibleValue(text="windows")

    _defn = EnumDefinition(
        name="BUILDDOCSENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "building information model",
            PermissibleValue(text="building information model"))
        setattr(cls, "commissioning report",
            PermissibleValue(text="commissioning report"))
        setattr(cls, "complaint logs",
            PermissibleValue(text="complaint logs"))
        setattr(cls, "contract administration",
            PermissibleValue(text="contract administration"))
        setattr(cls, "cost estimate",
            PermissibleValue(text="cost estimate"))
        setattr(cls, "janitorial schedules or logs",
            PermissibleValue(text="janitorial schedules or logs"))
        setattr(cls, "maintenance plans",
            PermissibleValue(text="maintenance plans"))
        setattr(cls, "shop drawings",
            PermissibleValue(text="shop drawings"))
        setattr(cls, "ventilation system",
            PermissibleValue(text="ventilation system"))

class DOORDIRECTENUM(EnumDefinitionImpl):

    inward = PermissibleValue(text="inward")
    outward = PermissibleValue(text="outward")
    sideways = PermissibleValue(text="sideways")

    _defn = EnumDefinition(
        name="DOORDIRECTENUM",
    )

class DOORMATENUM(EnumDefinitionImpl):

    aluminum = PermissibleValue(text="aluminum")
    fiberboard = PermissibleValue(text="fiberboard")
    fiberglass = PermissibleValue(text="fiberglass")
    metal = PermissibleValue(text="metal")
    vinyl = PermissibleValue(text="vinyl")
    wood = PermissibleValue(text="wood")

    _defn = EnumDefinition(
        name="DOORMATENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "cellular PVC",
            PermissibleValue(text="cellular PVC"))
        setattr(cls, "engineered plastic",
            PermissibleValue(text="engineered plastic"))
        setattr(cls, "thermoplastic alloy",
            PermissibleValue(text="thermoplastic alloy"))
        setattr(cls, "wood/plastic composite",
            PermissibleValue(text="wood/plastic composite"))

class DOORMOVEENUM(EnumDefinitionImpl):

    collapsible = PermissibleValue(text="collapsible")
    folding = PermissibleValue(text="folding")
    revolving = PermissibleValue(text="revolving")
    sliding = PermissibleValue(text="sliding")
    swinging = PermissibleValue(text="swinging")

    _defn = EnumDefinition(
        name="DOORMOVEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "rolling shutter",
            PermissibleValue(text="rolling shutter"))

class DOORTYPEENUM(EnumDefinitionImpl):

    composite = PermissibleValue(text="composite")
    metal = PermissibleValue(text="metal")
    wooden = PermissibleValue(text="wooden")

    _defn = EnumDefinition(
        name="DOORTYPEENUM",
    )

class DOORCOMPTYPEENUM(EnumDefinitionImpl):

    revolving = PermissibleValue(text="revolving")
    sliding = PermissibleValue(text="sliding")
    telescopic = PermissibleValue(text="telescopic")

    _defn = EnumDefinition(
        name="DOORCOMPTYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "metal covered",
            PermissibleValue(text="metal covered"))

class DOORTYPEMETALENUM(EnumDefinitionImpl):

    collapsible = PermissibleValue(text="collapsible")
    hollow = PermissibleValue(text="hollow")

    _defn = EnumDefinition(
        name="DOORTYPEMETALENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "corrugated steel",
            PermissibleValue(text="corrugated steel"))
        setattr(cls, "rolling shutters",
            PermissibleValue(text="rolling shutters"))
        setattr(cls, "steel plate",
            PermissibleValue(text="steel plate"))

class DRAWINGSENUM(EnumDefinitionImpl):

    bid = PermissibleValue(text="bid")
    construction = PermissibleValue(text="construction")
    design = PermissibleValue(text="design")
    diagram = PermissibleValue(text="diagram")
    operation = PermissibleValue(text="operation")
    sketch = PermissibleValue(text="sketch")

    _defn = EnumDefinition(
        name="DRAWINGSENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "as built",
            PermissibleValue(text="as built"))
        setattr(cls, "building navigation map",
            PermissibleValue(text="building navigation map"))

class FIREPLACETYPEENUM(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="FIREPLACETYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "gas burning",
            PermissibleValue(text="gas burning"))
        setattr(cls, "wood burning",
            PermissibleValue(text="wood burning"))

class FLOORWATERMOLDENUM(EnumDefinitionImpl):

    condensation = PermissibleValue(text="condensation")

    _defn = EnumDefinition(
        name="FLOORWATERMOLDENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "bulging walls",
            PermissibleValue(text="bulging walls"))
        setattr(cls, "ceiling discoloration",
            PermissibleValue(text="ceiling discoloration"))
        setattr(cls, "floor discoloration",
            PermissibleValue(text="floor discoloration"))
        setattr(cls, "mold odor",
            PermissibleValue(text="mold odor"))
        setattr(cls, "peeling paint or wallpaper",
            PermissibleValue(text="peeling paint or wallpaper"))
        setattr(cls, "wall discoloration",
            PermissibleValue(text="wall discoloration"))
        setattr(cls, "water stains",
            PermissibleValue(text="water stains"))
        setattr(cls, "wet floor",
            PermissibleValue(text="wet floor"))

class FLOORSTRUCENUM(EnumDefinitionImpl):

    balcony = PermissibleValue(text="balcony")
    concrete = PermissibleValue(text="concrete")

    _defn = EnumDefinition(
        name="FLOORSTRUCENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "floating floor",
            PermissibleValue(text="floating floor"))
        setattr(cls, "glass floor",
            PermissibleValue(text="glass floor"))
        setattr(cls, "raised floor",
            PermissibleValue(text="raised floor"))
        setattr(cls, "sprung floor",
            PermissibleValue(text="sprung floor"))
        setattr(cls, "wood-framed",
            PermissibleValue(text="wood-framed"))

class FREQCLEANENUM(EnumDefinitionImpl):

    Annually = PermissibleValue(text="Annually")
    Daily = PermissibleValue(text="Daily")
    Monthly = PermissibleValue(text="Monthly")
    Quarterly = PermissibleValue(text="Quarterly")
    Weekly = PermissibleValue(text="Weekly")
    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="FREQCLEANENUM",
    )

class FURNITUREENUM(EnumDefinitionImpl):

    cabinet = PermissibleValue(text="cabinet")
    chair = PermissibleValue(text="chair")
    desks = PermissibleValue(text="desks")

    _defn = EnumDefinition(
        name="FURNITUREENUM",
    )

class GENDERRESTROOMENUM(EnumDefinitionImpl):

    female = PermissibleValue(text="female")
    male = PermissibleValue(text="male")
    unisex = PermissibleValue(text="unisex")

    _defn = EnumDefinition(
        name="GENDERRESTROOMENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "all gender",
            PermissibleValue(text="all gender"))
        setattr(cls, "gender neurtral",
            PermissibleValue(text="gender neurtral"))
        setattr(cls, "male and female",
            PermissibleValue(text="male and female"))

class HANDIDNESSENUM(EnumDefinitionImpl):

    ambidexterity = PermissibleValue(text="ambidexterity")

    _defn = EnumDefinition(
        name="HANDIDNESSENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "left handedness",
            PermissibleValue(text="left handedness"))
        setattr(cls, "mixed-handedness",
            PermissibleValue(text="mixed-handedness"))
        setattr(cls, "right handedness",
            PermissibleValue(text="right handedness"))

class HEATSYSDELIVMETHENUM(EnumDefinitionImpl):

    conductive = PermissibleValue(text="conductive")
    radiant = PermissibleValue(text="radiant")

    _defn = EnumDefinition(
        name="HEATSYSDELIVMETHENUM",
    )

class MECHSTRUCENUM(EnumDefinitionImpl):

    boat = PermissibleValue(text="boat")
    bus = PermissibleValue(text="bus")
    car = PermissibleValue(text="car")
    carriage = PermissibleValue(text="carriage")
    coach = PermissibleValue(text="coach")
    elevator = PermissibleValue(text="elevator")
    escalator = PermissibleValue(text="escalator")
    subway = PermissibleValue(text="subway")
    train = PermissibleValue(text="train")

    _defn = EnumDefinition(
        name="MECHSTRUCENUM",
    )

class OCCUPDOCUMENTENUM(EnumDefinitionImpl):

    estimate = PermissibleValue(text="estimate")
    videos = PermissibleValue(text="videos")

    _defn = EnumDefinition(
        name="OCCUPDOCUMENTENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "automated count",
            PermissibleValue(text="automated count"))
        setattr(cls, "manual count",
            PermissibleValue(text="manual count"))

class QUADPOSENUM(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="QUADPOSENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "East side",
            PermissibleValue(text="East side"))
        setattr(cls, "North side",
            PermissibleValue(text="North side"))
        setattr(cls, "South side",
            PermissibleValue(text="South side"))
        setattr(cls, "West side",
            PermissibleValue(text="West side"))

class RELSAMPLOCENUM(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="RELSAMPLOCENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "center of car",
            PermissibleValue(text="center of car"))
        setattr(cls, "edge of car",
            PermissibleValue(text="edge of car"))
        setattr(cls, "under a seat",
            PermissibleValue(text="under a seat"))

class ROOMCONDTENUM(EnumDefinitionImpl):

    damaged = PermissibleValue(text="damaged")
    new = PermissibleValue(text="new")
    rupture = PermissibleValue(text="rupture")

    _defn = EnumDefinition(
        name="ROOMCONDTENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "needs repair",
            PermissibleValue(text="needs repair"))
        setattr(cls, "visible signs of mold/mildew",
            PermissibleValue(text="visible signs of mold/mildew"))
        setattr(cls, "visible wear",
            PermissibleValue(text="visible wear"))

class ROOMLOCENUM(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="ROOMLOCENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "corner room",
            PermissibleValue(text="corner room"))
        setattr(cls, "exterior wall",
            PermissibleValue(text="exterior wall"))
        setattr(cls, "interior room",
            PermissibleValue(text="interior room"))

class ROOMSAMPPOSENUM(EnumDefinitionImpl):

    center = PermissibleValue(text="center")

    _defn = EnumDefinition(
        name="ROOMSAMPPOSENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "east corner",
            PermissibleValue(text="east corner"))
        setattr(cls, "north corner",
            PermissibleValue(text="north corner"))
        setattr(cls, "northeast corner",
            PermissibleValue(text="northeast corner"))
        setattr(cls, "northwest corner",
            PermissibleValue(text="northwest corner"))
        setattr(cls, "south corner",
            PermissibleValue(text="south corner"))
        setattr(cls, "southeast corner",
            PermissibleValue(text="southeast corner"))
        setattr(cls, "southwest corner",
            PermissibleValue(text="southwest corner"))
        setattr(cls, "west corner",
            PermissibleValue(text="west corner"))

class ROOMCONNECTEDENUM(EnumDefinitionImpl):

    attic = PermissibleValue(text="attic")
    bathroom = PermissibleValue(text="bathroom")
    closet = PermissibleValue(text="closet")
    elevator = PermissibleValue(text="elevator")
    hallway = PermissibleValue(text="hallway")
    kitchen = PermissibleValue(text="kitchen")
    office = PermissibleValue(text="office")
    stairwell = PermissibleValue(text="stairwell")

    _defn = EnumDefinition(
        name="ROOMCONNECTEDENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "conference room",
            PermissibleValue(text="conference room"))
        setattr(cls, "examining room",
            PermissibleValue(text="examining room"))
        setattr(cls, "mail room",
            PermissibleValue(text="mail room"))

class SAMPWEATHERENUM(EnumDefinitionImpl):

    cloudy = PermissibleValue(text="cloudy")
    foggy = PermissibleValue(text="foggy")
    hail = PermissibleValue(text="hail")
    rain = PermissibleValue(text="rain")
    sleet = PermissibleValue(text="sleet")
    snow = PermissibleValue(text="snow")
    sunny = PermissibleValue(text="sunny")
    windy = PermissibleValue(text="windy")

    _defn = EnumDefinition(
        name="SAMPWEATHERENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "clear sky",
            PermissibleValue(text="clear sky"))

class SEASONUSEENUM(EnumDefinitionImpl):

    Fall = PermissibleValue(text="Fall")
    Spring = PermissibleValue(text="Spring")
    Summer = PermissibleValue(text="Summer")
    Winter = PermissibleValue(text="Winter")

    _defn = EnumDefinition(
        name="SEASONUSEENUM",
    )

class SHADINGDEVICELOCENUM(EnumDefinitionImpl):

    exterior = PermissibleValue(text="exterior")
    interior = PermissibleValue(text="interior")

    _defn = EnumDefinition(
        name="SHADINGDEVICELOCENUM",
    )

class SHADINGDEVICETYPEENUM(EnumDefinitionImpl):

    tree = PermissibleValue(text="tree")
    trellis = PermissibleValue(text="trellis")

    _defn = EnumDefinition(
        name="SHADINGDEVICETYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "bahama shutters",
            PermissibleValue(text="bahama shutters"))
        setattr(cls, "exterior roll blind",
            PermissibleValue(text="exterior roll blind"))
        setattr(cls, "gambrel awning",
            PermissibleValue(text="gambrel awning"))
        setattr(cls, "hood awning",
            PermissibleValue(text="hood awning"))
        setattr(cls, "porchroller awning",
            PermissibleValue(text="porchroller awning"))
        setattr(cls, "sarasota shutters",
            PermissibleValue(text="sarasota shutters"))
        setattr(cls, "slatted aluminum",
            PermissibleValue(text="slatted aluminum"))
        setattr(cls, "solid aluminum awning",
            PermissibleValue(text="solid aluminum awning"))
        setattr(cls, "sun screen",
            PermissibleValue(text="sun screen"))
        setattr(cls, "venetian awning",
            PermissibleValue(text="venetian awning"))

class SPECIFICENUM(EnumDefinitionImpl):

    bid = PermissibleValue(text="bid")
    construction = PermissibleValue(text="construction")
    design = PermissibleValue(text="design")
    operation = PermissibleValue(text="operation")
    photos = PermissibleValue(text="photos")

    _defn = EnumDefinition(
        name="SPECIFICENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "as built",
            PermissibleValue(text="as built"))

class TRAINLINEENUM(EnumDefinitionImpl):

    green = PermissibleValue(text="green")
    orange = PermissibleValue(text="orange")
    red = PermissibleValue(text="red")

    _defn = EnumDefinition(
        name="TRAINLINEENUM",
    )

class TRAINSTATLOCENUM(EnumDefinitionImpl):

    riverside = PermissibleValue(text="riverside")

    _defn = EnumDefinition(
        name="TRAINSTATLOCENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "forest hills",
            PermissibleValue(text="forest hills"))
        setattr(cls, "south station above ground",
            PermissibleValue(text="south station above ground"))
        setattr(cls, "south station amtrak",
            PermissibleValue(text="south station amtrak"))
        setattr(cls, "south station underground",
            PermissibleValue(text="south station underground"))

class TRAINSTOPLOCENUM(EnumDefinitionImpl):

    downtown = PermissibleValue(text="downtown")
    end = PermissibleValue(text="end")
    mid = PermissibleValue(text="mid")

    _defn = EnumDefinition(
        name="TRAINSTOPLOCENUM",
    )

class WALLCONSTTYPEENUM(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="WALLCONSTTYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "fire resistive",
            PermissibleValue(text="fire resistive"))
        setattr(cls, "frame construction",
            PermissibleValue(text="frame construction"))
        setattr(cls, "joisted masonry",
            PermissibleValue(text="joisted masonry"))
        setattr(cls, "light noncombustible",
            PermissibleValue(text="light noncombustible"))
        setattr(cls, "masonry noncombustible",
            PermissibleValue(text="masonry noncombustible"))
        setattr(cls, "modified fire resistive",
            PermissibleValue(text="modified fire resistive"))

class WALLFINISHMATENUM(EnumDefinitionImpl):

    masonry = PermissibleValue(text="masonry")
    metal = PermissibleValue(text="metal")
    plaster = PermissibleValue(text="plaster")
    terrazzo = PermissibleValue(text="terrazzo")
    tile = PermissibleValue(text="tile")
    wood = PermissibleValue(text="wood")

    _defn = EnumDefinition(
        name="WALLFINISHMATENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "acoustical treatment",
            PermissibleValue(text="acoustical treatment"))
        setattr(cls, "gypsum board",
            PermissibleValue(text="gypsum board"))
        setattr(cls, "gypsum plaster",
            PermissibleValue(text="gypsum plaster"))
        setattr(cls, "stone facing",
            PermissibleValue(text="stone facing"))
        setattr(cls, "veneer plaster",
            PermissibleValue(text="veneer plaster"))

class WALLSURFTREATMENTENUM(EnumDefinitionImpl):

    fabric = PermissibleValue(text="fabric")
    painted = PermissibleValue(text="painted")
    paneling = PermissibleValue(text="paneling")
    stucco = PermissibleValue(text="stucco")

    _defn = EnumDefinition(
        name="WALLSURFTREATMENTENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "no treatment",
            PermissibleValue(text="no treatment"))
        setattr(cls, "wall paper",
            PermissibleValue(text="wall paper"))

class WATERFEATTYPEENUM(EnumDefinitionImpl):

    fountain = PermissibleValue(text="fountain")
    pool = PermissibleValue(text="pool")
    stream = PermissibleValue(text="stream")
    waterfall = PermissibleValue(text="waterfall")

    _defn = EnumDefinition(
        name="WATERFEATTYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "standing feature",
            PermissibleValue(text="standing feature"))

class WEEKDAYENUM(EnumDefinitionImpl):

    Friday = PermissibleValue(text="Friday")
    Monday = PermissibleValue(text="Monday")
    Saturday = PermissibleValue(text="Saturday")
    Sunday = PermissibleValue(text="Sunday")
    Thursday = PermissibleValue(text="Thursday")
    Tuesday = PermissibleValue(text="Tuesday")
    Wednesday = PermissibleValue(text="Wednesday")

    _defn = EnumDefinition(
        name="WEEKDAYENUM",
    )

class WINDOWCOVERENUM(EnumDefinitionImpl):

    blinds = PermissibleValue(text="blinds")
    curtains = PermissibleValue(text="curtains")
    none = PermissibleValue(text="none")

    _defn = EnumDefinition(
        name="WINDOWCOVERENUM",
    )

class WINDOWHORIZPOSENUM(EnumDefinitionImpl):

    left = PermissibleValue(text="left")
    middle = PermissibleValue(text="middle")
    right = PermissibleValue(text="right")

    _defn = EnumDefinition(
        name="WINDOWHORIZPOSENUM",
    )

class WINDOWMATENUM(EnumDefinitionImpl):

    clad = PermissibleValue(text="clad")
    fiberglass = PermissibleValue(text="fiberglass")
    metal = PermissibleValue(text="metal")
    vinyl = PermissibleValue(text="vinyl")
    wood = PermissibleValue(text="wood")

    _defn = EnumDefinition(
        name="WINDOWMATENUM",
    )

class WINDOWSTATUSENUM(EnumDefinitionImpl):

    closed = PermissibleValue(text="closed")
    open = PermissibleValue(text="open")

    _defn = EnumDefinition(
        name="WINDOWSTATUSENUM",
    )

class WINDOWTYPEENUM(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="WINDOWTYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "fixed window",
            PermissibleValue(text="fixed window"))
        setattr(cls, "horizontal sash window",
            PermissibleValue(text="horizontal sash window"))
        setattr(cls, "single-hung sash window",
            PermissibleValue(text="single-hung sash window"))

class WINDOWVERTPOSENUM(EnumDefinitionImpl):

    bottom = PermissibleValue(text="bottom")
    high = PermissibleValue(text="high")
    low = PermissibleValue(text="low")
    middle = PermissibleValue(text="middle")
    top = PermissibleValue(text="top")

    _defn = EnumDefinition(
        name="WINDOWVERTPOSENUM",
    )

class SAMPCAPTSTATUSENUM(EnumDefinitionImpl):

    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="SAMPCAPTSTATUSENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "active surveillance in response to an outbreak",
            PermissibleValue(text="active surveillance in response to an outbreak"))
        setattr(cls, "active surveillance not initiated by an outbreak",
            PermissibleValue(text="active surveillance not initiated by an outbreak"))
        setattr(cls, "farm sample",
            PermissibleValue(text="farm sample"))
        setattr(cls, "market sample",
            PermissibleValue(text="market sample"))

class SAMPDISSTAGEENUM(EnumDefinitionImpl):

    dissemination = PermissibleValue(text="dissemination")
    infection = PermissibleValue(text="infection")
    inoculation = PermissibleValue(text="inoculation")
    other = PermissibleValue(text="other")
    penetration = PermissibleValue(text="penetration")

    _defn = EnumDefinition(
        name="SAMPDISSTAGEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "growth and reproduction",
            PermissibleValue(text="growth and reproduction"))

class URINECOLLECTMETHENUM(EnumDefinitionImpl):

    catheter = PermissibleValue(text="catheter")

    _defn = EnumDefinition(
        name="URINECOLLECTMETHENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "clean catch",
            PermissibleValue(text="clean catch"))

class DOMINANTHANDENUM(EnumDefinitionImpl):

    ambidextrous = PermissibleValue(text="ambidextrous")
    left = PermissibleValue(text="left")
    right = PermissibleValue(text="right")

    _defn = EnumDefinition(
        name="DOMINANTHANDENUM",
    )

class HCRENUM(EnumDefinitionImpl):

    Coalbed = PermissibleValue(text="Coalbed")
    Shale = PermissibleValue(text="Shale")
    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="HCRENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Gas Reservoir",
            PermissibleValue(text="Gas Reservoir"))
        setattr(cls, "Oil Reservoir",
            PermissibleValue(text="Oil Reservoir"))
        setattr(cls, "Oil Sand",
            PermissibleValue(text="Oil Sand"))
        setattr(cls, "Tight Gas Reservoir",
            PermissibleValue(text="Tight Gas Reservoir"))
        setattr(cls, "Tight Oil Reservoir",
            PermissibleValue(text="Tight Oil Reservoir"))

class HCPRODUCEDENUM(EnumDefinitionImpl):

    Bitumen = PermissibleValue(text="Bitumen")
    Gas = PermissibleValue(text="Gas")
    Oil = PermissibleValue(text="Oil")
    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="HCPRODUCEDENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Coalbed Methane",
            PermissibleValue(text="Coalbed Methane"))
        setattr(cls, "Gas-Condensate",
            PermissibleValue(text="Gas-Condensate"))

class LITHOLOGYENUM(EnumDefinitionImpl):

    Basement = PermissibleValue(text="Basement")
    Chalk = PermissibleValue(text="Chalk")
    Chert = PermissibleValue(text="Chert")
    Coal = PermissibleValue(text="Coal")
    Conglomerate = PermissibleValue(text="Conglomerate")
    Diatomite = PermissibleValue(text="Diatomite")
    Dolomite = PermissibleValue(text="Dolomite")
    Limestone = PermissibleValue(text="Limestone")
    Sandstone = PermissibleValue(text="Sandstone")
    Shale = PermissibleValue(text="Shale")
    Siltstone = PermissibleValue(text="Siltstone")
    Volcanic = PermissibleValue(text="Volcanic")
    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="LITHOLOGYENUM",
    )

class DEPOSENVENUM(EnumDefinitionImpl):

    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="DEPOSENVENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Continental - Aeolian",
            PermissibleValue(text="Continental - Aeolian"))
        setattr(cls, "Continental - Alluvial",
            PermissibleValue(text="Continental - Alluvial"))
        setattr(cls, "Continental - Fluvial",
            PermissibleValue(text="Continental - Fluvial"))
        setattr(cls, "Continental - Lacustrine",
            PermissibleValue(text="Continental - Lacustrine"))
        setattr(cls, "Marine - Deep",
            PermissibleValue(text="Marine - Deep"))
        setattr(cls, "Marine - Reef",
            PermissibleValue(text="Marine - Reef"))
        setattr(cls, "Marine - Shallow",
            PermissibleValue(text="Marine - Shallow"))
        setattr(cls, "Other - Evaporite",
            PermissibleValue(text="Other - Evaporite"))
        setattr(cls, "Other - Glacial",
            PermissibleValue(text="Other - Glacial"))
        setattr(cls, "Other - Volcanic",
            PermissibleValue(text="Other - Volcanic"))
        setattr(cls, "Transitional - Beach",
            PermissibleValue(text="Transitional - Beach"))
        setattr(cls, "Transitional - Deltaic",
            PermissibleValue(text="Transitional - Deltaic"))
        setattr(cls, "Transitional - Lagoonal",
            PermissibleValue(text="Transitional - Lagoonal"))
        setattr(cls, "Transitional - Lake",
            PermissibleValue(text="Transitional - Lake"))
        setattr(cls, "Transitional - Tidal",
            PermissibleValue(text="Transitional - Tidal"))

class SRKEROGTYPEENUM(EnumDefinitionImpl):

    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="SRKEROGTYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Type I",
            PermissibleValue(text="Type I"))
        setattr(cls, "Type II",
            PermissibleValue(text="Type II"))
        setattr(cls, "Type III",
            PermissibleValue(text="Type III"))
        setattr(cls, "Type IV",
            PermissibleValue(text="Type IV"))

class SRLITHOLOGYENUM(EnumDefinitionImpl):

    Biosilicieous = PermissibleValue(text="Biosilicieous")
    Carbonate = PermissibleValue(text="Carbonate")
    Clastic = PermissibleValue(text="Clastic")
    Coal = PermissibleValue(text="Coal")
    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="SRLITHOLOGYENUM",
    )

class SRDEPENVENUM(EnumDefinitionImpl):

    Fluvioldeltaic = PermissibleValue(text="Fluvioldeltaic")
    Fluviomarine = PermissibleValue(text="Fluviomarine")
    Lacustine = PermissibleValue(text="Lacustine")
    Marine = PermissibleValue(text="Marine")
    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="SRDEPENVENUM",
    )

class SAMPSUBTYPEENUM(EnumDefinitionImpl):

    biofilm = PermissibleValue(text="biofilm")
    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="SAMPSUBTYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "not applicable",
            PermissibleValue(text="not applicable"))
        setattr(cls, "oil phase",
            PermissibleValue(text="oil phase"))
        setattr(cls, "water phase",
            PermissibleValue(text="water phase"))

class SAMPCOLLECTPOINTENUM(EnumDefinitionImpl):

    other = PermissibleValue(text="other")
    separator = PermissibleValue(text="separator")
    well = PermissibleValue(text="well")
    wellhead = PermissibleValue(text="wellhead")

    _defn = EnumDefinition(
        name="SAMPCOLLECTPOINTENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "drilling rig",
            PermissibleValue(text="drilling rig"))
        setattr(cls, "storage tank",
            PermissibleValue(text="storage tank"))
        setattr(cls, "test well",
            PermissibleValue(text="test well"))

class GROWTHHABITENUM(EnumDefinitionImpl):

    erect = PermissibleValue(text="erect")
    prostrate = PermissibleValue(text="prostrate")
    spreading = PermissibleValue(text="spreading")

    _defn = EnumDefinition(
        name="GROWTHHABITENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "semi-erect",
            PermissibleValue(text="semi-erect"))

class PLANTSEXENUM(EnumDefinitionImpl):

    Androdioecious = PermissibleValue(text="Androdioecious")
    Androecious = PermissibleValue(text="Androecious")
    Androgynomonoecious = PermissibleValue(text="Androgynomonoecious")
    Androgynous = PermissibleValue(text="Androgynous")
    Andromonoecious = PermissibleValue(text="Andromonoecious")
    Bisexual = PermissibleValue(text="Bisexual")
    Dichogamous = PermissibleValue(text="Dichogamous")
    Diclinous = PermissibleValue(text="Diclinous")
    Dioecious = PermissibleValue(text="Dioecious")
    Gynodioecious = PermissibleValue(text="Gynodioecious")
    Gynoecious = PermissibleValue(text="Gynoecious")
    Gynomonoecious = PermissibleValue(text="Gynomonoecious")
    Hermaphroditic = PermissibleValue(text="Hermaphroditic")
    Imperfect = PermissibleValue(text="Imperfect")
    Monoclinous = PermissibleValue(text="Monoclinous")
    Monoecious = PermissibleValue(text="Monoecious")
    Perfect = PermissibleValue(text="Perfect")
    Polygamodioecious = PermissibleValue(text="Polygamodioecious")
    Polygamomonoecious = PermissibleValue(text="Polygamomonoecious")
    Polygamous = PermissibleValue(text="Polygamous")
    Protandrous = PermissibleValue(text="Protandrous")
    Protogynous = PermissibleValue(text="Protogynous")
    Subandroecious = PermissibleValue(text="Subandroecious")
    Subdioecious = PermissibleValue(text="Subdioecious")
    Subgynoecious = PermissibleValue(text="Subgynoecious")
    Synoecious = PermissibleValue(text="Synoecious")
    Trimonoecious = PermissibleValue(text="Trimonoecious")
    Trioecious = PermissibleValue(text="Trioecious")
    Unisexual = PermissibleValue(text="Unisexual")

    _defn = EnumDefinition(
        name="PLANTSEXENUM",
    )

class SEDIMENTTYPEENUM(EnumDefinitionImpl):

    biogenous = PermissibleValue(text="biogenous")
    cosmogenous = PermissibleValue(text="cosmogenous")
    hydrogenous = PermissibleValue(text="hydrogenous")
    lithogenous = PermissibleValue(text="lithogenous")

    _defn = EnumDefinition(
        name="SEDIMENTTYPEENUM",
    )

class TIDALSTAGEENUM(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="TIDALSTAGEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "ebb tide",
            PermissibleValue(text="ebb tide"))
        setattr(cls, "flood tide",
            PermissibleValue(text="flood tide"))
        setattr(cls, "high tide",
            PermissibleValue(text="high tide"))
        setattr(cls, "low tide",
            PermissibleValue(text="low tide"))

class TILLAGEENUM(EnumDefinitionImpl):

    chisel = PermissibleValue(text="chisel")
    drill = PermissibleValue(text="drill")
    mouldboard = PermissibleValue(text="mouldboard")
    tined = PermissibleValue(text="tined")

    _defn = EnumDefinition(
        name="TILLAGEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "cutting disc",
            PermissibleValue(text="cutting disc"))
        setattr(cls, "disc plough",
            PermissibleValue(text="disc plough"))
        setattr(cls, "ridge till",
            PermissibleValue(text="ridge till"))
        setattr(cls, "strip tillage",
            PermissibleValue(text="strip tillage"))
        setattr(cls, "zonal tillage",
            PermissibleValue(text="zonal tillage"))

class SOILHORIZONENUM(EnumDefinitionImpl):

    Permafrost = PermissibleValue(text="Permafrost")

    _defn = EnumDefinition(
        name="SOILHORIZONENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "A horizon",
            PermissibleValue(text="A horizon"))
        setattr(cls, "B horizon",
            PermissibleValue(text="B horizon"))
        setattr(cls, "C horizon",
            PermissibleValue(text="C horizon"))
        setattr(cls, "E horizon",
            PermissibleValue(text="E horizon"))
        setattr(cls, "O horizon",
            PermissibleValue(text="O horizon"))
        setattr(cls, "R layer",
            PermissibleValue(text="R layer"))

class FAOCLASSENUM(EnumDefinitionImpl):

    Acrisols = PermissibleValue(text="Acrisols")
    Andosols = PermissibleValue(text="Andosols")
    Arenosols = PermissibleValue(text="Arenosols")
    Cambisols = PermissibleValue(text="Cambisols")
    Chernozems = PermissibleValue(text="Chernozems")
    Ferralsols = PermissibleValue(text="Ferralsols")
    Fluvisols = PermissibleValue(text="Fluvisols")
    Gleysols = PermissibleValue(text="Gleysols")
    Greyzems = PermissibleValue(text="Greyzems")
    Gypsisols = PermissibleValue(text="Gypsisols")
    Histosols = PermissibleValue(text="Histosols")
    Kastanozems = PermissibleValue(text="Kastanozems")
    Lithosols = PermissibleValue(text="Lithosols")
    Luvisols = PermissibleValue(text="Luvisols")
    Nitosols = PermissibleValue(text="Nitosols")
    Phaeozems = PermissibleValue(text="Phaeozems")
    Planosols = PermissibleValue(text="Planosols")
    Podzols = PermissibleValue(text="Podzols")
    Podzoluvisols = PermissibleValue(text="Podzoluvisols")
    Rankers = PermissibleValue(text="Rankers")
    Regosols = PermissibleValue(text="Regosols")
    Rendzinas = PermissibleValue(text="Rendzinas")
    Solonchaks = PermissibleValue(text="Solonchaks")
    Solonetz = PermissibleValue(text="Solonetz")
    Vertisols = PermissibleValue(text="Vertisols")
    Yermosols = PermissibleValue(text="Yermosols")

    _defn = EnumDefinition(
        name="FAOCLASSENUM",
    )

class PROFILEPOSITIONENUM(EnumDefinitionImpl):

    backslope = PermissibleValue(text="backslope")
    footslope = PermissibleValue(text="footslope")
    shoulder = PermissibleValue(text="shoulder")
    summit = PermissibleValue(text="summit")
    toeslope = PermissibleValue(text="toeslope")

    _defn = EnumDefinition(
        name="PROFILEPOSITIONENUM",
    )

class DRAINAGECLASSENUM(EnumDefinitionImpl):

    poorly = PermissibleValue(text="poorly")
    well = PermissibleValue(text="well")

    _defn = EnumDefinition(
        name="DRAINAGECLASSENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "excessively drained",
            PermissibleValue(text="excessively drained"))
        setattr(cls, "moderately well",
            PermissibleValue(text="moderately well"))
        setattr(cls, "somewhat poorly",
            PermissibleValue(text="somewhat poorly"))
        setattr(cls, "very poorly",
            PermissibleValue(text="very poorly"))

class HOSTDEPENDENCEENUM(EnumDefinitionImpl):

    facultative = PermissibleValue(text="facultative")
    obligate = PermissibleValue(text="obligate")

    _defn = EnumDefinition(
        name="HOSTDEPENDENCEENUM",
    )

class TYPEOFSYMBIOSISENUM(EnumDefinitionImpl):

    commensalistic = PermissibleValue(text="commensalistic")
    mutualistic = PermissibleValue(text="mutualistic")
    parasitic = PermissibleValue(text="parasitic")

    _defn = EnumDefinition(
        name="TYPEOFSYMBIOSISENUM",
    )

class SYMLIFECYCLETYPEENUM(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="SYMLIFECYCLETYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "complex life cycle",
            PermissibleValue(text="complex life cycle"))
        setattr(cls, "simple life cycle",
            PermissibleValue(text="simple life cycle"))

class UROBIOMSEXENUM(EnumDefinitionImpl):

    female = PermissibleValue(text="female")
    hermaphrodite = PermissibleValue(text="hermaphrodite")
    male = PermissibleValue(text="male")
    neuter = PermissibleValue(text="neuter")

    _defn = EnumDefinition(
        name="UROBIOMSEXENUM",
    )

class MODETRANSMISSIONENUM(EnumDefinitionImpl):

    vertical = PermissibleValue(text="vertical")

    _defn = EnumDefinition(
        name="MODETRANSMISSIONENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "horizontal:castrator",
            PermissibleValue(text="horizontal:castrator"))
        setattr(cls, "horizontal:directly transmitted",
            PermissibleValue(text="horizontal:directly transmitted"))
        setattr(cls, "horizontal:micropredator",
            PermissibleValue(text="horizontal:micropredator"))
        setattr(cls, "horizontal:parasitoid",
            PermissibleValue(text="horizontal:parasitoid"))
        setattr(cls, "horizontal:trophically transmitted",
            PermissibleValue(text="horizontal:trophically transmitted"))
        setattr(cls, "horizontal:vector transmitted",
            PermissibleValue(text="horizontal:vector transmitted"))

class ROUTETRANSMISSIONENUM(EnumDefinitionImpl):

    transplacental = PermissibleValue(text="transplacental")

    _defn = EnumDefinition(
        name="ROUTETRANSMISSIONENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "environmental:faecal-oral",
            PermissibleValue(text="environmental:faecal-oral"))
        setattr(cls, "vector-borne:vector penetration",
            PermissibleValue(text="vector-borne:vector penetration"))

class HOSTSPECIFICITYENUM(EnumDefinitionImpl):

    generalist = PermissibleValue(text="generalist")

    _defn = EnumDefinition(
        name="HOSTSPECIFICITYENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "family-specific",
            PermissibleValue(text="family-specific"))
        setattr(cls, "genus-specific",
            PermissibleValue(text="genus-specific"))
        setattr(cls, "species-specific",
            PermissibleValue(text="species-specific"))

class SYMBIONTHOSTROLEENUM(EnumDefinitionImpl):

    accidental = PermissibleValue(text="accidental")
    definitive = PermissibleValue(text="definitive")
    intermediate = PermissibleValue(text="intermediate")
    paratenic = PermissibleValue(text="paratenic")
    reservoir = PermissibleValue(text="reservoir")

    _defn = EnumDefinition(
        name="SYMBIONTHOSTROLEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "dead-end",
            PermissibleValue(text="dead-end"))
        setattr(cls, "single host",
            PermissibleValue(text="single host"))

class HOSTCELLULARLOCENUM(EnumDefinitionImpl):

    extracellular = PermissibleValue(text="extracellular")
    intracellular = PermissibleValue(text="intracellular")

    _defn = EnumDefinition(
        name="HOSTCELLULARLOCENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "not determined",
            PermissibleValue(text="not determined"))

class CULTRESULTENUM(EnumDefinitionImpl):

    absent = PermissibleValue(text="absent")
    active = PermissibleValue(text="active")
    inactive = PermissibleValue(text="inactive")
    negative = PermissibleValue(text="negative")
    no = PermissibleValue(text="no")
    positive = PermissibleValue(text="positive")
    present = PermissibleValue(text="present")
    yes = PermissibleValue(text="yes")

    _defn = EnumDefinition(
        name="CULTRESULTENUM",
    )

class FOODTRACELISTENUM(EnumDefinitionImpl):

    crustaceans = PermissibleValue(text="crustaceans")
    cucumbers = PermissibleValue(text="cucumbers")
    melons = PermissibleValue(text="melons")
    peppers = PermissibleValue(text="peppers")
    sprouts = PermissibleValue(text="sprouts")
    tomatoes = PermissibleValue(text="tomatoes")

    _defn = EnumDefinition(
        name="FOODTRACELISTENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "cheeses-other than hard cheeses",
            PermissibleValue(text="cheeses-other than hard cheeses"))
        setattr(cls, "finfish-including smoked finfish",
            PermissibleValue(text="finfish-including smoked finfish"))
        setattr(cls, "fruits and vegetables-fresh cut",
            PermissibleValue(text="fruits and vegetables-fresh cut"))
        setattr(cls, "herbs-fresh",
            PermissibleValue(text="herbs-fresh"))
        setattr(cls, "leafy greens-including fresh cut leafy greens",
            PermissibleValue(text="leafy greens-including fresh cut leafy greens"))
        setattr(cls, "mollusks-bivalves",
            PermissibleValue(text="mollusks-bivalves"))
        setattr(cls, "nut butter",
            PermissibleValue(text="nut butter"))
        setattr(cls, "ready to eat deli salads",
            PermissibleValue(text="ready to eat deli salads"))
        setattr(cls, "shell eggs",
            PermissibleValue(text="shell eggs"))
        setattr(cls, "tropical tree fruits",
            PermissibleValue(text="tropical tree fruits"))

class SAMPTRANSPORTCONTENUM(EnumDefinitionImpl):

    bottle = PermissibleValue(text="bottle")
    cooler = PermissibleValue(text="cooler")

    _defn = EnumDefinition(
        name="SAMPTRANSPORTCONTENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "glass vial",
            PermissibleValue(text="glass vial"))
        setattr(cls, "plastic vial",
            PermissibleValue(text="plastic vial"))
        setattr(cls, "vendor supplied container",
            PermissibleValue(text="vendor supplied container"))

class ANIMALBODYCONDENUM(EnumDefinitionImpl):

    normal = PermissibleValue(text="normal")

    _defn = EnumDefinition(
        name="ANIMALBODYCONDENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "over conditioned",
            PermissibleValue(text="over conditioned"))
        setattr(cls, "under conditioned",
            PermissibleValue(text="under conditioned"))

class ANIMALSEXENUM(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="ANIMALSEXENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "castrated female",
            PermissibleValue(text="castrated female"))
        setattr(cls, "castrated male",
            PermissibleValue(text="castrated male"))
        setattr(cls, "intact female",
            PermissibleValue(text="intact female"))
        setattr(cls, "intact male",
            PermissibleValue(text="intact male"))

class FACILITYTYPEENUM(EnumDefinitionImpl):

    distribution = PermissibleValue(text="distribution")
    packaging = PermissibleValue(text="packaging")
    storage = PermissibleValue(text="storage")

    _defn = EnumDefinition(
        name="FACILITYTYPEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "ambient storage",
            PermissibleValue(text="ambient storage"))
        setattr(cls, "caterer-catering point",
            PermissibleValue(text="caterer-catering point"))
        setattr(cls, "frozen storage",
            PermissibleValue(text="frozen storage"))
        setattr(cls, "importer-broker",
            PermissibleValue(text="importer-broker"))
        setattr(cls, "interstate conveyance",
            PermissibleValue(text="interstate conveyance"))
        setattr(cls, "labeler-relabeler",
            PermissibleValue(text="labeler-relabeler"))
        setattr(cls, "manufacturing-processing",
            PermissibleValue(text="manufacturing-processing"))
        setattr(cls, "refrigerated storage",
            PermissibleValue(text="refrigerated storage"))

class SAMPSURFMOISTUREENUM(EnumDefinitionImpl):

    submerged = PermissibleValue(text="submerged")

    _defn = EnumDefinition(
        name="SAMPSURFMOISTUREENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "intermittent moisture",
            PermissibleValue(text="intermittent moisture"))
        setattr(cls, "not present",
            PermissibleValue(text="not present"))

class SAMPLOCCONDITIONENUM(EnumDefinitionImpl):

    damaged = PermissibleValue(text="damaged")
    new = PermissibleValue(text="new")
    rupture = PermissibleValue(text="rupture")

    _defn = EnumDefinition(
        name="SAMPLOCCONDITIONENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "visible signs of mold-mildew",
            PermissibleValue(text="visible signs of mold-mildew"))
        setattr(cls, "visible weariness repair",
            PermissibleValue(text="visible weariness repair"))

class FARMWATERSOURCEENUM(EnumDefinitionImpl):

    brackish = PermissibleValue(text="brackish")
    canal = PermissibleValue(text="canal")
    ditch = PermissibleValue(text="ditch")
    estuary = PermissibleValue(text="estuary")
    freshwater = PermissibleValue(text="freshwater")
    lake = PermissibleValue(text="lake")
    manmade = PermissibleValue(text="manmade")
    municipal = PermissibleValue(text="municipal")
    natural = PermissibleValue(text="natural")
    pond = PermissibleValue(text="pond")
    reservior = PermissibleValue(text="reservior")
    river = PermissibleValue(text="river")
    saline = PermissibleValue(text="saline")
    stream = PermissibleValue(text="stream")
    well = PermissibleValue(text="well")

    _defn = EnumDefinition(
        name="FARMWATERSOURCEENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "collected rainwater",
            PermissibleValue(text="collected rainwater"))
        setattr(cls, "melt pond",
            PermissibleValue(text="melt pond"))
        setattr(cls, "storage tank",
            PermissibleValue(text="storage tank"))

class EXTRWEATHEREVENTENUM(EnumDefinitionImpl):

    drought = PermissibleValue(text="drought")
    flood = PermissibleValue(text="flood")
    frost = PermissibleValue(text="frost")
    hail = PermissibleValue(text="hail")

    _defn = EnumDefinition(
        name="EXTRWEATHEREVENTENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "dust storm",
            PermissibleValue(text="dust storm"))
        setattr(cls, "extreme cold",
            PermissibleValue(text="extreme cold"))
        setattr(cls, "extreme heat",
            PermissibleValue(text="extreme heat"))
        setattr(cls, "high precipitationhigh winds",
            PermissibleValue(text="high precipitationhigh winds"))

class PLANTREPRODCROPENUM(EnumDefinitionImpl):

    ratoon = PermissibleValue(text="ratoon")
    seed = PermissibleValue(text="seed")
    seedling = PermissibleValue(text="seedling")

    _defn = EnumDefinition(
        name="PLANTREPRODCROPENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "plant cutting",
            PermissibleValue(text="plant cutting"))
        setattr(cls, "pregerminated seed",
            PermissibleValue(text="pregerminated seed"))
        setattr(cls, "whole mature plant",
            PermissibleValue(text="whole mature plant"))

class SOILTEXTURECLASSENUM(EnumDefinitionImpl):

    clay = PermissibleValue(text="clay")
    loam = PermissibleValue(text="loam")
    sand = PermissibleValue(text="sand")
    silt = PermissibleValue(text="silt")

    _defn = EnumDefinition(
        name="SOILTEXTURECLASSENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "clay loam",
            PermissibleValue(text="clay loam"))
        setattr(cls, "loamy sand",
            PermissibleValue(text="loamy sand"))
        setattr(cls, "sandy clay",
            PermissibleValue(text="sandy clay"))
        setattr(cls, "sandy clay loam",
            PermissibleValue(text="sandy clay loam"))
        setattr(cls, "sandy loam",
            PermissibleValue(text="sandy loam"))
        setattr(cls, "silt loam",
            PermissibleValue(text="silt loam"))
        setattr(cls, "silty clay",
            PermissibleValue(text="silty clay"))
        setattr(cls, "silty clay loam",
            PermissibleValue(text="silty clay loam"))

class FOODCLEANPROCENUM(EnumDefinitionImpl):

    soaking = PermissibleValue(text="soaking")

    _defn = EnumDefinition(
        name="FOODCLEANPROCENUM",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "drum and drain",
            PermissibleValue(text="drum and drain"))
        setattr(cls, "manual spinner",
            PermissibleValue(text="manual spinner"))
        setattr(cls, "rinsed with sanitizer solution",
            PermissibleValue(text="rinsed with sanitizer solution"))
        setattr(cls, "rinsed with water",
            PermissibleValue(text="rinsed with water"))
        setattr(cls, "scrubbed with brush",
            PermissibleValue(text="scrubbed with brush"))
        setattr(cls, "scrubbed with hand",
            PermissibleValue(text="scrubbed with hand"))

class SHAREDENUM0(EnumDefinitionImpl):

    east = PermissibleValue(text="east")
    north = PermissibleValue(text="north")
    northeast = PermissibleValue(text="northeast")
    northwest = PermissibleValue(text="northwest")
    south = PermissibleValue(text="south")
    southeast = PermissibleValue(text="southeast")
    southwest = PermissibleValue(text="southwest")
    west = PermissibleValue(text="west")

    _defn = EnumDefinition(
        name="SHAREDENUM0",
    )

class SHAREDENUM1(EnumDefinitionImpl):

    _defn = EnumDefinition(
        name="SHAREDENUM1",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "no presence of mold visible",
            PermissibleValue(text="no presence of mold visible"))
        setattr(cls, "presence of mold visible",
            PermissibleValue(text="presence of mold visible"))

class SHAREDENUM2(EnumDefinitionImpl):

    damaged = PermissibleValue(text="damaged")
    new = PermissibleValue(text="new")
    rupture = PermissibleValue(text="rupture")

    _defn = EnumDefinition(
        name="SHAREDENUM2",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "needs repair",
            PermissibleValue(text="needs repair"))
        setattr(cls, "visible wear",
            PermissibleValue(text="visible wear"))

class SHAREDENUM3(EnumDefinitionImpl):

    damaged = PermissibleValue(text="damaged")
    new = PermissibleValue(text="new")
    rupture = PermissibleValue(text="rupture")

    _defn = EnumDefinition(
        name="SHAREDENUM3",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "needs repair",
            PermissibleValue(text="needs repair"))
        setattr(cls, "visible wear",
            PermissibleValue(text="visible wear"))

class SHAREDENUM4(EnumDefinitionImpl):

    knockdown = PermissibleValue(text="knockdown")
    popcorn = PermissibleValue(text="popcorn")
    smooth = PermissibleValue(text="smooth")
    swirl = PermissibleValue(text="swirl")

    _defn = EnumDefinition(
        name="SHAREDENUM4",
    )

    @classmethod
    def _addvals(cls):
        setattr(cls, "Santa-Fe texture",
            PermissibleValue(text="Santa-Fe texture"))
        setattr(cls, "crows feet",
            PermissibleValue(text="crows feet"))
        setattr(cls, "crows-foot stomp",
            PermissibleValue(text="crows-foot stomp"))
        setattr(cls, "double skip",
            PermissibleValue(text="double skip"))
        setattr(cls, "hawk and trowel",
            PermissibleValue(text="hawk and trowel"))
        setattr(cls, "orange peel",
            PermissibleValue(text="orange peel"))
        setattr(cls, "rosebud stomp",
            PermissibleValue(text="rosebud stomp"))
        setattr(cls, "skip trowel",
            PermissibleValue(text="skip trowel"))
        setattr(cls, "stomp knockdown",
            PermissibleValue(text="stomp knockdown"))

class SHAREDENUM5(EnumDefinitionImpl):

    Archean = PermissibleValue(text="Archean")
    Cambrian = PermissibleValue(text="Cambrian")
    Carboniferous = PermissibleValue(text="Carboniferous")
    Cenozoic = PermissibleValue(text="Cenozoic")
    Cretaceous = PermissibleValue(text="Cretaceous")
    Devonian = PermissibleValue(text="Devonian")
    Jurassic = PermissibleValue(text="Jurassic")
    Mesozoic = PermissibleValue(text="Mesozoic")
    Neogene = PermissibleValue(text="Neogene")
    Ordovician = PermissibleValue(text="Ordovician")
    Paleogene = PermissibleValue(text="Paleogene")
    Paleozoic = PermissibleValue(text="Paleozoic")
    Permian = PermissibleValue(text="Permian")
    Precambrian = PermissibleValue(text="Precambrian")
    Proterozoic = PermissibleValue(text="Proterozoic")
    Silurian = PermissibleValue(text="Silurian")
    Triassic = PermissibleValue(text="Triassic")
    other = PermissibleValue(text="other")

    _defn = EnumDefinition(
        name="SHAREDENUM5",
    )

# Slots
class slots:
    pass

slots.migs_eu_data = Slot(uri=MIXS.migs_eu_data, name="migs_eu_data", curie=MIXS.curie('migs_eu_data'),
                   model_uri=MIXS_6_2_RC.migs_eu_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, MigsEu], List[Union[dict, MigsEu]]]])

slots.plant_associated_data = Slot(uri=MIXS.plant_associated_data, name="plant_associated_data", curie=MIXS.curie('plant_associated_data'),
                   model_uri=MIXS_6_2_RC.plant_associated_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, PlantAssociated], List[Union[dict, PlantAssociated]]]])

slots.migs_eu_plant_associated_data = Slot(uri=MIXS.migs_eu_plant_associated_data, name="migs_eu_plant_associated_data", curie=MIXS.curie('migs_eu_plant_associated_data'),
                   model_uri=MIXS_6_2_RC.migs_eu_plant_associated_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MigsEuPlantAssociated"], List[Union[dict, "MigsEuPlantAssociated"]]]])

slots.host_associated_data = Slot(uri=MIXS.host_associated_data, name="host_associated_data", curie=MIXS.curie('host_associated_data'),
                   model_uri=MIXS_6_2_RC.host_associated_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, HostAssociated], List[Union[dict, HostAssociated]]]])

slots.migs_eu_host_associated_data = Slot(uri=MIXS.migs_eu_host_associated_data, name="migs_eu_host_associated_data", curie=MIXS.curie('migs_eu_host_associated_data'),
                   model_uri=MIXS_6_2_RC.migs_eu_host_associated_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MigsEuHostAssociated"], List[Union[dict, "MigsEuHostAssociated"]]]])

slots.human_associated_data = Slot(uri=MIXS.human_associated_data, name="human_associated_data", curie=MIXS.curie('human_associated_data'),
                   model_uri=MIXS_6_2_RC.human_associated_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, HumanAssociated], List[Union[dict, HumanAssociated]]]])

slots.migs_eu_human_associated_data = Slot(uri=MIXS.migs_eu_human_associated_data, name="migs_eu_human_associated_data", curie=MIXS.curie('migs_eu_human_associated_data'),
                   model_uri=MIXS_6_2_RC.migs_eu_human_associated_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MigsEuHumanAssociated"], List[Union[dict, "MigsEuHumanAssociated"]]]])

slots.human_gut_data = Slot(uri=MIXS.human_gut_data, name="human_gut_data", curie=MIXS.curie('human_gut_data'),
                   model_uri=MIXS_6_2_RC.human_gut_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, HumanGut], List[Union[dict, HumanGut]]]])

slots.migs_eu_human_gut_data = Slot(uri=MIXS.migs_eu_human_gut_data, name="migs_eu_human_gut_data", curie=MIXS.curie('migs_eu_human_gut_data'),
                   model_uri=MIXS_6_2_RC.migs_eu_human_gut_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MigsEuHumanGut"], List[Union[dict, "MigsEuHumanGut"]]]])

slots.human_oral_data = Slot(uri=MIXS.human_oral_data, name="human_oral_data", curie=MIXS.curie('human_oral_data'),
                   model_uri=MIXS_6_2_RC.human_oral_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, HumanOral], List[Union[dict, HumanOral]]]])

slots.migs_eu_human_oral_data = Slot(uri=MIXS.migs_eu_human_oral_data, name="migs_eu_human_oral_data", curie=MIXS.curie('migs_eu_human_oral_data'),
                   model_uri=MIXS_6_2_RC.migs_eu_human_oral_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MigsEuHumanOral"], List[Union[dict, "MigsEuHumanOral"]]]])

slots.soil_data = Slot(uri=MIXS.soil_data, name="soil_data", curie=MIXS.curie('soil_data'),
                   model_uri=MIXS_6_2_RC.soil_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, Soil], List[Union[dict, Soil]]]])

slots.migs_eu_soil_data = Slot(uri=MIXS.migs_eu_soil_data, name="migs_eu_soil_data", curie=MIXS.curie('migs_eu_soil_data'),
                   model_uri=MIXS_6_2_RC.migs_eu_soil_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MigsEuSoil"], List[Union[dict, "MigsEuSoil"]]]])

slots.water_data = Slot(uri=MIXS.water_data, name="water_data", curie=MIXS.curie('water_data'),
                   model_uri=MIXS_6_2_RC.water_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, Water], List[Union[dict, Water]]]])

slots.migs_eu_water_data = Slot(uri=MIXS.migs_eu_water_data, name="migs_eu_water_data", curie=MIXS.curie('migs_eu_water_data'),
                   model_uri=MIXS_6_2_RC.migs_eu_water_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MigsEuWater"], List[Union[dict, "MigsEuWater"]]]])

slots.mims_data = Slot(uri=MIXS.mims_data, name="mims_data", curie=MIXS.curie('mims_data'),
                   model_uri=MIXS_6_2_RC.mims_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, Mims], List[Union[dict, Mims]]]])

slots.mims_plant_associated_data = Slot(uri=MIXS.mims_plant_associated_data, name="mims_plant_associated_data", curie=MIXS.curie('mims_plant_associated_data'),
                   model_uri=MIXS_6_2_RC.mims_plant_associated_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MimsPlantAssociated"], List[Union[dict, "MimsPlantAssociated"]]]])

slots.mims_host_associated_data = Slot(uri=MIXS.mims_host_associated_data, name="mims_host_associated_data", curie=MIXS.curie('mims_host_associated_data'),
                   model_uri=MIXS_6_2_RC.mims_host_associated_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MimsHostAssociated"], List[Union[dict, "MimsHostAssociated"]]]])

slots.mims_human_associated_data = Slot(uri=MIXS.mims_human_associated_data, name="mims_human_associated_data", curie=MIXS.curie('mims_human_associated_data'),
                   model_uri=MIXS_6_2_RC.mims_human_associated_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MimsHumanAssociated"], List[Union[dict, "MimsHumanAssociated"]]]])

slots.mims_human_gut_data = Slot(uri=MIXS.mims_human_gut_data, name="mims_human_gut_data", curie=MIXS.curie('mims_human_gut_data'),
                   model_uri=MIXS_6_2_RC.mims_human_gut_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MimsHumanGut"], List[Union[dict, "MimsHumanGut"]]]])

slots.mims_human_oral_data = Slot(uri=MIXS.mims_human_oral_data, name="mims_human_oral_data", curie=MIXS.curie('mims_human_oral_data'),
                   model_uri=MIXS_6_2_RC.mims_human_oral_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MimsHumanOral"], List[Union[dict, "MimsHumanOral"]]]])

slots.mims_soil_data = Slot(uri=MIXS.mims_soil_data, name="mims_soil_data", curie=MIXS.curie('mims_soil_data'),
                   model_uri=MIXS_6_2_RC.mims_soil_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MimsSoil"], List[Union[dict, "MimsSoil"]]]])

slots.mims_water_data = Slot(uri=MIXS.mims_water_data, name="mims_water_data", curie=MIXS.curie('mims_water_data'),
                   model_uri=MIXS_6_2_RC.mims_water_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MimsWater"], List[Union[dict, "MimsWater"]]]])

slots.mimarks_s_data = Slot(uri=MIXS.mimarks_s_data, name="mimarks_s_data", curie=MIXS.curie('mimarks_s_data'),
                   model_uri=MIXS_6_2_RC.mimarks_s_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, MimarksS], List[Union[dict, MimarksS]]]])

slots.mimarks_s_plant_associated_data = Slot(uri=MIXS.mimarks_s_plant_associated_data, name="mimarks_s_plant_associated_data", curie=MIXS.curie('mimarks_s_plant_associated_data'),
                   model_uri=MIXS_6_2_RC.mimarks_s_plant_associated_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MimarksSPlantAssociated"], List[Union[dict, "MimarksSPlantAssociated"]]]])

slots.mimarks_s_host_associated_data = Slot(uri=MIXS.mimarks_s_host_associated_data, name="mimarks_s_host_associated_data", curie=MIXS.curie('mimarks_s_host_associated_data'),
                   model_uri=MIXS_6_2_RC.mimarks_s_host_associated_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MimarksSHostAssociated"], List[Union[dict, "MimarksSHostAssociated"]]]])

slots.mimarks_s_human_associated_data = Slot(uri=MIXS.mimarks_s_human_associated_data, name="mimarks_s_human_associated_data", curie=MIXS.curie('mimarks_s_human_associated_data'),
                   model_uri=MIXS_6_2_RC.mimarks_s_human_associated_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MimarksSHumanAssociated"], List[Union[dict, "MimarksSHumanAssociated"]]]])

slots.mimarks_s_human_gut_data = Slot(uri=MIXS.mimarks_s_human_gut_data, name="mimarks_s_human_gut_data", curie=MIXS.curie('mimarks_s_human_gut_data'),
                   model_uri=MIXS_6_2_RC.mimarks_s_human_gut_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MimarksSHumanGut"], List[Union[dict, "MimarksSHumanGut"]]]])

slots.mimarks_s_human_oral_data = Slot(uri=MIXS.mimarks_s_human_oral_data, name="mimarks_s_human_oral_data", curie=MIXS.curie('mimarks_s_human_oral_data'),
                   model_uri=MIXS_6_2_RC.mimarks_s_human_oral_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MimarksSHumanOral"], List[Union[dict, "MimarksSHumanOral"]]]])

slots.mimarks_s_soil_data = Slot(uri=MIXS.mimarks_s_soil_data, name="mimarks_s_soil_data", curie=MIXS.curie('mimarks_s_soil_data'),
                   model_uri=MIXS_6_2_RC.mimarks_s_soil_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MimarksSSoil"], List[Union[dict, "MimarksSSoil"]]]])

slots.mimarks_s_water_data = Slot(uri=MIXS.mimarks_s_water_data, name="mimarks_s_water_data", curie=MIXS.curie('mimarks_s_water_data'),
                   model_uri=MIXS_6_2_RC.mimarks_s_water_data, domain=MixsCompliantData, range=Optional[Union[Union[dict, "MimarksSWater"], List[Union[dict, "MimarksSWater"]]]])

slots.HACCP_term = Slot(uri=MIXS['0001215'], name="HACCP_term", curie=MIXS.curie('0001215'),
                   model_uri=MIXS_6_2_RC.HACCP_term, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.IFSAC_category = Slot(uri=MIXS['0001179'], name="IFSAC_category", curie=MIXS.curie('0001179'),
                   model_uri=MIXS_6_2_RC.IFSAC_category, domain=None, range=Union[str, List[str]])

slots.abs_air_humidity = Slot(uri=MIXS['0000122'], name="abs_air_humidity", curie=MIXS.curie('0000122'),
                   model_uri=MIXS_6_2_RC.abs_air_humidity, domain=None, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.adapters = Slot(uri=MIXS['0000048'], name="adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS_6_2_RC.adapters, domain=None, range=Optional[str])

slots.add_recov_method = Slot(uri=MIXS['0001009'], name="add_recov_method", curie=MIXS.curie('0001009'),
                   model_uri=MIXS_6_2_RC.add_recov_method, domain=None, range=str)

slots.additional_info = Slot(uri=MIXS['0000300'], name="additional_info", curie=MIXS.curie('0000300'),
                   model_uri=MIXS_6_2_RC.additional_info, domain=None, range=Optional[str])

slots.address = Slot(uri=MIXS['0000218'], name="address", curie=MIXS.curie('0000218'),
                   model_uri=MIXS_6_2_RC.address, domain=None, range=Optional[str])

slots.adj_room = Slot(uri=MIXS['0000219'], name="adj_room", curie=MIXS.curie('0000219'),
                   model_uri=MIXS_6_2_RC.adj_room, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);[1-9][0-9]*$'))

slots.adjacent_environment = Slot(uri=MIXS['0001121'], name="adjacent_environment", curie=MIXS.curie('0001121'),
                   model_uri=MIXS_6_2_RC.adjacent_environment, domain=None, range=Optional[Union[str, List[str]]])

slots.aero_struc = Slot(uri=MIXS['0000773'], name="aero_struc", curie=MIXS.curie('0000773'),
                   model_uri=MIXS_6_2_RC.aero_struc, domain=None, range=Optional[Union[str, "AEROSTRUCENUM"]])

slots.agrochem_addition = Slot(uri=MIXS['0000639'], name="agrochem_addition", curie=MIXS.curie('0000639'),
                   model_uri=MIXS_6_2_RC.agrochem_addition, domain=None, range=Optional[Union[str, List[str]]])

slots.air_PM_concen = Slot(uri=MIXS['0000108'], name="air_PM_concen", curie=MIXS.curie('0000108'),
                   model_uri=MIXS_6_2_RC.air_PM_concen, domain=None, range=Optional[Union[str, List[str]]])

slots.air_flow_impede = Slot(uri=MIXS['0001146'], name="air_flow_impede", curie=MIXS.curie('0001146'),
                   model_uri=MIXS_6_2_RC.air_flow_impede, domain=None, range=Optional[Union[str, List[str]]])

slots.air_temp = Slot(uri=MIXS['0000124'], name="air_temp", curie=MIXS.curie('0000124'),
                   model_uri=MIXS_6_2_RC.air_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.air_temp_regm = Slot(uri=MIXS['0000551'], name="air_temp_regm", curie=MIXS.curie('0000551'),
                   model_uri=MIXS_6_2_RC.air_temp_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.al_sat = Slot(uri=MIXS['0000607'], name="al_sat", curie=MIXS.curie('0000607'),
                   model_uri=MIXS_6_2_RC.al_sat, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.al_sat_meth = Slot(uri=MIXS['0000324'], name="al_sat_meth", curie=MIXS.curie('0000324'),
                   model_uri=MIXS_6_2_RC.al_sat_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.alkalinity = Slot(uri=MIXS['0000421'], name="alkalinity", curie=MIXS.curie('0000421'),
                   model_uri=MIXS_6_2_RC.alkalinity, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.alkalinity_method = Slot(uri=MIXS['0000298'], name="alkalinity_method", curie=MIXS.curie('0000298'),
                   model_uri=MIXS_6_2_RC.alkalinity_method, domain=None, range=Optional[str])

slots.alkyl_diethers = Slot(uri=MIXS['0000490'], name="alkyl_diethers", curie=MIXS.curie('0000490'),
                   model_uri=MIXS_6_2_RC.alkyl_diethers, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.alt = Slot(uri=MIXS['0000094'], name="alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS_6_2_RC.alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.aminopept_act = Slot(uri=MIXS['0000172'], name="aminopept_act", curie=MIXS.curie('0000172'),
                   model_uri=MIXS_6_2_RC.aminopept_act, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.ammonium = Slot(uri=MIXS['0000427'], name="ammonium", curie=MIXS.curie('0000427'),
                   model_uri=MIXS_6_2_RC.ammonium, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.amniotic_fluid_color = Slot(uri=MIXS['0000276'], name="amniotic_fluid_color", curie=MIXS.curie('0000276'),
                   model_uri=MIXS_6_2_RC.amniotic_fluid_color, domain=None, range=Optional[str])

slots.amount_light = Slot(uri=MIXS['0000140'], name="amount_light", curie=MIXS.curie('0000140'),
                   model_uri=MIXS_6_2_RC.amount_light, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.ances_data = Slot(uri=MIXS['0000247'], name="ances_data", curie=MIXS.curie('0000247'),
                   model_uri=MIXS_6_2_RC.ances_data, domain=None, range=Optional[str])

slots.anim_water_method = Slot(uri=MIXS['0001115'], name="anim_water_method", curie=MIXS.curie('0001115'),
                   model_uri=MIXS_6_2_RC.anim_water_method, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.animal_am = Slot(uri=MIXS['0001243'], name="animal_am", curie=MIXS.curie('0001243'),
                   model_uri=MIXS_6_2_RC.animal_am, domain=None, range=Optional[str])

slots.animal_am_dur = Slot(uri=MIXS['0001244'], name="animal_am_dur", curie=MIXS.curie('0001244'),
                   model_uri=MIXS_6_2_RC.animal_am_dur, domain=None, range=Optional[str])

slots.animal_am_freq = Slot(uri=MIXS['0001245'], name="animal_am_freq", curie=MIXS.curie('0001245'),
                   model_uri=MIXS_6_2_RC.animal_am_freq, domain=None, range=Optional[float],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.animal_am_route = Slot(uri=MIXS['0001246'], name="animal_am_route", curie=MIXS.curie('0001246'),
                   model_uri=MIXS_6_2_RC.animal_am_route, domain=None, range=Optional[str])

slots.animal_am_use = Slot(uri=MIXS['0001247'], name="animal_am_use", curie=MIXS.curie('0001247'),
                   model_uri=MIXS_6_2_RC.animal_am_use, domain=None, range=Optional[str])

slots.animal_body_cond = Slot(uri=MIXS['0001248'], name="animal_body_cond", curie=MIXS.curie('0001248'),
                   model_uri=MIXS_6_2_RC.animal_body_cond, domain=None, range=Optional[Union[str, "ANIMALBODYCONDENUM"]])

slots.animal_diet = Slot(uri=MIXS['0001130'], name="animal_diet", curie=MIXS.curie('0001130'),
                   model_uri=MIXS_6_2_RC.animal_diet, domain=None, range=Optional[Union[str, List[str]]])

slots.animal_feed_equip = Slot(uri=MIXS['0001113'], name="animal_feed_equip", curie=MIXS.curie('0001113'),
                   model_uri=MIXS_6_2_RC.animal_feed_equip, domain=None, range=Optional[Union[str, List[str]]])

slots.animal_group_size = Slot(uri=MIXS['0001129'], name="animal_group_size", curie=MIXS.curie('0001129'),
                   model_uri=MIXS_6_2_RC.animal_group_size, domain=None, range=Optional[int])

slots.animal_housing = Slot(uri=MIXS['0001180'], name="animal_housing", curie=MIXS.curie('0001180'),
                   model_uri=MIXS_6_2_RC.animal_housing, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.animal_intrusion = Slot(uri=MIXS['0001114'], name="animal_intrusion", curie=MIXS.curie('0001114'),
                   model_uri=MIXS_6_2_RC.animal_intrusion, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^(([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\])|[1-9][0-9]*$'))

slots.animal_sex = Slot(uri=MIXS['0001249'], name="animal_sex", curie=MIXS.curie('0001249'),
                   model_uri=MIXS_6_2_RC.animal_sex, domain=None, range=Optional[Union[str, "ANIMALSEXENUM"]])

slots.annot = Slot(uri=MIXS['0000059'], name="annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS_6_2_RC.annot, domain=None, range=Optional[str])

slots.annual_precpt = Slot(uri=MIXS['0000644'], name="annual_precpt", curie=MIXS.curie('0000644'),
                   model_uri=MIXS_6_2_RC.annual_precpt, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.annual_temp = Slot(uri=MIXS['0000642'], name="annual_temp", curie=MIXS.curie('0000642'),
                   model_uri=MIXS_6_2_RC.annual_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.antibiotic_regm = Slot(uri=MIXS['0000553'], name="antibiotic_regm", curie=MIXS.curie('0000553'),
                   model_uri=MIXS_6_2_RC.antibiotic_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.api = Slot(uri=MIXS['0000157'], name="api", curie=MIXS.curie('0000157'),
                   model_uri=MIXS_6_2_RC.api, domain=None, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.arch_struc = Slot(uri=MIXS['0000774'], name="arch_struc", curie=MIXS.curie('0000774'),
                   model_uri=MIXS_6_2_RC.arch_struc, domain=None, range=Optional[Union[str, "ARCHSTRUCENUM"]])

slots.area_samp_size = Slot(uri=MIXS['0001255'], name="area_samp_size", curie=MIXS.curie('0001255'),
                   model_uri=MIXS_6_2_RC.area_samp_size, domain=None, range=Optional[str])

slots.aromatics_pc = Slot(uri=MIXS['0000133'], name="aromatics_pc", curie=MIXS.curie('0000133'),
                   model_uri=MIXS_6_2_RC.aromatics_pc, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);[-+]?[0-9]*\.?[0-9]+ ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.asphaltenes_pc = Slot(uri=MIXS['0000135'], name="asphaltenes_pc", curie=MIXS.curie('0000135'),
                   model_uri=MIXS_6_2_RC.asphaltenes_pc, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);[-+]?[0-9]*\.?[0-9]+ ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.assembly_name = Slot(uri=MIXS['0000057'], name="assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS_6_2_RC.assembly_name, domain=None, range=Optional[str])

slots.assembly_qual = Slot(uri=MIXS['0000056'], name="assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS_6_2_RC.assembly_qual, domain=None, range=Optional[str])

slots.assembly_software = Slot(uri=MIXS['0000058'], name="assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS_6_2_RC.assembly_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.associated_resource = Slot(uri=MIXS['0000091'], name="associated_resource", curie=MIXS.curie('0000091'),
                   model_uri=MIXS_6_2_RC.associated_resource, domain=None, range=Optional[Union[str, List[str]]])

slots.association_duration = Slot(uri=MIXS['0001299'], name="association_duration", curie=MIXS.curie('0001299'),
                   model_uri=MIXS_6_2_RC.association_duration, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.atmospheric_data = Slot(uri=MIXS['0001097'], name="atmospheric_data", curie=MIXS.curie('0001097'),
                   model_uri=MIXS_6_2_RC.atmospheric_data, domain=None, range=Optional[Union[str, List[str]]])

slots.avg_dew_point = Slot(uri=MIXS['0000141'], name="avg_dew_point", curie=MIXS.curie('0000141'),
                   model_uri=MIXS_6_2_RC.avg_dew_point, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.avg_occup = Slot(uri=MIXS['0000775'], name="avg_occup", curie=MIXS.curie('0000775'),
                   model_uri=MIXS_6_2_RC.avg_occup, domain=None, range=Optional[float])

slots.avg_temp = Slot(uri=MIXS['0000142'], name="avg_temp", curie=MIXS.curie('0000142'),
                   model_uri=MIXS_6_2_RC.avg_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.bac_prod = Slot(uri=MIXS['0000683'], name="bac_prod", curie=MIXS.curie('0000683'),
                   model_uri=MIXS_6_2_RC.bac_prod, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.bac_resp = Slot(uri=MIXS['0000684'], name="bac_resp", curie=MIXS.curie('0000684'),
                   model_uri=MIXS_6_2_RC.bac_resp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.bacteria_carb_prod = Slot(uri=MIXS['0000173'], name="bacteria_carb_prod", curie=MIXS.curie('0000173'),
                   model_uri=MIXS_6_2_RC.bacteria_carb_prod, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.bacterial_density = Slot(uri=MIXS['0001194'], name="bacterial_density", curie=MIXS.curie('0001194'),
                   model_uri=MIXS_6_2_RC.bacterial_density, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.barometric_press = Slot(uri=MIXS['0000096'], name="barometric_press", curie=MIXS.curie('0000096'),
                   model_uri=MIXS_6_2_RC.barometric_press, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.basin = Slot(uri=MIXS['0000290'], name="basin", curie=MIXS.curie('0000290'),
                   model_uri=MIXS_6_2_RC.basin, domain=None, range=str)

slots.bathroom_count = Slot(uri=MIXS['0000776'], name="bathroom_count", curie=MIXS.curie('0000776'),
                   model_uri=MIXS_6_2_RC.bathroom_count, domain=None, range=Optional[int])

slots.bedroom_count = Slot(uri=MIXS['0000777'], name="bedroom_count", curie=MIXS.curie('0000777'),
                   model_uri=MIXS_6_2_RC.bedroom_count, domain=None, range=Optional[int])

slots.benzene = Slot(uri=MIXS['0000153'], name="benzene", curie=MIXS.curie('0000153'),
                   model_uri=MIXS_6_2_RC.benzene, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.bin_param = Slot(uri=MIXS['0000077'], name="bin_param", curie=MIXS.curie('0000077'),
                   model_uri=MIXS_6_2_RC.bin_param, domain=None, range=Optional[Union[str, "BINPARAMENUM"]])

slots.bin_software = Slot(uri=MIXS['0000078'], name="bin_software", curie=MIXS.curie('0000078'),
                   model_uri=MIXS_6_2_RC.bin_software, domain=None, range=Optional[str])

slots.biochem_oxygen_dem = Slot(uri=MIXS['0000653'], name="biochem_oxygen_dem", curie=MIXS.curie('0000653'),
                   model_uri=MIXS_6_2_RC.biochem_oxygen_dem, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.biocide = Slot(uri=MIXS['0001011'], name="biocide", curie=MIXS.curie('0001011'),
                   model_uri=MIXS_6_2_RC.biocide, domain=None, range=Optional[str])

slots.biocide_admin_method = Slot(uri=MIXS['0000456'], name="biocide_admin_method", curie=MIXS.curie('0000456'),
                   model_uri=MIXS_6_2_RC.biocide_admin_method, domain=None, range=Optional[str])

slots.biocide_used = Slot(uri=MIXS['0001258'], name="biocide_used", curie=MIXS.curie('0001258'),
                   model_uri=MIXS_6_2_RC.biocide_used, domain=None, range=Optional[Union[str, List[str]]])

slots.biol_stat = Slot(uri=MIXS['0000858'], name="biol_stat", curie=MIXS.curie('0000858'),
                   model_uri=MIXS_6_2_RC.biol_stat, domain=None, range=Optional[str])

slots.biomass = Slot(uri=MIXS['0000174'], name="biomass", curie=MIXS.curie('0000174'),
                   model_uri=MIXS_6_2_RC.biomass, domain=None, range=Optional[Union[str, List[str]]])

slots.biotic_regm = Slot(uri=MIXS['0001038'], name="biotic_regm", curie=MIXS.curie('0001038'),
                   model_uri=MIXS_6_2_RC.biotic_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.biotic_relationship = Slot(uri=MIXS['0000028'], name="biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=MIXS_6_2_RC.biotic_relationship, domain=None, range=Optional[Union[str, "BIOTICRELATIONSHIPENUM"]])

slots.birth_control = Slot(uri=MIXS['0000286'], name="birth_control", curie=MIXS.curie('0000286'),
                   model_uri=MIXS_6_2_RC.birth_control, domain=None, range=Optional[str])

slots.bishomohopanol = Slot(uri=MIXS['0000175'], name="bishomohopanol", curie=MIXS.curie('0000175'),
                   model_uri=MIXS_6_2_RC.bishomohopanol, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.blood_blood_disord = Slot(uri=MIXS['0000271'], name="blood_blood_disord", curie=MIXS.curie('0000271'),
                   model_uri=MIXS_6_2_RC.blood_blood_disord, domain=None, range=Optional[Union[str, List[str]]])

slots.blood_press_diast = Slot(uri=MIXS['0000258'], name="blood_press_diast", curie=MIXS.curie('0000258'),
                   model_uri=MIXS_6_2_RC.blood_press_diast, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.blood_press_syst = Slot(uri=MIXS['0000259'], name="blood_press_syst", curie=MIXS.curie('0000259'),
                   model_uri=MIXS_6_2_RC.blood_press_syst, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.bromide = Slot(uri=MIXS['0000176'], name="bromide", curie=MIXS.curie('0000176'),
                   model_uri=MIXS_6_2_RC.bromide, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.build_docs = Slot(uri=MIXS['0000787'], name="build_docs", curie=MIXS.curie('0000787'),
                   model_uri=MIXS_6_2_RC.build_docs, domain=None, range=Optional[Union[str, "BUILDDOCSENUM"]])

slots.build_occup_type = Slot(uri=MIXS['0000761'], name="build_occup_type", curie=MIXS.curie('0000761'),
                   model_uri=MIXS_6_2_RC.build_occup_type, domain=None, range=Union[Union[str, "BUILDOCCUPTYPEENUM"], List[Union[str, "BUILDOCCUPTYPEENUM"]]])

slots.building_setting = Slot(uri=MIXS['0000768'], name="building_setting", curie=MIXS.curie('0000768'),
                   model_uri=MIXS_6_2_RC.building_setting, domain=None, range=Union[str, "BUILDINGSETTINGENUM"])

slots.built_struc_age = Slot(uri=MIXS['0000145'], name="built_struc_age", curie=MIXS.curie('0000145'),
                   model_uri=MIXS_6_2_RC.built_struc_age, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.built_struc_set = Slot(uri=MIXS['0000778'], name="built_struc_set", curie=MIXS.curie('0000778'),
                   model_uri=MIXS_6_2_RC.built_struc_set, domain=None, range=Optional[Union[str, "BUILTSTRUCSETENUM"]])

slots.built_struc_type = Slot(uri=MIXS['0000721'], name="built_struc_type", curie=MIXS.curie('0000721'),
                   model_uri=MIXS_6_2_RC.built_struc_type, domain=None, range=Optional[str])

slots.calcium = Slot(uri=MIXS['0000432'], name="calcium", curie=MIXS.curie('0000432'),
                   model_uri=MIXS_6_2_RC.calcium, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.carb_dioxide = Slot(uri=MIXS['0000097'], name="carb_dioxide", curie=MIXS.curie('0000097'),
                   model_uri=MIXS_6_2_RC.carb_dioxide, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.carb_monoxide = Slot(uri=MIXS['0000098'], name="carb_monoxide", curie=MIXS.curie('0000098'),
                   model_uri=MIXS_6_2_RC.carb_monoxide, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.carb_nitro_ratio = Slot(uri=MIXS['0000310'], name="carb_nitro_ratio", curie=MIXS.curie('0000310'),
                   model_uri=MIXS_6_2_RC.carb_nitro_ratio, domain=None, range=Optional[float])

slots.ceil_area = Slot(uri=MIXS['0000148'], name="ceil_area", curie=MIXS.curie('0000148'),
                   model_uri=MIXS_6_2_RC.ceil_area, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.ceil_cond = Slot(uri=MIXS['0000779'], name="ceil_cond", curie=MIXS.curie('0000779'),
                   model_uri=MIXS_6_2_RC.ceil_cond, domain=None, range=Optional[Union[str, "SHAREDENUM3"]])

slots.ceil_finish_mat = Slot(uri=MIXS['0000780'], name="ceil_finish_mat", curie=MIXS.curie('0000780'),
                   model_uri=MIXS_6_2_RC.ceil_finish_mat, domain=None, range=Optional[Union[str, "CEILFINISHMATENUM"]])

slots.ceil_struc = Slot(uri=MIXS['0000782'], name="ceil_struc", curie=MIXS.curie('0000782'),
                   model_uri=MIXS_6_2_RC.ceil_struc, domain=None, range=Optional[Union[str, "CEILSTRUCENUM"]])

slots.ceil_texture = Slot(uri=MIXS['0000783'], name="ceil_texture", curie=MIXS.curie('0000783'),
                   model_uri=MIXS_6_2_RC.ceil_texture, domain=None, range=Optional[Union[str, "SHAREDENUM4"]])

slots.ceil_thermal_mass = Slot(uri=MIXS['0000143'], name="ceil_thermal_mass", curie=MIXS.curie('0000143'),
                   model_uri=MIXS_6_2_RC.ceil_thermal_mass, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.ceil_type = Slot(uri=MIXS['0000784'], name="ceil_type", curie=MIXS.curie('0000784'),
                   model_uri=MIXS_6_2_RC.ceil_type, domain=None, range=Optional[Union[str, "CEILTYPEENUM"]])

slots.ceil_water_mold = Slot(uri=MIXS['0000781'], name="ceil_water_mold", curie=MIXS.curie('0000781'),
                   model_uri=MIXS_6_2_RC.ceil_water_mold, domain=None, range=Optional[Union[str, "SHAREDENUM1"]])

slots.chem_administration = Slot(uri=MIXS['0000751'], name="chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.chem_administration, domain=None, range=Optional[Union[str, List[str]]])

slots.chem_mutagen = Slot(uri=MIXS['0000555'], name="chem_mutagen", curie=MIXS.curie('0000555'),
                   model_uri=MIXS_6_2_RC.chem_mutagen, domain=None, range=Optional[Union[str, List[str]]])

slots.chem_oxygen_dem = Slot(uri=MIXS['0000656'], name="chem_oxygen_dem", curie=MIXS.curie('0000656'),
                   model_uri=MIXS_6_2_RC.chem_oxygen_dem, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.chem_treat_method = Slot(uri=MIXS['0000457'], name="chem_treat_method", curie=MIXS.curie('0000457'),
                   model_uri=MIXS_6_2_RC.chem_treat_method, domain=None, range=Optional[str])

slots.chem_treatment = Slot(uri=MIXS['0001012'], name="chem_treatment", curie=MIXS.curie('0001012'),
                   model_uri=MIXS_6_2_RC.chem_treatment, domain=None, range=Optional[str])

slots.chimera_check = Slot(uri=MIXS['0000052'], name="chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=MIXS_6_2_RC.chimera_check, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.chloride = Slot(uri=MIXS['0000429'], name="chloride", curie=MIXS.curie('0000429'),
                   model_uri=MIXS_6_2_RC.chloride, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.chlorophyll = Slot(uri=MIXS['0000177'], name="chlorophyll", curie=MIXS.curie('0000177'),
                   model_uri=MIXS_6_2_RC.chlorophyll, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.climate_environment = Slot(uri=MIXS['0001040'], name="climate_environment", curie=MIXS.curie('0001040'),
                   model_uri=MIXS_6_2_RC.climate_environment, domain=None, range=Optional[Union[str, List[str]]])

slots.coll_site_geo_feat = Slot(uri=MIXS['0001183'], name="coll_site_geo_feat", curie=MIXS.curie('0001183'),
                   model_uri=MIXS_6_2_RC.coll_site_geo_feat, domain=None, range=str)

slots.collection_date = Slot(uri=MIXS['0000011'], name="collection_date", curie=MIXS.curie('0000011'),
                   model_uri=MIXS_6_2_RC.collection_date, domain=None, range=Union[str, XSDDateTime])

slots.compl_appr = Slot(uri=MIXS['0000071'], name="compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=MIXS_6_2_RC.compl_appr, domain=None, range=Optional[Union[str, "COMPLAPPRENUM"]])

slots.compl_score = Slot(uri=MIXS['0000069'], name="compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS_6_2_RC.compl_score, domain=None, range=Optional[str])

slots.compl_software = Slot(uri=MIXS['0000070'], name="compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS_6_2_RC.compl_software, domain=None, range=Optional[str])

slots.conduc = Slot(uri=MIXS['0000692'], name="conduc", curie=MIXS.curie('0000692'),
                   model_uri=MIXS_6_2_RC.conduc, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.cons_food_stor_dur = Slot(uri=MIXS['0001195'], name="cons_food_stor_dur", curie=MIXS.curie('0001195'),
                   model_uri=MIXS_6_2_RC.cons_food_stor_dur, domain=None, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.cons_food_stor_temp = Slot(uri=MIXS['0001196'], name="cons_food_stor_temp", curie=MIXS.curie('0001196'),
                   model_uri=MIXS_6_2_RC.cons_food_stor_temp, domain=None, range=Optional[str])

slots.cons_purch_date = Slot(uri=MIXS['0001197'], name="cons_purch_date", curie=MIXS.curie('0001197'),
                   model_uri=MIXS_6_2_RC.cons_purch_date, domain=None, range=Optional[Union[str, XSDDateTime]])

slots.cons_qty_purchased = Slot(uri=MIXS['0001198'], name="cons_qty_purchased", curie=MIXS.curie('0001198'),
                   model_uri=MIXS_6_2_RC.cons_qty_purchased, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[1-9][0-9]* ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.contam_score = Slot(uri=MIXS['0000072'], name="contam_score", curie=MIXS.curie('0000072'),
                   model_uri=MIXS_6_2_RC.contam_score, domain=None, range=Optional[float])

slots.contam_screen_input = Slot(uri=MIXS['0000005'], name="contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=MIXS_6_2_RC.contam_screen_input, domain=None, range=Optional[Union[str, "CONTAMSCREENINPUTENUM"]])

slots.contam_screen_param = Slot(uri=MIXS['0000073'], name="contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=MIXS_6_2_RC.contam_screen_param, domain=None, range=Optional[str])

slots.cool_syst_id = Slot(uri=MIXS['0000785'], name="cool_syst_id", curie=MIXS.curie('0000785'),
                   model_uri=MIXS_6_2_RC.cool_syst_id, domain=None, range=Optional[int])

slots.crop_rotation = Slot(uri=MIXS['0000318'], name="crop_rotation", curie=MIXS.curie('0000318'),
                   model_uri=MIXS_6_2_RC.crop_rotation, domain=None, range=Optional[str])

slots.crop_yield = Slot(uri=MIXS['0001116'], name="crop_yield", curie=MIXS.curie('0001116'),
                   model_uri=MIXS_6_2_RC.crop_yield, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.cult_isol_date = Slot(uri=MIXS['0001181'], name="cult_isol_date", curie=MIXS.curie('0001181'),
                   model_uri=MIXS_6_2_RC.cult_isol_date, domain=None, range=Optional[Union[str, XSDDateTime]])

slots.cult_result = Slot(uri=MIXS['0001117'], name="cult_result", curie=MIXS.curie('0001117'),
                   model_uri=MIXS_6_2_RC.cult_result, domain=None, range=Optional[Union[str, "CULTRESULTENUM"]])

slots.cult_result_org = Slot(uri=MIXS['0001118'], name="cult_result_org", curie=MIXS.curie('0001118'),
                   model_uri=MIXS_6_2_RC.cult_result_org, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^(([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\])|[1-9][0-9]*$'))

slots.cult_root_med = Slot(uri=MIXS['0001041'], name="cult_root_med", curie=MIXS.curie('0001041'),
                   model_uri=MIXS_6_2_RC.cult_root_med, domain=None, range=Optional[str])

slots.cult_target = Slot(uri=MIXS['0001119'], name="cult_target", curie=MIXS.curie('0001119'),
                   model_uri=MIXS_6_2_RC.cult_target, domain=None, range=Optional[Union[str, List[str]]])

slots.cur_land_use = Slot(uri=MIXS['0001080'], name="cur_land_use", curie=MIXS.curie('0001080'),
                   model_uri=MIXS_6_2_RC.cur_land_use, domain=None, range=Optional[str])

slots.cur_vegetation = Slot(uri=MIXS['0000312'], name="cur_vegetation", curie=MIXS.curie('0000312'),
                   model_uri=MIXS_6_2_RC.cur_vegetation, domain=None, range=Optional[str])

slots.cur_vegetation_meth = Slot(uri=MIXS['0000314'], name="cur_vegetation_meth", curie=MIXS.curie('0000314'),
                   model_uri=MIXS_6_2_RC.cur_vegetation_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.date_extr_weath = Slot(uri=MIXS['0001142'], name="date_extr_weath", curie=MIXS.curie('0001142'),
                   model_uri=MIXS_6_2_RC.date_extr_weath, domain=None, range=Optional[Union[Union[str, XSDDateTime], List[Union[str, XSDDateTime]]]])

slots.date_last_rain = Slot(uri=MIXS['0000786'], name="date_last_rain", curie=MIXS.curie('0000786'),
                   model_uri=MIXS_6_2_RC.date_last_rain, domain=None, range=Optional[Union[str, XSDDateTime]])

slots.decontam_software = Slot(uri=MIXS['0000074'], name="decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=MIXS_6_2_RC.decontam_software, domain=None, range=Optional[str])

slots.density = Slot(uri=MIXS['0000435'], name="density", curie=MIXS.curie('0000435'),
                   model_uri=MIXS_6_2_RC.density, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.depos_env = Slot(uri=MIXS['0000992'], name="depos_env", curie=MIXS.curie('0000992'),
                   model_uri=MIXS_6_2_RC.depos_env, domain=None, range=Optional[Union[str, "DEPOSENVENUM"]])

slots.depth = Slot(uri=MIXS['0000018'], name="depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.depth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.dermatology_disord = Slot(uri=MIXS['0000284'], name="dermatology_disord", curie=MIXS.curie('0000284'),
                   model_uri=MIXS_6_2_RC.dermatology_disord, domain=None, range=Optional[Union[str, List[str]]])

slots.detec_type = Slot(uri=MIXS['0000084'], name="detec_type", curie=MIXS.curie('0000084'),
                   model_uri=MIXS_6_2_RC.detec_type, domain=None, range=Optional[str])

slots.dew_point = Slot(uri=MIXS['0000129'], name="dew_point", curie=MIXS.curie('0000129'),
                   model_uri=MIXS_6_2_RC.dew_point, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.diet_last_six_month = Slot(uri=MIXS['0000266'], name="diet_last_six_month", curie=MIXS.curie('0000266'),
                   model_uri=MIXS_6_2_RC.diet_last_six_month, domain=None, range=Optional[str])

slots.dietary_claim_use = Slot(uri=MIXS['0001199'], name="dietary_claim_use", curie=MIXS.curie('0001199'),
                   model_uri=MIXS_6_2_RC.dietary_claim_use, domain=None, range=Optional[Union[str, List[str]]])

slots.diether_lipids = Slot(uri=MIXS['0000178'], name="diether_lipids", curie=MIXS.curie('0000178'),
                   model_uri=MIXS_6_2_RC.diether_lipids, domain=None, range=Optional[Union[str, List[str]]])

slots.diss_carb_dioxide = Slot(uri=MIXS['0000436'], name="diss_carb_dioxide", curie=MIXS.curie('0000436'),
                   model_uri=MIXS_6_2_RC.diss_carb_dioxide, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.diss_hydrogen = Slot(uri=MIXS['0000179'], name="diss_hydrogen", curie=MIXS.curie('0000179'),
                   model_uri=MIXS_6_2_RC.diss_hydrogen, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.diss_inorg_carb = Slot(uri=MIXS['0000434'], name="diss_inorg_carb", curie=MIXS.curie('0000434'),
                   model_uri=MIXS_6_2_RC.diss_inorg_carb, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.diss_inorg_nitro = Slot(uri=MIXS['0000698'], name="diss_inorg_nitro", curie=MIXS.curie('0000698'),
                   model_uri=MIXS_6_2_RC.diss_inorg_nitro, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.diss_inorg_phosp = Slot(uri=MIXS['0000106'], name="diss_inorg_phosp", curie=MIXS.curie('0000106'),
                   model_uri=MIXS_6_2_RC.diss_inorg_phosp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.diss_iron = Slot(uri=MIXS['0000139'], name="diss_iron", curie=MIXS.curie('0000139'),
                   model_uri=MIXS_6_2_RC.diss_iron, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.diss_org_carb = Slot(uri=MIXS['0000433'], name="diss_org_carb", curie=MIXS.curie('0000433'),
                   model_uri=MIXS_6_2_RC.diss_org_carb, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.diss_org_nitro = Slot(uri=MIXS['0000162'], name="diss_org_nitro", curie=MIXS.curie('0000162'),
                   model_uri=MIXS_6_2_RC.diss_org_nitro, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.diss_oxygen = Slot(uri=MIXS['0000119'], name="diss_oxygen", curie=MIXS.curie('0000119'),
                   model_uri=MIXS_6_2_RC.diss_oxygen, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.diss_oxygen_fluid = Slot(uri=MIXS['0000438'], name="diss_oxygen_fluid", curie=MIXS.curie('0000438'),
                   model_uri=MIXS_6_2_RC.diss_oxygen_fluid, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.dominant_hand = Slot(uri=MIXS['0000944'], name="dominant_hand", curie=MIXS.curie('0000944'),
                   model_uri=MIXS_6_2_RC.dominant_hand, domain=None, range=Optional[Union[str, "DOMINANTHANDENUM"]])

slots.door_comp_type = Slot(uri=MIXS['0000795'], name="door_comp_type", curie=MIXS.curie('0000795'),
                   model_uri=MIXS_6_2_RC.door_comp_type, domain=None, range=Optional[Union[str, "DOORCOMPTYPEENUM"]])

slots.door_cond = Slot(uri=MIXS['0000788'], name="door_cond", curie=MIXS.curie('0000788'),
                   model_uri=MIXS_6_2_RC.door_cond, domain=None, range=Optional[Union[str, "SHAREDENUM2"]])

slots.door_direct = Slot(uri=MIXS['0000789'], name="door_direct", curie=MIXS.curie('0000789'),
                   model_uri=MIXS_6_2_RC.door_direct, domain=None, range=Optional[Union[str, "DOORDIRECTENUM"]])

slots.door_loc = Slot(uri=MIXS['0000790'], name="door_loc", curie=MIXS.curie('0000790'),
                   model_uri=MIXS_6_2_RC.door_loc, domain=None, range=Optional[Union[str, "SHAREDENUM0"]])

slots.door_mat = Slot(uri=MIXS['0000791'], name="door_mat", curie=MIXS.curie('0000791'),
                   model_uri=MIXS_6_2_RC.door_mat, domain=None, range=Optional[Union[str, "DOORMATENUM"]])

slots.door_move = Slot(uri=MIXS['0000792'], name="door_move", curie=MIXS.curie('0000792'),
                   model_uri=MIXS_6_2_RC.door_move, domain=None, range=Optional[Union[str, "DOORMOVEENUM"]])

slots.door_size = Slot(uri=MIXS['0000158'], name="door_size", curie=MIXS.curie('0000158'),
                   model_uri=MIXS_6_2_RC.door_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.door_type = Slot(uri=MIXS['0000794'], name="door_type", curie=MIXS.curie('0000794'),
                   model_uri=MIXS_6_2_RC.door_type, domain=None, range=Optional[Union[str, "DOORTYPEENUM"]])

slots.door_type_metal = Slot(uri=MIXS['0000796'], name="door_type_metal", curie=MIXS.curie('0000796'),
                   model_uri=MIXS_6_2_RC.door_type_metal, domain=None, range=Optional[Union[str, "DOORTYPEMETALENUM"]])

slots.door_type_wood = Slot(uri=MIXS['0000797'], name="door_type_wood", curie=MIXS.curie('0000797'),
                   model_uri=MIXS_6_2_RC.door_type_wood, domain=None, range=Optional[str])

slots.door_water_mold = Slot(uri=MIXS['0000793'], name="door_water_mold", curie=MIXS.curie('0000793'),
                   model_uri=MIXS_6_2_RC.door_water_mold, domain=None, range=Optional[Union[str, "SHAREDENUM1"]])

slots.douche = Slot(uri=MIXS['0000967'], name="douche", curie=MIXS.curie('0000967'),
                   model_uri=MIXS_6_2_RC.douche, domain=None, range=Optional[Union[str, XSDDateTime]])

slots.down_par = Slot(uri=MIXS['0000703'], name="down_par", curie=MIXS.curie('0000703'),
                   model_uri=MIXS_6_2_RC.down_par, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.drainage_class = Slot(uri=MIXS['0001085'], name="drainage_class", curie=MIXS.curie('0001085'),
                   model_uri=MIXS_6_2_RC.drainage_class, domain=None, range=Optional[Union[str, "DRAINAGECLASSENUM"]])

slots.drawings = Slot(uri=MIXS['0000798'], name="drawings", curie=MIXS.curie('0000798'),
                   model_uri=MIXS_6_2_RC.drawings, domain=None, range=Optional[Union[str, "DRAWINGSENUM"]])

slots.drug_usage = Slot(uri=MIXS['0000894'], name="drug_usage", curie=MIXS.curie('0000894'),
                   model_uri=MIXS_6_2_RC.drug_usage, domain=None, range=Optional[Union[str, List[str]]])

slots.efficiency_percent = Slot(uri=MIXS['0000657'], name="efficiency_percent", curie=MIXS.curie('0000657'),
                   model_uri=MIXS_6_2_RC.efficiency_percent, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.elev = Slot(uri=MIXS['0000093'], name="elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.elevator = Slot(uri=MIXS['0000799'], name="elevator", curie=MIXS.curie('0000799'),
                   model_uri=MIXS_6_2_RC.elevator, domain=None, range=Optional[int])

slots.emulsions = Slot(uri=MIXS['0000660'], name="emulsions", curie=MIXS.curie('0000660'),
                   model_uri=MIXS_6_2_RC.emulsions, domain=None, range=Optional[Union[str, List[str]]])

slots.encoded_traits = Slot(uri=MIXS['0000034'], name="encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=MIXS_6_2_RC.encoded_traits, domain=None, range=Optional[str])

slots.enrichment_protocol = Slot(uri=MIXS['0001177'], name="enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=MIXS_6_2_RC.enrichment_protocol, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.env_broad_scale = Slot(uri=MIXS['0000012'], name="env_broad_scale", curie=MIXS.curie('0000012'),
                   model_uri=MIXS_6_2_RC.env_broad_scale, domain=None, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.env_local_scale = Slot(uri=MIXS['0000013'], name="env_local_scale", curie=MIXS.curie('0000013'),
                   model_uri=MIXS_6_2_RC.env_local_scale, domain=None, range=str)

slots.env_medium = Slot(uri=MIXS['0000014'], name="env_medium", curie=MIXS.curie('0000014'),
                   model_uri=MIXS_6_2_RC.env_medium, domain=None, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.env_monitoring_zone = Slot(uri=MIXS['0001254'], name="env_monitoring_zone", curie=MIXS.curie('0001254'),
                   model_uri=MIXS_6_2_RC.env_monitoring_zone, domain=None, range=Optional[str])

slots.escalator = Slot(uri=MIXS['0000800'], name="escalator", curie=MIXS.curie('0000800'),
                   model_uri=MIXS_6_2_RC.escalator, domain=None, range=Optional[int])

slots.estimated_size = Slot(uri=MIXS['0000024'], name="estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=MIXS_6_2_RC.estimated_size, domain=None, range=Optional[str])

slots.ethnicity = Slot(uri=MIXS['0000895'], name="ethnicity", curie=MIXS.curie('0000895'),
                   model_uri=MIXS_6_2_RC.ethnicity, domain=None, range=Optional[Union[str, List[str]]])

slots.ethylbenzene = Slot(uri=MIXS['0000155'], name="ethylbenzene", curie=MIXS.curie('0000155'),
                   model_uri=MIXS_6_2_RC.ethylbenzene, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.exp_duct = Slot(uri=MIXS['0000144'], name="exp_duct", curie=MIXS.curie('0000144'),
                   model_uri=MIXS_6_2_RC.exp_duct, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.exp_pipe = Slot(uri=MIXS['0000220'], name="exp_pipe", curie=MIXS.curie('0000220'),
                   model_uri=MIXS_6_2_RC.exp_pipe, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[1-9][0-9]* ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.experimental_factor = Slot(uri=MIXS['0000008'], name="experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS_6_2_RC.experimental_factor, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^\S+.*\S+ \[[a-zA-Z]{2,}:\d+\]$'))

slots.ext_door = Slot(uri=MIXS['0000170'], name="ext_door", curie=MIXS.curie('0000170'),
                   model_uri=MIXS_6_2_RC.ext_door, domain=None, range=Optional[int])

slots.ext_wall_orient = Slot(uri=MIXS['0000817'], name="ext_wall_orient", curie=MIXS.curie('0000817'),
                   model_uri=MIXS_6_2_RC.ext_wall_orient, domain=None, range=Optional[Union[str, "SHAREDENUM0"]])

slots.ext_window_orient = Slot(uri=MIXS['0000818'], name="ext_window_orient", curie=MIXS.curie('0000818'),
                   model_uri=MIXS_6_2_RC.ext_window_orient, domain=None, range=Optional[Union[str, "SHAREDENUM0"]])

slots.extr_weather_event = Slot(uri=MIXS['0001141'], name="extr_weather_event", curie=MIXS.curie('0001141'),
                   model_uri=MIXS_6_2_RC.extr_weather_event, domain=None, range=Optional[Union[Union[str, "EXTRWEATHEREVENTENUM"], List[Union[str, "EXTRWEATHEREVENTENUM"]]]])

slots.extrachrom_elements = Slot(uri=MIXS['0000023'], name="extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=MIXS_6_2_RC.extrachrom_elements, domain=None, range=Optional[int])

slots.extreme_event = Slot(uri=MIXS['0000320'], name="extreme_event", curie=MIXS.curie('0000320'),
                   model_uri=MIXS_6_2_RC.extreme_event, domain=None, range=Optional[Union[str, XSDDateTime]])

slots.facility_type = Slot(uri=MIXS['0001252'], name="facility_type", curie=MIXS.curie('0001252'),
                   model_uri=MIXS_6_2_RC.facility_type, domain=None, range=Optional[Union[Union[str, "FACILITYTYPEENUM"], List[Union[str, "FACILITYTYPEENUM"]]]])

slots.fao_class = Slot(uri=MIXS['0001083'], name="fao_class", curie=MIXS.curie('0001083'),
                   model_uri=MIXS_6_2_RC.fao_class, domain=None, range=Optional[Union[str, "FAOCLASSENUM"]])

slots.farm_equip = Slot(uri=MIXS['0001126'], name="farm_equip", curie=MIXS.curie('0001126'),
                   model_uri=MIXS_6_2_RC.farm_equip, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.farm_equip_san = Slot(uri=MIXS['0001124'], name="farm_equip_san", curie=MIXS.curie('0001124'),
                   model_uri=MIXS_6_2_RC.farm_equip_san, domain=None, range=Optional[Union[str, List[str]]])

slots.farm_equip_san_freq = Slot(uri=MIXS['0001125'], name="farm_equip_san_freq", curie=MIXS.curie('0001125'),
                   model_uri=MIXS_6_2_RC.farm_equip_san_freq, domain=None, range=Optional[str])

slots.farm_equip_shared = Slot(uri=MIXS['0001123'], name="farm_equip_shared", curie=MIXS.curie('0001123'),
                   model_uri=MIXS_6_2_RC.farm_equip_shared, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.farm_water_source = Slot(uri=MIXS['0001110'], name="farm_water_source", curie=MIXS.curie('0001110'),
                   model_uri=MIXS_6_2_RC.farm_water_source, domain=None, range=Optional[Union[str, "FARMWATERSOURCEENUM"]])

slots.feat_pred = Slot(uri=MIXS['0000061'], name="feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS_6_2_RC.feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.ferm_chem_add = Slot(uri=MIXS['0001185'], name="ferm_chem_add", curie=MIXS.curie('0001185'),
                   model_uri=MIXS_6_2_RC.ferm_chem_add, domain=None, range=Optional[Union[str, List[str]]])

slots.ferm_chem_add_perc = Slot(uri=MIXS['0001186'], name="ferm_chem_add_perc", curie=MIXS.curie('0001186'),
                   model_uri=MIXS_6_2_RC.ferm_chem_add_perc, domain=None, range=Optional[Union[float, List[float]]])

slots.ferm_headspace_oxy = Slot(uri=MIXS['0001187'], name="ferm_headspace_oxy", curie=MIXS.curie('0001187'),
                   model_uri=MIXS_6_2_RC.ferm_headspace_oxy, domain=None, range=Optional[float])

slots.ferm_medium = Slot(uri=MIXS['0001188'], name="ferm_medium", curie=MIXS.curie('0001188'),
                   model_uri=MIXS_6_2_RC.ferm_medium, domain=None, range=Optional[str])

slots.ferm_pH = Slot(uri=MIXS['0001189'], name="ferm_pH", curie=MIXS.curie('0001189'),
                   model_uri=MIXS_6_2_RC.ferm_pH, domain=None, range=Optional[float])

slots.ferm_rel_humidity = Slot(uri=MIXS['0001190'], name="ferm_rel_humidity", curie=MIXS.curie('0001190'),
                   model_uri=MIXS_6_2_RC.ferm_rel_humidity, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.ferm_temp = Slot(uri=MIXS['0001191'], name="ferm_temp", curie=MIXS.curie('0001191'),
                   model_uri=MIXS_6_2_RC.ferm_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.ferm_time = Slot(uri=MIXS['0001192'], name="ferm_time", curie=MIXS.curie('0001192'),
                   model_uri=MIXS_6_2_RC.ferm_time, domain=None, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.ferm_vessel = Slot(uri=MIXS['0001193'], name="ferm_vessel", curie=MIXS.curie('0001193'),
                   model_uri=MIXS_6_2_RC.ferm_vessel, domain=None, range=Optional[str])

slots.fertilizer_admin = Slot(uri=MIXS['0001127'], name="fertilizer_admin", curie=MIXS.curie('0001127'),
                   model_uri=MIXS_6_2_RC.fertilizer_admin, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.fertilizer_date = Slot(uri=MIXS['0001128'], name="fertilizer_date", curie=MIXS.curie('0001128'),
                   model_uri=MIXS_6_2_RC.fertilizer_date, domain=None, range=Optional[Union[str, XSDDateTime]])

slots.fertilizer_regm = Slot(uri=MIXS['0000556'], name="fertilizer_regm", curie=MIXS.curie('0000556'),
                   model_uri=MIXS_6_2_RC.fertilizer_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.field = Slot(uri=MIXS['0000291'], name="field", curie=MIXS.curie('0000291'),
                   model_uri=MIXS_6_2_RC.field, domain=None, range=Optional[str])

slots.filter_type = Slot(uri=MIXS['0000765'], name="filter_type", curie=MIXS.curie('0000765'),
                   model_uri=MIXS_6_2_RC.filter_type, domain=None, range=Union[Union[str, "FILTERTYPEENUM"], List[Union[str, "FILTERTYPEENUM"]]])

slots.fire = Slot(uri=MIXS['0001086'], name="fire", curie=MIXS.curie('0001086'),
                   model_uri=MIXS_6_2_RC.fire, domain=None, range=Optional[Union[str, XSDDateTime]])

slots.fireplace_type = Slot(uri=MIXS['0000802'], name="fireplace_type", curie=MIXS.curie('0000802'),
                   model_uri=MIXS_6_2_RC.fireplace_type, domain=None, range=Optional[Union[str, "FIREPLACETYPEENUM"]])

slots.flooding = Slot(uri=MIXS['0000319'], name="flooding", curie=MIXS.curie('0000319'),
                   model_uri=MIXS_6_2_RC.flooding, domain=None, range=Optional[Union[str, XSDDateTime]])

slots.floor_age = Slot(uri=MIXS['0000164'], name="floor_age", curie=MIXS.curie('0000164'),
                   model_uri=MIXS_6_2_RC.floor_age, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.floor_area = Slot(uri=MIXS['0000165'], name="floor_area", curie=MIXS.curie('0000165'),
                   model_uri=MIXS_6_2_RC.floor_area, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.floor_cond = Slot(uri=MIXS['0000803'], name="floor_cond", curie=MIXS.curie('0000803'),
                   model_uri=MIXS_6_2_RC.floor_cond, domain=None, range=Optional[Union[str, "SHAREDENUM3"]])

slots.floor_count = Slot(uri=MIXS['0000225'], name="floor_count", curie=MIXS.curie('0000225'),
                   model_uri=MIXS_6_2_RC.floor_count, domain=None, range=Optional[int])

slots.floor_finish_mat = Slot(uri=MIXS['0000804'], name="floor_finish_mat", curie=MIXS.curie('0000804'),
                   model_uri=MIXS_6_2_RC.floor_finish_mat, domain=None, range=Optional[str])

slots.floor_struc = Slot(uri=MIXS['0000806'], name="floor_struc", curie=MIXS.curie('0000806'),
                   model_uri=MIXS_6_2_RC.floor_struc, domain=None, range=Optional[Union[str, "FLOORSTRUCENUM"]])

slots.floor_thermal_mass = Slot(uri=MIXS['0000166'], name="floor_thermal_mass", curie=MIXS.curie('0000166'),
                   model_uri=MIXS_6_2_RC.floor_thermal_mass, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.floor_water_mold = Slot(uri=MIXS['0000805'], name="floor_water_mold", curie=MIXS.curie('0000805'),
                   model_uri=MIXS_6_2_RC.floor_water_mold, domain=None, range=Optional[Union[str, "FLOORWATERMOLDENUM"]])

slots.fluor = Slot(uri=MIXS['0000704'], name="fluor", curie=MIXS.curie('0000704'),
                   model_uri=MIXS_6_2_RC.fluor, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.foetal_health_stat = Slot(uri=MIXS['0000275'], name="foetal_health_stat", curie=MIXS.curie('0000275'),
                   model_uri=MIXS_6_2_RC.foetal_health_stat, domain=None, range=Optional[str])

slots.food_additive = Slot(uri=MIXS['0001200'], name="food_additive", curie=MIXS.curie('0001200'),
                   model_uri=MIXS_6_2_RC.food_additive, domain=None, range=Optional[Union[str, List[str]]])

slots.food_allergen_label = Slot(uri=MIXS['0001201'], name="food_allergen_label", curie=MIXS.curie('0001201'),
                   model_uri=MIXS_6_2_RC.food_allergen_label, domain=None, range=Optional[Union[str, List[str]]])

slots.food_clean_proc = Slot(uri=MIXS['0001182'], name="food_clean_proc", curie=MIXS.curie('0001182'),
                   model_uri=MIXS_6_2_RC.food_clean_proc, domain=None, range=Optional[Union[str, "FOODCLEANPROCENUM"]])

slots.food_contact_surf = Slot(uri=MIXS['0001131'], name="food_contact_surf", curie=MIXS.curie('0001131'),
                   model_uri=MIXS_6_2_RC.food_contact_surf, domain=None, range=Optional[Union[str, List[str]]])

slots.food_contain_wrap = Slot(uri=MIXS['0001132'], name="food_contain_wrap", curie=MIXS.curie('0001132'),
                   model_uri=MIXS_6_2_RC.food_contain_wrap, domain=None, range=Optional[str])

slots.food_cooking_proc = Slot(uri=MIXS['0001202'], name="food_cooking_proc", curie=MIXS.curie('0001202'),
                   model_uri=MIXS_6_2_RC.food_cooking_proc, domain=None, range=Optional[Union[str, List[str]]])

slots.food_dis_point = Slot(uri=MIXS['0001203'], name="food_dis_point", curie=MIXS.curie('0001203'),
                   model_uri=MIXS_6_2_RC.food_dis_point, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+): ([^\s-]{1,2}|[^\s-]+.+[^\s-]+), ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.food_dis_point_city = Slot(uri=MIXS['0001204'], name="food_dis_point_city", curie=MIXS.curie('0001204'),
                   model_uri=MIXS_6_2_RC.food_dis_point_city, domain=None, range=Optional[Union[str, List[str]]])

slots.food_harvest_proc = Slot(uri=MIXS['0001133'], name="food_harvest_proc", curie=MIXS.curie('0001133'),
                   model_uri=MIXS_6_2_RC.food_harvest_proc, domain=None, range=Optional[Union[str, List[str]]])

slots.food_ingredient = Slot(uri=MIXS['0001205'], name="food_ingredient", curie=MIXS.curie('0001205'),
                   model_uri=MIXS_6_2_RC.food_ingredient, domain=None, range=Optional[Union[str, List[str]]])

slots.food_name_status = Slot(uri=MIXS['0001206'], name="food_name_status", curie=MIXS.curie('0001206'),
                   model_uri=MIXS_6_2_RC.food_name_status, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.food_origin = Slot(uri=MIXS['0001207'], name="food_origin", curie=MIXS.curie('0001207'),
                   model_uri=MIXS_6_2_RC.food_origin, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+): ([^\s-]{1,2}|[^\s-]+.+[^\s-]+), ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.food_pack_capacity = Slot(uri=MIXS['0001208'], name="food_pack_capacity", curie=MIXS.curie('0001208'),
                   model_uri=MIXS_6_2_RC.food_pack_capacity, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.food_pack_integrity = Slot(uri=MIXS['0001209'], name="food_pack_integrity", curie=MIXS.curie('0001209'),
                   model_uri=MIXS_6_2_RC.food_pack_integrity, domain=None, range=Optional[Union[str, List[str]]])

slots.food_pack_medium = Slot(uri=MIXS['0001134'], name="food_pack_medium", curie=MIXS.curie('0001134'),
                   model_uri=MIXS_6_2_RC.food_pack_medium, domain=None, range=Optional[Union[str, List[str]]])

slots.food_preserv_proc = Slot(uri=MIXS['0001135'], name="food_preserv_proc", curie=MIXS.curie('0001135'),
                   model_uri=MIXS_6_2_RC.food_preserv_proc, domain=None, range=Optional[Union[str, List[str]]])

slots.food_prior_contact = Slot(uri=MIXS['0001210'], name="food_prior_contact", curie=MIXS.curie('0001210'),
                   model_uri=MIXS_6_2_RC.food_prior_contact, domain=None, range=Optional[Union[str, List[str]]])

slots.food_prod = Slot(uri=MIXS['0001211'], name="food_prod", curie=MIXS.curie('0001211'),
                   model_uri=MIXS_6_2_RC.food_prod, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.food_prod_char = Slot(uri=MIXS['0001136'], name="food_prod_char", curie=MIXS.curie('0001136'),
                   model_uri=MIXS_6_2_RC.food_prod_char, domain=None, range=Optional[Union[str, List[str]]])

slots.food_prod_synonym = Slot(uri=MIXS['0001212'], name="food_prod_synonym", curie=MIXS.curie('0001212'),
                   model_uri=MIXS_6_2_RC.food_prod_synonym, domain=None, range=Optional[Union[str, List[str]]])

slots.food_product_qual = Slot(uri=MIXS['0001213'], name="food_product_qual", curie=MIXS.curie('0001213'),
                   model_uri=MIXS_6_2_RC.food_product_qual, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.food_product_type = Slot(uri=MIXS['0001184'], name="food_product_type", curie=MIXS.curie('0001184'),
                   model_uri=MIXS_6_2_RC.food_product_type, domain=None, range=Optional[str])

slots.food_quality_date = Slot(uri=MIXS['0001178'], name="food_quality_date", curie=MIXS.curie('0001178'),
                   model_uri=MIXS_6_2_RC.food_quality_date, domain=None, range=Optional[str])

slots.food_source = Slot(uri=MIXS['0001139'], name="food_source", curie=MIXS.curie('0001139'),
                   model_uri=MIXS_6_2_RC.food_source, domain=None, range=Optional[str])

slots.food_source_age = Slot(uri=MIXS['0001251'], name="food_source_age", curie=MIXS.curie('0001251'),
                   model_uri=MIXS_6_2_RC.food_source_age, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.food_trace_list = Slot(uri=MIXS['0001214'], name="food_trace_list", curie=MIXS.curie('0001214'),
                   model_uri=MIXS_6_2_RC.food_trace_list, domain=None, range=Optional[Union[str, "FOODTRACELISTENUM"]])

slots.food_trav_mode = Slot(uri=MIXS['0001137'], name="food_trav_mode", curie=MIXS.curie('0001137'),
                   model_uri=MIXS_6_2_RC.food_trav_mode, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.food_trav_vehic = Slot(uri=MIXS['0001138'], name="food_trav_vehic", curie=MIXS.curie('0001138'),
                   model_uri=MIXS_6_2_RC.food_trav_vehic, domain=None, range=Optional[Union[str, List[str]]])

slots.food_treat_proc = Slot(uri=MIXS['0001140'], name="food_treat_proc", curie=MIXS.curie('0001140'),
                   model_uri=MIXS_6_2_RC.food_treat_proc, domain=None, range=Optional[Union[str, List[str]]])

slots.freq_clean = Slot(uri=MIXS['0000226'], name="freq_clean", curie=MIXS.curie('0000226'),
                   model_uri=MIXS_6_2_RC.freq_clean, domain=None, range=Optional[Union[str, "FREQCLEANENUM"]])

slots.freq_cook = Slot(uri=MIXS['0000227'], name="freq_cook", curie=MIXS.curie('0000227'),
                   model_uri=MIXS_6_2_RC.freq_cook, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[1-9][0-9]* ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.fungicide_regm = Slot(uri=MIXS['0000557'], name="fungicide_regm", curie=MIXS.curie('0000557'),
                   model_uri=MIXS_6_2_RC.fungicide_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.furniture = Slot(uri=MIXS['0000807'], name="furniture", curie=MIXS.curie('0000807'),
                   model_uri=MIXS_6_2_RC.furniture, domain=None, range=Optional[Union[str, "FURNITUREENUM"]])

slots.gaseous_environment = Slot(uri=MIXS['0000558'], name="gaseous_environment", curie=MIXS.curie('0000558'),
                   model_uri=MIXS_6_2_RC.gaseous_environment, domain=None, range=Optional[Union[str, List[str]]])

slots.gaseous_substances = Slot(uri=MIXS['0000661'], name="gaseous_substances", curie=MIXS.curie('0000661'),
                   model_uri=MIXS_6_2_RC.gaseous_substances, domain=None, range=Optional[Union[str, List[str]]])

slots.gastrointest_disord = Slot(uri=MIXS['0000280'], name="gastrointest_disord", curie=MIXS.curie('0000280'),
                   model_uri=MIXS_6_2_RC.gastrointest_disord, domain=None, range=Optional[Union[str, List[str]]])

slots.gender_restroom = Slot(uri=MIXS['0000808'], name="gender_restroom", curie=MIXS.curie('0000808'),
                   model_uri=MIXS_6_2_RC.gender_restroom, domain=None, range=Optional[Union[str, "GENDERRESTROOMENUM"]])

slots.genetic_mod = Slot(uri=MIXS['0000859'], name="genetic_mod", curie=MIXS.curie('0000859'),
                   model_uri=MIXS_6_2_RC.genetic_mod, domain=None, range=Optional[str])

slots.geo_loc_name = Slot(uri=MIXS['0000010'], name="geo_loc_name", curie=MIXS.curie('0000010'),
                   model_uri=MIXS_6_2_RC.geo_loc_name, domain=None, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+): ([^\s-]{1,2}|[^\s-]+.+[^\s-]+), ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.gestation_state = Slot(uri=MIXS['0000272'], name="gestation_state", curie=MIXS.curie('0000272'),
                   model_uri=MIXS_6_2_RC.gestation_state, domain=None, range=Optional[str])

slots.glucosidase_act = Slot(uri=MIXS['0000137'], name="glucosidase_act", curie=MIXS.curie('0000137'),
                   model_uri=MIXS_6_2_RC.glucosidase_act, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.gravidity = Slot(uri=MIXS['0000875'], name="gravidity", curie=MIXS.curie('0000875'),
                   model_uri=MIXS_6_2_RC.gravidity, domain=None, range=Optional[str])

slots.gravity = Slot(uri=MIXS['0000559'], name="gravity", curie=MIXS.curie('0000559'),
                   model_uri=MIXS_6_2_RC.gravity, domain=None, range=Optional[Union[str, List[str]]])

slots.growth_facil = Slot(uri=MIXS['0001043'], name="growth_facil", curie=MIXS.curie('0001043'),
                   model_uri=MIXS_6_2_RC.growth_facil, domain=None, range=Optional[str])

slots.growth_habit = Slot(uri=MIXS['0001044'], name="growth_habit", curie=MIXS.curie('0001044'),
                   model_uri=MIXS_6_2_RC.growth_habit, domain=None, range=Optional[Union[str, "GROWTHHABITENUM"]])

slots.growth_hormone_regm = Slot(uri=MIXS['0000560'], name="growth_hormone_regm", curie=MIXS.curie('0000560'),
                   model_uri=MIXS_6_2_RC.growth_hormone_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.growth_medium = Slot(uri=MIXS['0001108'], name="growth_medium", curie=MIXS.curie('0001108'),
                   model_uri=MIXS_6_2_RC.growth_medium, domain=None, range=Optional[str])

slots.gynecologic_disord = Slot(uri=MIXS['0000288'], name="gynecologic_disord", curie=MIXS.curie('0000288'),
                   model_uri=MIXS_6_2_RC.gynecologic_disord, domain=None, range=Optional[Union[str, List[str]]])

slots.hall_count = Slot(uri=MIXS['0000228'], name="hall_count", curie=MIXS.curie('0000228'),
                   model_uri=MIXS_6_2_RC.hall_count, domain=None, range=Optional[int])

slots.handidness = Slot(uri=MIXS['0000809'], name="handidness", curie=MIXS.curie('0000809'),
                   model_uri=MIXS_6_2_RC.handidness, domain=None, range=Optional[Union[str, "HANDIDNESSENUM"]])

slots.hc_produced = Slot(uri=MIXS['0000989'], name="hc_produced", curie=MIXS.curie('0000989'),
                   model_uri=MIXS_6_2_RC.hc_produced, domain=None, range=Union[str, "HCPRODUCEDENUM"])

slots.hcr = Slot(uri=MIXS['0000988'], name="hcr", curie=MIXS.curie('0000988'),
                   model_uri=MIXS_6_2_RC.hcr, domain=None, range=Union[str, "HCRENUM"])

slots.hcr_fw_salinity = Slot(uri=MIXS['0000406'], name="hcr_fw_salinity", curie=MIXS.curie('0000406'),
                   model_uri=MIXS_6_2_RC.hcr_fw_salinity, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.hcr_geol_age = Slot(uri=MIXS['0000993'], name="hcr_geol_age", curie=MIXS.curie('0000993'),
                   model_uri=MIXS_6_2_RC.hcr_geol_age, domain=None, range=Optional[Union[str, "SHAREDENUM5"]])

slots.hcr_pressure = Slot(uri=MIXS['0000395'], name="hcr_pressure", curie=MIXS.curie('0000395'),
                   model_uri=MIXS_6_2_RC.hcr_pressure, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+ *- *[-+]?[0-9]*\.?[0-9]+ ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.hcr_temp = Slot(uri=MIXS['0000393'], name="hcr_temp", curie=MIXS.curie('0000393'),
                   model_uri=MIXS_6_2_RC.hcr_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+ *- *[-+]?[0-9]*\.?[0-9]+ ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.heat_cool_type = Slot(uri=MIXS['0000766'], name="heat_cool_type", curie=MIXS.curie('0000766'),
                   model_uri=MIXS_6_2_RC.heat_cool_type, domain=None, range=Union[Union[str, "HEATCOOLTYPEENUM"], List[Union[str, "HEATCOOLTYPEENUM"]]])

slots.heat_deliv_loc = Slot(uri=MIXS['0000810'], name="heat_deliv_loc", curie=MIXS.curie('0000810'),
                   model_uri=MIXS_6_2_RC.heat_deliv_loc, domain=None, range=Optional[Union[str, "SHAREDENUM0"]])

slots.heat_sys_deliv_meth = Slot(uri=MIXS['0000812'], name="heat_sys_deliv_meth", curie=MIXS.curie('0000812'),
                   model_uri=MIXS_6_2_RC.heat_sys_deliv_meth, domain=None, range=Optional[Union[str, "HEATSYSDELIVMETHENUM"]])

slots.heat_system_id = Slot(uri=MIXS['0000833'], name="heat_system_id", curie=MIXS.curie('0000833'),
                   model_uri=MIXS_6_2_RC.heat_system_id, domain=None, range=Optional[int])

slots.heavy_metals = Slot(uri=MIXS['0000652'], name="heavy_metals", curie=MIXS.curie('0000652'),
                   model_uri=MIXS_6_2_RC.heavy_metals, domain=None, range=Optional[Union[str, List[str]]])

slots.heavy_metals_meth = Slot(uri=MIXS['0000343'], name="heavy_metals_meth", curie=MIXS.curie('0000343'),
                   model_uri=MIXS_6_2_RC.heavy_metals_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.height_carper_fiber = Slot(uri=MIXS['0000167'], name="height_carper_fiber", curie=MIXS.curie('0000167'),
                   model_uri=MIXS_6_2_RC.height_carper_fiber, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.herbicide_regm = Slot(uri=MIXS['0000561'], name="herbicide_regm", curie=MIXS.curie('0000561'),
                   model_uri=MIXS_6_2_RC.herbicide_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.horizon_meth = Slot(uri=MIXS['0000321'], name="horizon_meth", curie=MIXS.curie('0000321'),
                   model_uri=MIXS_6_2_RC.horizon_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.host_age = Slot(uri=MIXS['0000255'], name="host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS_6_2_RC.host_age, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.host_body_habitat = Slot(uri=MIXS['0000866'], name="host_body_habitat", curie=MIXS.curie('0000866'),
                   model_uri=MIXS_6_2_RC.host_body_habitat, domain=None, range=Optional[str])

slots.host_body_mass_index = Slot(uri=MIXS['0000317'], name="host_body_mass_index", curie=MIXS.curie('0000317'),
                   model_uri=MIXS_6_2_RC.host_body_mass_index, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.host_body_product = Slot(uri=MIXS['0000888'], name="host_body_product", curie=MIXS.curie('0000888'),
                   model_uri=MIXS_6_2_RC.host_body_product, domain=None, range=Optional[str])

slots.host_body_site = Slot(uri=MIXS['0000867'], name="host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=MIXS_6_2_RC.host_body_site, domain=None, range=Optional[str])

slots.host_body_temp = Slot(uri=MIXS['0000274'], name="host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=MIXS_6_2_RC.host_body_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.host_cellular_loc = Slot(uri=MIXS['0001313'], name="host_cellular_loc", curie=MIXS.curie('0001313'),
                   model_uri=MIXS_6_2_RC.host_cellular_loc, domain=None, range=Optional[Union[str, "HOSTCELLULARLOCENUM"]])

slots.host_color = Slot(uri=MIXS['0000260'], name="host_color", curie=MIXS.curie('0000260'),
                   model_uri=MIXS_6_2_RC.host_color, domain=None, range=Optional[str])

slots.host_common_name = Slot(uri=MIXS['0000248'], name="host_common_name", curie=MIXS.curie('0000248'),
                   model_uri=MIXS_6_2_RC.host_common_name, domain=None, range=Optional[str])

slots.host_dependence = Slot(uri=MIXS['0001315'], name="host_dependence", curie=MIXS.curie('0001315'),
                   model_uri=MIXS_6_2_RC.host_dependence, domain=None, range=Union[str, "HOSTDEPENDENCEENUM"])

slots.host_diet = Slot(uri=MIXS['0000869'], name="host_diet", curie=MIXS.curie('0000869'),
                   model_uri=MIXS_6_2_RC.host_diet, domain=None, range=Optional[Union[str, List[str]]])

slots.host_disease_stat = Slot(uri=MIXS['0000031'], name="host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS_6_2_RC.host_disease_stat, domain=None, range=Optional[str])

slots.host_dry_mass = Slot(uri=MIXS['0000257'], name="host_dry_mass", curie=MIXS.curie('0000257'),
                   model_uri=MIXS_6_2_RC.host_dry_mass, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.host_fam_rel = Slot(uri=MIXS['0000872'], name="host_fam_rel", curie=MIXS.curie('0000872'),
                   model_uri=MIXS_6_2_RC.host_fam_rel, domain=None, range=Optional[Union[str, List[str]]])

slots.host_genotype = Slot(uri=MIXS['0000365'], name="host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS_6_2_RC.host_genotype, domain=None, range=Optional[str])

slots.host_growth_cond = Slot(uri=MIXS['0000871'], name="host_growth_cond", curie=MIXS.curie('0000871'),
                   model_uri=MIXS_6_2_RC.host_growth_cond, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.host_height = Slot(uri=MIXS['0000264'], name="host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS_6_2_RC.host_height, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.host_hiv_stat = Slot(uri=MIXS['0000265'], name="host_hiv_stat", curie=MIXS.curie('0000265'),
                   model_uri=MIXS_6_2_RC.host_hiv_stat, domain=None, range=Optional[str])

slots.host_infra_spec_name = Slot(uri=MIXS['0000253'], name="host_infra_spec_name", curie=MIXS.curie('0000253'),
                   model_uri=MIXS_6_2_RC.host_infra_spec_name, domain=None, range=Optional[str])

slots.host_infra_spec_rank = Slot(uri=MIXS['0000254'], name="host_infra_spec_rank", curie=MIXS.curie('0000254'),
                   model_uri=MIXS_6_2_RC.host_infra_spec_rank, domain=None, range=Optional[str])

slots.host_last_meal = Slot(uri=MIXS['0000870'], name="host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=MIXS_6_2_RC.host_last_meal, domain=None, range=Optional[Union[str, List[str]]])

slots.host_length = Slot(uri=MIXS['0000256'], name="host_length", curie=MIXS.curie('0000256'),
                   model_uri=MIXS_6_2_RC.host_length, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.host_life_stage = Slot(uri=MIXS['0000251'], name="host_life_stage", curie=MIXS.curie('0000251'),
                   model_uri=MIXS_6_2_RC.host_life_stage, domain=None, range=Optional[str])

slots.host_number = Slot(uri=MIXS['0001305'], name="host_number", curie=MIXS.curie('0001305'),
                   model_uri=MIXS_6_2_RC.host_number, domain=None, range=Optional[str])

slots.host_occupation = Slot(uri=MIXS['0000896'], name="host_occupation", curie=MIXS.curie('0000896'),
                   model_uri=MIXS_6_2_RC.host_occupation, domain=None, range=Optional[str])

slots.host_of_host_coinf = Slot(uri=MIXS['0001310'], name="host_of_host_coinf", curie=MIXS.curie('0001310'),
                   model_uri=MIXS_6_2_RC.host_of_host_coinf, domain=None, range=Optional[str])

slots.host_of_host_disease = Slot(uri=MIXS['0001319'], name="host_of_host_disease", curie=MIXS.curie('0001319'),
                   model_uri=MIXS_6_2_RC.host_of_host_disease, domain=None, range=Optional[Union[str, List[str]]])

slots.host_of_host_env_loc = Slot(uri=MIXS['0001325'], name="host_of_host_env_loc", curie=MIXS.curie('0001325'),
                   model_uri=MIXS_6_2_RC.host_of_host_env_loc, domain=None, range=Optional[Union[str, List[str]]])

slots.host_of_host_env_med = Slot(uri=MIXS['0001326'], name="host_of_host_env_med", curie=MIXS.curie('0001326'),
                   model_uri=MIXS_6_2_RC.host_of_host_env_med, domain=None, range=Optional[str])

slots.host_of_host_fam_rel = Slot(uri=MIXS['0001328'], name="host_of_host_fam_rel", curie=MIXS.curie('0001328'),
                   model_uri=MIXS_6_2_RC.host_of_host_fam_rel, domain=None, range=Optional[Union[str, List[str]]])

slots.host_of_host_geno = Slot(uri=MIXS['0001331'], name="host_of_host_geno", curie=MIXS.curie('0001331'),
                   model_uri=MIXS_6_2_RC.host_of_host_geno, domain=None, range=Optional[str])

slots.host_of_host_gravid = Slot(uri=MIXS['0001333'], name="host_of_host_gravid", curie=MIXS.curie('0001333'),
                   model_uri=MIXS_6_2_RC.host_of_host_gravid, domain=None, range=Optional[str])

slots.host_of_host_infname = Slot(uri=MIXS['0001329'], name="host_of_host_infname", curie=MIXS.curie('0001329'),
                   model_uri=MIXS_6_2_RC.host_of_host_infname, domain=None, range=Optional[str])

slots.host_of_host_infrank = Slot(uri=MIXS['0001330'], name="host_of_host_infrank", curie=MIXS.curie('0001330'),
                   model_uri=MIXS_6_2_RC.host_of_host_infrank, domain=None, range=Optional[str])

slots.host_of_host_name = Slot(uri=MIXS['0001324'], name="host_of_host_name", curie=MIXS.curie('0001324'),
                   model_uri=MIXS_6_2_RC.host_of_host_name, domain=None, range=Optional[str])

slots.host_of_host_pheno = Slot(uri=MIXS['0001332'], name="host_of_host_pheno", curie=MIXS.curie('0001332'),
                   model_uri=MIXS_6_2_RC.host_of_host_pheno, domain=None, range=Optional[str])

slots.host_of_host_sub_id = Slot(uri=MIXS['0001327'], name="host_of_host_sub_id", curie=MIXS.curie('0001327'),
                   model_uri=MIXS_6_2_RC.host_of_host_sub_id, domain=None, range=Optional[str])

slots.host_of_host_taxid = Slot(uri=MIXS['0001306'], name="host_of_host_taxid", curie=MIXS.curie('0001306'),
                   model_uri=MIXS_6_2_RC.host_of_host_taxid, domain=None, range=Optional[str])

slots.host_of_host_totmass = Slot(uri=MIXS['0001334'], name="host_of_host_totmass", curie=MIXS.curie('0001334'),
                   model_uri=MIXS_6_2_RC.host_of_host_totmass, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.host_phenotype = Slot(uri=MIXS['0000874'], name="host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS_6_2_RC.host_phenotype, domain=None, range=Optional[str])

slots.host_pred_appr = Slot(uri=MIXS['0000088'], name="host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=MIXS_6_2_RC.host_pred_appr, domain=None, range=Optional[Union[str, "HOSTPREDAPPRENUM"]])

slots.host_pred_est_acc = Slot(uri=MIXS['0000089'], name="host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=MIXS_6_2_RC.host_pred_est_acc, domain=None, range=Optional[str])

slots.host_pulse = Slot(uri=MIXS['0000333'], name="host_pulse", curie=MIXS.curie('0000333'),
                   model_uri=MIXS_6_2_RC.host_pulse, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.host_sex = Slot(uri=MIXS['0000811'], name="host_sex", curie=MIXS.curie('0000811'),
                   model_uri=MIXS_6_2_RC.host_sex, domain=None, range=Optional[str])

slots.host_shape = Slot(uri=MIXS['0000261'], name="host_shape", curie=MIXS.curie('0000261'),
                   model_uri=MIXS_6_2_RC.host_shape, domain=None, range=Optional[str])

slots.host_spec_range = Slot(uri=MIXS['0000030'], name="host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=MIXS_6_2_RC.host_spec_range, domain=None, range=Optional[Union[str, List[str]]])

slots.host_specificity = Slot(uri=MIXS['0001308'], name="host_specificity", curie=MIXS.curie('0001308'),
                   model_uri=MIXS_6_2_RC.host_specificity, domain=None, range=Optional[Union[str, "HOSTSPECIFICITYENUM"]])

slots.host_subject_id = Slot(uri=MIXS['0000861'], name="host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=MIXS_6_2_RC.host_subject_id, domain=None, range=Optional[str])

slots.host_subspecf_genlin = Slot(uri=MIXS['0001318'], name="host_subspecf_genlin", curie=MIXS.curie('0001318'),
                   model_uri=MIXS_6_2_RC.host_subspecf_genlin, domain=None, range=Optional[Union[str, List[str]]])

slots.host_substrate = Slot(uri=MIXS['0000252'], name="host_substrate", curie=MIXS.curie('0000252'),
                   model_uri=MIXS_6_2_RC.host_substrate, domain=None, range=Optional[str])

slots.host_symbiont = Slot(uri=MIXS['0001298'], name="host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=MIXS_6_2_RC.host_symbiont, domain=None, range=Optional[Union[str, List[str]]])

slots.host_taxid = Slot(uri=MIXS['0000250'], name="host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=MIXS_6_2_RC.host_taxid, domain=None, range=Optional[str])

slots.host_tot_mass = Slot(uri=MIXS['0000263'], name="host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS_6_2_RC.host_tot_mass, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.host_wet_mass = Slot(uri=MIXS['0000567'], name="host_wet_mass", curie=MIXS.curie('0000567'),
                   model_uri=MIXS_6_2_RC.host_wet_mass, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.hrt = Slot(uri=MIXS['0000969'], name="hrt", curie=MIXS.curie('0000969'),
                   model_uri=MIXS_6_2_RC.hrt, domain=None, range=Optional[Union[str, XSDDateTime]])

slots.humidity = Slot(uri=MIXS['0000100'], name="humidity", curie=MIXS.curie('0000100'),
                   model_uri=MIXS_6_2_RC.humidity, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.humidity_regm = Slot(uri=MIXS['0000568'], name="humidity_regm", curie=MIXS.curie('0000568'),
                   model_uri=MIXS_6_2_RC.humidity_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.hygienic_area = Slot(uri=MIXS['0001253'], name="hygienic_area", curie=MIXS.curie('0001253'),
                   model_uri=MIXS_6_2_RC.hygienic_area, domain=None, range=Optional[str])

slots.hysterectomy = Slot(uri=MIXS['0000287'], name="hysterectomy", curie=MIXS.curie('0000287'),
                   model_uri=MIXS_6_2_RC.hysterectomy, domain=None, range=Optional[Union[bool, Bool]])

slots.ihmc_medication_code = Slot(uri=MIXS['0000884'], name="ihmc_medication_code", curie=MIXS.curie('0000884'),
                   model_uri=MIXS_6_2_RC.ihmc_medication_code, domain=None, range=Optional[Union[int, List[int]]])

slots.indoor_space = Slot(uri=MIXS['0000763'], name="indoor_space", curie=MIXS.curie('0000763'),
                   model_uri=MIXS_6_2_RC.indoor_space, domain=None, range=Union[str, "INDOORSPACEENUM"])

slots.indoor_surf = Slot(uri=MIXS['0000764'], name="indoor_surf", curie=MIXS.curie('0000764'),
                   model_uri=MIXS_6_2_RC.indoor_surf, domain=None, range=Optional[Union[str, "INDOORSURFENUM"]])

slots.indust_eff_percent = Slot(uri=MIXS['0000662'], name="indust_eff_percent", curie=MIXS.curie('0000662'),
                   model_uri=MIXS_6_2_RC.indust_eff_percent, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.inorg_particles = Slot(uri=MIXS['0000664'], name="inorg_particles", curie=MIXS.curie('0000664'),
                   model_uri=MIXS_6_2_RC.inorg_particles, domain=None, range=Optional[Union[str, List[str]]])

slots.inside_lux = Slot(uri=MIXS['0000168'], name="inside_lux", curie=MIXS.curie('0000168'),
                   model_uri=MIXS_6_2_RC.inside_lux, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.int_wall_cond = Slot(uri=MIXS['0000813'], name="int_wall_cond", curie=MIXS.curie('0000813'),
                   model_uri=MIXS_6_2_RC.int_wall_cond, domain=None, range=Optional[Union[str, "SHAREDENUM3"]])

slots.intended_consumer = Slot(uri=MIXS['0001144'], name="intended_consumer", curie=MIXS.curie('0001144'),
                   model_uri=MIXS_6_2_RC.intended_consumer, domain=None, range=Optional[Union[str, List[str]]])

slots.isol_growth_condt = Slot(uri=MIXS['0000003'], name="isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS_6_2_RC.isol_growth_condt, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.iw_bt_date_well = Slot(uri=MIXS['0001010'], name="iw_bt_date_well", curie=MIXS.curie('0001010'),
                   model_uri=MIXS_6_2_RC.iw_bt_date_well, domain=None, range=Optional[Union[str, XSDDateTime]])

slots.iwf = Slot(uri=MIXS['0000455'], name="iwf", curie=MIXS.curie('0000455'),
                   model_uri=MIXS_6_2_RC.iwf, domain=None, range=float,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.kidney_disord = Slot(uri=MIXS['0000277'], name="kidney_disord", curie=MIXS.curie('0000277'),
                   model_uri=MIXS_6_2_RC.kidney_disord, domain=None, range=Optional[Union[str, List[str]]])

slots.last_clean = Slot(uri=MIXS['0000814'], name="last_clean", curie=MIXS.curie('0000814'),
                   model_uri=MIXS_6_2_RC.last_clean, domain=None, range=Optional[Union[str, XSDDateTime]])

slots.lat_lon = Slot(uri=MIXS['0000009'], name="lat_lon", curie=MIXS.curie('0000009'),
                   model_uri=MIXS_6_2_RC.lat_lon, domain=None, range=str,
                   pattern=re.compile(r'^(-?((?:[0-8]?[0-9](?:\.\d{0,8})?)|90)) -?[0-9]+(?:\.[0-9]{0,8})?$|^-?(1[0-7]{1,2})$'))

slots.lib_layout = Slot(uri=MIXS['0000041'], name="lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS_6_2_RC.lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.lib_reads_seqd = Slot(uri=MIXS['0000040'], name="lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS_6_2_RC.lib_reads_seqd, domain=None, range=Optional[int])

slots.lib_screen = Slot(uri=MIXS['0000043'], name="lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS_6_2_RC.lib_screen, domain=None, range=Optional[str])

slots.lib_size = Slot(uri=MIXS['0000039'], name="lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS_6_2_RC.lib_size, domain=None, range=Optional[int])

slots.lib_vector = Slot(uri=MIXS['0000042'], name="lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS_6_2_RC.lib_vector, domain=None, range=Optional[str])

slots.library_prep_kit = Slot(uri=MIXS['0001145'], name="library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=MIXS_6_2_RC.library_prep_kit, domain=None, range=Optional[str])

slots.light_intensity = Slot(uri=MIXS['0000706'], name="light_intensity", curie=MIXS.curie('0000706'),
                   model_uri=MIXS_6_2_RC.light_intensity, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.light_regm = Slot(uri=MIXS['0000569'], name="light_regm", curie=MIXS.curie('0000569'),
                   model_uri=MIXS_6_2_RC.light_regm, domain=None, range=Optional[str])

slots.light_type = Slot(uri=MIXS['0000769'], name="light_type", curie=MIXS.curie('0000769'),
                   model_uri=MIXS_6_2_RC.light_type, domain=None, range=Union[Union[str, "LIGHTTYPEENUM"], List[Union[str, "LIGHTTYPEENUM"]]])

slots.link_addit_analys = Slot(uri=MIXS['0000340'], name="link_addit_analys", curie=MIXS.curie('0000340'),
                   model_uri=MIXS_6_2_RC.link_addit_analys, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.link_class_info = Slot(uri=MIXS['0000329'], name="link_class_info", curie=MIXS.curie('0000329'),
                   model_uri=MIXS_6_2_RC.link_class_info, domain=None, range=Optional[str])

slots.link_climate_info = Slot(uri=MIXS['0000328'], name="link_climate_info", curie=MIXS.curie('0000328'),
                   model_uri=MIXS_6_2_RC.link_climate_info, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.lithology = Slot(uri=MIXS['0000990'], name="lithology", curie=MIXS.curie('0000990'),
                   model_uri=MIXS_6_2_RC.lithology, domain=None, range=Optional[Union[str, "LITHOLOGYENUM"]])

slots.liver_disord = Slot(uri=MIXS['0000282'], name="liver_disord", curie=MIXS.curie('0000282'),
                   model_uri=MIXS_6_2_RC.liver_disord, domain=None, range=Optional[Union[str, List[str]]])

slots.local_class = Slot(uri=MIXS['0000330'], name="local_class", curie=MIXS.curie('0000330'),
                   model_uri=MIXS_6_2_RC.local_class, domain=None, range=Optional[str])

slots.local_class_meth = Slot(uri=MIXS['0000331'], name="local_class_meth", curie=MIXS.curie('0000331'),
                   model_uri=MIXS_6_2_RC.local_class_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.lot_number = Slot(uri=MIXS['0001147'], name="lot_number", curie=MIXS.curie('0001147'),
                   model_uri=MIXS_6_2_RC.lot_number, domain=None, range=Optional[Union[str, List[str]]])

slots.mag_cov_software = Slot(uri=MIXS['0000080'], name="mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=MIXS_6_2_RC.mag_cov_software, domain=None, range=Optional[Union[str, "MAGCOVSOFTWAREENUM"]])

slots.magnesium = Slot(uri=MIXS['0000431'], name="magnesium", curie=MIXS.curie('0000431'),
                   model_uri=MIXS_6_2_RC.magnesium, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.maternal_health_stat = Slot(uri=MIXS['0000273'], name="maternal_health_stat", curie=MIXS.curie('0000273'),
                   model_uri=MIXS_6_2_RC.maternal_health_stat, domain=None, range=Optional[str])

slots.max_occup = Slot(uri=MIXS['0000229'], name="max_occup", curie=MIXS.curie('0000229'),
                   model_uri=MIXS_6_2_RC.max_occup, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[1-9][0-9]* ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.mean_frict_vel = Slot(uri=MIXS['0000498'], name="mean_frict_vel", curie=MIXS.curie('0000498'),
                   model_uri=MIXS_6_2_RC.mean_frict_vel, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.mean_peak_frict_vel = Slot(uri=MIXS['0000502'], name="mean_peak_frict_vel", curie=MIXS.curie('0000502'),
                   model_uri=MIXS_6_2_RC.mean_peak_frict_vel, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.mech_struc = Slot(uri=MIXS['0000815'], name="mech_struc", curie=MIXS.curie('0000815'),
                   model_uri=MIXS_6_2_RC.mech_struc, domain=None, range=Optional[Union[str, "MECHSTRUCENUM"]])

slots.mechanical_damage = Slot(uri=MIXS['0001052'], name="mechanical_damage", curie=MIXS.curie('0001052'),
                   model_uri=MIXS_6_2_RC.mechanical_damage, domain=None, range=Optional[Union[str, List[str]]])

slots.medic_hist_perform = Slot(uri=MIXS['0000897'], name="medic_hist_perform", curie=MIXS.curie('0000897'),
                   model_uri=MIXS_6_2_RC.medic_hist_perform, domain=None, range=Optional[Union[bool, Bool]])

slots.menarche = Slot(uri=MIXS['0000965'], name="menarche", curie=MIXS.curie('0000965'),
                   model_uri=MIXS_6_2_RC.menarche, domain=None, range=Optional[Union[str, XSDDateTime]])

slots.menopause = Slot(uri=MIXS['0000968'], name="menopause", curie=MIXS.curie('0000968'),
                   model_uri=MIXS_6_2_RC.menopause, domain=None, range=Optional[Union[str, XSDDateTime]])

slots.methane = Slot(uri=MIXS['0000101'], name="methane", curie=MIXS.curie('0000101'),
                   model_uri=MIXS_6_2_RC.methane, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.micro_biomass_meth = Slot(uri=MIXS['0000339'], name="micro_biomass_meth", curie=MIXS.curie('0000339'),
                   model_uri=MIXS_6_2_RC.micro_biomass_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.microb_cult_med = Slot(uri=MIXS['0001216'], name="microb_cult_med", curie=MIXS.curie('0001216'),
                   model_uri=MIXS_6_2_RC.microb_cult_med, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+)|(([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\])$'))

slots.microb_start = Slot(uri=MIXS['0001217'], name="microb_start", curie=MIXS.curie('0001217'),
                   model_uri=MIXS_6_2_RC.microb_start, domain=None, range=Optional[str])

slots.microb_start_count = Slot(uri=MIXS['0001218'], name="microb_start_count", curie=MIXS.curie('0001218'),
                   model_uri=MIXS_6_2_RC.microb_start_count, domain=None, range=Optional[str])

slots.microb_start_inoc = Slot(uri=MIXS['0001219'], name="microb_start_inoc", curie=MIXS.curie('0001219'),
                   model_uri=MIXS_6_2_RC.microb_start_inoc, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.microb_start_prep = Slot(uri=MIXS['0001220'], name="microb_start_prep", curie=MIXS.curie('0001220'),
                   model_uri=MIXS_6_2_RC.microb_start_prep, domain=None, range=Optional[str])

slots.microb_start_source = Slot(uri=MIXS['0001221'], name="microb_start_source", curie=MIXS.curie('0001221'),
                   model_uri=MIXS_6_2_RC.microb_start_source, domain=None, range=Optional[str])

slots.microb_start_taxID = Slot(uri=MIXS['0001222'], name="microb_start_taxID", curie=MIXS.curie('0001222'),
                   model_uri=MIXS_6_2_RC.microb_start_taxID, domain=None, range=Optional[str],
                   pattern=re.compile(r'^(([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\])|[1-9][0-9]*$'))

slots.microbial_biomass = Slot(uri=MIXS['0000650'], name="microbial_biomass", curie=MIXS.curie('0000650'),
                   model_uri=MIXS_6_2_RC.microbial_biomass, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.mid = Slot(uri=MIXS['0000047'], name="mid", curie=MIXS.curie('0000047'),
                   model_uri=MIXS_6_2_RC.mid, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[ACGTRKSYMWBHDVN]+$'))

slots.mineral_nutr_regm = Slot(uri=MIXS['0000570'], name="mineral_nutr_regm", curie=MIXS.curie('0000570'),
                   model_uri=MIXS_6_2_RC.mineral_nutr_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.misc_param = Slot(uri=MIXS['0000752'], name="misc_param", curie=MIXS.curie('0000752'),
                   model_uri=MIXS_6_2_RC.misc_param, domain=None, range=Optional[Union[str, List[str]]])

slots.mode_transmission = Slot(uri=MIXS['0001312'], name="mode_transmission", curie=MIXS.curie('0001312'),
                   model_uri=MIXS_6_2_RC.mode_transmission, domain=None, range=Optional[Union[str, "MODETRANSMISSIONENUM"]])

slots.n_alkanes = Slot(uri=MIXS['0000503'], name="n_alkanes", curie=MIXS.curie('0000503'),
                   model_uri=MIXS_6_2_RC.n_alkanes, domain=None, range=Optional[Union[str, List[str]]])

slots.neg_cont_type = Slot(uri=MIXS['0001321'], name="neg_cont_type", curie=MIXS.curie('0001321'),
                   model_uri=MIXS_6_2_RC.neg_cont_type, domain=None, range=Optional[Union[str, "NEGCONTTYPEENUM"]])

slots.nitrate = Slot(uri=MIXS['0000425'], name="nitrate", curie=MIXS.curie('0000425'),
                   model_uri=MIXS_6_2_RC.nitrate, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.nitrite = Slot(uri=MIXS['0000426'], name="nitrite", curie=MIXS.curie('0000426'),
                   model_uri=MIXS_6_2_RC.nitrite, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.nitro = Slot(uri=MIXS['0000504'], name="nitro", curie=MIXS.curie('0000504'),
                   model_uri=MIXS_6_2_RC.nitro, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.non_min_nutr_regm = Slot(uri=MIXS['0000571'], name="non_min_nutr_regm", curie=MIXS.curie('0000571'),
                   model_uri=MIXS_6_2_RC.non_min_nutr_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.nose_mouth_teeth_throat_disord = Slot(uri=MIXS['0000283'], name="nose_mouth_teeth_throat_disord", curie=MIXS.curie('0000283'),
                   model_uri=MIXS_6_2_RC.nose_mouth_teeth_throat_disord, domain=None, range=Optional[Union[str, List[str]]])

slots.nose_throat_disord = Slot(uri=MIXS['0000270'], name="nose_throat_disord", curie=MIXS.curie('0000270'),
                   model_uri=MIXS_6_2_RC.nose_throat_disord, domain=None, range=Optional[Union[str, List[str]]])

slots.nucl_acid_amp = Slot(uri=MIXS['0000038'], name="nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS_6_2_RC.nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.nucl_acid_ext = Slot(uri=MIXS['0000037'], name="nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.nucl_acid_ext_kit = Slot(uri=MIXS['0001223'], name="nucl_acid_ext_kit", curie=MIXS.curie('0001223'),
                   model_uri=MIXS_6_2_RC.nucl_acid_ext_kit, domain=None, range=Optional[Union[str, List[str]]])

slots.num_replicons = Slot(uri=MIXS['0000022'], name="num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=MIXS_6_2_RC.num_replicons, domain=None, range=Optional[int])

slots.num_samp_collect = Slot(uri=MIXS['0001224'], name="num_samp_collect", curie=MIXS.curie('0001224'),
                   model_uri=MIXS_6_2_RC.num_samp_collect, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.number_contig = Slot(uri=MIXS['0000060'], name="number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS_6_2_RC.number_contig, domain=None, range=Optional[int])

slots.number_pets = Slot(uri=MIXS['0000231'], name="number_pets", curie=MIXS.curie('0000231'),
                   model_uri=MIXS_6_2_RC.number_pets, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[1-9][0-9]* ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.number_plants = Slot(uri=MIXS['0000230'], name="number_plants", curie=MIXS.curie('0000230'),
                   model_uri=MIXS_6_2_RC.number_plants, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[1-9][0-9]* ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.number_resident = Slot(uri=MIXS['0000232'], name="number_resident", curie=MIXS.curie('0000232'),
                   model_uri=MIXS_6_2_RC.number_resident, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[1-9][0-9]* ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.occup_density_samp = Slot(uri=MIXS['0000217'], name="occup_density_samp", curie=MIXS.curie('0000217'),
                   model_uri=MIXS_6_2_RC.occup_density_samp, domain=None, range=float)

slots.occup_document = Slot(uri=MIXS['0000816'], name="occup_document", curie=MIXS.curie('0000816'),
                   model_uri=MIXS_6_2_RC.occup_document, domain=None, range=Optional[Union[str, "OCCUPDOCUMENTENUM"]])

slots.occup_samp = Slot(uri=MIXS['0000772'], name="occup_samp", curie=MIXS.curie('0000772'),
                   model_uri=MIXS_6_2_RC.occup_samp, domain=None, range=float,
                   pattern=re.compile(r'^[1-9][0-9]* ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.org_carb = Slot(uri=MIXS['0000508'], name="org_carb", curie=MIXS.curie('0000508'),
                   model_uri=MIXS_6_2_RC.org_carb, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.org_count_qpcr_info = Slot(uri=MIXS['0000099'], name="org_count_qpcr_info", curie=MIXS.curie('0000099'),
                   model_uri=MIXS_6_2_RC.org_count_qpcr_info, domain=None, range=Optional[str])

slots.org_matter = Slot(uri=MIXS['0000204'], name="org_matter", curie=MIXS.curie('0000204'),
                   model_uri=MIXS_6_2_RC.org_matter, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.org_nitro = Slot(uri=MIXS['0000205'], name="org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=MIXS_6_2_RC.org_nitro, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.org_particles = Slot(uri=MIXS['0000665'], name="org_particles", curie=MIXS.curie('0000665'),
                   model_uri=MIXS_6_2_RC.org_particles, domain=None, range=Optional[Union[str, List[str]]])

slots.organism_count = Slot(uri=MIXS['0000103'], name="organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.organism_count, domain=None, range=Optional[Union[str, List[str]]])

slots.otu_class_appr = Slot(uri=MIXS['0000085'], name="otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=MIXS_6_2_RC.otu_class_appr, domain=None, range=Optional[str])

slots.otu_db = Slot(uri=MIXS['0000087'], name="otu_db", curie=MIXS.curie('0000087'),
                   model_uri=MIXS_6_2_RC.otu_db, domain=None, range=Optional[str])

slots.otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=MIXS_6_2_RC.otu_seq_comp_appr, domain=None, range=Optional[str])

slots.owc_tvdss = Slot(uri=MIXS['0000405'], name="owc_tvdss", curie=MIXS.curie('0000405'),
                   model_uri=MIXS_6_2_RC.owc_tvdss, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.oxy_stat_samp = Slot(uri=MIXS['0000753'], name="oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.oxy_stat_samp, domain=None, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.oxygen = Slot(uri=MIXS['0000104'], name="oxygen", curie=MIXS.curie('0000104'),
                   model_uri=MIXS_6_2_RC.oxygen, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.part_org_carb = Slot(uri=MIXS['0000515'], name="part_org_carb", curie=MIXS.curie('0000515'),
                   model_uri=MIXS_6_2_RC.part_org_carb, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.part_org_nitro = Slot(uri=MIXS['0000719'], name="part_org_nitro", curie=MIXS.curie('0000719'),
                   model_uri=MIXS_6_2_RC.part_org_nitro, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.part_plant_animal = Slot(uri=MIXS['0001149'], name="part_plant_animal", curie=MIXS.curie('0001149'),
                   model_uri=MIXS_6_2_RC.part_plant_animal, domain=None, range=Optional[Union[str, List[str]]])

slots.particle_class = Slot(uri=MIXS['0000206'], name="particle_class", curie=MIXS.curie('0000206'),
                   model_uri=MIXS_6_2_RC.particle_class, domain=None, range=Optional[Union[str, List[str]]])

slots.pathogenicity = Slot(uri=MIXS['0000027'], name="pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=MIXS_6_2_RC.pathogenicity, domain=None, range=Optional[str])

slots.pcr_cond = Slot(uri=MIXS['0000049'], name="pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=MIXS_6_2_RC.pcr_cond, domain=None, range=Optional[str])

slots.pcr_primers = Slot(uri=MIXS['0000046'], name="pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=MIXS_6_2_RC.pcr_primers, domain=None, range=Optional[str])

slots.permeability = Slot(uri=MIXS['0000404'], name="permeability", curie=MIXS.curie('0000404'),
                   model_uri=MIXS_6_2_RC.permeability, domain=None, range=Optional[str])

slots.perturbation = Slot(uri=MIXS['0000754'], name="perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.perturbation, domain=None, range=Optional[Union[str, List[str]]])

slots.pesticide_regm = Slot(uri=MIXS['0000573'], name="pesticide_regm", curie=MIXS.curie('0000573'),
                   model_uri=MIXS_6_2_RC.pesticide_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.pet_farm_animal = Slot(uri=MIXS['0000267'], name="pet_farm_animal", curie=MIXS.curie('0000267'),
                   model_uri=MIXS_6_2_RC.pet_farm_animal, domain=None, range=Optional[Union[str, List[str]]])

slots.petroleum_hydrocarb = Slot(uri=MIXS['0000516'], name="petroleum_hydrocarb", curie=MIXS.curie('0000516'),
                   model_uri=MIXS_6_2_RC.petroleum_hydrocarb, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.ph = Slot(uri=MIXS['0001001'], name="ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS_6_2_RC.ph, domain=None, range=Optional[float])

slots.ph_meth = Slot(uri=MIXS['0001106'], name="ph_meth", curie=MIXS.curie('0001106'),
                   model_uri=MIXS_6_2_RC.ph_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.ph_regm = Slot(uri=MIXS['0001056'], name="ph_regm", curie=MIXS.curie('0001056'),
                   model_uri=MIXS_6_2_RC.ph_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.phaeopigments = Slot(uri=MIXS['0000180'], name="phaeopigments", curie=MIXS.curie('0000180'),
                   model_uri=MIXS_6_2_RC.phaeopigments, domain=None, range=Optional[Union[str, List[str]]])

slots.phosphate = Slot(uri=MIXS['0000505'], name="phosphate", curie=MIXS.curie('0000505'),
                   model_uri=MIXS_6_2_RC.phosphate, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.phosplipid_fatt_acid = Slot(uri=MIXS['0000181'], name="phosplipid_fatt_acid", curie=MIXS.curie('0000181'),
                   model_uri=MIXS_6_2_RC.phosplipid_fatt_acid, domain=None, range=Optional[Union[str, List[str]]])

slots.photon_flux = Slot(uri=MIXS['0000725'], name="photon_flux", curie=MIXS.curie('0000725'),
                   model_uri=MIXS_6_2_RC.photon_flux, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.photosynt_activ = Slot(uri=MIXS['0001296'], name="photosynt_activ", curie=MIXS.curie('0001296'),
                   model_uri=MIXS_6_2_RC.photosynt_activ, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.photosynt_activ_meth = Slot(uri=MIXS['0001336'], name="photosynt_activ_meth", curie=MIXS.curie('0001336'),
                   model_uri=MIXS_6_2_RC.photosynt_activ_meth, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.plant_growth_med = Slot(uri=MIXS['0001057'], name="plant_growth_med", curie=MIXS.curie('0001057'),
                   model_uri=MIXS_6_2_RC.plant_growth_med, domain=None, range=Optional[str])

slots.plant_part_maturity = Slot(uri=MIXS['0001120'], name="plant_part_maturity", curie=MIXS.curie('0001120'),
                   model_uri=MIXS_6_2_RC.plant_part_maturity, domain=None, range=Optional[str])

slots.plant_product = Slot(uri=MIXS['0001058'], name="plant_product", curie=MIXS.curie('0001058'),
                   model_uri=MIXS_6_2_RC.plant_product, domain=None, range=Optional[str])

slots.plant_reprod_crop = Slot(uri=MIXS['0001150'], name="plant_reprod_crop", curie=MIXS.curie('0001150'),
                   model_uri=MIXS_6_2_RC.plant_reprod_crop, domain=None, range=Optional[Union[Union[str, "PLANTREPRODCROPENUM"], List[Union[str, "PLANTREPRODCROPENUM"]]]])

slots.plant_sex = Slot(uri=MIXS['0001059'], name="plant_sex", curie=MIXS.curie('0001059'),
                   model_uri=MIXS_6_2_RC.plant_sex, domain=None, range=Optional[Union[str, "PLANTSEXENUM"]])

slots.plant_struc = Slot(uri=MIXS['0001060'], name="plant_struc", curie=MIXS.curie('0001060'),
                   model_uri=MIXS_6_2_RC.plant_struc, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.plant_water_method = Slot(uri=MIXS['0001111'], name="plant_water_method", curie=MIXS.curie('0001111'),
                   model_uri=MIXS_6_2_RC.plant_water_method, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.ploidy = Slot(uri=MIXS['0000021'], name="ploidy", curie=MIXS.curie('0000021'),
                   model_uri=MIXS_6_2_RC.ploidy, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.pollutants = Slot(uri=MIXS['0000107'], name="pollutants", curie=MIXS.curie('0000107'),
                   model_uri=MIXS_6_2_RC.pollutants, domain=None, range=Optional[Union[str, List[str]]])

slots.pool_dna_extracts = Slot(uri=MIXS['0000325'], name="pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=MIXS_6_2_RC.pool_dna_extracts, domain=None, range=Optional[str])

slots.porosity = Slot(uri=MIXS['0000211'], name="porosity", curie=MIXS.curie('0000211'),
                   model_uri=MIXS_6_2_RC.porosity, domain=None, range=Optional[str])

slots.pos_cont_type = Slot(uri=MIXS['0001322'], name="pos_cont_type", curie=MIXS.curie('0001322'),
                   model_uri=MIXS_6_2_RC.pos_cont_type, domain=None, range=Optional[str])

slots.potassium = Slot(uri=MIXS['0000430'], name="potassium", curie=MIXS.curie('0000430'),
                   model_uri=MIXS_6_2_RC.potassium, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.pour_point = Slot(uri=MIXS['0000127'], name="pour_point", curie=MIXS.curie('0000127'),
                   model_uri=MIXS_6_2_RC.pour_point, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.pre_treatment = Slot(uri=MIXS['0000348'], name="pre_treatment", curie=MIXS.curie('0000348'),
                   model_uri=MIXS_6_2_RC.pre_treatment, domain=None, range=Optional[str])

slots.pred_genome_struc = Slot(uri=MIXS['0000083'], name="pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=MIXS_6_2_RC.pred_genome_struc, domain=None, range=Optional[Union[str, "PREDGENOMESTRUCENUM"]])

slots.pred_genome_type = Slot(uri=MIXS['0000082'], name="pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=MIXS_6_2_RC.pred_genome_type, domain=None, range=Optional[str])

slots.pregnancy = Slot(uri=MIXS['0000966'], name="pregnancy", curie=MIXS.curie('0000966'),
                   model_uri=MIXS_6_2_RC.pregnancy, domain=None, range=Optional[Union[str, XSDDateTime]])

slots.pres_animal_insect = Slot(uri=MIXS['0000819'], name="pres_animal_insect", curie=MIXS.curie('0000819'),
                   model_uri=MIXS_6_2_RC.pres_animal_insect, domain=None, range=Optional[str])

slots.pressure = Slot(uri=MIXS['0000412'], name="pressure", curie=MIXS.curie('0000412'),
                   model_uri=MIXS_6_2_RC.pressure, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.prev_land_use_meth = Slot(uri=MIXS['0000316'], name="prev_land_use_meth", curie=MIXS.curie('0000316'),
                   model_uri=MIXS_6_2_RC.prev_land_use_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.previous_land_use = Slot(uri=MIXS['0000315'], name="previous_land_use", curie=MIXS.curie('0000315'),
                   model_uri=MIXS_6_2_RC.previous_land_use, domain=None, range=Optional[str])

slots.primary_prod = Slot(uri=MIXS['0000728'], name="primary_prod", curie=MIXS.curie('0000728'),
                   model_uri=MIXS_6_2_RC.primary_prod, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.primary_treatment = Slot(uri=MIXS['0000349'], name="primary_treatment", curie=MIXS.curie('0000349'),
                   model_uri=MIXS_6_2_RC.primary_treatment, domain=None, range=Optional[str])

slots.prod_label_claims = Slot(uri=MIXS.prod_label_claims, name="prod_label_claims", curie=MIXS.curie('prod_label_claims'),
                   model_uri=MIXS_6_2_RC.prod_label_claims, domain=None, range=Optional[Union[str, List[str]]])

slots.prod_rate = Slot(uri=MIXS['0000452'], name="prod_rate", curie=MIXS.curie('0000452'),
                   model_uri=MIXS_6_2_RC.prod_rate, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.prod_start_date = Slot(uri=MIXS['0001008'], name="prod_start_date", curie=MIXS.curie('0001008'),
                   model_uri=MIXS_6_2_RC.prod_start_date, domain=None, range=Optional[Union[str, XSDDateTime]])

slots.profile_position = Slot(uri=MIXS['0001084'], name="profile_position", curie=MIXS.curie('0001084'),
                   model_uri=MIXS_6_2_RC.profile_position, domain=None, range=Optional[Union[str, "PROFILEPOSITIONENUM"]])

slots.project_name = Slot(uri=MIXS['0000092'], name="project_name", curie=MIXS.curie('0000092'),
                   model_uri=MIXS_6_2_RC.project_name, domain=None, range=str)

slots.propagation = Slot(uri=MIXS['0000033'], name="propagation", curie=MIXS.curie('0000033'),
                   model_uri=MIXS_6_2_RC.propagation, domain=None, range=Optional[str])

slots.pulmonary_disord = Slot(uri=MIXS['0000269'], name="pulmonary_disord", curie=MIXS.curie('0000269'),
                   model_uri=MIXS_6_2_RC.pulmonary_disord, domain=None, range=Optional[Union[str, List[str]]])

slots.quad_pos = Slot(uri=MIXS['0000820'], name="quad_pos", curie=MIXS.curie('0000820'),
                   model_uri=MIXS_6_2_RC.quad_pos, domain=None, range=Optional[Union[str, "QUADPOSENUM"]])

slots.radiation_regm = Slot(uri=MIXS['0000575'], name="radiation_regm", curie=MIXS.curie('0000575'),
                   model_uri=MIXS_6_2_RC.radiation_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.rainfall_regm = Slot(uri=MIXS['0000576'], name="rainfall_regm", curie=MIXS.curie('0000576'),
                   model_uri=MIXS_6_2_RC.rainfall_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.reactor_type = Slot(uri=MIXS['0000350'], name="reactor_type", curie=MIXS.curie('0000350'),
                   model_uri=MIXS_6_2_RC.reactor_type, domain=None, range=Optional[str])

slots.reassembly_bin = Slot(uri=MIXS['0000079'], name="reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=MIXS_6_2_RC.reassembly_bin, domain=None, range=Optional[Union[bool, Bool]])

slots.redox_potential = Slot(uri=MIXS['0000182'], name="redox_potential", curie=MIXS.curie('0000182'),
                   model_uri=MIXS_6_2_RC.redox_potential, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.ref_biomaterial = Slot(uri=MIXS['0000025'], name="ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS_6_2_RC.ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.ref_db = Slot(uri=MIXS['0000062'], name="ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS_6_2_RC.ref_db, domain=None, range=Optional[str])

slots.rel_air_humidity = Slot(uri=MIXS['0000121'], name="rel_air_humidity", curie=MIXS.curie('0000121'),
                   model_uri=MIXS_6_2_RC.rel_air_humidity, domain=None, range=float,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.rel_humidity_out = Slot(uri=MIXS['0000188'], name="rel_humidity_out", curie=MIXS.curie('0000188'),
                   model_uri=MIXS_6_2_RC.rel_humidity_out, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.rel_location = Slot(uri=MIXS['0001161'], name="rel_location", curie=MIXS.curie('0001161'),
                   model_uri=MIXS_6_2_RC.rel_location, domain=None, range=Optional[str])

slots.rel_samp_loc = Slot(uri=MIXS['0000821'], name="rel_samp_loc", curie=MIXS.curie('0000821'),
                   model_uri=MIXS_6_2_RC.rel_samp_loc, domain=None, range=Optional[Union[str, "RELSAMPLOCENUM"]])

slots.rel_to_oxygen = Slot(uri=MIXS['0000015'], name="rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=MIXS_6_2_RC.rel_to_oxygen, domain=None, range=Optional[Union[str, "RELTOOXYGENENUM"]])

slots.repository_name = Slot(uri=MIXS['0001152'], name="repository_name", curie=MIXS.curie('0001152'),
                   model_uri=MIXS_6_2_RC.repository_name, domain=None, range=Optional[Union[str, List[str]]])

slots.reservoir = Slot(uri=MIXS['0000303'], name="reservoir", curie=MIXS.curie('0000303'),
                   model_uri=MIXS_6_2_RC.reservoir, domain=None, range=Optional[str])

slots.resins_pc = Slot(uri=MIXS['0000134'], name="resins_pc", curie=MIXS.curie('0000134'),
                   model_uri=MIXS_6_2_RC.resins_pc, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);[-+]?[0-9]*\.?[0-9]+ ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.room_air_exch_rate = Slot(uri=MIXS['0000169'], name="room_air_exch_rate", curie=MIXS.curie('0000169'),
                   model_uri=MIXS_6_2_RC.room_air_exch_rate, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.room_architec_elem = Slot(uri=MIXS['0000233'], name="room_architec_elem", curie=MIXS.curie('0000233'),
                   model_uri=MIXS_6_2_RC.room_architec_elem, domain=None, range=Optional[str])

slots.room_condt = Slot(uri=MIXS['0000822'], name="room_condt", curie=MIXS.curie('0000822'),
                   model_uri=MIXS_6_2_RC.room_condt, domain=None, range=Optional[Union[str, "ROOMCONDTENUM"]])

slots.room_connected = Slot(uri=MIXS['0000826'], name="room_connected", curie=MIXS.curie('0000826'),
                   model_uri=MIXS_6_2_RC.room_connected, domain=None, range=Optional[Union[str, "ROOMCONNECTEDENUM"]])

slots.room_count = Slot(uri=MIXS['0000234'], name="room_count", curie=MIXS.curie('0000234'),
                   model_uri=MIXS_6_2_RC.room_count, domain=None, range=Optional[int])

slots.room_dim = Slot(uri=MIXS['0000192'], name="room_dim", curie=MIXS.curie('0000192'),
                   model_uri=MIXS_6_2_RC.room_dim, domain=None, range=Optional[str])

slots.room_door_dist = Slot(uri=MIXS['0000193'], name="room_door_dist", curie=MIXS.curie('0000193'),
                   model_uri=MIXS_6_2_RC.room_door_dist, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[1-9][0-9]* ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.room_door_share = Slot(uri=MIXS['0000242'], name="room_door_share", curie=MIXS.curie('0000242'),
                   model_uri=MIXS_6_2_RC.room_door_share, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);[1-9][0-9]*$'))

slots.room_hallway = Slot(uri=MIXS['0000238'], name="room_hallway", curie=MIXS.curie('0000238'),
                   model_uri=MIXS_6_2_RC.room_hallway, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);[1-9][0-9]*$'))

slots.room_loc = Slot(uri=MIXS['0000823'], name="room_loc", curie=MIXS.curie('0000823'),
                   model_uri=MIXS_6_2_RC.room_loc, domain=None, range=Optional[Union[str, "ROOMLOCENUM"]])

slots.room_moist_dam_hist = Slot(uri=MIXS['0000235'], name="room_moist_dam_hist", curie=MIXS.curie('0000235'),
                   model_uri=MIXS_6_2_RC.room_moist_dam_hist, domain=None, range=Optional[int])

slots.room_net_area = Slot(uri=MIXS['0000194'], name="room_net_area", curie=MIXS.curie('0000194'),
                   model_uri=MIXS_6_2_RC.room_net_area, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[1-9][0-9]* ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.room_occup = Slot(uri=MIXS['0000236'], name="room_occup", curie=MIXS.curie('0000236'),
                   model_uri=MIXS_6_2_RC.room_occup, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[1-9][0-9]* ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.room_samp_pos = Slot(uri=MIXS['0000824'], name="room_samp_pos", curie=MIXS.curie('0000824'),
                   model_uri=MIXS_6_2_RC.room_samp_pos, domain=None, range=Optional[Union[str, "ROOMSAMPPOSENUM"]])

slots.room_type = Slot(uri=MIXS['0000825'], name="room_type", curie=MIXS.curie('0000825'),
                   model_uri=MIXS_6_2_RC.room_type, domain=None, range=Optional[str])

slots.room_vol = Slot(uri=MIXS['0000195'], name="room_vol", curie=MIXS.curie('0000195'),
                   model_uri=MIXS_6_2_RC.room_vol, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[1-9][0-9]* ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.room_wall_share = Slot(uri=MIXS['0000243'], name="room_wall_share", curie=MIXS.curie('0000243'),
                   model_uri=MIXS_6_2_RC.room_wall_share, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);[1-9][0-9]*$'))

slots.room_window_count = Slot(uri=MIXS['0000237'], name="room_window_count", curie=MIXS.curie('0000237'),
                   model_uri=MIXS_6_2_RC.room_window_count, domain=None, range=Optional[int])

slots.root_cond = Slot(uri=MIXS['0001061'], name="root_cond", curie=MIXS.curie('0001061'),
                   model_uri=MIXS_6_2_RC.root_cond, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.root_med_carbon = Slot(uri=MIXS['0000577'], name="root_med_carbon", curie=MIXS.curie('0000577'),
                   model_uri=MIXS_6_2_RC.root_med_carbon, domain=None, range=Optional[str])

slots.root_med_macronutr = Slot(uri=MIXS['0000578'], name="root_med_macronutr", curie=MIXS.curie('0000578'),
                   model_uri=MIXS_6_2_RC.root_med_macronutr, domain=None, range=Optional[str])

slots.root_med_micronutr = Slot(uri=MIXS['0000579'], name="root_med_micronutr", curie=MIXS.curie('0000579'),
                   model_uri=MIXS_6_2_RC.root_med_micronutr, domain=None, range=Optional[str])

slots.root_med_ph = Slot(uri=MIXS['0001062'], name="root_med_ph", curie=MIXS.curie('0001062'),
                   model_uri=MIXS_6_2_RC.root_med_ph, domain=None, range=Optional[float])

slots.root_med_regl = Slot(uri=MIXS['0000581'], name="root_med_regl", curie=MIXS.curie('0000581'),
                   model_uri=MIXS_6_2_RC.root_med_regl, domain=None, range=Optional[str])

slots.root_med_solid = Slot(uri=MIXS['0001063'], name="root_med_solid", curie=MIXS.curie('0001063'),
                   model_uri=MIXS_6_2_RC.root_med_solid, domain=None, range=Optional[str])

slots.root_med_suppl = Slot(uri=MIXS['0000580'], name="root_med_suppl", curie=MIXS.curie('0000580'),
                   model_uri=MIXS_6_2_RC.root_med_suppl, domain=None, range=Optional[str])

slots.route_transmission = Slot(uri=MIXS['0001316'], name="route_transmission", curie=MIXS.curie('0001316'),
                   model_uri=MIXS_6_2_RC.route_transmission, domain=None, range=Optional[Union[str, "ROUTETRANSMISSIONENUM"]])

slots.salinity = Slot(uri=MIXS['0000183'], name="salinity", curie=MIXS.curie('0000183'),
                   model_uri=MIXS_6_2_RC.salinity, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.salt_regm = Slot(uri=MIXS['0000582'], name="salt_regm", curie=MIXS.curie('0000582'),
                   model_uri=MIXS_6_2_RC.salt_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.samp_capt_status = Slot(uri=MIXS['0000860'], name="samp_capt_status", curie=MIXS.curie('0000860'),
                   model_uri=MIXS_6_2_RC.samp_capt_status, domain=None, range=Optional[Union[str, "SAMPCAPTSTATUSENUM"]])

slots.samp_collect_device = Slot(uri=MIXS['0000002'], name="samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.samp_collect_device, domain=None, range=Optional[str])

slots.samp_collect_method = Slot(uri=MIXS['0001225'], name="samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=MIXS_6_2_RC.samp_collect_method, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.samp_collect_point = Slot(uri=MIXS['0001015'], name="samp_collect_point", curie=MIXS.curie('0001015'),
                   model_uri=MIXS_6_2_RC.samp_collect_point, domain=None, range=Union[str, "SAMPCOLLECTPOINTENUM"])

slots.samp_dis_stage = Slot(uri=MIXS['0000249'], name="samp_dis_stage", curie=MIXS.curie('0000249'),
                   model_uri=MIXS_6_2_RC.samp_dis_stage, domain=None, range=Optional[Union[str, "SAMPDISSTAGEENUM"]])

slots.samp_floor = Slot(uri=MIXS['0000828'], name="samp_floor", curie=MIXS.curie('0000828'),
                   model_uri=MIXS_6_2_RC.samp_floor, domain=None, range=Optional[str])

slots.samp_loc_condition = Slot(uri=MIXS['0001257'], name="samp_loc_condition", curie=MIXS.curie('0001257'),
                   model_uri=MIXS_6_2_RC.samp_loc_condition, domain=None, range=Optional[Union[str, "SAMPLOCCONDITIONENUM"]])

slots.samp_loc_corr_rate = Slot(uri=MIXS['0000136'], name="samp_loc_corr_rate", curie=MIXS.curie('0000136'),
                   model_uri=MIXS_6_2_RC.samp_loc_corr_rate, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+ *- *[-+]?[0-9]*\.?[0-9]+ ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.samp_mat_process = Slot(uri=MIXS['0000016'], name="samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS_6_2_RC.samp_mat_process, domain=None, range=Optional[str])

slots.samp_md = Slot(uri=MIXS['0000413'], name="samp_md", curie=MIXS.curie('0000413'),
                   model_uri=MIXS_6_2_RC.samp_md, domain=None, range=Optional[str])

slots.samp_name = Slot(uri=MIXS['0001107'], name="samp_name", curie=MIXS.curie('0001107'),
                   model_uri=MIXS_6_2_RC.samp_name, domain=None, range=str)

slots.samp_pooling = Slot(uri=MIXS['0001153'], name="samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=MIXS_6_2_RC.samp_pooling, domain=None, range=Optional[Union[str, List[str]]])

slots.samp_preserv = Slot(uri=MIXS['0000463'], name="samp_preserv", curie=MIXS.curie('0000463'),
                   model_uri=MIXS_6_2_RC.samp_preserv, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);[-+]?[0-9]*\.?[0-9]+ ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.samp_purpose = Slot(uri=MIXS['0001151'], name="samp_purpose", curie=MIXS.curie('0001151'),
                   model_uri=MIXS_6_2_RC.samp_purpose, domain=None, range=Optional[str])

slots.samp_rep_biol = Slot(uri=MIXS['0001226'], name="samp_rep_biol", curie=MIXS.curie('0001226'),
                   model_uri=MIXS_6_2_RC.samp_rep_biol, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.samp_rep_tech = Slot(uri=MIXS['0001227'], name="samp_rep_tech", curie=MIXS.curie('0001227'),
                   model_uri=MIXS_6_2_RC.samp_rep_tech, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.samp_room_id = Slot(uri=MIXS['0000244'], name="samp_room_id", curie=MIXS.curie('0000244'),
                   model_uri=MIXS_6_2_RC.samp_room_id, domain=None, range=Optional[int])

slots.samp_size = Slot(uri=MIXS['0000001'], name="samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.samp_sort_meth = Slot(uri=MIXS['0000216'], name="samp_sort_meth", curie=MIXS.curie('0000216'),
                   model_uri=MIXS_6_2_RC.samp_sort_meth, domain=None, range=Optional[Union[str, List[str]]])

slots.samp_source_mat_cat = Slot(uri=MIXS['0001154'], name="samp_source_mat_cat", curie=MIXS.curie('0001154'),
                   model_uri=MIXS_6_2_RC.samp_source_mat_cat, domain=None, range=Optional[str])

slots.samp_stor_device = Slot(uri=MIXS['0001228'], name="samp_stor_device", curie=MIXS.curie('0001228'),
                   model_uri=MIXS_6_2_RC.samp_stor_device, domain=None, range=Optional[str])

slots.samp_stor_media = Slot(uri=MIXS['0001229'], name="samp_stor_media", curie=MIXS.curie('0001229'),
                   model_uri=MIXS_6_2_RC.samp_stor_media, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+)|(([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\])$'))

slots.samp_store_dur = Slot(uri=MIXS['0000116'], name="samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.samp_store_dur, domain=None, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.samp_store_loc = Slot(uri=MIXS['0000755'], name="samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.samp_store_loc, domain=None, range=Optional[str])

slots.samp_store_sol = Slot(uri=MIXS['0001317'], name="samp_store_sol", curie=MIXS.curie('0001317'),
                   model_uri=MIXS_6_2_RC.samp_store_sol, domain=None, range=Optional[str])

slots.samp_store_temp = Slot(uri=MIXS['0000110'], name="samp_store_temp", curie=MIXS.curie('0000110'),
                   model_uri=MIXS_6_2_RC.samp_store_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.samp_subtype = Slot(uri=MIXS['0000999'], name="samp_subtype", curie=MIXS.curie('0000999'),
                   model_uri=MIXS_6_2_RC.samp_subtype, domain=None, range=Optional[Union[str, "SAMPSUBTYPEENUM"]])

slots.samp_surf_moisture = Slot(uri=MIXS['0001256'], name="samp_surf_moisture", curie=MIXS.curie('0001256'),
                   model_uri=MIXS_6_2_RC.samp_surf_moisture, domain=None, range=Optional[Union[Union[str, "SAMPSURFMOISTUREENUM"], List[Union[str, "SAMPSURFMOISTUREENUM"]]]])

slots.samp_taxon_id = Slot(uri=MIXS['0001320'], name="samp_taxon_id", curie=MIXS.curie('0001320'),
                   model_uri=MIXS_6_2_RC.samp_taxon_id, domain=None, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[NCBITaxon:\d+\]$'))

slots.samp_time_out = Slot(uri=MIXS['0000196'], name="samp_time_out", curie=MIXS.curie('0000196'),
                   model_uri=MIXS_6_2_RC.samp_time_out, domain=None, range=Optional[str])

slots.samp_transport_cond = Slot(uri=MIXS['0000410'], name="samp_transport_cond", curie=MIXS.curie('0000410'),
                   model_uri=MIXS_6_2_RC.samp_transport_cond, domain=None, range=Optional[str])

slots.samp_transport_cont = Slot(uri=MIXS['0001230'], name="samp_transport_cont", curie=MIXS.curie('0001230'),
                   model_uri=MIXS_6_2_RC.samp_transport_cont, domain=None, range=Optional[Union[str, "SAMPTRANSPORTCONTENUM"]])

slots.samp_transport_dur = Slot(uri=MIXS['0001231'], name="samp_transport_dur", curie=MIXS.curie('0001231'),
                   model_uri=MIXS_6_2_RC.samp_transport_dur, domain=None, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.samp_transport_temp = Slot(uri=MIXS['0001232'], name="samp_transport_temp", curie=MIXS.curie('0001232'),
                   model_uri=MIXS_6_2_RC.samp_transport_temp, domain=None, range=Optional[str])

slots.samp_tvdss = Slot(uri=MIXS['0000409'], name="samp_tvdss", curie=MIXS.curie('0000409'),
                   model_uri=MIXS_6_2_RC.samp_tvdss, domain=None, range=Optional[str])

slots.samp_type = Slot(uri=MIXS['0000998'], name="samp_type", curie=MIXS.curie('0000998'),
                   model_uri=MIXS_6_2_RC.samp_type, domain=None, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.samp_weather = Slot(uri=MIXS['0000827'], name="samp_weather", curie=MIXS.curie('0000827'),
                   model_uri=MIXS_6_2_RC.samp_weather, domain=None, range=Optional[Union[str, "SAMPWEATHERENUM"]])

slots.samp_well_name = Slot(uri=MIXS['0000296'], name="samp_well_name", curie=MIXS.curie('0000296'),
                   model_uri=MIXS_6_2_RC.samp_well_name, domain=None, range=Optional[str])

slots.saturates_pc = Slot(uri=MIXS['0000131'], name="saturates_pc", curie=MIXS.curie('0000131'),
                   model_uri=MIXS_6_2_RC.saturates_pc, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);[-+]?[0-9]*\.?[0-9]+ ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.sc_lysis_approach = Slot(uri=MIXS['0000076'], name="sc_lysis_approach", curie=MIXS.curie('0000076'),
                   model_uri=MIXS_6_2_RC.sc_lysis_approach, domain=None, range=Optional[Union[str, "SCLYSISAPPROACHENUM"]])

slots.sc_lysis_method = Slot(uri=MIXS['0000054'], name="sc_lysis_method", curie=MIXS.curie('0000054'),
                   model_uri=MIXS_6_2_RC.sc_lysis_method, domain=None, range=Optional[str])

slots.season = Slot(uri=MIXS['0000829'], name="season", curie=MIXS.curie('0000829'),
                   model_uri=MIXS_6_2_RC.season, domain=None, range=Optional[str],
                   pattern=re.compile(r'^\S+.*\S+ \[[a-zA-Z]{2,}:[a-zA-Z0-9]+\]$'))

slots.season_environment = Slot(uri=MIXS['0001068'], name="season_environment", curie=MIXS.curie('0001068'),
                   model_uri=MIXS_6_2_RC.season_environment, domain=None, range=Optional[Union[str, List[str]]])

slots.season_humidity = Slot(uri=MIXS['0001148'], name="season_humidity", curie=MIXS.curie('0001148'),
                   model_uri=MIXS_6_2_RC.season_humidity, domain=None, range=Optional[float],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.season_precpt = Slot(uri=MIXS['0000645'], name="season_precpt", curie=MIXS.curie('0000645'),
                   model_uri=MIXS_6_2_RC.season_precpt, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.season_temp = Slot(uri=MIXS['0000643'], name="season_temp", curie=MIXS.curie('0000643'),
                   model_uri=MIXS_6_2_RC.season_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.season_use = Slot(uri=MIXS['0000830'], name="season_use", curie=MIXS.curie('0000830'),
                   model_uri=MIXS_6_2_RC.season_use, domain=None, range=Optional[Union[str, "SEASONUSEENUM"]])

slots.secondary_treatment = Slot(uri=MIXS['0000351'], name="secondary_treatment", curie=MIXS.curie('0000351'),
                   model_uri=MIXS_6_2_RC.secondary_treatment, domain=None, range=Optional[str])

slots.sediment_type = Slot(uri=MIXS['0001078'], name="sediment_type", curie=MIXS.curie('0001078'),
                   model_uri=MIXS_6_2_RC.sediment_type, domain=None, range=Optional[Union[str, "SEDIMENTTYPEENUM"]])

slots.seq_meth = Slot(uri=MIXS['0000050'], name="seq_meth", curie=MIXS.curie('0000050'),
                   model_uri=MIXS_6_2_RC.seq_meth, domain=None, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+)|(([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\])$'))

slots.seq_quality_check = Slot(uri=MIXS['0000051'], name="seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=MIXS_6_2_RC.seq_quality_check, domain=None, range=Optional[Union[str, "SEQQUALITYCHECKENUM"]])

slots.sequencing_kit = Slot(uri=MIXS['0001155'], name="sequencing_kit", curie=MIXS.curie('0001155'),
                   model_uri=MIXS_6_2_RC.sequencing_kit, domain=None, range=Optional[str])

slots.sequencing_location = Slot(uri=MIXS['0001156'], name="sequencing_location", curie=MIXS.curie('0001156'),
                   model_uri=MIXS_6_2_RC.sequencing_location, domain=None, range=Optional[str])

slots.serovar_or_serotype = Slot(uri=MIXS['0001157'], name="serovar_or_serotype", curie=MIXS.curie('0001157'),
                   model_uri=MIXS_6_2_RC.serovar_or_serotype, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^(([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\])|[1-9][0-9]*$'))

slots.sewage_type = Slot(uri=MIXS['0000215'], name="sewage_type", curie=MIXS.curie('0000215'),
                   model_uri=MIXS_6_2_RC.sewage_type, domain=None, range=Optional[str])

slots.sexual_act = Slot(uri=MIXS['0000285'], name="sexual_act", curie=MIXS.curie('0000285'),
                   model_uri=MIXS_6_2_RC.sexual_act, domain=None, range=Optional[str])

slots.shad_dev_water_mold = Slot(uri=MIXS['0000834'], name="shad_dev_water_mold", curie=MIXS.curie('0000834'),
                   model_uri=MIXS_6_2_RC.shad_dev_water_mold, domain=None, range=Optional[Union[str, "SHAREDENUM1"]])

slots.shading_device_cond = Slot(uri=MIXS['0000831'], name="shading_device_cond", curie=MIXS.curie('0000831'),
                   model_uri=MIXS_6_2_RC.shading_device_cond, domain=None, range=Optional[Union[str, "SHAREDENUM2"]])

slots.shading_device_loc = Slot(uri=MIXS['0000832'], name="shading_device_loc", curie=MIXS.curie('0000832'),
                   model_uri=MIXS_6_2_RC.shading_device_loc, domain=None, range=Optional[Union[str, "SHADINGDEVICELOCENUM"]])

slots.shading_device_mat = Slot(uri=MIXS['0000245'], name="shading_device_mat", curie=MIXS.curie('0000245'),
                   model_uri=MIXS_6_2_RC.shading_device_mat, domain=None, range=Optional[str])

slots.shading_device_type = Slot(uri=MIXS['0000835'], name="shading_device_type", curie=MIXS.curie('0000835'),
                   model_uri=MIXS_6_2_RC.shading_device_type, domain=None, range=Optional[Union[str, "SHADINGDEVICETYPEENUM"]])

slots.sieving = Slot(uri=MIXS['0000322'], name="sieving", curie=MIXS.curie('0000322'),
                   model_uri=MIXS_6_2_RC.sieving, domain=None, range=Optional[str])

slots.silicate = Slot(uri=MIXS['0000184'], name="silicate", curie=MIXS.curie('0000184'),
                   model_uri=MIXS_6_2_RC.silicate, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.sim_search_meth = Slot(uri=MIXS['0000063'], name="sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS_6_2_RC.sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.size_frac = Slot(uri=MIXS['0000017'], name="size_frac", curie=MIXS.curie('0000017'),
                   model_uri=MIXS_6_2_RC.size_frac, domain=None, range=Optional[str])

slots.size_frac_low = Slot(uri=MIXS['0000735'], name="size_frac_low", curie=MIXS.curie('0000735'),
                   model_uri=MIXS_6_2_RC.size_frac_low, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.size_frac_up = Slot(uri=MIXS['0000736'], name="size_frac_up", curie=MIXS.curie('0000736'),
                   model_uri=MIXS_6_2_RC.size_frac_up, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.slope_aspect = Slot(uri=MIXS['0000647'], name="slope_aspect", curie=MIXS.curie('0000647'),
                   model_uri=MIXS_6_2_RC.slope_aspect, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.slope_gradient = Slot(uri=MIXS['0000646'], name="slope_gradient", curie=MIXS.curie('0000646'),
                   model_uri=MIXS_6_2_RC.slope_gradient, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.sludge_retent_time = Slot(uri=MIXS['0000669'], name="sludge_retent_time", curie=MIXS.curie('0000669'),
                   model_uri=MIXS_6_2_RC.sludge_retent_time, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.smoker = Slot(uri=MIXS['0000262'], name="smoker", curie=MIXS.curie('0000262'),
                   model_uri=MIXS_6_2_RC.smoker, domain=None, range=Optional[Union[bool, Bool]])

slots.sodium = Slot(uri=MIXS['0000428'], name="sodium", curie=MIXS.curie('0000428'),
                   model_uri=MIXS_6_2_RC.sodium, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.soil_conductivity = Slot(uri=MIXS['0001158'], name="soil_conductivity", curie=MIXS.curie('0001158'),
                   model_uri=MIXS_6_2_RC.soil_conductivity, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.soil_cover = Slot(uri=MIXS['0001159'], name="soil_cover", curie=MIXS.curie('0001159'),
                   model_uri=MIXS_6_2_RC.soil_cover, domain=None, range=Optional[str])

slots.soil_horizon = Slot(uri=MIXS['0001082'], name="soil_horizon", curie=MIXS.curie('0001082'),
                   model_uri=MIXS_6_2_RC.soil_horizon, domain=None, range=Optional[Union[str, "SOILHORIZONENUM"]])

slots.soil_pH = Slot(uri=MIXS['0001160'], name="soil_pH", curie=MIXS.curie('0001160'),
                   model_uri=MIXS_6_2_RC.soil_pH, domain=None, range=Optional[float])

slots.soil_porosity = Slot(uri=MIXS['0001162'], name="soil_porosity", curie=MIXS.curie('0001162'),
                   model_uri=MIXS_6_2_RC.soil_porosity, domain=None, range=Optional[str])

slots.soil_temp = Slot(uri=MIXS['0001163'], name="soil_temp", curie=MIXS.curie('0001163'),
                   model_uri=MIXS_6_2_RC.soil_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.soil_texture = Slot(uri=MIXS['0000335'], name="soil_texture", curie=MIXS.curie('0000335'),
                   model_uri=MIXS_6_2_RC.soil_texture, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.soil_texture_class = Slot(uri=MIXS['0001164'], name="soil_texture_class", curie=MIXS.curie('0001164'),
                   model_uri=MIXS_6_2_RC.soil_texture_class, domain=None, range=Optional[Union[str, "SOILTEXTURECLASSENUM"]])

slots.soil_texture_meth = Slot(uri=MIXS['0000336'], name="soil_texture_meth", curie=MIXS.curie('0000336'),
                   model_uri=MIXS_6_2_RC.soil_texture_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.soil_type = Slot(uri=MIXS['0000332'], name="soil_type", curie=MIXS.curie('0000332'),
                   model_uri=MIXS_6_2_RC.soil_type, domain=None, range=Optional[str])

slots.soil_type_meth = Slot(uri=MIXS['0000334'], name="soil_type_meth", curie=MIXS.curie('0000334'),
                   model_uri=MIXS_6_2_RC.soil_type_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.solar_irradiance = Slot(uri=MIXS['0000112'], name="solar_irradiance", curie=MIXS.curie('0000112'),
                   model_uri=MIXS_6_2_RC.solar_irradiance, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.soluble_inorg_mat = Slot(uri=MIXS['0000672'], name="soluble_inorg_mat", curie=MIXS.curie('0000672'),
                   model_uri=MIXS_6_2_RC.soluble_inorg_mat, domain=None, range=Optional[Union[str, List[str]]])

slots.soluble_org_mat = Slot(uri=MIXS['0000673'], name="soluble_org_mat", curie=MIXS.curie('0000673'),
                   model_uri=MIXS_6_2_RC.soluble_org_mat, domain=None, range=Optional[Union[str, List[str]]])

slots.soluble_react_phosp = Slot(uri=MIXS['0000738'], name="soluble_react_phosp", curie=MIXS.curie('0000738'),
                   model_uri=MIXS_6_2_RC.soluble_react_phosp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.sop = Slot(uri=MIXS['0000090'], name="sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS_6_2_RC.sop, domain=None, range=Optional[Union[str, List[str]]])

slots.sort_tech = Slot(uri=MIXS['0000075'], name="sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=MIXS_6_2_RC.sort_tech, domain=None, range=Optional[Union[str, "SORTTECHENUM"]])

slots.source_mat_id = Slot(uri=MIXS['0000026'], name="source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS_6_2_RC.source_mat_id, domain=None, range=Optional[Union[str, List[str]]])

slots.source_uvig = Slot(uri=MIXS['0000035'], name="source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=MIXS_6_2_RC.source_uvig, domain=None, range=Optional[str])

slots.space_typ_state = Slot(uri=MIXS['0000770'], name="space_typ_state", curie=MIXS.curie('0000770'),
                   model_uri=MIXS_6_2_RC.space_typ_state, domain=None, range=Union[str, "SPACETYPSTATEENUM"])

slots.spec_intended_cons = Slot(uri=MIXS['0001234'], name="spec_intended_cons", curie=MIXS.curie('0001234'),
                   model_uri=MIXS_6_2_RC.spec_intended_cons, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.special_diet = Slot(uri=MIXS['0000905'], name="special_diet", curie=MIXS.curie('0000905'),
                   model_uri=MIXS_6_2_RC.special_diet, domain=None, range=Optional[Union[str, List[str]]])

slots.specific = Slot(uri=MIXS['0000836'], name="specific", curie=MIXS.curie('0000836'),
                   model_uri=MIXS_6_2_RC.specific, domain=None, range=Optional[Union[str, "SPECIFICENUM"]])

slots.specific_host = Slot(uri=MIXS['0000029'], name="specific_host", curie=MIXS.curie('0000029'),
                   model_uri=MIXS_6_2_RC.specific_host, domain=None, range=Optional[str])

slots.specific_humidity = Slot(uri=MIXS['0000214'], name="specific_humidity", curie=MIXS.curie('0000214'),
                   model_uri=MIXS_6_2_RC.specific_humidity, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.spikein_AMR = Slot(uri=MIXS['0001235'], name="spikein_AMR", curie=MIXS.curie('0001235'),
                   model_uri=MIXS_6_2_RC.spikein_AMR, domain=None, range=Optional[Union[str, List[str]]])

slots.spikein_antibiotic = Slot(uri=MIXS['0001171'], name="spikein_antibiotic", curie=MIXS.curie('0001171'),
                   model_uri=MIXS_6_2_RC.spikein_antibiotic, domain=None, range=Optional[Union[str, List[str]]])

slots.spikein_count = Slot(uri=MIXS['0001335'], name="spikein_count", curie=MIXS.curie('0001335'),
                   model_uri=MIXS_6_2_RC.spikein_count, domain=None, range=Optional[str])

slots.spikein_growth_med = Slot(uri=MIXS['0001169'], name="spikein_growth_med", curie=MIXS.curie('0001169'),
                   model_uri=MIXS_6_2_RC.spikein_growth_med, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+)|(([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\])$'))

slots.spikein_metal = Slot(uri=MIXS['0001172'], name="spikein_metal", curie=MIXS.curie('0001172'),
                   model_uri=MIXS_6_2_RC.spikein_metal, domain=None, range=Optional[Union[str, List[str]]])

slots.spikein_org = Slot(uri=MIXS['0001167'], name="spikein_org", curie=MIXS.curie('0001167'),
                   model_uri=MIXS_6_2_RC.spikein_org, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^(([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\])|[1-9][0-9]*$'))

slots.spikein_serovar = Slot(uri=MIXS['0001168'], name="spikein_serovar", curie=MIXS.curie('0001168'),
                   model_uri=MIXS_6_2_RC.spikein_serovar, domain=None, range=Optional[Union[str, List[str]]])

slots.spikein_strain = Slot(uri=MIXS['0001170'], name="spikein_strain", curie=MIXS.curie('0001170'),
                   model_uri=MIXS_6_2_RC.spikein_strain, domain=None, range=Optional[Union[str, List[str]]])

slots.sr_dep_env = Slot(uri=MIXS['0000996'], name="sr_dep_env", curie=MIXS.curie('0000996'),
                   model_uri=MIXS_6_2_RC.sr_dep_env, domain=None, range=Optional[Union[str, "SRDEPENVENUM"]])

slots.sr_geol_age = Slot(uri=MIXS['0000997'], name="sr_geol_age", curie=MIXS.curie('0000997'),
                   model_uri=MIXS_6_2_RC.sr_geol_age, domain=None, range=Optional[Union[str, "SHAREDENUM5"]])

slots.sr_kerog_type = Slot(uri=MIXS['0000994'], name="sr_kerog_type", curie=MIXS.curie('0000994'),
                   model_uri=MIXS_6_2_RC.sr_kerog_type, domain=None, range=Optional[Union[str, "SRKEROGTYPEENUM"]])

slots.sr_lithology = Slot(uri=MIXS['0000995'], name="sr_lithology", curie=MIXS.curie('0000995'),
                   model_uri=MIXS_6_2_RC.sr_lithology, domain=None, range=Optional[Union[str, "SRLITHOLOGYENUM"]])

slots.standing_water_regm = Slot(uri=MIXS['0001069'], name="standing_water_regm", curie=MIXS.curie('0001069'),
                   model_uri=MIXS_6_2_RC.standing_water_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.ster_meth_samp_room = Slot(uri=MIXS['0001259'], name="ster_meth_samp_room", curie=MIXS.curie('0001259'),
                   model_uri=MIXS_6_2_RC.ster_meth_samp_room, domain=None, range=Optional[Union[str, List[str]]])

slots.store_cond = Slot(uri=MIXS['0000327'], name="store_cond", curie=MIXS.curie('0000327'),
                   model_uri=MIXS_6_2_RC.store_cond, domain=None, range=Optional[str])

slots.study_complt_stat = Slot(uri=MIXS['0000898'], name="study_complt_stat", curie=MIXS.curie('0000898'),
                   model_uri=MIXS_6_2_RC.study_complt_stat, domain=None, range=Optional[str])

slots.study_design = Slot(uri=MIXS['0001236'], name="study_design", curie=MIXS.curie('0001236'),
                   model_uri=MIXS_6_2_RC.study_design, domain=None, range=Optional[Union[str, List[str]]])

slots.study_inc_dur = Slot(uri=MIXS['0001237'], name="study_inc_dur", curie=MIXS.curie('0001237'),
                   model_uri=MIXS_6_2_RC.study_inc_dur, domain=None, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.study_inc_temp = Slot(uri=MIXS['0001238'], name="study_inc_temp", curie=MIXS.curie('0001238'),
                   model_uri=MIXS_6_2_RC.study_inc_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.study_timecourse = Slot(uri=MIXS['0001239'], name="study_timecourse", curie=MIXS.curie('0001239'),
                   model_uri=MIXS_6_2_RC.study_timecourse, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.study_tmnt = Slot(uri=MIXS['0001240'], name="study_tmnt", curie=MIXS.curie('0001240'),
                   model_uri=MIXS_6_2_RC.study_tmnt, domain=None, range=Optional[Union[str, List[str]]])

slots.subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS_6_2_RC.subspecf_gen_lin, domain=None, range=Optional[str])

slots.substructure_type = Slot(uri=MIXS['0000767'], name="substructure_type", curie=MIXS.curie('0000767'),
                   model_uri=MIXS_6_2_RC.substructure_type, domain=None, range=Optional[Union[Union[str, "SUBSTRUCTURETYPEENUM"], List[Union[str, "SUBSTRUCTURETYPEENUM"]]]])

slots.sulfate = Slot(uri=MIXS['0000423'], name="sulfate", curie=MIXS.curie('0000423'),
                   model_uri=MIXS_6_2_RC.sulfate, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.sulfate_fw = Slot(uri=MIXS['0000407'], name="sulfate_fw", curie=MIXS.curie('0000407'),
                   model_uri=MIXS_6_2_RC.sulfate_fw, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.sulfide = Slot(uri=MIXS['0000424'], name="sulfide", curie=MIXS.curie('0000424'),
                   model_uri=MIXS_6_2_RC.sulfide, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.surf_air_cont = Slot(uri=MIXS['0000759'], name="surf_air_cont", curie=MIXS.curie('0000759'),
                   model_uri=MIXS_6_2_RC.surf_air_cont, domain=None, range=Optional[Union[Union[str, "SURFAIRCONTENUM"], List[Union[str, "SURFAIRCONTENUM"]]]])

slots.surf_humidity = Slot(uri=MIXS['0000123'], name="surf_humidity", curie=MIXS.curie('0000123'),
                   model_uri=MIXS_6_2_RC.surf_humidity, domain=None, range=Optional[float],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.surf_material = Slot(uri=MIXS['0000758'], name="surf_material", curie=MIXS.curie('0000758'),
                   model_uri=MIXS_6_2_RC.surf_material, domain=None, range=Optional[Union[str, "SURFMATERIALENUM"]])

slots.surf_moisture = Slot(uri=MIXS['0000128'], name="surf_moisture", curie=MIXS.curie('0000128'),
                   model_uri=MIXS_6_2_RC.surf_moisture, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.surf_moisture_ph = Slot(uri=MIXS['0000760'], name="surf_moisture_ph", curie=MIXS.curie('0000760'),
                   model_uri=MIXS_6_2_RC.surf_moisture_ph, domain=None, range=Optional[float])

slots.surf_temp = Slot(uri=MIXS['0000125'], name="surf_temp", curie=MIXS.curie('0000125'),
                   model_uri=MIXS_6_2_RC.surf_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.suspend_part_matter = Slot(uri=MIXS['0000741'], name="suspend_part_matter", curie=MIXS.curie('0000741'),
                   model_uri=MIXS_6_2_RC.suspend_part_matter, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.suspend_solids = Slot(uri=MIXS['0000150'], name="suspend_solids", curie=MIXS.curie('0000150'),
                   model_uri=MIXS_6_2_RC.suspend_solids, domain=None, range=Optional[Union[str, List[str]]])

slots.sym_life_cycle_type = Slot(uri=MIXS['0001300'], name="sym_life_cycle_type", curie=MIXS.curie('0001300'),
                   model_uri=MIXS_6_2_RC.sym_life_cycle_type, domain=None, range=Union[str, "SYMLIFECYCLETYPEENUM"])

slots.symbiont_host_role = Slot(uri=MIXS['0001303'], name="symbiont_host_role", curie=MIXS.curie('0001303'),
                   model_uri=MIXS_6_2_RC.symbiont_host_role, domain=None, range=Optional[Union[str, "SYMBIONTHOSTROLEENUM"]])

slots.tan = Slot(uri=MIXS['0000120'], name="tan", curie=MIXS.curie('0000120'),
                   model_uri=MIXS_6_2_RC.tan, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.target_gene = Slot(uri=MIXS['0000044'], name="target_gene", curie=MIXS.curie('0000044'),
                   model_uri=MIXS_6_2_RC.target_gene, domain=None, range=Optional[str])

slots.target_subfragment = Slot(uri=MIXS['0000045'], name="target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=MIXS_6_2_RC.target_subfragment, domain=None, range=Optional[str])

slots.tax_class = Slot(uri=MIXS['0000064'], name="tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS_6_2_RC.tax_class, domain=None, range=Optional[str])

slots.tax_ident = Slot(uri=MIXS['0000053'], name="tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS_6_2_RC.tax_ident, domain=None, range=Optional[Union[str, "TAXIDENTENUM"]])

slots.temp = Slot(uri=MIXS['0000113'], name="temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.temp_out = Slot(uri=MIXS['0000197'], name="temp_out", curie=MIXS.curie('0000197'),
                   model_uri=MIXS_6_2_RC.temp_out, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.tertiary_treatment = Slot(uri=MIXS['0000352'], name="tertiary_treatment", curie=MIXS.curie('0000352'),
                   model_uri=MIXS_6_2_RC.tertiary_treatment, domain=None, range=Optional[str])

slots.tidal_stage = Slot(uri=MIXS['0000750'], name="tidal_stage", curie=MIXS.curie('0000750'),
                   model_uri=MIXS_6_2_RC.tidal_stage, domain=None, range=Optional[Union[str, "TIDALSTAGEENUM"]])

slots.tillage = Slot(uri=MIXS['0001081'], name="tillage", curie=MIXS.curie('0001081'),
                   model_uri=MIXS_6_2_RC.tillage, domain=None, range=Optional[Union[Union[str, "TILLAGEENUM"], List[Union[str, "TILLAGEENUM"]]]])

slots.time_last_toothbrush = Slot(uri=MIXS['0000924'], name="time_last_toothbrush", curie=MIXS.curie('0000924'),
                   model_uri=MIXS_6_2_RC.time_last_toothbrush, domain=None, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.time_since_last_wash = Slot(uri=MIXS['0000943'], name="time_since_last_wash", curie=MIXS.curie('0000943'),
                   model_uri=MIXS_6_2_RC.time_since_last_wash, domain=None, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.timepoint = Slot(uri=MIXS['0001173'], name="timepoint", curie=MIXS.curie('0001173'),
                   model_uri=MIXS_6_2_RC.timepoint, domain=None, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.tiss_cult_growth_med = Slot(uri=MIXS['0001070'], name="tiss_cult_growth_med", curie=MIXS.curie('0001070'),
                   model_uri=MIXS_6_2_RC.tiss_cult_growth_med, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.toluene = Slot(uri=MIXS['0000154'], name="toluene", curie=MIXS.curie('0000154'),
                   model_uri=MIXS_6_2_RC.toluene, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.tot_carb = Slot(uri=MIXS['0000525'], name="tot_carb", curie=MIXS.curie('0000525'),
                   model_uri=MIXS_6_2_RC.tot_carb, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.tot_depth_water_col = Slot(uri=MIXS['0000634'], name="tot_depth_water_col", curie=MIXS.curie('0000634'),
                   model_uri=MIXS_6_2_RC.tot_depth_water_col, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.tot_diss_nitro = Slot(uri=MIXS['0000744'], name="tot_diss_nitro", curie=MIXS.curie('0000744'),
                   model_uri=MIXS_6_2_RC.tot_diss_nitro, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.tot_inorg_nitro = Slot(uri=MIXS['0000745'], name="tot_inorg_nitro", curie=MIXS.curie('0000745'),
                   model_uri=MIXS_6_2_RC.tot_inorg_nitro, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.tot_iron = Slot(uri=MIXS['0000105'], name="tot_iron", curie=MIXS.curie('0000105'),
                   model_uri=MIXS_6_2_RC.tot_iron, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.tot_nitro = Slot(uri=MIXS['0000102'], name="tot_nitro", curie=MIXS.curie('0000102'),
                   model_uri=MIXS_6_2_RC.tot_nitro, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.tot_nitro_cont_meth = Slot(uri=MIXS['0000338'], name="tot_nitro_cont_meth", curie=MIXS.curie('0000338'),
                   model_uri=MIXS_6_2_RC.tot_nitro_cont_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.tot_nitro_content = Slot(uri=MIXS['0000530'], name="tot_nitro_content", curie=MIXS.curie('0000530'),
                   model_uri=MIXS_6_2_RC.tot_nitro_content, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.tot_org_c_meth = Slot(uri=MIXS['0000337'], name="tot_org_c_meth", curie=MIXS.curie('0000337'),
                   model_uri=MIXS_6_2_RC.tot_org_c_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.tot_org_carb = Slot(uri=MIXS['0000533'], name="tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=MIXS_6_2_RC.tot_org_carb, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.tot_part_carb = Slot(uri=MIXS['0000747'], name="tot_part_carb", curie=MIXS.curie('0000747'),
                   model_uri=MIXS_6_2_RC.tot_part_carb, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.tot_phosp = Slot(uri=MIXS['0000117'], name="tot_phosp", curie=MIXS.curie('0000117'),
                   model_uri=MIXS_6_2_RC.tot_phosp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.tot_phosphate = Slot(uri=MIXS['0000689'], name="tot_phosphate", curie=MIXS.curie('0000689'),
                   model_uri=MIXS_6_2_RC.tot_phosphate, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.tot_sulfur = Slot(uri=MIXS['0000419'], name="tot_sulfur", curie=MIXS.curie('0000419'),
                   model_uri=MIXS_6_2_RC.tot_sulfur, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.train_line = Slot(uri=MIXS['0000837'], name="train_line", curie=MIXS.curie('0000837'),
                   model_uri=MIXS_6_2_RC.train_line, domain=None, range=Optional[Union[str, "TRAINLINEENUM"]])

slots.train_stat_loc = Slot(uri=MIXS['0000838'], name="train_stat_loc", curie=MIXS.curie('0000838'),
                   model_uri=MIXS_6_2_RC.train_stat_loc, domain=None, range=Optional[Union[str, "TRAINSTATLOCENUM"]])

slots.train_stop_loc = Slot(uri=MIXS['0000839'], name="train_stop_loc", curie=MIXS.curie('0000839'),
                   model_uri=MIXS_6_2_RC.train_stop_loc, domain=None, range=Optional[Union[str, "TRAINSTOPLOCENUM"]])

slots.travel_out_six_month = Slot(uri=MIXS['0000268'], name="travel_out_six_month", curie=MIXS.curie('0000268'),
                   model_uri=MIXS_6_2_RC.travel_out_six_month, domain=None, range=Optional[Union[str, List[str]]])

slots.trna_ext_software = Slot(uri=MIXS['0000068'], name="trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=MIXS_6_2_RC.trna_ext_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.trnas = Slot(uri=MIXS['0000067'], name="trnas", curie=MIXS.curie('0000067'),
                   model_uri=MIXS_6_2_RC.trnas, domain=None, range=Optional[str])

slots.trophic_level = Slot(uri=MIXS['0000032'], name="trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=MIXS_6_2_RC.trophic_level, domain=None, range=Optional[Union[str, "TROPHICLEVELENUM"]])

slots.turbidity = Slot(uri=MIXS['0000191'], name="turbidity", curie=MIXS.curie('0000191'),
                   model_uri=MIXS_6_2_RC.turbidity, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.tvdss_of_hcr_press = Slot(uri=MIXS['0000397'], name="tvdss_of_hcr_press", curie=MIXS.curie('0000397'),
                   model_uri=MIXS_6_2_RC.tvdss_of_hcr_press, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.tvdss_of_hcr_temp = Slot(uri=MIXS['0000394'], name="tvdss_of_hcr_temp", curie=MIXS.curie('0000394'),
                   model_uri=MIXS_6_2_RC.tvdss_of_hcr_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.twin_sibling = Slot(uri=MIXS['0000326'], name="twin_sibling", curie=MIXS.curie('0000326'),
                   model_uri=MIXS_6_2_RC.twin_sibling, domain=None, range=Optional[Union[bool, Bool]])

slots.typ_occup_density = Slot(uri=MIXS['0000771'], name="typ_occup_density", curie=MIXS.curie('0000771'),
                   model_uri=MIXS_6_2_RC.typ_occup_density, domain=None, range=float)

slots.type_of_symbiosis = Slot(uri=MIXS['0001307'], name="type_of_symbiosis", curie=MIXS.curie('0001307'),
                   model_uri=MIXS_6_2_RC.type_of_symbiosis, domain=None, range=Optional[Union[str, "TYPEOFSYMBIOSISENUM"]])

slots.urine_collect_meth = Slot(uri=MIXS['0000899'], name="urine_collect_meth", curie=MIXS.curie('0000899'),
                   model_uri=MIXS_6_2_RC.urine_collect_meth, domain=None, range=Optional[Union[str, "URINECOLLECTMETHENUM"]])

slots.urobiom_sex = Slot(uri=MIXS['0000862'], name="urobiom_sex", curie=MIXS.curie('0000862'),
                   model_uri=MIXS_6_2_RC.urobiom_sex, domain=None, range=Optional[Union[str, "UROBIOMSEXENUM"]])

slots.urogenit_disord = Slot(uri=MIXS['0000289'], name="urogenit_disord", curie=MIXS.curie('0000289'),
                   model_uri=MIXS_6_2_RC.urogenit_disord, domain=None, range=Optional[Union[str, List[str]]])

slots.urogenit_tract_disor = Slot(uri=MIXS['0000278'], name="urogenit_tract_disor", curie=MIXS.curie('0000278'),
                   model_uri=MIXS_6_2_RC.urogenit_tract_disor, domain=None, range=Optional[Union[str, List[str]]])

slots.ventilation_rate = Slot(uri=MIXS['0000114'], name="ventilation_rate", curie=MIXS.curie('0000114'),
                   model_uri=MIXS_6_2_RC.ventilation_rate, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.ventilation_type = Slot(uri=MIXS['0000756'], name="ventilation_type", curie=MIXS.curie('0000756'),
                   model_uri=MIXS_6_2_RC.ventilation_type, domain=None, range=Optional[Union[str, List[str]]])

slots.vfa = Slot(uri=MIXS['0000152'], name="vfa", curie=MIXS.curie('0000152'),
                   model_uri=MIXS_6_2_RC.vfa, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.vfa_fw = Slot(uri=MIXS['0000408'], name="vfa_fw", curie=MIXS.curie('0000408'),
                   model_uri=MIXS_6_2_RC.vfa_fw, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.vir_ident_software = Slot(uri=MIXS['0000081'], name="vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=MIXS_6_2_RC.vir_ident_software, domain=None, range=Optional[str])

slots.virus_enrich_appr = Slot(uri=MIXS['0000036'], name="virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=MIXS_6_2_RC.virus_enrich_appr, domain=None, range=Optional[Union[str, "VIRUSENRICHAPPRENUM"]])

slots.vis_media = Slot(uri=MIXS['0000840'], name="vis_media", curie=MIXS.curie('0000840'),
                   model_uri=MIXS_6_2_RC.vis_media, domain=None, range=Optional[str])

slots.viscosity = Slot(uri=MIXS['0000126'], name="viscosity", curie=MIXS.curie('0000126'),
                   model_uri=MIXS_6_2_RC.viscosity, domain=None, range=Optional[str])

slots.volatile_org_comp = Slot(uri=MIXS['0000115'], name="volatile_org_comp", curie=MIXS.curie('0000115'),
                   model_uri=MIXS_6_2_RC.volatile_org_comp, domain=None, range=Optional[Union[str, List[str]]])

slots.wall_area = Slot(uri=MIXS['0000198'], name="wall_area", curie=MIXS.curie('0000198'),
                   model_uri=MIXS_6_2_RC.wall_area, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.wall_const_type = Slot(uri=MIXS['0000841'], name="wall_const_type", curie=MIXS.curie('0000841'),
                   model_uri=MIXS_6_2_RC.wall_const_type, domain=None, range=Optional[Union[str, "WALLCONSTTYPEENUM"]])

slots.wall_finish_mat = Slot(uri=MIXS['0000842'], name="wall_finish_mat", curie=MIXS.curie('0000842'),
                   model_uri=MIXS_6_2_RC.wall_finish_mat, domain=None, range=Optional[Union[str, "WALLFINISHMATENUM"]])

slots.wall_height = Slot(uri=MIXS['0000221'], name="wall_height", curie=MIXS.curie('0000221'),
                   model_uri=MIXS_6_2_RC.wall_height, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.wall_loc = Slot(uri=MIXS['0000843'], name="wall_loc", curie=MIXS.curie('0000843'),
                   model_uri=MIXS_6_2_RC.wall_loc, domain=None, range=Optional[Union[str, "SHAREDENUM0"]])

slots.wall_surf_treatment = Slot(uri=MIXS['0000845'], name="wall_surf_treatment", curie=MIXS.curie('0000845'),
                   model_uri=MIXS_6_2_RC.wall_surf_treatment, domain=None, range=Optional[Union[str, "WALLSURFTREATMENTENUM"]])

slots.wall_texture = Slot(uri=MIXS['0000846'], name="wall_texture", curie=MIXS.curie('0000846'),
                   model_uri=MIXS_6_2_RC.wall_texture, domain=None, range=Optional[Union[str, "SHAREDENUM4"]])

slots.wall_thermal_mass = Slot(uri=MIXS['0000222'], name="wall_thermal_mass", curie=MIXS.curie('0000222'),
                   model_uri=MIXS_6_2_RC.wall_thermal_mass, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.wall_water_mold = Slot(uri=MIXS['0000844'], name="wall_water_mold", curie=MIXS.curie('0000844'),
                   model_uri=MIXS_6_2_RC.wall_water_mold, domain=None, range=Optional[Union[str, "SHAREDENUM1"]])

slots.wastewater_type = Slot(uri=MIXS['0000353'], name="wastewater_type", curie=MIXS.curie('0000353'),
                   model_uri=MIXS_6_2_RC.wastewater_type, domain=None, range=Optional[str])

slots.water_cont_soil_meth = Slot(uri=MIXS['0000323'], name="water_cont_soil_meth", curie=MIXS.curie('0000323'),
                   model_uri=MIXS_6_2_RC.water_cont_soil_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.water_content = Slot(uri=MIXS['0000185'], name="water_content", curie=MIXS.curie('0000185'),
                   model_uri=MIXS_6_2_RC.water_content, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.water_current = Slot(uri=MIXS['0000203'], name="water_current", curie=MIXS.curie('0000203'),
                   model_uri=MIXS_6_2_RC.water_current, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.water_cut = Slot(uri=MIXS['0000454'], name="water_cut", curie=MIXS.curie('0000454'),
                   model_uri=MIXS_6_2_RC.water_cut, domain=None, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.water_feat_size = Slot(uri=MIXS['0000223'], name="water_feat_size", curie=MIXS.curie('0000223'),
                   model_uri=MIXS_6_2_RC.water_feat_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.water_feat_type = Slot(uri=MIXS['0000847'], name="water_feat_type", curie=MIXS.curie('0000847'),
                   model_uri=MIXS_6_2_RC.water_feat_type, domain=None, range=Optional[Union[str, "WATERFEATTYPEENUM"]])

slots.water_frequency = Slot(uri=MIXS['0001174'], name="water_frequency", curie=MIXS.curie('0001174'),
                   model_uri=MIXS_6_2_RC.water_frequency, domain=None, range=Optional[str])

slots.water_pH = Slot(uri=MIXS['0001175'], name="water_pH", curie=MIXS.curie('0001175'),
                   model_uri=MIXS_6_2_RC.water_pH, domain=None, range=Optional[float])

slots.water_prod_rate = Slot(uri=MIXS['0000453'], name="water_prod_rate", curie=MIXS.curie('0000453'),
                   model_uri=MIXS_6_2_RC.water_prod_rate, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.water_source_adjac = Slot(uri=MIXS['0001122'], name="water_source_adjac", curie=MIXS.curie('0001122'),
                   model_uri=MIXS_6_2_RC.water_source_adjac, domain=None, range=Optional[Union[str, List[str]]])

slots.water_source_shared = Slot(uri=MIXS['0001176'], name="water_source_shared", curie=MIXS.curie('0001176'),
                   model_uri=MIXS_6_2_RC.water_source_shared, domain=None, range=Optional[Union[str, List[str]]])

slots.water_temp_regm = Slot(uri=MIXS['0000590'], name="water_temp_regm", curie=MIXS.curie('0000590'),
                   model_uri=MIXS_6_2_RC.water_temp_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.watering_regm = Slot(uri=MIXS['0000591'], name="watering_regm", curie=MIXS.curie('0000591'),
                   model_uri=MIXS_6_2_RC.watering_regm, domain=None, range=Optional[Union[str, List[str]]])

slots.weekday = Slot(uri=MIXS['0000848'], name="weekday", curie=MIXS.curie('0000848'),
                   model_uri=MIXS_6_2_RC.weekday, domain=None, range=Optional[Union[str, "WEEKDAYENUM"]])

slots.weight_loss_3_month = Slot(uri=MIXS['0000295'], name="weight_loss_3_month", curie=MIXS.curie('0000295'),
                   model_uri=MIXS_6_2_RC.weight_loss_3_month, domain=None, range=Optional[str])

slots.wga_amp_appr = Slot(uri=MIXS['0000055'], name="wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=MIXS_6_2_RC.wga_amp_appr, domain=None, range=Optional[Union[str, "WGAAMPAPPRENUM"]])

slots.wga_amp_kit = Slot(uri=MIXS['0000006'], name="wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=MIXS_6_2_RC.wga_amp_kit, domain=None, range=Optional[str])

slots.win = Slot(uri=MIXS['0000297'], name="win", curie=MIXS.curie('0000297'),
                   model_uri=MIXS_6_2_RC.win, domain=None, range=Optional[str])

slots.wind_direction = Slot(uri=MIXS['0000757'], name="wind_direction", curie=MIXS.curie('0000757'),
                   model_uri=MIXS_6_2_RC.wind_direction, domain=None, range=Optional[str])

slots.wind_speed = Slot(uri=MIXS['0000118'], name="wind_speed", curie=MIXS.curie('0000118'),
                   model_uri=MIXS_6_2_RC.wind_speed, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.window_cond = Slot(uri=MIXS['0000849'], name="window_cond", curie=MIXS.curie('0000849'),
                   model_uri=MIXS_6_2_RC.window_cond, domain=None, range=Optional[Union[str, "SHAREDENUM2"]])

slots.window_cover = Slot(uri=MIXS['0000850'], name="window_cover", curie=MIXS.curie('0000850'),
                   model_uri=MIXS_6_2_RC.window_cover, domain=None, range=Optional[Union[str, "WINDOWCOVERENUM"]])

slots.window_horiz_pos = Slot(uri=MIXS['0000851'], name="window_horiz_pos", curie=MIXS.curie('0000851'),
                   model_uri=MIXS_6_2_RC.window_horiz_pos, domain=None, range=Optional[Union[str, "WINDOWHORIZPOSENUM"]])

slots.window_loc = Slot(uri=MIXS['0000852'], name="window_loc", curie=MIXS.curie('0000852'),
                   model_uri=MIXS_6_2_RC.window_loc, domain=None, range=Optional[Union[str, "SHAREDENUM0"]])

slots.window_mat = Slot(uri=MIXS['0000853'], name="window_mat", curie=MIXS.curie('0000853'),
                   model_uri=MIXS_6_2_RC.window_mat, domain=None, range=Optional[Union[str, "WINDOWMATENUM"]])

slots.window_open_freq = Slot(uri=MIXS['0000246'], name="window_open_freq", curie=MIXS.curie('0000246'),
                   model_uri=MIXS_6_2_RC.window_open_freq, domain=None, range=Optional[int])

slots.window_size = Slot(uri=MIXS['0000224'], name="window_size", curie=MIXS.curie('0000224'),
                   model_uri=MIXS_6_2_RC.window_size, domain=None, range=Optional[str])

slots.window_status = Slot(uri=MIXS['0000855'], name="window_status", curie=MIXS.curie('0000855'),
                   model_uri=MIXS_6_2_RC.window_status, domain=None, range=Optional[Union[str, "WINDOWSTATUSENUM"]])

slots.window_type = Slot(uri=MIXS['0000856'], name="window_type", curie=MIXS.curie('0000856'),
                   model_uri=MIXS_6_2_RC.window_type, domain=None, range=Optional[Union[str, "WINDOWTYPEENUM"]])

slots.window_vert_pos = Slot(uri=MIXS['0000857'], name="window_vert_pos", curie=MIXS.curie('0000857'),
                   model_uri=MIXS_6_2_RC.window_vert_pos, domain=None, range=Optional[Union[str, "WINDOWVERTPOSENUM"]])

slots.window_water_mold = Slot(uri=MIXS['0000854'], name="window_water_mold", curie=MIXS.curie('0000854'),
                   model_uri=MIXS_6_2_RC.window_water_mold, domain=None, range=Optional[Union[str, "SHAREDENUM1"]])

slots.x16s_recover = Slot(uri=MIXS['0000065'], name="x16s_recover", curie=MIXS.curie('0000065'),
                   model_uri=MIXS_6_2_RC.x16s_recover, domain=None, range=Optional[Union[bool, Bool]])

slots.x16s_recover_software = Slot(uri=MIXS['0000066'], name="x16s_recover_software", curie=MIXS.curie('0000066'),
                   model_uri=MIXS_6_2_RC.x16s_recover_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.xylene = Slot(uri=MIXS['0000156'], name="xylene", curie=MIXS.curie('0000156'),
                   model_uri=MIXS_6_2_RC.xylene, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsBa_adapters = Slot(uri=MIXS['0000048'], name="MigsBa_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS_6_2_RC.MigsBa_adapters, domain=None, range=Optional[str])

slots.MigsBa_alt = Slot(uri=MIXS['0000094'], name="MigsBa_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS_6_2_RC.MigsBa_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsBa_annot = Slot(uri=MIXS['0000059'], name="MigsBa_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS_6_2_RC.MigsBa_annot, domain=None, range=Optional[str])

slots.MigsBa_assembly_name = Slot(uri=MIXS['0000057'], name="MigsBa_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS_6_2_RC.MigsBa_assembly_name, domain=None, range=Optional[str])

slots.MigsBa_assembly_qual = Slot(uri=MIXS['0000056'], name="MigsBa_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS_6_2_RC.MigsBa_assembly_qual, domain=None, range=str)

slots.MigsBa_assembly_software = Slot(uri=MIXS['0000058'], name="MigsBa_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS_6_2_RC.MigsBa_assembly_software, domain=None, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsBa_biotic_relationship = Slot(uri=MIXS['0000028'], name="MigsBa_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=MIXS_6_2_RC.MigsBa_biotic_relationship, domain=None, range=Optional[Union[str, "BIOTICRELATIONSHIPENUM"]])

slots.MigsBa_compl_score = Slot(uri=MIXS['0000069'], name="MigsBa_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS_6_2_RC.MigsBa_compl_score, domain=None, range=Optional[str])

slots.MigsBa_compl_software = Slot(uri=MIXS['0000070'], name="MigsBa_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS_6_2_RC.MigsBa_compl_software, domain=None, range=Optional[str])

slots.MigsBa_depth = Slot(uri=MIXS['0000018'], name="MigsBa_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.MigsBa_depth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsBa_elev = Slot(uri=MIXS['0000093'], name="MigsBa_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.MigsBa_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsBa_encoded_traits = Slot(uri=MIXS['0000034'], name="MigsBa_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=MIXS_6_2_RC.MigsBa_encoded_traits, domain=None, range=Optional[str])

slots.MigsBa_estimated_size = Slot(uri=MIXS['0000024'], name="MigsBa_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=MIXS_6_2_RC.MigsBa_estimated_size, domain=None, range=Optional[str])

slots.MigsBa_experimental_factor = Slot(uri=MIXS['0000008'], name="MigsBa_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS_6_2_RC.MigsBa_experimental_factor, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^\S+.*\S+ \[[a-zA-Z]{2,}:\d+\]$'))

slots.MigsBa_extrachrom_elements = Slot(uri=MIXS['0000023'], name="MigsBa_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=MIXS_6_2_RC.MigsBa_extrachrom_elements, domain=None, range=Optional[int])

slots.MigsBa_feat_pred = Slot(uri=MIXS['0000061'], name="MigsBa_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS_6_2_RC.MigsBa_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsBa_host_disease_stat = Slot(uri=MIXS['0000031'], name="MigsBa_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS_6_2_RC.MigsBa_host_disease_stat, domain=None, range=Optional[str])

slots.MigsBa_host_spec_range = Slot(uri=MIXS['0000030'], name="MigsBa_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=MIXS_6_2_RC.MigsBa_host_spec_range, domain=None, range=Optional[Union[str, List[str]]])

slots.MigsBa_isol_growth_condt = Slot(uri=MIXS['0000003'], name="MigsBa_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS_6_2_RC.MigsBa_isol_growth_condt, domain=None, range=str,
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsBa_lib_layout = Slot(uri=MIXS['0000041'], name="MigsBa_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS_6_2_RC.MigsBa_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.MigsBa_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="MigsBa_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS_6_2_RC.MigsBa_lib_reads_seqd, domain=None, range=Optional[int])

slots.MigsBa_lib_screen = Slot(uri=MIXS['0000043'], name="MigsBa_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS_6_2_RC.MigsBa_lib_screen, domain=None, range=Optional[str])

slots.MigsBa_lib_size = Slot(uri=MIXS['0000039'], name="MigsBa_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS_6_2_RC.MigsBa_lib_size, domain=None, range=Optional[int])

slots.MigsBa_lib_vector = Slot(uri=MIXS['0000042'], name="MigsBa_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS_6_2_RC.MigsBa_lib_vector, domain=None, range=Optional[str])

slots.MigsBa_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="MigsBa_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS_6_2_RC.MigsBa_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsBa_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="MigsBa_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.MigsBa_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsBa_num_replicons = Slot(uri=MIXS['0000022'], name="MigsBa_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=MIXS_6_2_RC.MigsBa_num_replicons, domain=None, range=int)

slots.MigsBa_number_contig = Slot(uri=MIXS['0000060'], name="MigsBa_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS_6_2_RC.MigsBa_number_contig, domain=None, range=int)

slots.MigsBa_pathogenicity = Slot(uri=MIXS['0000027'], name="MigsBa_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=MIXS_6_2_RC.MigsBa_pathogenicity, domain=None, range=Optional[str])

slots.MigsBa_ref_biomaterial = Slot(uri=MIXS['0000025'], name="MigsBa_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS_6_2_RC.MigsBa_ref_biomaterial, domain=None, range=str,
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsBa_ref_db = Slot(uri=MIXS['0000062'], name="MigsBa_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS_6_2_RC.MigsBa_ref_db, domain=None, range=Optional[str])

slots.MigsBa_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="MigsBa_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=MIXS_6_2_RC.MigsBa_rel_to_oxygen, domain=None, range=Optional[Union[str, "RELTOOXYGENENUM"]])

slots.MigsBa_samp_collect_device = Slot(uri=MIXS['0000002'], name="MigsBa_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.MigsBa_samp_collect_device, domain=None, range=Optional[str])

slots.MigsBa_samp_collect_method = Slot(uri=MIXS['0001225'], name="MigsBa_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=MIXS_6_2_RC.MigsBa_samp_collect_method, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsBa_samp_mat_process = Slot(uri=MIXS['0000016'], name="MigsBa_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS_6_2_RC.MigsBa_samp_mat_process, domain=None, range=Optional[str])

slots.MigsBa_samp_size = Slot(uri=MIXS['0000001'], name="MigsBa_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.MigsBa_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsBa_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MigsBa_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.MigsBa_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsBa_sim_search_meth = Slot(uri=MIXS['0000063'], name="MigsBa_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS_6_2_RC.MigsBa_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsBa_sop = Slot(uri=MIXS['0000090'], name="MigsBa_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS_6_2_RC.MigsBa_sop, domain=None, range=Optional[Union[str, List[str]]])

slots.MigsBa_source_mat_id = Slot(uri=MIXS['0000026'], name="MigsBa_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS_6_2_RC.MigsBa_source_mat_id, domain=None, range=Optional[Union[str, List[str]]])

slots.MigsBa_specific_host = Slot(uri=MIXS['0000029'], name="MigsBa_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=MIXS_6_2_RC.MigsBa_specific_host, domain=None, range=Optional[str])

slots.MigsBa_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="MigsBa_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS_6_2_RC.MigsBa_subspecf_gen_lin, domain=None, range=Optional[str])

slots.MigsBa_tax_class = Slot(uri=MIXS['0000064'], name="MigsBa_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS_6_2_RC.MigsBa_tax_class, domain=None, range=Optional[str])

slots.MigsBa_tax_ident = Slot(uri=MIXS['0000053'], name="MigsBa_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS_6_2_RC.MigsBa_tax_ident, domain=None, range=Optional[Union[str, "TAXIDENTENUM"]])

slots.MigsBa_temp = Slot(uri=MIXS['0000113'], name="MigsBa_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.MigsBa_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsBa_trophic_level = Slot(uri=MIXS['0000032'], name="MigsBa_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=MIXS_6_2_RC.MigsBa_trophic_level, domain=None, range=Optional[Union[str, "TROPHICLEVELENUM"]])

slots.MigsEu_adapters = Slot(uri=MIXS['0000048'], name="MigsEu_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS_6_2_RC.MigsEu_adapters, domain=None, range=Optional[str])

slots.MigsEu_alt = Slot(uri=MIXS['0000094'], name="MigsEu_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS_6_2_RC.MigsEu_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsEu_annot = Slot(uri=MIXS['0000059'], name="MigsEu_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS_6_2_RC.MigsEu_annot, domain=None, range=Optional[str])

slots.MigsEu_assembly_name = Slot(uri=MIXS['0000057'], name="MigsEu_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS_6_2_RC.MigsEu_assembly_name, domain=None, range=Optional[str])

slots.MigsEu_assembly_qual = Slot(uri=MIXS['0000056'], name="MigsEu_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS_6_2_RC.MigsEu_assembly_qual, domain=None, range=str)

slots.MigsEu_assembly_software = Slot(uri=MIXS['0000058'], name="MigsEu_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS_6_2_RC.MigsEu_assembly_software, domain=None, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsEu_biotic_relationship = Slot(uri=MIXS['0000028'], name="MigsEu_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=MIXS_6_2_RC.MigsEu_biotic_relationship, domain=None, range=Optional[Union[str, "BIOTICRELATIONSHIPENUM"]])

slots.MigsEu_compl_score = Slot(uri=MIXS['0000069'], name="MigsEu_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS_6_2_RC.MigsEu_compl_score, domain=None, range=Optional[str])

slots.MigsEu_compl_software = Slot(uri=MIXS['0000070'], name="MigsEu_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS_6_2_RC.MigsEu_compl_software, domain=None, range=Optional[str])

slots.MigsEu_depth = Slot(uri=MIXS['0000018'], name="MigsEu_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.MigsEu_depth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsEu_elev = Slot(uri=MIXS['0000093'], name="MigsEu_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.MigsEu_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsEu_estimated_size = Slot(uri=MIXS['0000024'], name="MigsEu_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=MIXS_6_2_RC.MigsEu_estimated_size, domain=None, range=Optional[str])

slots.MigsEu_experimental_factor = Slot(uri=MIXS['0000008'], name="MigsEu_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS_6_2_RC.MigsEu_experimental_factor, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^\S+.*\S+ \[[a-zA-Z]{2,}:\d+\]$'))

slots.MigsEu_extrachrom_elements = Slot(uri=MIXS['0000023'], name="MigsEu_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=MIXS_6_2_RC.MigsEu_extrachrom_elements, domain=None, range=Optional[int])

slots.MigsEu_feat_pred = Slot(uri=MIXS['0000061'], name="MigsEu_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS_6_2_RC.MigsEu_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsEu_host_disease_stat = Slot(uri=MIXS['0000031'], name="MigsEu_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS_6_2_RC.MigsEu_host_disease_stat, domain=None, range=Optional[str])

slots.MigsEu_host_spec_range = Slot(uri=MIXS['0000030'], name="MigsEu_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=MIXS_6_2_RC.MigsEu_host_spec_range, domain=None, range=Optional[Union[str, List[str]]])

slots.MigsEu_isol_growth_condt = Slot(uri=MIXS['0000003'], name="MigsEu_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS_6_2_RC.MigsEu_isol_growth_condt, domain=None, range=str,
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsEu_lib_layout = Slot(uri=MIXS['0000041'], name="MigsEu_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS_6_2_RC.MigsEu_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.MigsEu_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="MigsEu_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS_6_2_RC.MigsEu_lib_reads_seqd, domain=None, range=Optional[int])

slots.MigsEu_lib_screen = Slot(uri=MIXS['0000043'], name="MigsEu_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS_6_2_RC.MigsEu_lib_screen, domain=None, range=Optional[str])

slots.MigsEu_lib_size = Slot(uri=MIXS['0000039'], name="MigsEu_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS_6_2_RC.MigsEu_lib_size, domain=None, range=Optional[int])

slots.MigsEu_lib_vector = Slot(uri=MIXS['0000042'], name="MigsEu_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS_6_2_RC.MigsEu_lib_vector, domain=None, range=Optional[str])

slots.MigsEu_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="MigsEu_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS_6_2_RC.MigsEu_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsEu_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="MigsEu_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.MigsEu_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsEu_num_replicons = Slot(uri=MIXS['0000022'], name="MigsEu_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=MIXS_6_2_RC.MigsEu_num_replicons, domain=None, range=Optional[int])

slots.MigsEu_number_contig = Slot(uri=MIXS['0000060'], name="MigsEu_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS_6_2_RC.MigsEu_number_contig, domain=None, range=int)

slots.MigsEu_pathogenicity = Slot(uri=MIXS['0000027'], name="MigsEu_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=MIXS_6_2_RC.MigsEu_pathogenicity, domain=None, range=Optional[str])

slots.MigsEu_ploidy = Slot(uri=MIXS['0000021'], name="MigsEu_ploidy", curie=MIXS.curie('0000021'),
                   model_uri=MIXS_6_2_RC.MigsEu_ploidy, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.MigsEu_propagation = Slot(uri=MIXS['0000033'], name="MigsEu_propagation", curie=MIXS.curie('0000033'),
                   model_uri=MIXS_6_2_RC.MigsEu_propagation, domain=None, range=Optional[str])

slots.MigsEu_ref_biomaterial = Slot(uri=MIXS['0000025'], name="MigsEu_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS_6_2_RC.MigsEu_ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsEu_ref_db = Slot(uri=MIXS['0000062'], name="MigsEu_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS_6_2_RC.MigsEu_ref_db, domain=None, range=Optional[str])

slots.MigsEu_samp_collect_device = Slot(uri=MIXS['0000002'], name="MigsEu_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.MigsEu_samp_collect_device, domain=None, range=Optional[str])

slots.MigsEu_samp_collect_method = Slot(uri=MIXS['0001225'], name="MigsEu_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=MIXS_6_2_RC.MigsEu_samp_collect_method, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsEu_samp_mat_process = Slot(uri=MIXS['0000016'], name="MigsEu_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS_6_2_RC.MigsEu_samp_mat_process, domain=None, range=Optional[str])

slots.MigsEu_samp_size = Slot(uri=MIXS['0000001'], name="MigsEu_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.MigsEu_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsEu_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MigsEu_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.MigsEu_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsEu_sim_search_meth = Slot(uri=MIXS['0000063'], name="MigsEu_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS_6_2_RC.MigsEu_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsEu_sop = Slot(uri=MIXS['0000090'], name="MigsEu_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS_6_2_RC.MigsEu_sop, domain=None, range=Optional[Union[str, List[str]]])

slots.MigsEu_source_mat_id = Slot(uri=MIXS['0000026'], name="MigsEu_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS_6_2_RC.MigsEu_source_mat_id, domain=None, range=Optional[Union[str, List[str]]])

slots.MigsEu_specific_host = Slot(uri=MIXS['0000029'], name="MigsEu_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=MIXS_6_2_RC.MigsEu_specific_host, domain=None, range=Optional[str])

slots.MigsEu_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="MigsEu_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS_6_2_RC.MigsEu_subspecf_gen_lin, domain=None, range=Optional[str])

slots.MigsEu_tax_class = Slot(uri=MIXS['0000064'], name="MigsEu_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS_6_2_RC.MigsEu_tax_class, domain=None, range=Optional[str])

slots.MigsEu_tax_ident = Slot(uri=MIXS['0000053'], name="MigsEu_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS_6_2_RC.MigsEu_tax_ident, domain=None, range=Optional[Union[str, "TAXIDENTENUM"]])

slots.MigsEu_temp = Slot(uri=MIXS['0000113'], name="MigsEu_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.MigsEu_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsEu_trophic_level = Slot(uri=MIXS['0000032'], name="MigsEu_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=MIXS_6_2_RC.MigsEu_trophic_level, domain=None, range=Optional[Union[str, "TROPHICLEVELENUM"]])

slots.MigsOrg_adapters = Slot(uri=MIXS['0000048'], name="MigsOrg_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS_6_2_RC.MigsOrg_adapters, domain=None, range=Optional[str])

slots.MigsOrg_alt = Slot(uri=MIXS['0000094'], name="MigsOrg_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS_6_2_RC.MigsOrg_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsOrg_annot = Slot(uri=MIXS['0000059'], name="MigsOrg_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS_6_2_RC.MigsOrg_annot, domain=None, range=Optional[str])

slots.MigsOrg_assembly_name = Slot(uri=MIXS['0000057'], name="MigsOrg_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS_6_2_RC.MigsOrg_assembly_name, domain=None, range=Optional[str])

slots.MigsOrg_assembly_qual = Slot(uri=MIXS['0000056'], name="MigsOrg_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS_6_2_RC.MigsOrg_assembly_qual, domain=None, range=Optional[str])

slots.MigsOrg_assembly_software = Slot(uri=MIXS['0000058'], name="MigsOrg_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS_6_2_RC.MigsOrg_assembly_software, domain=None, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsOrg_compl_score = Slot(uri=MIXS['0000069'], name="MigsOrg_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS_6_2_RC.MigsOrg_compl_score, domain=None, range=Optional[str])

slots.MigsOrg_compl_software = Slot(uri=MIXS['0000070'], name="MigsOrg_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS_6_2_RC.MigsOrg_compl_software, domain=None, range=Optional[str])

slots.MigsOrg_depth = Slot(uri=MIXS['0000018'], name="MigsOrg_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.MigsOrg_depth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsOrg_elev = Slot(uri=MIXS['0000093'], name="MigsOrg_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.MigsOrg_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsOrg_estimated_size = Slot(uri=MIXS['0000024'], name="MigsOrg_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=MIXS_6_2_RC.MigsOrg_estimated_size, domain=None, range=Optional[str])

slots.MigsOrg_experimental_factor = Slot(uri=MIXS['0000008'], name="MigsOrg_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS_6_2_RC.MigsOrg_experimental_factor, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^\S+.*\S+ \[[a-zA-Z]{2,}:\d+\]$'))

slots.MigsOrg_extrachrom_elements = Slot(uri=MIXS['0000023'], name="MigsOrg_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=MIXS_6_2_RC.MigsOrg_extrachrom_elements, domain=None, range=Optional[int])

slots.MigsOrg_feat_pred = Slot(uri=MIXS['0000061'], name="MigsOrg_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS_6_2_RC.MigsOrg_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsOrg_isol_growth_condt = Slot(uri=MIXS['0000003'], name="MigsOrg_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS_6_2_RC.MigsOrg_isol_growth_condt, domain=None, range=str,
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsOrg_lib_layout = Slot(uri=MIXS['0000041'], name="MigsOrg_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS_6_2_RC.MigsOrg_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.MigsOrg_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="MigsOrg_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS_6_2_RC.MigsOrg_lib_reads_seqd, domain=None, range=Optional[int])

slots.MigsOrg_lib_screen = Slot(uri=MIXS['0000043'], name="MigsOrg_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS_6_2_RC.MigsOrg_lib_screen, domain=None, range=Optional[str])

slots.MigsOrg_lib_size = Slot(uri=MIXS['0000039'], name="MigsOrg_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS_6_2_RC.MigsOrg_lib_size, domain=None, range=Optional[int])

slots.MigsOrg_lib_vector = Slot(uri=MIXS['0000042'], name="MigsOrg_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS_6_2_RC.MigsOrg_lib_vector, domain=None, range=Optional[str])

slots.MigsOrg_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="MigsOrg_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS_6_2_RC.MigsOrg_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsOrg_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="MigsOrg_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.MigsOrg_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsOrg_number_contig = Slot(uri=MIXS['0000060'], name="MigsOrg_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS_6_2_RC.MigsOrg_number_contig, domain=None, range=Optional[int])

slots.MigsOrg_ref_biomaterial = Slot(uri=MIXS['0000025'], name="MigsOrg_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS_6_2_RC.MigsOrg_ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsOrg_ref_db = Slot(uri=MIXS['0000062'], name="MigsOrg_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS_6_2_RC.MigsOrg_ref_db, domain=None, range=Optional[str])

slots.MigsOrg_samp_collect_device = Slot(uri=MIXS['0000002'], name="MigsOrg_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.MigsOrg_samp_collect_device, domain=None, range=Optional[str])

slots.MigsOrg_samp_collect_method = Slot(uri=MIXS['0001225'], name="MigsOrg_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=MIXS_6_2_RC.MigsOrg_samp_collect_method, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsOrg_samp_mat_process = Slot(uri=MIXS['0000016'], name="MigsOrg_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS_6_2_RC.MigsOrg_samp_mat_process, domain=None, range=Optional[str])

slots.MigsOrg_samp_size = Slot(uri=MIXS['0000001'], name="MigsOrg_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.MigsOrg_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsOrg_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MigsOrg_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.MigsOrg_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsOrg_sim_search_meth = Slot(uri=MIXS['0000063'], name="MigsOrg_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS_6_2_RC.MigsOrg_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsOrg_sop = Slot(uri=MIXS['0000090'], name="MigsOrg_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS_6_2_RC.MigsOrg_sop, domain=None, range=Optional[Union[str, List[str]]])

slots.MigsOrg_source_mat_id = Slot(uri=MIXS['0000026'], name="MigsOrg_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS_6_2_RC.MigsOrg_source_mat_id, domain=None, range=Optional[Union[str, List[str]]])

slots.MigsOrg_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="MigsOrg_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS_6_2_RC.MigsOrg_subspecf_gen_lin, domain=None, range=Optional[str])

slots.MigsOrg_tax_class = Slot(uri=MIXS['0000064'], name="MigsOrg_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS_6_2_RC.MigsOrg_tax_class, domain=None, range=Optional[str])

slots.MigsOrg_tax_ident = Slot(uri=MIXS['0000053'], name="MigsOrg_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS_6_2_RC.MigsOrg_tax_ident, domain=None, range=Optional[Union[str, "TAXIDENTENUM"]])

slots.MigsOrg_temp = Slot(uri=MIXS['0000113'], name="MigsOrg_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.MigsOrg_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsPl_adapters = Slot(uri=MIXS['0000048'], name="MigsPl_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS_6_2_RC.MigsPl_adapters, domain=None, range=Optional[str])

slots.MigsPl_alt = Slot(uri=MIXS['0000094'], name="MigsPl_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS_6_2_RC.MigsPl_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsPl_annot = Slot(uri=MIXS['0000059'], name="MigsPl_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS_6_2_RC.MigsPl_annot, domain=None, range=Optional[str])

slots.MigsPl_assembly_name = Slot(uri=MIXS['0000057'], name="MigsPl_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS_6_2_RC.MigsPl_assembly_name, domain=None, range=Optional[str])

slots.MigsPl_assembly_qual = Slot(uri=MIXS['0000056'], name="MigsPl_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS_6_2_RC.MigsPl_assembly_qual, domain=None, range=Optional[str])

slots.MigsPl_assembly_software = Slot(uri=MIXS['0000058'], name="MigsPl_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS_6_2_RC.MigsPl_assembly_software, domain=None, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsPl_compl_score = Slot(uri=MIXS['0000069'], name="MigsPl_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS_6_2_RC.MigsPl_compl_score, domain=None, range=Optional[str])

slots.MigsPl_compl_software = Slot(uri=MIXS['0000070'], name="MigsPl_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS_6_2_RC.MigsPl_compl_software, domain=None, range=Optional[str])

slots.MigsPl_depth = Slot(uri=MIXS['0000018'], name="MigsPl_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.MigsPl_depth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsPl_elev = Slot(uri=MIXS['0000093'], name="MigsPl_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.MigsPl_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsPl_encoded_traits = Slot(uri=MIXS['0000034'], name="MigsPl_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=MIXS_6_2_RC.MigsPl_encoded_traits, domain=None, range=Optional[str])

slots.MigsPl_estimated_size = Slot(uri=MIXS['0000024'], name="MigsPl_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=MIXS_6_2_RC.MigsPl_estimated_size, domain=None, range=Optional[str])

slots.MigsPl_experimental_factor = Slot(uri=MIXS['0000008'], name="MigsPl_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS_6_2_RC.MigsPl_experimental_factor, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^\S+.*\S+ \[[a-zA-Z]{2,}:\d+\]$'))

slots.MigsPl_feat_pred = Slot(uri=MIXS['0000061'], name="MigsPl_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS_6_2_RC.MigsPl_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsPl_host_spec_range = Slot(uri=MIXS['0000030'], name="MigsPl_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=MIXS_6_2_RC.MigsPl_host_spec_range, domain=None, range=Optional[Union[str, List[str]]])

slots.MigsPl_isol_growth_condt = Slot(uri=MIXS['0000003'], name="MigsPl_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS_6_2_RC.MigsPl_isol_growth_condt, domain=None, range=str,
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsPl_lib_layout = Slot(uri=MIXS['0000041'], name="MigsPl_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS_6_2_RC.MigsPl_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.MigsPl_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="MigsPl_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS_6_2_RC.MigsPl_lib_reads_seqd, domain=None, range=Optional[int])

slots.MigsPl_lib_screen = Slot(uri=MIXS['0000043'], name="MigsPl_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS_6_2_RC.MigsPl_lib_screen, domain=None, range=Optional[str])

slots.MigsPl_lib_size = Slot(uri=MIXS['0000039'], name="MigsPl_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS_6_2_RC.MigsPl_lib_size, domain=None, range=Optional[int])

slots.MigsPl_lib_vector = Slot(uri=MIXS['0000042'], name="MigsPl_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS_6_2_RC.MigsPl_lib_vector, domain=None, range=Optional[str])

slots.MigsPl_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="MigsPl_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS_6_2_RC.MigsPl_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsPl_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="MigsPl_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.MigsPl_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsPl_number_contig = Slot(uri=MIXS['0000060'], name="MigsPl_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS_6_2_RC.MigsPl_number_contig, domain=None, range=Optional[int])

slots.MigsPl_propagation = Slot(uri=MIXS['0000033'], name="MigsPl_propagation", curie=MIXS.curie('0000033'),
                   model_uri=MIXS_6_2_RC.MigsPl_propagation, domain=None, range=str)

slots.MigsPl_ref_biomaterial = Slot(uri=MIXS['0000025'], name="MigsPl_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS_6_2_RC.MigsPl_ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsPl_ref_db = Slot(uri=MIXS['0000062'], name="MigsPl_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS_6_2_RC.MigsPl_ref_db, domain=None, range=Optional[str])

slots.MigsPl_samp_collect_device = Slot(uri=MIXS['0000002'], name="MigsPl_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.MigsPl_samp_collect_device, domain=None, range=Optional[str])

slots.MigsPl_samp_collect_method = Slot(uri=MIXS['0001225'], name="MigsPl_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=MIXS_6_2_RC.MigsPl_samp_collect_method, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsPl_samp_mat_process = Slot(uri=MIXS['0000016'], name="MigsPl_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS_6_2_RC.MigsPl_samp_mat_process, domain=None, range=Optional[str])

slots.MigsPl_samp_size = Slot(uri=MIXS['0000001'], name="MigsPl_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.MigsPl_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsPl_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MigsPl_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.MigsPl_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsPl_sim_search_meth = Slot(uri=MIXS['0000063'], name="MigsPl_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS_6_2_RC.MigsPl_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsPl_sop = Slot(uri=MIXS['0000090'], name="MigsPl_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS_6_2_RC.MigsPl_sop, domain=None, range=Optional[Union[str, List[str]]])

slots.MigsPl_source_mat_id = Slot(uri=MIXS['0000026'], name="MigsPl_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS_6_2_RC.MigsPl_source_mat_id, domain=None, range=Optional[Union[str, List[str]]])

slots.MigsPl_specific_host = Slot(uri=MIXS['0000029'], name="MigsPl_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=MIXS_6_2_RC.MigsPl_specific_host, domain=None, range=Optional[str])

slots.MigsPl_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="MigsPl_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS_6_2_RC.MigsPl_subspecf_gen_lin, domain=None, range=Optional[str])

slots.MigsPl_tax_class = Slot(uri=MIXS['0000064'], name="MigsPl_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS_6_2_RC.MigsPl_tax_class, domain=None, range=Optional[str])

slots.MigsPl_tax_ident = Slot(uri=MIXS['0000053'], name="MigsPl_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS_6_2_RC.MigsPl_tax_ident, domain=None, range=Optional[Union[str, "TAXIDENTENUM"]])

slots.MigsPl_temp = Slot(uri=MIXS['0000113'], name="MigsPl_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.MigsPl_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsVi_adapters = Slot(uri=MIXS['0000048'], name="MigsVi_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS_6_2_RC.MigsVi_adapters, domain=None, range=Optional[str])

slots.MigsVi_alt = Slot(uri=MIXS['0000094'], name="MigsVi_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS_6_2_RC.MigsVi_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsVi_annot = Slot(uri=MIXS['0000059'], name="MigsVi_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS_6_2_RC.MigsVi_annot, domain=None, range=Optional[str])

slots.MigsVi_assembly_name = Slot(uri=MIXS['0000057'], name="MigsVi_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS_6_2_RC.MigsVi_assembly_name, domain=None, range=Optional[str])

slots.MigsVi_assembly_qual = Slot(uri=MIXS['0000056'], name="MigsVi_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS_6_2_RC.MigsVi_assembly_qual, domain=None, range=Optional[str])

slots.MigsVi_assembly_software = Slot(uri=MIXS['0000058'], name="MigsVi_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS_6_2_RC.MigsVi_assembly_software, domain=None, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsVi_biotic_relationship = Slot(uri=MIXS['0000028'], name="MigsVi_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=MIXS_6_2_RC.MigsVi_biotic_relationship, domain=None, range=Optional[Union[str, "BIOTICRELATIONSHIPENUM"]])

slots.MigsVi_compl_score = Slot(uri=MIXS['0000069'], name="MigsVi_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS_6_2_RC.MigsVi_compl_score, domain=None, range=Optional[str])

slots.MigsVi_compl_software = Slot(uri=MIXS['0000070'], name="MigsVi_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS_6_2_RC.MigsVi_compl_software, domain=None, range=Optional[str])

slots.MigsVi_depth = Slot(uri=MIXS['0000018'], name="MigsVi_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.MigsVi_depth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsVi_elev = Slot(uri=MIXS['0000093'], name="MigsVi_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.MigsVi_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsVi_encoded_traits = Slot(uri=MIXS['0000034'], name="MigsVi_encoded_traits", curie=MIXS.curie('0000034'),
                   model_uri=MIXS_6_2_RC.MigsVi_encoded_traits, domain=None, range=Optional[str])

slots.MigsVi_estimated_size = Slot(uri=MIXS['0000024'], name="MigsVi_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=MIXS_6_2_RC.MigsVi_estimated_size, domain=None, range=Optional[str])

slots.MigsVi_experimental_factor = Slot(uri=MIXS['0000008'], name="MigsVi_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS_6_2_RC.MigsVi_experimental_factor, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^\S+.*\S+ \[[a-zA-Z]{2,}:\d+\]$'))

slots.MigsVi_feat_pred = Slot(uri=MIXS['0000061'], name="MigsVi_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS_6_2_RC.MigsVi_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsVi_host_disease_stat = Slot(uri=MIXS['0000031'], name="MigsVi_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS_6_2_RC.MigsVi_host_disease_stat, domain=None, range=Optional[str])

slots.MigsVi_host_spec_range = Slot(uri=MIXS['0000030'], name="MigsVi_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=MIXS_6_2_RC.MigsVi_host_spec_range, domain=None, range=Optional[Union[str, List[str]]])

slots.MigsVi_isol_growth_condt = Slot(uri=MIXS['0000003'], name="MigsVi_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS_6_2_RC.MigsVi_isol_growth_condt, domain=None, range=str,
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsVi_lib_layout = Slot(uri=MIXS['0000041'], name="MigsVi_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS_6_2_RC.MigsVi_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.MigsVi_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="MigsVi_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS_6_2_RC.MigsVi_lib_reads_seqd, domain=None, range=Optional[int])

slots.MigsVi_lib_screen = Slot(uri=MIXS['0000043'], name="MigsVi_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS_6_2_RC.MigsVi_lib_screen, domain=None, range=Optional[str])

slots.MigsVi_lib_size = Slot(uri=MIXS['0000039'], name="MigsVi_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS_6_2_RC.MigsVi_lib_size, domain=None, range=Optional[int])

slots.MigsVi_lib_vector = Slot(uri=MIXS['0000042'], name="MigsVi_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS_6_2_RC.MigsVi_lib_vector, domain=None, range=Optional[str])

slots.MigsVi_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="MigsVi_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS_6_2_RC.MigsVi_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsVi_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="MigsVi_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.MigsVi_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsVi_num_replicons = Slot(uri=MIXS['0000022'], name="MigsVi_num_replicons", curie=MIXS.curie('0000022'),
                   model_uri=MIXS_6_2_RC.MigsVi_num_replicons, domain=None, range=Optional[int])

slots.MigsVi_number_contig = Slot(uri=MIXS['0000060'], name="MigsVi_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS_6_2_RC.MigsVi_number_contig, domain=None, range=Optional[int])

slots.MigsVi_pathogenicity = Slot(uri=MIXS['0000027'], name="MigsVi_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=MIXS_6_2_RC.MigsVi_pathogenicity, domain=None, range=Optional[str])

slots.MigsVi_propagation = Slot(uri=MIXS['0000033'], name="MigsVi_propagation", curie=MIXS.curie('0000033'),
                   model_uri=MIXS_6_2_RC.MigsVi_propagation, domain=None, range=str)

slots.MigsVi_ref_biomaterial = Slot(uri=MIXS['0000025'], name="MigsVi_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS_6_2_RC.MigsVi_ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MigsVi_ref_db = Slot(uri=MIXS['0000062'], name="MigsVi_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS_6_2_RC.MigsVi_ref_db, domain=None, range=Optional[str])

slots.MigsVi_samp_collect_device = Slot(uri=MIXS['0000002'], name="MigsVi_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.MigsVi_samp_collect_device, domain=None, range=Optional[str])

slots.MigsVi_samp_collect_method = Slot(uri=MIXS['0001225'], name="MigsVi_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=MIXS_6_2_RC.MigsVi_samp_collect_method, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsVi_samp_mat_process = Slot(uri=MIXS['0000016'], name="MigsVi_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS_6_2_RC.MigsVi_samp_mat_process, domain=None, range=Optional[str])

slots.MigsVi_samp_size = Slot(uri=MIXS['0000001'], name="MigsVi_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.MigsVi_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsVi_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MigsVi_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.MigsVi_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsVi_sim_search_meth = Slot(uri=MIXS['0000063'], name="MigsVi_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS_6_2_RC.MigsVi_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsVi_sop = Slot(uri=MIXS['0000090'], name="MigsVi_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS_6_2_RC.MigsVi_sop, domain=None, range=Optional[Union[str, List[str]]])

slots.MigsVi_source_mat_id = Slot(uri=MIXS['0000026'], name="MigsVi_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS_6_2_RC.MigsVi_source_mat_id, domain=None, range=Optional[Union[str, List[str]]])

slots.MigsVi_specific_host = Slot(uri=MIXS['0000029'], name="MigsVi_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=MIXS_6_2_RC.MigsVi_specific_host, domain=None, range=Optional[str])

slots.MigsVi_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="MigsVi_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS_6_2_RC.MigsVi_subspecf_gen_lin, domain=None, range=Optional[str])

slots.MigsVi_tax_class = Slot(uri=MIXS['0000064'], name="MigsVi_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS_6_2_RC.MigsVi_tax_class, domain=None, range=Optional[str])

slots.MigsVi_tax_ident = Slot(uri=MIXS['0000053'], name="MigsVi_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS_6_2_RC.MigsVi_tax_ident, domain=None, range=Optional[Union[str, "TAXIDENTENUM"]])

slots.MigsVi_temp = Slot(uri=MIXS['0000113'], name="MigsVi_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.MigsVi_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MigsVi_virus_enrich_appr = Slot(uri=MIXS['0000036'], name="MigsVi_virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=MIXS_6_2_RC.MigsVi_virus_enrich_appr, domain=None, range=Optional[Union[str, "VIRUSENRICHAPPRENUM"]])

slots.Mimag_adapters = Slot(uri=MIXS['0000048'], name="Mimag_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS_6_2_RC.Mimag_adapters, domain=None, range=Optional[str])

slots.Mimag_alt = Slot(uri=MIXS['0000094'], name="Mimag_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS_6_2_RC.Mimag_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mimag_annot = Slot(uri=MIXS['0000059'], name="Mimag_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS_6_2_RC.Mimag_annot, domain=None, range=Optional[str])

slots.Mimag_assembly_name = Slot(uri=MIXS['0000057'], name="Mimag_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS_6_2_RC.Mimag_assembly_name, domain=None, range=Optional[str])

slots.Mimag_assembly_qual = Slot(uri=MIXS['0000056'], name="Mimag_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS_6_2_RC.Mimag_assembly_qual, domain=None, range=str)

slots.Mimag_assembly_software = Slot(uri=MIXS['0000058'], name="Mimag_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS_6_2_RC.Mimag_assembly_software, domain=None, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mimag_bin_param = Slot(uri=MIXS['0000077'], name="Mimag_bin_param", curie=MIXS.curie('0000077'),
                   model_uri=MIXS_6_2_RC.Mimag_bin_param, domain=None, range=Union[str, "BINPARAMENUM"])

slots.Mimag_bin_software = Slot(uri=MIXS['0000078'], name="Mimag_bin_software", curie=MIXS.curie('0000078'),
                   model_uri=MIXS_6_2_RC.Mimag_bin_software, domain=None, range=str)

slots.Mimag_compl_appr = Slot(uri=MIXS['0000071'], name="Mimag_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=MIXS_6_2_RC.Mimag_compl_appr, domain=None, range=Optional[Union[str, "COMPLAPPRENUM"]])

slots.Mimag_compl_score = Slot(uri=MIXS['0000069'], name="Mimag_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS_6_2_RC.Mimag_compl_score, domain=None, range=str)

slots.Mimag_compl_software = Slot(uri=MIXS['0000070'], name="Mimag_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS_6_2_RC.Mimag_compl_software, domain=None, range=str)

slots.Mimag_contam_score = Slot(uri=MIXS['0000072'], name="Mimag_contam_score", curie=MIXS.curie('0000072'),
                   model_uri=MIXS_6_2_RC.Mimag_contam_score, domain=None, range=float)

slots.Mimag_contam_screen_input = Slot(uri=MIXS['0000005'], name="Mimag_contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=MIXS_6_2_RC.Mimag_contam_screen_input, domain=None, range=Optional[Union[str, "CONTAMSCREENINPUTENUM"]])

slots.Mimag_contam_screen_param = Slot(uri=MIXS['0000073'], name="Mimag_contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=MIXS_6_2_RC.Mimag_contam_screen_param, domain=None, range=Optional[str])

slots.Mimag_decontam_software = Slot(uri=MIXS['0000074'], name="Mimag_decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=MIXS_6_2_RC.Mimag_decontam_software, domain=None, range=Optional[str])

slots.Mimag_depth = Slot(uri=MIXS['0000018'], name="Mimag_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.Mimag_depth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mimag_elev = Slot(uri=MIXS['0000093'], name="Mimag_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.Mimag_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mimag_experimental_factor = Slot(uri=MIXS['0000008'], name="Mimag_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS_6_2_RC.Mimag_experimental_factor, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^\S+.*\S+ \[[a-zA-Z]{2,}:\d+\]$'))

slots.Mimag_feat_pred = Slot(uri=MIXS['0000061'], name="Mimag_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS_6_2_RC.Mimag_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mimag_lib_layout = Slot(uri=MIXS['0000041'], name="Mimag_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS_6_2_RC.Mimag_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.Mimag_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="Mimag_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS_6_2_RC.Mimag_lib_reads_seqd, domain=None, range=Optional[int])

slots.Mimag_lib_screen = Slot(uri=MIXS['0000043'], name="Mimag_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS_6_2_RC.Mimag_lib_screen, domain=None, range=Optional[str])

slots.Mimag_lib_size = Slot(uri=MIXS['0000039'], name="Mimag_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS_6_2_RC.Mimag_lib_size, domain=None, range=Optional[int])

slots.Mimag_lib_vector = Slot(uri=MIXS['0000042'], name="Mimag_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS_6_2_RC.Mimag_lib_vector, domain=None, range=Optional[str])

slots.Mimag_mag_cov_software = Slot(uri=MIXS['0000080'], name="Mimag_mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=MIXS_6_2_RC.Mimag_mag_cov_software, domain=None, range=Optional[Union[str, "MAGCOVSOFTWAREENUM"]])

slots.Mimag_mid = Slot(uri=MIXS['0000047'], name="Mimag_mid", curie=MIXS.curie('0000047'),
                   model_uri=MIXS_6_2_RC.Mimag_mid, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[ACGTRKSYMWBHDVN]+$'))

slots.Mimag_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="Mimag_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS_6_2_RC.Mimag_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Mimag_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="Mimag_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.Mimag_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Mimag_number_contig = Slot(uri=MIXS['0000060'], name="Mimag_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS_6_2_RC.Mimag_number_contig, domain=None, range=Optional[int])

slots.Mimag_reassembly_bin = Slot(uri=MIXS['0000079'], name="Mimag_reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=MIXS_6_2_RC.Mimag_reassembly_bin, domain=None, range=Optional[Union[bool, Bool]])

slots.Mimag_ref_biomaterial = Slot(uri=MIXS['0000025'], name="Mimag_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS_6_2_RC.Mimag_ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Mimag_ref_db = Slot(uri=MIXS['0000062'], name="Mimag_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS_6_2_RC.Mimag_ref_db, domain=None, range=Optional[str])

slots.Mimag_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="Mimag_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=MIXS_6_2_RC.Mimag_rel_to_oxygen, domain=None, range=Optional[Union[str, "RELTOOXYGENENUM"]])

slots.Mimag_samp_collect_device = Slot(uri=MIXS['0000002'], name="Mimag_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.Mimag_samp_collect_device, domain=None, range=Optional[str])

slots.Mimag_samp_collect_method = Slot(uri=MIXS['0001225'], name="Mimag_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=MIXS_6_2_RC.Mimag_samp_collect_method, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mimag_samp_mat_process = Slot(uri=MIXS['0000016'], name="Mimag_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS_6_2_RC.Mimag_samp_mat_process, domain=None, range=Optional[str])

slots.Mimag_samp_size = Slot(uri=MIXS['0000001'], name="Mimag_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.Mimag_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mimag_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Mimag_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.Mimag_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mimag_sim_search_meth = Slot(uri=MIXS['0000063'], name="Mimag_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS_6_2_RC.Mimag_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mimag_size_frac = Slot(uri=MIXS['0000017'], name="Mimag_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=MIXS_6_2_RC.Mimag_size_frac, domain=None, range=Optional[str])

slots.Mimag_sop = Slot(uri=MIXS['0000090'], name="Mimag_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS_6_2_RC.Mimag_sop, domain=None, range=Optional[Union[str, List[str]]])

slots.Mimag_source_mat_id = Slot(uri=MIXS['0000026'], name="Mimag_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS_6_2_RC.Mimag_source_mat_id, domain=None, range=Optional[Union[str, List[str]]])

slots.Mimag_tax_class = Slot(uri=MIXS['0000064'], name="Mimag_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS_6_2_RC.Mimag_tax_class, domain=None, range=Optional[str])

slots.Mimag_tax_ident = Slot(uri=MIXS['0000053'], name="Mimag_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS_6_2_RC.Mimag_tax_ident, domain=None, range=Union[str, "TAXIDENTENUM"])

slots.Mimag_temp = Slot(uri=MIXS['0000113'], name="Mimag_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.Mimag_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mimag_trna_ext_software = Slot(uri=MIXS['0000068'], name="Mimag_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=MIXS_6_2_RC.Mimag_trna_ext_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mimag_trnas = Slot(uri=MIXS['0000067'], name="Mimag_trnas", curie=MIXS.curie('0000067'),
                   model_uri=MIXS_6_2_RC.Mimag_trnas, domain=None, range=Optional[str])

slots.Mimag_x16s_recover = Slot(uri=MIXS['0000065'], name="Mimag_x16s_recover", curie=MIXS.curie('0000065'),
                   model_uri=MIXS_6_2_RC.Mimag_x16s_recover, domain=None, range=Optional[Union[bool, Bool]])

slots.Mimag_x16s_recover_software = Slot(uri=MIXS['0000066'], name="Mimag_x16s_recover_software", curie=MIXS.curie('0000066'),
                   model_uri=MIXS_6_2_RC.Mimag_x16s_recover_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksC_alt = Slot(uri=MIXS['0000094'], name="MimarksC_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS_6_2_RC.MimarksC_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksC_biotic_relationship = Slot(uri=MIXS['0000028'], name="MimarksC_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=MIXS_6_2_RC.MimarksC_biotic_relationship, domain=None, range=Optional[Union[str, "BIOTICRELATIONSHIPENUM"]])

slots.MimarksC_chimera_check = Slot(uri=MIXS['0000052'], name="MimarksC_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=MIXS_6_2_RC.MimarksC_chimera_check, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksC_depth = Slot(uri=MIXS['0000018'], name="MimarksC_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.MimarksC_depth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksC_elev = Slot(uri=MIXS['0000093'], name="MimarksC_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.MimarksC_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksC_experimental_factor = Slot(uri=MIXS['0000008'], name="MimarksC_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS_6_2_RC.MimarksC_experimental_factor, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^\S+.*\S+ \[[a-zA-Z]{2,}:\d+\]$'))

slots.MimarksC_extrachrom_elements = Slot(uri=MIXS['0000023'], name="MimarksC_extrachrom_elements", curie=MIXS.curie('0000023'),
                   model_uri=MIXS_6_2_RC.MimarksC_extrachrom_elements, domain=None, range=Optional[int])

slots.MimarksC_isol_growth_condt = Slot(uri=MIXS['0000003'], name="MimarksC_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS_6_2_RC.MimarksC_isol_growth_condt, domain=None, range=str,
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MimarksC_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="MimarksC_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS_6_2_RC.MimarksC_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MimarksC_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="MimarksC_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.MimarksC_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MimarksC_pcr_cond = Slot(uri=MIXS['0000049'], name="MimarksC_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=MIXS_6_2_RC.MimarksC_pcr_cond, domain=None, range=Optional[str])

slots.MimarksC_pcr_primers = Slot(uri=MIXS['0000046'], name="MimarksC_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=MIXS_6_2_RC.MimarksC_pcr_primers, domain=None, range=Optional[str])

slots.MimarksC_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="MimarksC_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=MIXS_6_2_RC.MimarksC_rel_to_oxygen, domain=None, range=Optional[Union[str, "RELTOOXYGENENUM"]])

slots.MimarksC_samp_collect_device = Slot(uri=MIXS['0000002'], name="MimarksC_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.MimarksC_samp_collect_device, domain=None, range=Optional[str])

slots.MimarksC_samp_collect_method = Slot(uri=MIXS['0001225'], name="MimarksC_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=MIXS_6_2_RC.MimarksC_samp_collect_method, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksC_samp_mat_process = Slot(uri=MIXS['0000016'], name="MimarksC_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS_6_2_RC.MimarksC_samp_mat_process, domain=None, range=Optional[str])

slots.MimarksC_samp_size = Slot(uri=MIXS['0000001'], name="MimarksC_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.MimarksC_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksC_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MimarksC_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.MimarksC_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksC_seq_quality_check = Slot(uri=MIXS['0000051'], name="MimarksC_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=MIXS_6_2_RC.MimarksC_seq_quality_check, domain=None, range=Optional[Union[str, "SEQQUALITYCHECKENUM"]])

slots.MimarksC_sop = Slot(uri=MIXS['0000090'], name="MimarksC_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS_6_2_RC.MimarksC_sop, domain=None, range=Optional[Union[str, List[str]]])

slots.MimarksC_source_mat_id = Slot(uri=MIXS['0000026'], name="MimarksC_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS_6_2_RC.MimarksC_source_mat_id, domain=None, range=Optional[Union[str, List[str]]])

slots.MimarksC_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="MimarksC_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS_6_2_RC.MimarksC_subspecf_gen_lin, domain=None, range=Optional[str])

slots.MimarksC_target_gene = Slot(uri=MIXS['0000044'], name="MimarksC_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=MIXS_6_2_RC.MimarksC_target_gene, domain=None, range=str)

slots.MimarksC_target_subfragment = Slot(uri=MIXS['0000045'], name="MimarksC_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=MIXS_6_2_RC.MimarksC_target_subfragment, domain=None, range=Optional[str])

slots.MimarksC_temp = Slot(uri=MIXS['0000113'], name="MimarksC_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.MimarksC_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksC_trophic_level = Slot(uri=MIXS['0000032'], name="MimarksC_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=MIXS_6_2_RC.MimarksC_trophic_level, domain=None, range=Optional[Union[str, "TROPHICLEVELENUM"]])

slots.MimarksS_adapters = Slot(uri=MIXS['0000048'], name="MimarksS_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS_6_2_RC.MimarksS_adapters, domain=None, range=Optional[str])

slots.MimarksS_alt = Slot(uri=MIXS['0000094'], name="MimarksS_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS_6_2_RC.MimarksS_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksS_assembly_software = Slot(uri=MIXS['0000058'], name="MimarksS_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS_6_2_RC.MimarksS_assembly_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksS_chimera_check = Slot(uri=MIXS['0000052'], name="MimarksS_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=MIXS_6_2_RC.MimarksS_chimera_check, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksS_depth = Slot(uri=MIXS['0000018'], name="MimarksS_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.MimarksS_depth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksS_elev = Slot(uri=MIXS['0000093'], name="MimarksS_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.MimarksS_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksS_experimental_factor = Slot(uri=MIXS['0000008'], name="MimarksS_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS_6_2_RC.MimarksS_experimental_factor, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^\S+.*\S+ \[[a-zA-Z]{2,}:\d+\]$'))

slots.MimarksS_lib_layout = Slot(uri=MIXS['0000041'], name="MimarksS_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS_6_2_RC.MimarksS_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.MimarksS_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="MimarksS_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS_6_2_RC.MimarksS_lib_reads_seqd, domain=None, range=Optional[int])

slots.MimarksS_lib_screen = Slot(uri=MIXS['0000043'], name="MimarksS_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS_6_2_RC.MimarksS_lib_screen, domain=None, range=Optional[str])

slots.MimarksS_lib_size = Slot(uri=MIXS['0000039'], name="MimarksS_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS_6_2_RC.MimarksS_lib_size, domain=None, range=Optional[int])

slots.MimarksS_lib_vector = Slot(uri=MIXS['0000042'], name="MimarksS_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS_6_2_RC.MimarksS_lib_vector, domain=None, range=Optional[str])

slots.MimarksS_mid = Slot(uri=MIXS['0000047'], name="MimarksS_mid", curie=MIXS.curie('0000047'),
                   model_uri=MIXS_6_2_RC.MimarksS_mid, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[ACGTRKSYMWBHDVN]+$'))

slots.MimarksS_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="MimarksS_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS_6_2_RC.MimarksS_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MimarksS_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="MimarksS_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.MimarksS_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.MimarksS_pcr_cond = Slot(uri=MIXS['0000049'], name="MimarksS_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=MIXS_6_2_RC.MimarksS_pcr_cond, domain=None, range=Optional[str])

slots.MimarksS_pcr_primers = Slot(uri=MIXS['0000046'], name="MimarksS_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=MIXS_6_2_RC.MimarksS_pcr_primers, domain=None, range=Optional[str])

slots.MimarksS_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="MimarksS_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=MIXS_6_2_RC.MimarksS_rel_to_oxygen, domain=None, range=Optional[Union[str, "RELTOOXYGENENUM"]])

slots.MimarksS_samp_collect_device = Slot(uri=MIXS['0000002'], name="MimarksS_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.MimarksS_samp_collect_device, domain=None, range=Optional[str])

slots.MimarksS_samp_collect_method = Slot(uri=MIXS['0001225'], name="MimarksS_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=MIXS_6_2_RC.MimarksS_samp_collect_method, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksS_samp_mat_process = Slot(uri=MIXS['0000016'], name="MimarksS_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS_6_2_RC.MimarksS_samp_mat_process, domain=None, range=Optional[str])

slots.MimarksS_samp_size = Slot(uri=MIXS['0000001'], name="MimarksS_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.MimarksS_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksS_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MimarksS_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.MimarksS_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MimarksS_seq_quality_check = Slot(uri=MIXS['0000051'], name="MimarksS_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=MIXS_6_2_RC.MimarksS_seq_quality_check, domain=None, range=Optional[Union[str, "SEQQUALITYCHECKENUM"]])

slots.MimarksS_size_frac = Slot(uri=MIXS['0000017'], name="MimarksS_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=MIXS_6_2_RC.MimarksS_size_frac, domain=None, range=Optional[str])

slots.MimarksS_sop = Slot(uri=MIXS['0000090'], name="MimarksS_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS_6_2_RC.MimarksS_sop, domain=None, range=Optional[Union[str, List[str]]])

slots.MimarksS_source_mat_id = Slot(uri=MIXS['0000026'], name="MimarksS_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS_6_2_RC.MimarksS_source_mat_id, domain=None, range=Optional[Union[str, List[str]]])

slots.MimarksS_target_gene = Slot(uri=MIXS['0000044'], name="MimarksS_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=MIXS_6_2_RC.MimarksS_target_gene, domain=None, range=str)

slots.MimarksS_target_subfragment = Slot(uri=MIXS['0000045'], name="MimarksS_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=MIXS_6_2_RC.MimarksS_target_subfragment, domain=None, range=Optional[str])

slots.MimarksS_temp = Slot(uri=MIXS['0000113'], name="MimarksS_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.MimarksS_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mims_adapters = Slot(uri=MIXS['0000048'], name="Mims_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS_6_2_RC.Mims_adapters, domain=None, range=Optional[str])

slots.Mims_alt = Slot(uri=MIXS['0000094'], name="Mims_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS_6_2_RC.Mims_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mims_annot = Slot(uri=MIXS['0000059'], name="Mims_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS_6_2_RC.Mims_annot, domain=None, range=Optional[str])

slots.Mims_assembly_name = Slot(uri=MIXS['0000057'], name="Mims_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS_6_2_RC.Mims_assembly_name, domain=None, range=Optional[str])

slots.Mims_assembly_qual = Slot(uri=MIXS['0000056'], name="Mims_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS_6_2_RC.Mims_assembly_qual, domain=None, range=Optional[str])

slots.Mims_assembly_software = Slot(uri=MIXS['0000058'], name="Mims_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS_6_2_RC.Mims_assembly_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mims_depth = Slot(uri=MIXS['0000018'], name="Mims_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.Mims_depth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mims_elev = Slot(uri=MIXS['0000093'], name="Mims_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.Mims_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mims_experimental_factor = Slot(uri=MIXS['0000008'], name="Mims_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS_6_2_RC.Mims_experimental_factor, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^\S+.*\S+ \[[a-zA-Z]{2,}:\d+\]$'))

slots.Mims_feat_pred = Slot(uri=MIXS['0000061'], name="Mims_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS_6_2_RC.Mims_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mims_lib_layout = Slot(uri=MIXS['0000041'], name="Mims_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS_6_2_RC.Mims_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.Mims_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="Mims_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS_6_2_RC.Mims_lib_reads_seqd, domain=None, range=Optional[int])

slots.Mims_lib_screen = Slot(uri=MIXS['0000043'], name="Mims_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS_6_2_RC.Mims_lib_screen, domain=None, range=Optional[str])

slots.Mims_lib_size = Slot(uri=MIXS['0000039'], name="Mims_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS_6_2_RC.Mims_lib_size, domain=None, range=Optional[int])

slots.Mims_lib_vector = Slot(uri=MIXS['0000042'], name="Mims_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS_6_2_RC.Mims_lib_vector, domain=None, range=Optional[str])

slots.Mims_mid = Slot(uri=MIXS['0000047'], name="Mims_mid", curie=MIXS.curie('0000047'),
                   model_uri=MIXS_6_2_RC.Mims_mid, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[ACGTRKSYMWBHDVN]+$'))

slots.Mims_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="Mims_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS_6_2_RC.Mims_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Mims_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="Mims_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.Mims_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Mims_number_contig = Slot(uri=MIXS['0000060'], name="Mims_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS_6_2_RC.Mims_number_contig, domain=None, range=Optional[int])

slots.Mims_ref_biomaterial = Slot(uri=MIXS['0000025'], name="Mims_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS_6_2_RC.Mims_ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Mims_ref_db = Slot(uri=MIXS['0000062'], name="Mims_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS_6_2_RC.Mims_ref_db, domain=None, range=Optional[str])

slots.Mims_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="Mims_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=MIXS_6_2_RC.Mims_rel_to_oxygen, domain=None, range=Optional[Union[str, "RELTOOXYGENENUM"]])

slots.Mims_samp_collect_device = Slot(uri=MIXS['0000002'], name="Mims_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.Mims_samp_collect_device, domain=None, range=Optional[str])

slots.Mims_samp_collect_method = Slot(uri=MIXS['0001225'], name="Mims_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=MIXS_6_2_RC.Mims_samp_collect_method, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mims_samp_mat_process = Slot(uri=MIXS['0000016'], name="Mims_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS_6_2_RC.Mims_samp_mat_process, domain=None, range=Optional[str])

slots.Mims_samp_size = Slot(uri=MIXS['0000001'], name="Mims_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.Mims_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mims_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Mims_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.Mims_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mims_sim_search_meth = Slot(uri=MIXS['0000063'], name="Mims_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS_6_2_RC.Mims_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Mims_size_frac = Slot(uri=MIXS['0000017'], name="Mims_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=MIXS_6_2_RC.Mims_size_frac, domain=None, range=Optional[str])

slots.Mims_sop = Slot(uri=MIXS['0000090'], name="Mims_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS_6_2_RC.Mims_sop, domain=None, range=Optional[Union[str, List[str]]])

slots.Mims_source_mat_id = Slot(uri=MIXS['0000026'], name="Mims_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS_6_2_RC.Mims_source_mat_id, domain=None, range=Optional[Union[str, List[str]]])

slots.Mims_tax_class = Slot(uri=MIXS['0000064'], name="Mims_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS_6_2_RC.Mims_tax_class, domain=None, range=Optional[str])

slots.Mims_temp = Slot(uri=MIXS['0000113'], name="Mims_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.Mims_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Misag_adapters = Slot(uri=MIXS['0000048'], name="Misag_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS_6_2_RC.Misag_adapters, domain=None, range=Optional[str])

slots.Misag_alt = Slot(uri=MIXS['0000094'], name="Misag_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS_6_2_RC.Misag_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Misag_annot = Slot(uri=MIXS['0000059'], name="Misag_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS_6_2_RC.Misag_annot, domain=None, range=Optional[str])

slots.Misag_assembly_name = Slot(uri=MIXS['0000057'], name="Misag_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS_6_2_RC.Misag_assembly_name, domain=None, range=Optional[str])

slots.Misag_assembly_qual = Slot(uri=MIXS['0000056'], name="Misag_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS_6_2_RC.Misag_assembly_qual, domain=None, range=str)

slots.Misag_assembly_software = Slot(uri=MIXS['0000058'], name="Misag_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS_6_2_RC.Misag_assembly_software, domain=None, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Misag_compl_appr = Slot(uri=MIXS['0000071'], name="Misag_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=MIXS_6_2_RC.Misag_compl_appr, domain=None, range=Optional[Union[str, "COMPLAPPRENUM"]])

slots.Misag_compl_score = Slot(uri=MIXS['0000069'], name="Misag_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS_6_2_RC.Misag_compl_score, domain=None, range=str)

slots.Misag_compl_software = Slot(uri=MIXS['0000070'], name="Misag_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS_6_2_RC.Misag_compl_software, domain=None, range=str)

slots.Misag_contam_score = Slot(uri=MIXS['0000072'], name="Misag_contam_score", curie=MIXS.curie('0000072'),
                   model_uri=MIXS_6_2_RC.Misag_contam_score, domain=None, range=float)

slots.Misag_contam_screen_input = Slot(uri=MIXS['0000005'], name="Misag_contam_screen_input", curie=MIXS.curie('0000005'),
                   model_uri=MIXS_6_2_RC.Misag_contam_screen_input, domain=None, range=Optional[Union[str, "CONTAMSCREENINPUTENUM"]])

slots.Misag_contam_screen_param = Slot(uri=MIXS['0000073'], name="Misag_contam_screen_param", curie=MIXS.curie('0000073'),
                   model_uri=MIXS_6_2_RC.Misag_contam_screen_param, domain=None, range=Optional[str])

slots.Misag_decontam_software = Slot(uri=MIXS['0000074'], name="Misag_decontam_software", curie=MIXS.curie('0000074'),
                   model_uri=MIXS_6_2_RC.Misag_decontam_software, domain=None, range=Optional[str])

slots.Misag_depth = Slot(uri=MIXS['0000018'], name="Misag_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.Misag_depth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Misag_elev = Slot(uri=MIXS['0000093'], name="Misag_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.Misag_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Misag_experimental_factor = Slot(uri=MIXS['0000008'], name="Misag_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS_6_2_RC.Misag_experimental_factor, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^\S+.*\S+ \[[a-zA-Z]{2,}:\d+\]$'))

slots.Misag_feat_pred = Slot(uri=MIXS['0000061'], name="Misag_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS_6_2_RC.Misag_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Misag_lib_layout = Slot(uri=MIXS['0000041'], name="Misag_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS_6_2_RC.Misag_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.Misag_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="Misag_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS_6_2_RC.Misag_lib_reads_seqd, domain=None, range=Optional[int])

slots.Misag_lib_screen = Slot(uri=MIXS['0000043'], name="Misag_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS_6_2_RC.Misag_lib_screen, domain=None, range=Optional[str])

slots.Misag_lib_size = Slot(uri=MIXS['0000039'], name="Misag_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS_6_2_RC.Misag_lib_size, domain=None, range=Optional[int])

slots.Misag_lib_vector = Slot(uri=MIXS['0000042'], name="Misag_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS_6_2_RC.Misag_lib_vector, domain=None, range=Optional[str])

slots.Misag_mid = Slot(uri=MIXS['0000047'], name="Misag_mid", curie=MIXS.curie('0000047'),
                   model_uri=MIXS_6_2_RC.Misag_mid, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[ACGTRKSYMWBHDVN]+$'))

slots.Misag_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="Misag_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS_6_2_RC.Misag_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Misag_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="Misag_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.Misag_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Misag_number_contig = Slot(uri=MIXS['0000060'], name="Misag_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS_6_2_RC.Misag_number_contig, domain=None, range=Optional[int])

slots.Misag_ref_biomaterial = Slot(uri=MIXS['0000025'], name="Misag_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS_6_2_RC.Misag_ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Misag_ref_db = Slot(uri=MIXS['0000062'], name="Misag_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS_6_2_RC.Misag_ref_db, domain=None, range=Optional[str])

slots.Misag_rel_to_oxygen = Slot(uri=MIXS['0000015'], name="Misag_rel_to_oxygen", curie=MIXS.curie('0000015'),
                   model_uri=MIXS_6_2_RC.Misag_rel_to_oxygen, domain=None, range=Optional[Union[str, "RELTOOXYGENENUM"]])

slots.Misag_samp_collect_device = Slot(uri=MIXS['0000002'], name="Misag_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.Misag_samp_collect_device, domain=None, range=Optional[str])

slots.Misag_samp_collect_method = Slot(uri=MIXS['0001225'], name="Misag_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=MIXS_6_2_RC.Misag_samp_collect_method, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Misag_samp_mat_process = Slot(uri=MIXS['0000016'], name="Misag_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS_6_2_RC.Misag_samp_mat_process, domain=None, range=Optional[str])

slots.Misag_samp_size = Slot(uri=MIXS['0000001'], name="Misag_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.Misag_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Misag_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Misag_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.Misag_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Misag_sc_lysis_approach = Slot(uri=MIXS['0000076'], name="Misag_sc_lysis_approach", curie=MIXS.curie('0000076'),
                   model_uri=MIXS_6_2_RC.Misag_sc_lysis_approach, domain=None, range=Union[str, "SCLYSISAPPROACHENUM"])

slots.Misag_sc_lysis_method = Slot(uri=MIXS['0000054'], name="Misag_sc_lysis_method", curie=MIXS.curie('0000054'),
                   model_uri=MIXS_6_2_RC.Misag_sc_lysis_method, domain=None, range=Optional[str])

slots.Misag_sim_search_meth = Slot(uri=MIXS['0000063'], name="Misag_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS_6_2_RC.Misag_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Misag_size_frac = Slot(uri=MIXS['0000017'], name="Misag_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=MIXS_6_2_RC.Misag_size_frac, domain=None, range=Optional[str])

slots.Misag_sop = Slot(uri=MIXS['0000090'], name="Misag_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS_6_2_RC.Misag_sop, domain=None, range=Optional[Union[str, List[str]]])

slots.Misag_sort_tech = Slot(uri=MIXS['0000075'], name="Misag_sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=MIXS_6_2_RC.Misag_sort_tech, domain=None, range=Union[str, "SORTTECHENUM"])

slots.Misag_source_mat_id = Slot(uri=MIXS['0000026'], name="Misag_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS_6_2_RC.Misag_source_mat_id, domain=None, range=Optional[Union[str, List[str]]])

slots.Misag_tax_class = Slot(uri=MIXS['0000064'], name="Misag_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS_6_2_RC.Misag_tax_class, domain=None, range=Optional[str])

slots.Misag_tax_ident = Slot(uri=MIXS['0000053'], name="Misag_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS_6_2_RC.Misag_tax_ident, domain=None, range=Union[str, "TAXIDENTENUM"])

slots.Misag_temp = Slot(uri=MIXS['0000113'], name="Misag_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.Misag_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Misag_trna_ext_software = Slot(uri=MIXS['0000068'], name="Misag_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=MIXS_6_2_RC.Misag_trna_ext_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Misag_trnas = Slot(uri=MIXS['0000067'], name="Misag_trnas", curie=MIXS.curie('0000067'),
                   model_uri=MIXS_6_2_RC.Misag_trnas, domain=None, range=Optional[str])

slots.Misag_wga_amp_appr = Slot(uri=MIXS['0000055'], name="Misag_wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=MIXS_6_2_RC.Misag_wga_amp_appr, domain=None, range=Union[str, "WGAAMPAPPRENUM"])

slots.Misag_wga_amp_kit = Slot(uri=MIXS['0000006'], name="Misag_wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=MIXS_6_2_RC.Misag_wga_amp_kit, domain=None, range=Optional[str])

slots.Misag_x16s_recover = Slot(uri=MIXS['0000065'], name="Misag_x16s_recover", curie=MIXS.curie('0000065'),
                   model_uri=MIXS_6_2_RC.Misag_x16s_recover, domain=None, range=Optional[Union[bool, Bool]])

slots.Misag_x16s_recover_software = Slot(uri=MIXS['0000066'], name="Misag_x16s_recover_software", curie=MIXS.curie('0000066'),
                   model_uri=MIXS_6_2_RC.Misag_x16s_recover_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Miuvig_adapters = Slot(uri=MIXS['0000048'], name="Miuvig_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS_6_2_RC.Miuvig_adapters, domain=None, range=Optional[str])

slots.Miuvig_alt = Slot(uri=MIXS['0000094'], name="Miuvig_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS_6_2_RC.Miuvig_alt, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Miuvig_annot = Slot(uri=MIXS['0000059'], name="Miuvig_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS_6_2_RC.Miuvig_annot, domain=None, range=Optional[str])

slots.Miuvig_assembly_name = Slot(uri=MIXS['0000057'], name="Miuvig_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS_6_2_RC.Miuvig_assembly_name, domain=None, range=Optional[str])

slots.Miuvig_assembly_qual = Slot(uri=MIXS['0000056'], name="Miuvig_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS_6_2_RC.Miuvig_assembly_qual, domain=None, range=str)

slots.Miuvig_assembly_software = Slot(uri=MIXS['0000058'], name="Miuvig_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS_6_2_RC.Miuvig_assembly_software, domain=None, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Miuvig_bin_param = Slot(uri=MIXS['0000077'], name="Miuvig_bin_param", curie=MIXS.curie('0000077'),
                   model_uri=MIXS_6_2_RC.Miuvig_bin_param, domain=None, range=Optional[Union[str, "BINPARAMENUM"]])

slots.Miuvig_bin_software = Slot(uri=MIXS['0000078'], name="Miuvig_bin_software", curie=MIXS.curie('0000078'),
                   model_uri=MIXS_6_2_RC.Miuvig_bin_software, domain=None, range=Optional[str])

slots.Miuvig_biotic_relationship = Slot(uri=MIXS['0000028'], name="Miuvig_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=MIXS_6_2_RC.Miuvig_biotic_relationship, domain=None, range=Optional[Union[str, "BIOTICRELATIONSHIPENUM"]])

slots.Miuvig_compl_appr = Slot(uri=MIXS['0000071'], name="Miuvig_compl_appr", curie=MIXS.curie('0000071'),
                   model_uri=MIXS_6_2_RC.Miuvig_compl_appr, domain=None, range=Optional[Union[str, "COMPLAPPRENUM"]])

slots.Miuvig_compl_score = Slot(uri=MIXS['0000069'], name="Miuvig_compl_score", curie=MIXS.curie('0000069'),
                   model_uri=MIXS_6_2_RC.Miuvig_compl_score, domain=None, range=Optional[str])

slots.Miuvig_compl_software = Slot(uri=MIXS['0000070'], name="Miuvig_compl_software", curie=MIXS.curie('0000070'),
                   model_uri=MIXS_6_2_RC.Miuvig_compl_software, domain=None, range=Optional[str])

slots.Miuvig_depth = Slot(uri=MIXS['0000018'], name="Miuvig_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.Miuvig_depth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Miuvig_detec_type = Slot(uri=MIXS['0000084'], name="Miuvig_detec_type", curie=MIXS.curie('0000084'),
                   model_uri=MIXS_6_2_RC.Miuvig_detec_type, domain=None, range=str)

slots.Miuvig_elev = Slot(uri=MIXS['0000093'], name="Miuvig_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.Miuvig_elev, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Miuvig_estimated_size = Slot(uri=MIXS['0000024'], name="Miuvig_estimated_size", curie=MIXS.curie('0000024'),
                   model_uri=MIXS_6_2_RC.Miuvig_estimated_size, domain=None, range=Optional[str])

slots.Miuvig_experimental_factor = Slot(uri=MIXS['0000008'], name="Miuvig_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS_6_2_RC.Miuvig_experimental_factor, domain=None, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^\S+.*\S+ \[[a-zA-Z]{2,}:\d+\]$'))

slots.Miuvig_feat_pred = Slot(uri=MIXS['0000061'], name="Miuvig_feat_pred", curie=MIXS.curie('0000061'),
                   model_uri=MIXS_6_2_RC.Miuvig_feat_pred, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Miuvig_host_disease_stat = Slot(uri=MIXS['0000031'], name="Miuvig_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS_6_2_RC.Miuvig_host_disease_stat, domain=None, range=Optional[str])

slots.Miuvig_host_pred_appr = Slot(uri=MIXS['0000088'], name="Miuvig_host_pred_appr", curie=MIXS.curie('0000088'),
                   model_uri=MIXS_6_2_RC.Miuvig_host_pred_appr, domain=None, range=Optional[Union[str, "HOSTPREDAPPRENUM"]])

slots.Miuvig_host_pred_est_acc = Slot(uri=MIXS['0000089'], name="Miuvig_host_pred_est_acc", curie=MIXS.curie('0000089'),
                   model_uri=MIXS_6_2_RC.Miuvig_host_pred_est_acc, domain=None, range=Optional[str])

slots.Miuvig_host_spec_range = Slot(uri=MIXS['0000030'], name="Miuvig_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=MIXS_6_2_RC.Miuvig_host_spec_range, domain=None, range=Optional[Union[str, List[str]]])

slots.Miuvig_lib_layout = Slot(uri=MIXS['0000041'], name="Miuvig_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS_6_2_RC.Miuvig_lib_layout, domain=None, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.Miuvig_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="Miuvig_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS_6_2_RC.Miuvig_lib_reads_seqd, domain=None, range=Optional[int])

slots.Miuvig_lib_screen = Slot(uri=MIXS['0000043'], name="Miuvig_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS_6_2_RC.Miuvig_lib_screen, domain=None, range=Optional[str])

slots.Miuvig_lib_size = Slot(uri=MIXS['0000039'], name="Miuvig_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS_6_2_RC.Miuvig_lib_size, domain=None, range=Optional[int])

slots.Miuvig_lib_vector = Slot(uri=MIXS['0000042'], name="Miuvig_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS_6_2_RC.Miuvig_lib_vector, domain=None, range=Optional[str])

slots.Miuvig_mag_cov_software = Slot(uri=MIXS['0000080'], name="Miuvig_mag_cov_software", curie=MIXS.curie('0000080'),
                   model_uri=MIXS_6_2_RC.Miuvig_mag_cov_software, domain=None, range=Optional[Union[str, "MAGCOVSOFTWAREENUM"]])

slots.Miuvig_mid = Slot(uri=MIXS['0000047'], name="Miuvig_mid", curie=MIXS.curie('0000047'),
                   model_uri=MIXS_6_2_RC.Miuvig_mid, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[ACGTRKSYMWBHDVN]+$'))

slots.Miuvig_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="Miuvig_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS_6_2_RC.Miuvig_nucl_acid_amp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Miuvig_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="Miuvig_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.Miuvig_nucl_acid_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Miuvig_number_contig = Slot(uri=MIXS['0000060'], name="Miuvig_number_contig", curie=MIXS.curie('0000060'),
                   model_uri=MIXS_6_2_RC.Miuvig_number_contig, domain=None, range=int)

slots.Miuvig_otu_class_appr = Slot(uri=MIXS['0000085'], name="Miuvig_otu_class_appr", curie=MIXS.curie('0000085'),
                   model_uri=MIXS_6_2_RC.Miuvig_otu_class_appr, domain=None, range=Optional[str])

slots.Miuvig_otu_db = Slot(uri=MIXS['0000087'], name="Miuvig_otu_db", curie=MIXS.curie('0000087'),
                   model_uri=MIXS_6_2_RC.Miuvig_otu_db, domain=None, range=Optional[str])

slots.Miuvig_otu_seq_comp_appr = Slot(uri=MIXS['0000086'], name="Miuvig_otu_seq_comp_appr", curie=MIXS.curie('0000086'),
                   model_uri=MIXS_6_2_RC.Miuvig_otu_seq_comp_appr, domain=None, range=Optional[str])

slots.Miuvig_pathogenicity = Slot(uri=MIXS['0000027'], name="Miuvig_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=MIXS_6_2_RC.Miuvig_pathogenicity, domain=None, range=Optional[str])

slots.Miuvig_pred_genome_struc = Slot(uri=MIXS['0000083'], name="Miuvig_pred_genome_struc", curie=MIXS.curie('0000083'),
                   model_uri=MIXS_6_2_RC.Miuvig_pred_genome_struc, domain=None, range=Union[str, "PREDGENOMESTRUCENUM"])

slots.Miuvig_pred_genome_type = Slot(uri=MIXS['0000082'], name="Miuvig_pred_genome_type", curie=MIXS.curie('0000082'),
                   model_uri=MIXS_6_2_RC.Miuvig_pred_genome_type, domain=None, range=str)

slots.Miuvig_reassembly_bin = Slot(uri=MIXS['0000079'], name="Miuvig_reassembly_bin", curie=MIXS.curie('0000079'),
                   model_uri=MIXS_6_2_RC.Miuvig_reassembly_bin, domain=None, range=Optional[Union[bool, Bool]])

slots.Miuvig_ref_biomaterial = Slot(uri=MIXS['0000025'], name="Miuvig_ref_biomaterial", curie=MIXS.curie('0000025'),
                   model_uri=MIXS_6_2_RC.Miuvig_ref_biomaterial, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Miuvig_ref_db = Slot(uri=MIXS['0000062'], name="Miuvig_ref_db", curie=MIXS.curie('0000062'),
                   model_uri=MIXS_6_2_RC.Miuvig_ref_db, domain=None, range=Optional[str])

slots.Miuvig_samp_collect_device = Slot(uri=MIXS['0000002'], name="Miuvig_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.Miuvig_samp_collect_device, domain=None, range=Optional[str])

slots.Miuvig_samp_collect_method = Slot(uri=MIXS['0001225'], name="Miuvig_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=MIXS_6_2_RC.Miuvig_samp_collect_method, domain=None, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Miuvig_samp_mat_process = Slot(uri=MIXS['0000016'], name="Miuvig_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS_6_2_RC.Miuvig_samp_mat_process, domain=None, range=Optional[str])

slots.Miuvig_samp_size = Slot(uri=MIXS['0000001'], name="Miuvig_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.Miuvig_samp_size, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Miuvig_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Miuvig_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.Miuvig_samp_vol_we_dna_ext, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Miuvig_sc_lysis_approach = Slot(uri=MIXS['0000076'], name="Miuvig_sc_lysis_approach", curie=MIXS.curie('0000076'),
                   model_uri=MIXS_6_2_RC.Miuvig_sc_lysis_approach, domain=None, range=Optional[Union[str, "SCLYSISAPPROACHENUM"]])

slots.Miuvig_sc_lysis_method = Slot(uri=MIXS['0000054'], name="Miuvig_sc_lysis_method", curie=MIXS.curie('0000054'),
                   model_uri=MIXS_6_2_RC.Miuvig_sc_lysis_method, domain=None, range=Optional[str])

slots.Miuvig_sim_search_meth = Slot(uri=MIXS['0000063'], name="Miuvig_sim_search_meth", curie=MIXS.curie('0000063'),
                   model_uri=MIXS_6_2_RC.Miuvig_sim_search_meth, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Miuvig_size_frac = Slot(uri=MIXS['0000017'], name="Miuvig_size_frac", curie=MIXS.curie('0000017'),
                   model_uri=MIXS_6_2_RC.Miuvig_size_frac, domain=None, range=Optional[str])

slots.Miuvig_sop = Slot(uri=MIXS['0000090'], name="Miuvig_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS_6_2_RC.Miuvig_sop, domain=None, range=Optional[Union[str, List[str]]])

slots.Miuvig_sort_tech = Slot(uri=MIXS['0000075'], name="Miuvig_sort_tech", curie=MIXS.curie('0000075'),
                   model_uri=MIXS_6_2_RC.Miuvig_sort_tech, domain=None, range=Optional[Union[str, "SORTTECHENUM"]])

slots.Miuvig_source_mat_id = Slot(uri=MIXS['0000026'], name="Miuvig_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS_6_2_RC.Miuvig_source_mat_id, domain=None, range=Optional[Union[str, List[str]]])

slots.Miuvig_source_uvig = Slot(uri=MIXS['0000035'], name="Miuvig_source_uvig", curie=MIXS.curie('0000035'),
                   model_uri=MIXS_6_2_RC.Miuvig_source_uvig, domain=None, range=str)

slots.Miuvig_specific_host = Slot(uri=MIXS['0000029'], name="Miuvig_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=MIXS_6_2_RC.Miuvig_specific_host, domain=None, range=Optional[str])

slots.Miuvig_tax_class = Slot(uri=MIXS['0000064'], name="Miuvig_tax_class", curie=MIXS.curie('0000064'),
                   model_uri=MIXS_6_2_RC.Miuvig_tax_class, domain=None, range=Optional[str])

slots.Miuvig_tax_ident = Slot(uri=MIXS['0000053'], name="Miuvig_tax_ident", curie=MIXS.curie('0000053'),
                   model_uri=MIXS_6_2_RC.Miuvig_tax_ident, domain=None, range=Optional[Union[str, "TAXIDENTENUM"]])

slots.Miuvig_temp = Slot(uri=MIXS['0000113'], name="Miuvig_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.Miuvig_temp, domain=None, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Miuvig_trna_ext_software = Slot(uri=MIXS['0000068'], name="Miuvig_trna_ext_software", curie=MIXS.curie('0000068'),
                   model_uri=MIXS_6_2_RC.Miuvig_trna_ext_software, domain=None, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Miuvig_trnas = Slot(uri=MIXS['0000067'], name="Miuvig_trnas", curie=MIXS.curie('0000067'),
                   model_uri=MIXS_6_2_RC.Miuvig_trnas, domain=None, range=Optional[str])

slots.Miuvig_vir_ident_software = Slot(uri=MIXS['0000081'], name="Miuvig_vir_ident_software", curie=MIXS.curie('0000081'),
                   model_uri=MIXS_6_2_RC.Miuvig_vir_ident_software, domain=None, range=str)

slots.Miuvig_virus_enrich_appr = Slot(uri=MIXS['0000036'], name="Miuvig_virus_enrich_appr", curie=MIXS.curie('0000036'),
                   model_uri=MIXS_6_2_RC.Miuvig_virus_enrich_appr, domain=None, range=Union[str, "VIRUSENRICHAPPRENUM"])

slots.Miuvig_wga_amp_appr = Slot(uri=MIXS['0000055'], name="Miuvig_wga_amp_appr", curie=MIXS.curie('0000055'),
                   model_uri=MIXS_6_2_RC.Miuvig_wga_amp_appr, domain=None, range=Optional[Union[str, "WGAAMPAPPRENUM"]])

slots.Miuvig_wga_amp_kit = Slot(uri=MIXS['0000006'], name="Miuvig_wga_amp_kit", curie=MIXS.curie('0000006'),
                   model_uri=MIXS_6_2_RC.Miuvig_wga_amp_kit, domain=None, range=Optional[str])

slots.Agriculture_adapters = Slot(uri=MIXS['0000048'], name="Agriculture_adapters", curie=MIXS.curie('0000048'),
                   model_uri=MIXS_6_2_RC.Agriculture_adapters, domain=Agriculture, range=str)

slots.Agriculture_annot = Slot(uri=MIXS['0000059'], name="Agriculture_annot", curie=MIXS.curie('0000059'),
                   model_uri=MIXS_6_2_RC.Agriculture_annot, domain=Agriculture, range=Optional[str])

slots.Agriculture_assembly_name = Slot(uri=MIXS['0000057'], name="Agriculture_assembly_name", curie=MIXS.curie('0000057'),
                   model_uri=MIXS_6_2_RC.Agriculture_assembly_name, domain=Agriculture, range=str)

slots.Agriculture_assembly_qual = Slot(uri=MIXS['0000056'], name="Agriculture_assembly_qual", curie=MIXS.curie('0000056'),
                   model_uri=MIXS_6_2_RC.Agriculture_assembly_qual, domain=Agriculture, range=Optional[str])

slots.Agriculture_assembly_software = Slot(uri=MIXS['0000058'], name="Agriculture_assembly_software", curie=MIXS.curie('0000058'),
                   model_uri=MIXS_6_2_RC.Agriculture_assembly_software, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_biotic_relationship = Slot(uri=MIXS['0000028'], name="Agriculture_biotic_relationship", curie=MIXS.curie('0000028'),
                   model_uri=MIXS_6_2_RC.Agriculture_biotic_relationship, domain=Agriculture, range=Optional[Union[str, "BIOTICRELATIONSHIPENUM"]])

slots.Agriculture_chem_administration = Slot(uri=MIXS['0000751'], name="Agriculture_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.Agriculture_chem_administration, domain=Agriculture, range=Union[str, List[str]])

slots.Agriculture_chimera_check = Slot(uri=MIXS['0000052'], name="Agriculture_chimera_check", curie=MIXS.curie('0000052'),
                   model_uri=MIXS_6_2_RC.Agriculture_chimera_check, domain=Agriculture, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+);([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_climate_environment = Slot(uri=MIXS['0001040'], name="Agriculture_climate_environment", curie=MIXS.curie('0001040'),
                   model_uri=MIXS_6_2_RC.Agriculture_climate_environment, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_crop_rotation = Slot(uri=MIXS['0000318'], name="Agriculture_crop_rotation", curie=MIXS.curie('0000318'),
                   model_uri=MIXS_6_2_RC.Agriculture_crop_rotation, domain=Agriculture, range=Optional[str])

slots.Agriculture_cur_vegetation = Slot(uri=MIXS['0000312'], name="Agriculture_cur_vegetation", curie=MIXS.curie('0000312'),
                   model_uri=MIXS_6_2_RC.Agriculture_cur_vegetation, domain=Agriculture, range=Optional[str])

slots.Agriculture_cur_vegetation_meth = Slot(uri=MIXS['0000314'], name="Agriculture_cur_vegetation_meth", curie=MIXS.curie('0000314'),
                   model_uri=MIXS_6_2_RC.Agriculture_cur_vegetation_meth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Agriculture_depth = Slot(uri=MIXS['0000018'], name="Agriculture_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.Agriculture_depth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_drainage_class = Slot(uri=MIXS['0001085'], name="Agriculture_drainage_class", curie=MIXS.curie('0001085'),
                   model_uri=MIXS_6_2_RC.Agriculture_drainage_class, domain=Agriculture, range=Optional[Union[str, "DRAINAGECLASSENUM"]])

slots.Agriculture_elev = Slot(uri=MIXS['0000093'], name="Agriculture_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.Agriculture_elev, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_enrichment_protocol = Slot(uri=MIXS['0001177'], name="Agriculture_enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=MIXS_6_2_RC.Agriculture_enrichment_protocol, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_extreme_event = Slot(uri=MIXS['0000320'], name="Agriculture_extreme_event", curie=MIXS.curie('0000320'),
                   model_uri=MIXS_6_2_RC.Agriculture_extreme_event, domain=Agriculture, range=Optional[Union[str, XSDDateTime]])

slots.Agriculture_fao_class = Slot(uri=MIXS['0001083'], name="Agriculture_fao_class", curie=MIXS.curie('0001083'),
                   model_uri=MIXS_6_2_RC.Agriculture_fao_class, domain=Agriculture, range=Optional[Union[str, "FAOCLASSENUM"]])

slots.Agriculture_fire = Slot(uri=MIXS['0001086'], name="Agriculture_fire", curie=MIXS.curie('0001086'),
                   model_uri=MIXS_6_2_RC.Agriculture_fire, domain=Agriculture, range=Optional[Union[str, XSDDateTime]])

slots.Agriculture_flooding = Slot(uri=MIXS['0000319'], name="Agriculture_flooding", curie=MIXS.curie('0000319'),
                   model_uri=MIXS_6_2_RC.Agriculture_flooding, domain=Agriculture, range=Optional[Union[str, XSDDateTime]])

slots.Agriculture_food_prod = Slot(uri=MIXS['0001211'], name="Agriculture_food_prod", curie=MIXS.curie('0001211'),
                   model_uri=MIXS_6_2_RC.Agriculture_food_prod, domain=Agriculture, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.Agriculture_food_product_type = Slot(uri=MIXS['0001184'], name="Agriculture_food_product_type", curie=MIXS.curie('0001184'),
                   model_uri=MIXS_6_2_RC.Agriculture_food_product_type, domain=Agriculture, range=Optional[str])

slots.Agriculture_food_source = Slot(uri=MIXS['0001139'], name="Agriculture_food_source", curie=MIXS.curie('0001139'),
                   model_uri=MIXS_6_2_RC.Agriculture_food_source, domain=Agriculture, range=str)

slots.Agriculture_fungicide_regm = Slot(uri=MIXS['0000557'], name="Agriculture_fungicide_regm", curie=MIXS.curie('0000557'),
                   model_uri=MIXS_6_2_RC.Agriculture_fungicide_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_gaseous_environment = Slot(uri=MIXS['0000558'], name="Agriculture_gaseous_environment", curie=MIXS.curie('0000558'),
                   model_uri=MIXS_6_2_RC.Agriculture_gaseous_environment, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_heavy_metals_meth = Slot(uri=MIXS['0000343'], name="Agriculture_heavy_metals_meth", curie=MIXS.curie('0000343'),
                   model_uri=MIXS_6_2_RC.Agriculture_heavy_metals_meth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Agriculture_herbicide_regm = Slot(uri=MIXS['0000561'], name="Agriculture_herbicide_regm", curie=MIXS.curie('0000561'),
                   model_uri=MIXS_6_2_RC.Agriculture_herbicide_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_horizon_meth = Slot(uri=MIXS['0000321'], name="Agriculture_horizon_meth", curie=MIXS.curie('0000321'),
                   model_uri=MIXS_6_2_RC.Agriculture_horizon_meth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Agriculture_host_age = Slot(uri=MIXS['0000255'], name="Agriculture_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS_6_2_RC.Agriculture_host_age, domain=Agriculture, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_host_common_name = Slot(uri=MIXS['0000248'], name="Agriculture_host_common_name", curie=MIXS.curie('0000248'),
                   model_uri=MIXS_6_2_RC.Agriculture_host_common_name, domain=Agriculture, range=str)

slots.Agriculture_host_disease_stat = Slot(uri=MIXS['0000031'], name="Agriculture_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS_6_2_RC.Agriculture_host_disease_stat, domain=Agriculture, range=Optional[str])

slots.Agriculture_host_genotype = Slot(uri=MIXS['0000365'], name="Agriculture_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS_6_2_RC.Agriculture_host_genotype, domain=Agriculture, range=str)

slots.Agriculture_host_height = Slot(uri=MIXS['0000264'], name="Agriculture_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS_6_2_RC.Agriculture_host_height, domain=Agriculture, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_host_length = Slot(uri=MIXS['0000256'], name="Agriculture_host_length", curie=MIXS.curie('0000256'),
                   model_uri=MIXS_6_2_RC.Agriculture_host_length, domain=Agriculture, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_host_life_stage = Slot(uri=MIXS['0000251'], name="Agriculture_host_life_stage", curie=MIXS.curie('0000251'),
                   model_uri=MIXS_6_2_RC.Agriculture_host_life_stage, domain=Agriculture, range=str)

slots.Agriculture_host_phenotype = Slot(uri=MIXS['0000874'], name="Agriculture_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS_6_2_RC.Agriculture_host_phenotype, domain=Agriculture, range=str)

slots.Agriculture_host_spec_range = Slot(uri=MIXS['0000030'], name="Agriculture_host_spec_range", curie=MIXS.curie('0000030'),
                   model_uri=MIXS_6_2_RC.Agriculture_host_spec_range, domain=Agriculture, range=Union[str, List[str]])

slots.Agriculture_host_symbiont = Slot(uri=MIXS['0001298'], name="Agriculture_host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=MIXS_6_2_RC.Agriculture_host_symbiont, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_host_taxid = Slot(uri=MIXS['0000250'], name="Agriculture_host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=MIXS_6_2_RC.Agriculture_host_taxid, domain=Agriculture, range=str)

slots.Agriculture_host_tot_mass = Slot(uri=MIXS['0000263'], name="Agriculture_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS_6_2_RC.Agriculture_host_tot_mass, domain=Agriculture, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_humidity = Slot(uri=MIXS['0000100'], name="Agriculture_humidity", curie=MIXS.curie('0000100'),
                   model_uri=MIXS_6_2_RC.Agriculture_humidity, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_isol_growth_condt = Slot(uri=MIXS['0000003'], name="Agriculture_isol_growth_condt", curie=MIXS.curie('0000003'),
                   model_uri=MIXS_6_2_RC.Agriculture_isol_growth_condt, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Agriculture_lib_layout = Slot(uri=MIXS['0000041'], name="Agriculture_lib_layout", curie=MIXS.curie('0000041'),
                   model_uri=MIXS_6_2_RC.Agriculture_lib_layout, domain=Agriculture, range=Optional[Union[str, "LIBLAYOUTENUM"]])

slots.Agriculture_lib_reads_seqd = Slot(uri=MIXS['0000040'], name="Agriculture_lib_reads_seqd", curie=MIXS.curie('0000040'),
                   model_uri=MIXS_6_2_RC.Agriculture_lib_reads_seqd, domain=Agriculture, range=int)

slots.Agriculture_lib_screen = Slot(uri=MIXS['0000043'], name="Agriculture_lib_screen", curie=MIXS.curie('0000043'),
                   model_uri=MIXS_6_2_RC.Agriculture_lib_screen, domain=Agriculture, range=str)

slots.Agriculture_lib_size = Slot(uri=MIXS['0000039'], name="Agriculture_lib_size", curie=MIXS.curie('0000039'),
                   model_uri=MIXS_6_2_RC.Agriculture_lib_size, domain=Agriculture, range=Optional[int])

slots.Agriculture_lib_vector = Slot(uri=MIXS['0000042'], name="Agriculture_lib_vector", curie=MIXS.curie('0000042'),
                   model_uri=MIXS_6_2_RC.Agriculture_lib_vector, domain=Agriculture, range=str)

slots.Agriculture_library_prep_kit = Slot(uri=MIXS['0001145'], name="Agriculture_library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=MIXS_6_2_RC.Agriculture_library_prep_kit, domain=Agriculture, range=Optional[str])

slots.Agriculture_local_class = Slot(uri=MIXS['0000330'], name="Agriculture_local_class", curie=MIXS.curie('0000330'),
                   model_uri=MIXS_6_2_RC.Agriculture_local_class, domain=Agriculture, range=Optional[str])

slots.Agriculture_local_class_meth = Slot(uri=MIXS['0000331'], name="Agriculture_local_class_meth", curie=MIXS.curie('0000331'),
                   model_uri=MIXS_6_2_RC.Agriculture_local_class_meth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Agriculture_micro_biomass_meth = Slot(uri=MIXS['0000339'], name="Agriculture_micro_biomass_meth", curie=MIXS.curie('0000339'),
                   model_uri=MIXS_6_2_RC.Agriculture_micro_biomass_meth, domain=Agriculture, range=str,
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Agriculture_microbial_biomass = Slot(uri=MIXS['0000650'], name="Agriculture_microbial_biomass", curie=MIXS.curie('0000650'),
                   model_uri=MIXS_6_2_RC.Agriculture_microbial_biomass, domain=Agriculture, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_mid = Slot(uri=MIXS['0000047'], name="Agriculture_mid", curie=MIXS.curie('0000047'),
                   model_uri=MIXS_6_2_RC.Agriculture_mid, domain=Agriculture, range=str,
                   pattern=re.compile(r'^[ACGTRKSYMWBHDVN]+$'))

slots.Agriculture_non_min_nutr_regm = Slot(uri=MIXS['0000571'], name="Agriculture_non_min_nutr_regm", curie=MIXS.curie('0000571'),
                   model_uri=MIXS_6_2_RC.Agriculture_non_min_nutr_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_nucl_acid_amp = Slot(uri=MIXS['0000038'], name="Agriculture_nucl_acid_amp", curie=MIXS.curie('0000038'),
                   model_uri=MIXS_6_2_RC.Agriculture_nucl_acid_amp, domain=Agriculture, range=str,
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Agriculture_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="Agriculture_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.Agriculture_nucl_acid_ext, domain=Agriculture, range=str,
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Agriculture_organism_count = Slot(uri=MIXS['0000103'], name="Agriculture_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.Agriculture_organism_count, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="Agriculture_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.Agriculture_oxy_stat_samp, domain=Agriculture, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.Agriculture_pathogenicity = Slot(uri=MIXS['0000027'], name="Agriculture_pathogenicity", curie=MIXS.curie('0000027'),
                   model_uri=MIXS_6_2_RC.Agriculture_pathogenicity, domain=Agriculture, range=str)

slots.Agriculture_pcr_cond = Slot(uri=MIXS['0000049'], name="Agriculture_pcr_cond", curie=MIXS.curie('0000049'),
                   model_uri=MIXS_6_2_RC.Agriculture_pcr_cond, domain=Agriculture, range=str)

slots.Agriculture_pcr_primers = Slot(uri=MIXS['0000046'], name="Agriculture_pcr_primers", curie=MIXS.curie('0000046'),
                   model_uri=MIXS_6_2_RC.Agriculture_pcr_primers, domain=Agriculture, range=str)

slots.Agriculture_perturbation = Slot(uri=MIXS['0000754'], name="Agriculture_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.Agriculture_perturbation, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_pesticide_regm = Slot(uri=MIXS['0000573'], name="Agriculture_pesticide_regm", curie=MIXS.curie('0000573'),
                   model_uri=MIXS_6_2_RC.Agriculture_pesticide_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_ph_meth = Slot(uri=MIXS['0001106'], name="Agriculture_ph_meth", curie=MIXS.curie('0001106'),
                   model_uri=MIXS_6_2_RC.Agriculture_ph_meth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Agriculture_ph_regm = Slot(uri=MIXS['0001056'], name="Agriculture_ph_regm", curie=MIXS.curie('0001056'),
                   model_uri=MIXS_6_2_RC.Agriculture_ph_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_plant_growth_med = Slot(uri=MIXS['0001057'], name="Agriculture_plant_growth_med", curie=MIXS.curie('0001057'),
                   model_uri=MIXS_6_2_RC.Agriculture_plant_growth_med, domain=Agriculture, range=Optional[str])

slots.Agriculture_plant_product = Slot(uri=MIXS['0001058'], name="Agriculture_plant_product", curie=MIXS.curie('0001058'),
                   model_uri=MIXS_6_2_RC.Agriculture_plant_product, domain=Agriculture, range=Optional[str])

slots.Agriculture_plant_struc = Slot(uri=MIXS['0001060'], name="Agriculture_plant_struc", curie=MIXS.curie('0001060'),
                   model_uri=MIXS_6_2_RC.Agriculture_plant_struc, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.Agriculture_pool_dna_extracts = Slot(uri=MIXS['0000325'], name="Agriculture_pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=MIXS_6_2_RC.Agriculture_pool_dna_extracts, domain=Agriculture, range=str)

slots.Agriculture_prev_land_use_meth = Slot(uri=MIXS['0000316'], name="Agriculture_prev_land_use_meth", curie=MIXS.curie('0000316'),
                   model_uri=MIXS_6_2_RC.Agriculture_prev_land_use_meth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Agriculture_previous_land_use = Slot(uri=MIXS['0000315'], name="Agriculture_previous_land_use", curie=MIXS.curie('0000315'),
                   model_uri=MIXS_6_2_RC.Agriculture_previous_land_use, domain=Agriculture, range=Optional[str])

slots.Agriculture_profile_position = Slot(uri=MIXS['0001084'], name="Agriculture_profile_position", curie=MIXS.curie('0001084'),
                   model_uri=MIXS_6_2_RC.Agriculture_profile_position, domain=Agriculture, range=Optional[Union[str, "PROFILEPOSITIONENUM"]])

slots.Agriculture_rel_location = Slot(uri=MIXS['0001161'], name="Agriculture_rel_location", curie=MIXS.curie('0001161'),
                   model_uri=MIXS_6_2_RC.Agriculture_rel_location, domain=Agriculture, range=Optional[str])

slots.Agriculture_salt_regm = Slot(uri=MIXS['0000582'], name="Agriculture_salt_regm", curie=MIXS.curie('0000582'),
                   model_uri=MIXS_6_2_RC.Agriculture_salt_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_samp_collect_device = Slot(uri=MIXS['0000002'], name="Agriculture_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.Agriculture_samp_collect_device, domain=Agriculture, range=str)

slots.Agriculture_samp_collect_method = Slot(uri=MIXS['0001225'], name="Agriculture_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=MIXS_6_2_RC.Agriculture_samp_collect_method, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_samp_mat_process = Slot(uri=MIXS['0000016'], name="Agriculture_samp_mat_process", curie=MIXS.curie('0000016'),
                   model_uri=MIXS_6_2_RC.Agriculture_samp_mat_process, domain=Agriculture, range=str)

slots.Agriculture_samp_pooling = Slot(uri=MIXS['0001153'], name="Agriculture_samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=MIXS_6_2_RC.Agriculture_samp_pooling, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_samp_size = Slot(uri=MIXS['0000001'], name="Agriculture_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.Agriculture_samp_size, domain=Agriculture, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_samp_store_dur = Slot(uri=MIXS['0000116'], name="Agriculture_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.Agriculture_samp_store_dur, domain=Agriculture, range=str,
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.Agriculture_samp_store_loc = Slot(uri=MIXS['0000755'], name="Agriculture_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.Agriculture_samp_store_loc, domain=Agriculture, range=str)

slots.Agriculture_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Agriculture_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.Agriculture_samp_vol_we_dna_ext, domain=Agriculture, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_season_environment = Slot(uri=MIXS['0001068'], name="Agriculture_season_environment", curie=MIXS.curie('0001068'),
                   model_uri=MIXS_6_2_RC.Agriculture_season_environment, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_season_precpt = Slot(uri=MIXS['0000645'], name="Agriculture_season_precpt", curie=MIXS.curie('0000645'),
                   model_uri=MIXS_6_2_RC.Agriculture_season_precpt, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_seq_quality_check = Slot(uri=MIXS['0000051'], name="Agriculture_seq_quality_check", curie=MIXS.curie('0000051'),
                   model_uri=MIXS_6_2_RC.Agriculture_seq_quality_check, domain=Agriculture, range=Optional[Union[str, "SEQQUALITYCHECKENUM"]])

slots.Agriculture_sieving = Slot(uri=MIXS['0000322'], name="Agriculture_sieving", curie=MIXS.curie('0000322'),
                   model_uri=MIXS_6_2_RC.Agriculture_sieving, domain=Agriculture, range=str)

slots.Agriculture_slope_aspect = Slot(uri=MIXS['0000647'], name="Agriculture_slope_aspect", curie=MIXS.curie('0000647'),
                   model_uri=MIXS_6_2_RC.Agriculture_slope_aspect, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_slope_gradient = Slot(uri=MIXS['0000646'], name="Agriculture_slope_gradient", curie=MIXS.curie('0000646'),
                   model_uri=MIXS_6_2_RC.Agriculture_slope_gradient, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_soil_conductivity = Slot(uri=MIXS['0001158'], name="Agriculture_soil_conductivity", curie=MIXS.curie('0001158'),
                   model_uri=MIXS_6_2_RC.Agriculture_soil_conductivity, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_soil_cover = Slot(uri=MIXS['0001159'], name="Agriculture_soil_cover", curie=MIXS.curie('0001159'),
                   model_uri=MIXS_6_2_RC.Agriculture_soil_cover, domain=Agriculture, range=Optional[str])

slots.Agriculture_soil_horizon = Slot(uri=MIXS['0001082'], name="Agriculture_soil_horizon", curie=MIXS.curie('0001082'),
                   model_uri=MIXS_6_2_RC.Agriculture_soil_horizon, domain=Agriculture, range=Optional[Union[str, "SOILHORIZONENUM"]])

slots.Agriculture_soil_pH = Slot(uri=MIXS['0001160'], name="Agriculture_soil_pH", curie=MIXS.curie('0001160'),
                   model_uri=MIXS_6_2_RC.Agriculture_soil_pH, domain=Agriculture, range=Optional[float])

slots.Agriculture_soil_temp = Slot(uri=MIXS['0001163'], name="Agriculture_soil_temp", curie=MIXS.curie('0001163'),
                   model_uri=MIXS_6_2_RC.Agriculture_soil_temp, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_soil_type = Slot(uri=MIXS['0000332'], name="Agriculture_soil_type", curie=MIXS.curie('0000332'),
                   model_uri=MIXS_6_2_RC.Agriculture_soil_type, domain=Agriculture, range=str)

slots.Agriculture_soil_type_meth = Slot(uri=MIXS['0000334'], name="Agriculture_soil_type_meth", curie=MIXS.curie('0000334'),
                   model_uri=MIXS_6_2_RC.Agriculture_soil_type_meth, domain=Agriculture, range=str,
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Agriculture_sop = Slot(uri=MIXS['0000090'], name="Agriculture_sop", curie=MIXS.curie('0000090'),
                   model_uri=MIXS_6_2_RC.Agriculture_sop, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_source_mat_id = Slot(uri=MIXS['0000026'], name="Agriculture_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS_6_2_RC.Agriculture_source_mat_id, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_specific_host = Slot(uri=MIXS['0000029'], name="Agriculture_specific_host", curie=MIXS.curie('0000029'),
                   model_uri=MIXS_6_2_RC.Agriculture_specific_host, domain=Agriculture, range=str)

slots.Agriculture_standing_water_regm = Slot(uri=MIXS['0001069'], name="Agriculture_standing_water_regm", curie=MIXS.curie('0001069'),
                   model_uri=MIXS_6_2_RC.Agriculture_standing_water_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_store_cond = Slot(uri=MIXS['0000327'], name="Agriculture_store_cond", curie=MIXS.curie('0000327'),
                   model_uri=MIXS_6_2_RC.Agriculture_store_cond, domain=Agriculture, range=str)

slots.Agriculture_target_gene = Slot(uri=MIXS['0000044'], name="Agriculture_target_gene", curie=MIXS.curie('0000044'),
                   model_uri=MIXS_6_2_RC.Agriculture_target_gene, domain=Agriculture, range=str)

slots.Agriculture_target_subfragment = Slot(uri=MIXS['0000045'], name="Agriculture_target_subfragment", curie=MIXS.curie('0000045'),
                   model_uri=MIXS_6_2_RC.Agriculture_target_subfragment, domain=Agriculture, range=str)

slots.Agriculture_temp = Slot(uri=MIXS['0000113'], name="Agriculture_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.Agriculture_temp, domain=Agriculture, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_tillage = Slot(uri=MIXS['0001081'], name="Agriculture_tillage", curie=MIXS.curie('0001081'),
                   model_uri=MIXS_6_2_RC.Agriculture_tillage, domain=Agriculture, range=Optional[Union[Union[str, "TILLAGEENUM"], List[Union[str, "TILLAGEENUM"]]]])

slots.Agriculture_tot_carb = Slot(uri=MIXS['0000525'], name="Agriculture_tot_carb", curie=MIXS.curie('0000525'),
                   model_uri=MIXS_6_2_RC.Agriculture_tot_carb, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_tot_nitro_cont_meth = Slot(uri=MIXS['0000338'], name="Agriculture_tot_nitro_cont_meth", curie=MIXS.curie('0000338'),
                   model_uri=MIXS_6_2_RC.Agriculture_tot_nitro_cont_meth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Agriculture_tot_nitro_content = Slot(uri=MIXS['0000530'], name="Agriculture_tot_nitro_content", curie=MIXS.curie('0000530'),
                   model_uri=MIXS_6_2_RC.Agriculture_tot_nitro_content, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_tot_org_c_meth = Slot(uri=MIXS['0000337'], name="Agriculture_tot_org_c_meth", curie=MIXS.curie('0000337'),
                   model_uri=MIXS_6_2_RC.Agriculture_tot_org_c_meth, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Agriculture_tot_org_carb = Slot(uri=MIXS['0000533'], name="Agriculture_tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=MIXS_6_2_RC.Agriculture_tot_org_carb, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_tot_phosphate = Slot(uri=MIXS['0000689'], name="Agriculture_tot_phosphate", curie=MIXS.curie('0000689'),
                   model_uri=MIXS_6_2_RC.Agriculture_tot_phosphate, domain=Agriculture, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Agriculture_trophic_level = Slot(uri=MIXS['0000032'], name="Agriculture_trophic_level", curie=MIXS.curie('0000032'),
                   model_uri=MIXS_6_2_RC.Agriculture_trophic_level, domain=Agriculture, range=Optional[Union[str, "TROPHICLEVELENUM"]])

slots.Agriculture_water_pH = Slot(uri=MIXS['0001175'], name="Agriculture_water_pH", curie=MIXS.curie('0001175'),
                   model_uri=MIXS_6_2_RC.Agriculture_water_pH, domain=Agriculture, range=Optional[float])

slots.Agriculture_water_temp_regm = Slot(uri=MIXS['0000590'], name="Agriculture_water_temp_regm", curie=MIXS.curie('0000590'),
                   model_uri=MIXS_6_2_RC.Agriculture_water_temp_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Agriculture_watering_regm = Slot(uri=MIXS['0000591'], name="Agriculture_watering_regm", curie=MIXS.curie('0000591'),
                   model_uri=MIXS_6_2_RC.Agriculture_watering_regm, domain=Agriculture, range=Optional[Union[str, List[str]]])

slots.Air_air_PM_concen = Slot(uri=MIXS['0000108'], name="Air_air_PM_concen", curie=MIXS.curie('0000108'),
                   model_uri=MIXS_6_2_RC.Air_air_PM_concen, domain=Air, range=Optional[Union[str, List[str]]])

slots.Air_alt = Slot(uri=MIXS['0000094'], name="Air_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS_6_2_RC.Air_alt, domain=Air, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Air_carb_dioxide = Slot(uri=MIXS['0000097'], name="Air_carb_dioxide", curie=MIXS.curie('0000097'),
                   model_uri=MIXS_6_2_RC.Air_carb_dioxide, domain=Air, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Air_chem_administration = Slot(uri=MIXS['0000751'], name="Air_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.Air_chem_administration, domain=Air, range=Optional[Union[str, List[str]]])

slots.Air_elev = Slot(uri=MIXS['0000093'], name="Air_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.Air_elev, domain=Air, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Air_humidity = Slot(uri=MIXS['0000100'], name="Air_humidity", curie=MIXS.curie('0000100'),
                   model_uri=MIXS_6_2_RC.Air_humidity, domain=Air, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Air_methane = Slot(uri=MIXS['0000101'], name="Air_methane", curie=MIXS.curie('0000101'),
                   model_uri=MIXS_6_2_RC.Air_methane, domain=Air, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Air_organism_count = Slot(uri=MIXS['0000103'], name="Air_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.Air_organism_count, domain=Air, range=Optional[Union[str, List[str]]])

slots.Air_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="Air_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.Air_oxy_stat_samp, domain=Air, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.Air_perturbation = Slot(uri=MIXS['0000754'], name="Air_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.Air_perturbation, domain=Air, range=Optional[Union[str, List[str]]])

slots.Air_samp_store_dur = Slot(uri=MIXS['0000116'], name="Air_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.Air_samp_store_dur, domain=Air, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.Air_samp_store_loc = Slot(uri=MIXS['0000755'], name="Air_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.Air_samp_store_loc, domain=Air, range=Optional[str])

slots.Air_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Air_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.Air_samp_vol_we_dna_ext, domain=Air, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Air_temp = Slot(uri=MIXS['0000113'], name="Air_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.Air_temp, domain=Air, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Air_ventilation_type = Slot(uri=MIXS['0000756'], name="Air_ventilation_type", curie=MIXS.curie('0000756'),
                   model_uri=MIXS_6_2_RC.Air_ventilation_type, domain=Air, range=Optional[Union[str, List[str]]])

slots.Air_wind_direction = Slot(uri=MIXS['0000757'], name="Air_wind_direction", curie=MIXS.curie('0000757'),
                   model_uri=MIXS_6_2_RC.Air_wind_direction, domain=Air, range=Optional[str])

slots.Air_wind_speed = Slot(uri=MIXS['0000118'], name="Air_wind_speed", curie=MIXS.curie('0000118'),
                   model_uri=MIXS_6_2_RC.Air_wind_speed, domain=Air, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.BuiltEnvironment_air_temp = Slot(uri=MIXS['0000124'], name="BuiltEnvironment_air_temp", curie=MIXS.curie('0000124'),
                   model_uri=MIXS_6_2_RC.BuiltEnvironment_air_temp, domain=BuiltEnvironment, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.BuiltEnvironment_avg_occup = Slot(uri=MIXS['0000775'], name="BuiltEnvironment_avg_occup", curie=MIXS.curie('0000775'),
                   model_uri=MIXS_6_2_RC.BuiltEnvironment_avg_occup, domain=BuiltEnvironment, range=Optional[float])

slots.BuiltEnvironment_carb_dioxide = Slot(uri=MIXS['0000097'], name="BuiltEnvironment_carb_dioxide", curie=MIXS.curie('0000097'),
                   model_uri=MIXS_6_2_RC.BuiltEnvironment_carb_dioxide, domain=BuiltEnvironment, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.BuiltEnvironment_freq_clean = Slot(uri=MIXS['0000226'], name="BuiltEnvironment_freq_clean", curie=MIXS.curie('0000226'),
                   model_uri=MIXS_6_2_RC.BuiltEnvironment_freq_clean, domain=BuiltEnvironment, range=Optional[Union[str, "FREQCLEANENUM"]])

slots.BuiltEnvironment_indoor_surf = Slot(uri=MIXS['0000764'], name="BuiltEnvironment_indoor_surf", curie=MIXS.curie('0000764'),
                   model_uri=MIXS_6_2_RC.BuiltEnvironment_indoor_surf, domain=BuiltEnvironment, range=Union[str, "INDOORSURFENUM"])

slots.BuiltEnvironment_organism_count = Slot(uri=MIXS['0000103'], name="BuiltEnvironment_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.BuiltEnvironment_organism_count, domain=BuiltEnvironment, range=Union[str, List[str]])

slots.BuiltEnvironment_surf_material = Slot(uri=MIXS['0000758'], name="BuiltEnvironment_surf_material", curie=MIXS.curie('0000758'),
                   model_uri=MIXS_6_2_RC.BuiltEnvironment_surf_material, domain=BuiltEnvironment, range=Union[str, "SURFMATERIALENUM"])

slots.BuiltEnvironment_ventilation_type = Slot(uri=MIXS['0000756'], name="BuiltEnvironment_ventilation_type", curie=MIXS.curie('0000756'),
                   model_uri=MIXS_6_2_RC.BuiltEnvironment_ventilation_type, domain=BuiltEnvironment, range=Union[str, List[str]])

slots.FoodAnimalAndAnimalFeed_enrichment_protocol = Slot(uri=MIXS['0001177'], name="FoodAnimalAndAnimalFeed_enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_enrichment_protocol, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodAnimalAndAnimalFeed_experimental_factor = Slot(uri=MIXS['0000008'], name="FoodAnimalAndAnimalFeed_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_experimental_factor, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^\S+.*\S+ \[[a-zA-Z]{2,}:\d+\]$'))

slots.FoodAnimalAndAnimalFeed_food_contact_surf = Slot(uri=MIXS['0001131'], name="FoodAnimalAndAnimalFeed_food_contact_surf", curie=MIXS.curie('0001131'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_food_contact_surf, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.FoodAnimalAndAnimalFeed_food_origin = Slot(uri=MIXS['0001207'], name="FoodAnimalAndAnimalFeed_food_origin", curie=MIXS.curie('0001207'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_food_origin, domain=FoodAnimalAndAnimalFeed, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+): ([^\s-]{1,2}|[^\s-]+.+[^\s-]+), ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodAnimalAndAnimalFeed_food_pack_medium = Slot(uri=MIXS['0001134'], name="FoodAnimalAndAnimalFeed_food_pack_medium", curie=MIXS.curie('0001134'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_food_pack_medium, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.FoodAnimalAndAnimalFeed_food_prod = Slot(uri=MIXS['0001211'], name="FoodAnimalAndAnimalFeed_food_prod", curie=MIXS.curie('0001211'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_food_prod, domain=FoodAnimalAndAnimalFeed, range=Union[str, List[str]],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.FoodAnimalAndAnimalFeed_food_product_qual = Slot(uri=MIXS['0001213'], name="FoodAnimalAndAnimalFeed_food_product_qual", curie=MIXS.curie('0001213'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_food_product_qual, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.FoodAnimalAndAnimalFeed_food_product_type = Slot(uri=MIXS['0001184'], name="FoodAnimalAndAnimalFeed_food_product_type", curie=MIXS.curie('0001184'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_food_product_type, domain=FoodAnimalAndAnimalFeed, range=str)

slots.FoodAnimalAndAnimalFeed_food_source = Slot(uri=MIXS['0001139'], name="FoodAnimalAndAnimalFeed_food_source", curie=MIXS.curie('0001139'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_food_source, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_intended_consumer = Slot(uri=MIXS['0001144'], name="FoodAnimalAndAnimalFeed_intended_consumer", curie=MIXS.curie('0001144'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_intended_consumer, domain=FoodAnimalAndAnimalFeed, range=Union[str, List[str]])

slots.FoodAnimalAndAnimalFeed_library_prep_kit = Slot(uri=MIXS['0001145'], name="FoodAnimalAndAnimalFeed_library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_library_prep_kit, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="FoodAnimalAndAnimalFeed_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_nucl_acid_ext, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.FoodAnimalAndAnimalFeed_organism_count = Slot(uri=MIXS['0000103'], name="FoodAnimalAndAnimalFeed_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_organism_count, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.FoodAnimalAndAnimalFeed_perturbation = Slot(uri=MIXS['0000754'], name="FoodAnimalAndAnimalFeed_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_perturbation, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.FoodAnimalAndAnimalFeed_pool_dna_extracts = Slot(uri=MIXS['0000325'], name="FoodAnimalAndAnimalFeed_pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_pool_dna_extracts, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_samp_collect_device = Slot(uri=MIXS['0000002'], name="FoodAnimalAndAnimalFeed_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_samp_collect_device, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_samp_collect_method = Slot(uri=MIXS['0001225'], name="FoodAnimalAndAnimalFeed_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_samp_collect_method, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodAnimalAndAnimalFeed_samp_pooling = Slot(uri=MIXS['0001153'], name="FoodAnimalAndAnimalFeed_samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_samp_pooling, domain=FoodAnimalAndAnimalFeed, range=Optional[Union[str, List[str]]])

slots.FoodAnimalAndAnimalFeed_samp_purpose = Slot(uri=MIXS['0001151'], name="FoodAnimalAndAnimalFeed_samp_purpose", curie=MIXS.curie('0001151'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_samp_purpose, domain=FoodAnimalAndAnimalFeed, range=str)

slots.FoodAnimalAndAnimalFeed_samp_size = Slot(uri=MIXS['0000001'], name="FoodAnimalAndAnimalFeed_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_samp_size, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodAnimalAndAnimalFeed_samp_source_mat_cat = Slot(uri=MIXS['0001154'], name="FoodAnimalAndAnimalFeed_samp_source_mat_cat", curie=MIXS.curie('0001154'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_samp_source_mat_cat, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_samp_stor_device = Slot(uri=MIXS['0001228'], name="FoodAnimalAndAnimalFeed_samp_stor_device", curie=MIXS.curie('0001228'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_samp_stor_device, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_samp_stor_media = Slot(uri=MIXS['0001229'], name="FoodAnimalAndAnimalFeed_samp_stor_media", curie=MIXS.curie('0001229'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_samp_stor_media, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+)|(([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\])$'))

slots.FoodAnimalAndAnimalFeed_samp_store_dur = Slot(uri=MIXS['0000116'], name="FoodAnimalAndAnimalFeed_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_samp_store_dur, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.FoodAnimalAndAnimalFeed_samp_store_loc = Slot(uri=MIXS['0000755'], name="FoodAnimalAndAnimalFeed_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_samp_store_loc, domain=FoodAnimalAndAnimalFeed, range=Optional[str])

slots.FoodAnimalAndAnimalFeed_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="FoodAnimalAndAnimalFeed_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_samp_vol_we_dna_ext, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodAnimalAndAnimalFeed_temp = Slot(uri=MIXS['0000113'], name="FoodAnimalAndAnimalFeed_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.FoodAnimalAndAnimalFeed_temp, domain=FoodAnimalAndAnimalFeed, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_air_PM_concen = Slot(uri=MIXS['0000108'], name="FoodFarmEnvironment_air_PM_concen", curie=MIXS.curie('0000108'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_air_PM_concen, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.FoodFarmEnvironment_biotic_regm = Slot(uri=MIXS['0001038'], name="FoodFarmEnvironment_biotic_regm", curie=MIXS.curie('0001038'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_biotic_regm, domain=FoodFarmEnvironment, range=Union[str, List[str]])

slots.FoodFarmEnvironment_chem_administration = Slot(uri=MIXS['0000751'], name="FoodFarmEnvironment_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_chem_administration, domain=FoodFarmEnvironment, range=Union[str, List[str]])

slots.FoodFarmEnvironment_crop_rotation = Slot(uri=MIXS['0000318'], name="FoodFarmEnvironment_crop_rotation", curie=MIXS.curie('0000318'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_crop_rotation, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_depth = Slot(uri=MIXS['0000018'], name="FoodFarmEnvironment_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_depth, domain=FoodFarmEnvironment, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_enrichment_protocol = Slot(uri=MIXS['0001177'], name="FoodFarmEnvironment_enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_enrichment_protocol, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_food_contact_surf = Slot(uri=MIXS['0001131'], name="FoodFarmEnvironment_food_contact_surf", curie=MIXS.curie('0001131'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_food_contact_surf, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.FoodFarmEnvironment_food_pack_medium = Slot(uri=MIXS['0001134'], name="FoodFarmEnvironment_food_pack_medium", curie=MIXS.curie('0001134'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_food_pack_medium, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.FoodFarmEnvironment_food_product_type = Slot(uri=MIXS['0001184'], name="FoodFarmEnvironment_food_product_type", curie=MIXS.curie('0001184'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_food_product_type, domain=FoodFarmEnvironment, range=str)

slots.FoodFarmEnvironment_food_source = Slot(uri=MIXS['0001139'], name="FoodFarmEnvironment_food_source", curie=MIXS.curie('0001139'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_food_source, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_host_age = Slot(uri=MIXS['0000255'], name="FoodFarmEnvironment_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_host_age, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_host_disease_stat = Slot(uri=MIXS['0000031'], name="FoodFarmEnvironment_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_host_disease_stat, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_host_genotype = Slot(uri=MIXS['0000365'], name="FoodFarmEnvironment_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_host_genotype, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_host_height = Slot(uri=MIXS['0000264'], name="FoodFarmEnvironment_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_host_height, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_host_length = Slot(uri=MIXS['0000256'], name="FoodFarmEnvironment_host_length", curie=MIXS.curie('0000256'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_host_length, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_host_phenotype = Slot(uri=MIXS['0000874'], name="FoodFarmEnvironment_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_host_phenotype, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_host_taxid = Slot(uri=MIXS['0000250'], name="FoodFarmEnvironment_host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_host_taxid, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_host_tot_mass = Slot(uri=MIXS['0000263'], name="FoodFarmEnvironment_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_host_tot_mass, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_humidity = Slot(uri=MIXS['0000100'], name="FoodFarmEnvironment_humidity", curie=MIXS.curie('0000100'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_humidity, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_intended_consumer = Slot(uri=MIXS['0001144'], name="FoodFarmEnvironment_intended_consumer", curie=MIXS.curie('0001144'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_intended_consumer, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.FoodFarmEnvironment_library_prep_kit = Slot(uri=MIXS['0001145'], name="FoodFarmEnvironment_library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_library_prep_kit, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="FoodFarmEnvironment_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_nucl_acid_ext, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.FoodFarmEnvironment_organism_count = Slot(uri=MIXS['0000103'], name="FoodFarmEnvironment_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_organism_count, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.FoodFarmEnvironment_perturbation = Slot(uri=MIXS['0000754'], name="FoodFarmEnvironment_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_perturbation, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.FoodFarmEnvironment_ph = Slot(uri=MIXS['0001001'], name="FoodFarmEnvironment_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_ph, domain=FoodFarmEnvironment, range=Optional[float])

slots.FoodFarmEnvironment_ph_meth = Slot(uri=MIXS['0001106'], name="FoodFarmEnvironment_ph_meth", curie=MIXS.curie('0001106'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_ph_meth, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.FoodFarmEnvironment_plant_growth_med = Slot(uri=MIXS['0001057'], name="FoodFarmEnvironment_plant_growth_med", curie=MIXS.curie('0001057'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_plant_growth_med, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_previous_land_use = Slot(uri=MIXS['0000315'], name="FoodFarmEnvironment_previous_land_use", curie=MIXS.curie('0000315'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_previous_land_use, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_rel_location = Slot(uri=MIXS['0001161'], name="FoodFarmEnvironment_rel_location", curie=MIXS.curie('0001161'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_rel_location, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_samp_collect_device = Slot(uri=MIXS['0000002'], name="FoodFarmEnvironment_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_samp_collect_device, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_samp_pooling = Slot(uri=MIXS['0001153'], name="FoodFarmEnvironment_samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_samp_pooling, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.FoodFarmEnvironment_samp_purpose = Slot(uri=MIXS['0001151'], name="FoodFarmEnvironment_samp_purpose", curie=MIXS.curie('0001151'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_samp_purpose, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_samp_size = Slot(uri=MIXS['0000001'], name="FoodFarmEnvironment_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_samp_size, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_samp_source_mat_cat = Slot(uri=MIXS['0001154'], name="FoodFarmEnvironment_samp_source_mat_cat", curie=MIXS.curie('0001154'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_samp_source_mat_cat, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_samp_store_dur = Slot(uri=MIXS['0000116'], name="FoodFarmEnvironment_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_samp_store_dur, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.FoodFarmEnvironment_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="FoodFarmEnvironment_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_samp_vol_we_dna_ext, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_season_precpt = Slot(uri=MIXS['0000645'], name="FoodFarmEnvironment_season_precpt", curie=MIXS.curie('0000645'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_season_precpt, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_soil_conductivity = Slot(uri=MIXS['0001158'], name="FoodFarmEnvironment_soil_conductivity", curie=MIXS.curie('0001158'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_soil_conductivity, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_soil_cover = Slot(uri=MIXS['0001159'], name="FoodFarmEnvironment_soil_cover", curie=MIXS.curie('0001159'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_soil_cover, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_soil_pH = Slot(uri=MIXS['0001160'], name="FoodFarmEnvironment_soil_pH", curie=MIXS.curie('0001160'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_soil_pH, domain=FoodFarmEnvironment, range=Optional[float])

slots.FoodFarmEnvironment_soil_temp = Slot(uri=MIXS['0001163'], name="FoodFarmEnvironment_soil_temp", curie=MIXS.curie('0001163'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_soil_temp, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_soil_type = Slot(uri=MIXS['0000332'], name="FoodFarmEnvironment_soil_type", curie=MIXS.curie('0000332'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_soil_type, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_soil_type_meth = Slot(uri=MIXS['0000334'], name="FoodFarmEnvironment_soil_type_meth", curie=MIXS.curie('0000334'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_soil_type_meth, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.FoodFarmEnvironment_temp = Slot(uri=MIXS['0000113'], name="FoodFarmEnvironment_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_temp, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_tillage = Slot(uri=MIXS['0001081'], name="FoodFarmEnvironment_tillage", curie=MIXS.curie('0001081'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_tillage, domain=FoodFarmEnvironment, range=Optional[Union[Union[str, "TILLAGEENUM"], List[Union[str, "TILLAGEENUM"]]]])

slots.FoodFarmEnvironment_tot_nitro_cont_meth = Slot(uri=MIXS['0000338'], name="FoodFarmEnvironment_tot_nitro_cont_meth", curie=MIXS.curie('0000338'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_tot_nitro_cont_meth, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.FoodFarmEnvironment_tot_nitro_content = Slot(uri=MIXS['0000530'], name="FoodFarmEnvironment_tot_nitro_content", curie=MIXS.curie('0000530'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_tot_nitro_content, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_tot_org_c_meth = Slot(uri=MIXS['0000337'], name="FoodFarmEnvironment_tot_org_c_meth", curie=MIXS.curie('0000337'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_tot_org_c_meth, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.FoodFarmEnvironment_tot_org_carb = Slot(uri=MIXS['0000533'], name="FoodFarmEnvironment_tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_tot_org_carb, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_turbidity = Slot(uri=MIXS['0000191'], name="FoodFarmEnvironment_turbidity", curie=MIXS.curie('0000191'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_turbidity, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFarmEnvironment_ventilation_type = Slot(uri=MIXS['0000756'], name="FoodFarmEnvironment_ventilation_type", curie=MIXS.curie('0000756'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_ventilation_type, domain=FoodFarmEnvironment, range=Optional[Union[str, List[str]]])

slots.FoodFarmEnvironment_water_pH = Slot(uri=MIXS['0001175'], name="FoodFarmEnvironment_water_pH", curie=MIXS.curie('0001175'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_water_pH, domain=FoodFarmEnvironment, range=Optional[float])

slots.FoodFarmEnvironment_wind_direction = Slot(uri=MIXS['0000757'], name="FoodFarmEnvironment_wind_direction", curie=MIXS.curie('0000757'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_wind_direction, domain=FoodFarmEnvironment, range=Optional[str])

slots.FoodFarmEnvironment_wind_speed = Slot(uri=MIXS['0000118'], name="FoodFarmEnvironment_wind_speed", curie=MIXS.curie('0000118'),
                   model_uri=MIXS_6_2_RC.FoodFarmEnvironment_wind_speed, domain=FoodFarmEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFoodProductionFacility_air_temp = Slot(uri=MIXS['0000124'], name="FoodFoodProductionFacility_air_temp", curie=MIXS.curie('0000124'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_air_temp, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFoodProductionFacility_avg_occup = Slot(uri=MIXS['0000775'], name="FoodFoodProductionFacility_avg_occup", curie=MIXS.curie('0000775'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_avg_occup, domain=FoodFoodProductionFacility, range=Optional[float])

slots.FoodFoodProductionFacility_enrichment_protocol = Slot(uri=MIXS['0001177'], name="FoodFoodProductionFacility_enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_enrichment_protocol, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFoodProductionFacility_experimental_factor = Slot(uri=MIXS['0000008'], name="FoodFoodProductionFacility_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_experimental_factor, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^\S+.*\S+ \[[a-zA-Z]{2,}:\d+\]$'))

slots.FoodFoodProductionFacility_food_contact_surf = Slot(uri=MIXS['0001131'], name="FoodFoodProductionFacility_food_contact_surf", curie=MIXS.curie('0001131'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_food_contact_surf, domain=FoodFoodProductionFacility, range=Union[str, List[str]])

slots.FoodFoodProductionFacility_food_origin = Slot(uri=MIXS['0001207'], name="FoodFoodProductionFacility_food_origin", curie=MIXS.curie('0001207'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_food_origin, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+): ([^\s-]{1,2}|[^\s-]+.+[^\s-]+), ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFoodProductionFacility_food_pack_medium = Slot(uri=MIXS['0001134'], name="FoodFoodProductionFacility_food_pack_medium", curie=MIXS.curie('0001134'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_food_pack_medium, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.FoodFoodProductionFacility_food_prod = Slot(uri=MIXS['0001211'], name="FoodFoodProductionFacility_food_prod", curie=MIXS.curie('0001211'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_food_prod, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.FoodFoodProductionFacility_food_product_qual = Slot(uri=MIXS['0001213'], name="FoodFoodProductionFacility_food_product_qual", curie=MIXS.curie('0001213'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_food_product_qual, domain=FoodFoodProductionFacility, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.FoodFoodProductionFacility_food_product_type = Slot(uri=MIXS['0001184'], name="FoodFoodProductionFacility_food_product_type", curie=MIXS.curie('0001184'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_food_product_type, domain=FoodFoodProductionFacility, range=str)

slots.FoodFoodProductionFacility_food_source = Slot(uri=MIXS['0001139'], name="FoodFoodProductionFacility_food_source", curie=MIXS.curie('0001139'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_food_source, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_freq_clean = Slot(uri=MIXS['0000226'], name="FoodFoodProductionFacility_freq_clean", curie=MIXS.curie('0000226'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_freq_clean, domain=FoodFoodProductionFacility, range=Optional[Union[str, "FREQCLEANENUM"]])

slots.FoodFoodProductionFacility_indoor_surf = Slot(uri=MIXS['0000764'], name="FoodFoodProductionFacility_indoor_surf", curie=MIXS.curie('0000764'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_indoor_surf, domain=FoodFoodProductionFacility, range=Optional[Union[str, "INDOORSURFENUM"]])

slots.FoodFoodProductionFacility_intended_consumer = Slot(uri=MIXS['0001144'], name="FoodFoodProductionFacility_intended_consumer", curie=MIXS.curie('0001144'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_intended_consumer, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.FoodFoodProductionFacility_library_prep_kit = Slot(uri=MIXS['0001145'], name="FoodFoodProductionFacility_library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_library_prep_kit, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="FoodFoodProductionFacility_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_nucl_acid_ext, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.FoodFoodProductionFacility_organism_count = Slot(uri=MIXS['0000103'], name="FoodFoodProductionFacility_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_organism_count, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.FoodFoodProductionFacility_pool_dna_extracts = Slot(uri=MIXS['0000325'], name="FoodFoodProductionFacility_pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_pool_dna_extracts, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_samp_collect_device = Slot(uri=MIXS['0000002'], name="FoodFoodProductionFacility_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_samp_collect_device, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_samp_collect_method = Slot(uri=MIXS['0001225'], name="FoodFoodProductionFacility_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_samp_collect_method, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFoodProductionFacility_samp_pooling = Slot(uri=MIXS['0001153'], name="FoodFoodProductionFacility_samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_samp_pooling, domain=FoodFoodProductionFacility, range=Optional[Union[str, List[str]]])

slots.FoodFoodProductionFacility_samp_purpose = Slot(uri=MIXS['0001151'], name="FoodFoodProductionFacility_samp_purpose", curie=MIXS.curie('0001151'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_samp_purpose, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_samp_size = Slot(uri=MIXS['0000001'], name="FoodFoodProductionFacility_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_samp_size, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFoodProductionFacility_samp_source_mat_cat = Slot(uri=MIXS['0001154'], name="FoodFoodProductionFacility_samp_source_mat_cat", curie=MIXS.curie('0001154'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_samp_source_mat_cat, domain=FoodFoodProductionFacility, range=str)

slots.FoodFoodProductionFacility_samp_stor_device = Slot(uri=MIXS['0001228'], name="FoodFoodProductionFacility_samp_stor_device", curie=MIXS.curie('0001228'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_samp_stor_device, domain=FoodFoodProductionFacility, range=str)

slots.FoodFoodProductionFacility_samp_stor_media = Slot(uri=MIXS['0001229'], name="FoodFoodProductionFacility_samp_stor_media", curie=MIXS.curie('0001229'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_samp_stor_media, domain=FoodFoodProductionFacility, range=str,
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+)|(([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\])$'))

slots.FoodFoodProductionFacility_samp_store_dur = Slot(uri=MIXS['0000116'], name="FoodFoodProductionFacility_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_samp_store_dur, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.FoodFoodProductionFacility_samp_store_loc = Slot(uri=MIXS['0000755'], name="FoodFoodProductionFacility_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_samp_store_loc, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="FoodFoodProductionFacility_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_samp_vol_we_dna_ext, domain=FoodFoodProductionFacility, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodFoodProductionFacility_subspecf_gen_lin = Slot(uri=MIXS['0000020'], name="FoodFoodProductionFacility_subspecf_gen_lin", curie=MIXS.curie('0000020'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_subspecf_gen_lin, domain=FoodFoodProductionFacility, range=Optional[str])

slots.FoodFoodProductionFacility_surf_material = Slot(uri=MIXS['0000758'], name="FoodFoodProductionFacility_surf_material", curie=MIXS.curie('0000758'),
                   model_uri=MIXS_6_2_RC.FoodFoodProductionFacility_surf_material, domain=FoodFoodProductionFacility, range=Optional[Union[str, "SURFMATERIALENUM"]])

slots.FoodHumanFoods_enrichment_protocol = Slot(uri=MIXS['0001177'], name="FoodHumanFoods_enrichment_protocol", curie=MIXS.curie('0001177'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_enrichment_protocol, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodHumanFoods_experimental_factor = Slot(uri=MIXS['0000008'], name="FoodHumanFoods_experimental_factor", curie=MIXS.curie('0000008'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_experimental_factor, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^\S+.*\S+ \[[a-zA-Z]{2,}:\d+\]$'))

slots.FoodHumanFoods_food_contact_surf = Slot(uri=MIXS['0001131'], name="FoodHumanFoods_food_contact_surf", curie=MIXS.curie('0001131'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_food_contact_surf, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.FoodHumanFoods_food_origin = Slot(uri=MIXS['0001207'], name="FoodHumanFoods_food_origin", curie=MIXS.curie('0001207'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_food_origin, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+): ([^\s-]{1,2}|[^\s-]+.+[^\s-]+), ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodHumanFoods_food_pack_medium = Slot(uri=MIXS['0001134'], name="FoodHumanFoods_food_pack_medium", curie=MIXS.curie('0001134'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_food_pack_medium, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.FoodHumanFoods_food_prod = Slot(uri=MIXS['0001211'], name="FoodHumanFoods_food_prod", curie=MIXS.curie('0001211'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_food_prod, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.FoodHumanFoods_food_product_qual = Slot(uri=MIXS['0001213'], name="FoodHumanFoods_food_product_qual", curie=MIXS.curie('0001213'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_food_product_qual, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.FoodHumanFoods_food_product_type = Slot(uri=MIXS['0001184'], name="FoodHumanFoods_food_product_type", curie=MIXS.curie('0001184'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_food_product_type, domain=FoodHumanFoods, range=str)

slots.FoodHumanFoods_food_source = Slot(uri=MIXS['0001139'], name="FoodHumanFoods_food_source", curie=MIXS.curie('0001139'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_food_source, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_intended_consumer = Slot(uri=MIXS['0001144'], name="FoodHumanFoods_intended_consumer", curie=MIXS.curie('0001144'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_intended_consumer, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.FoodHumanFoods_library_prep_kit = Slot(uri=MIXS['0001145'], name="FoodHumanFoods_library_prep_kit", curie=MIXS.curie('0001145'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_library_prep_kit, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_nucl_acid_ext = Slot(uri=MIXS['0000037'], name="FoodHumanFoods_nucl_acid_ext", curie=MIXS.curie('0000037'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_nucl_acid_ext, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.FoodHumanFoods_organism_count = Slot(uri=MIXS['0000103'], name="FoodHumanFoods_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_organism_count, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.FoodHumanFoods_perturbation = Slot(uri=MIXS['0000754'], name="FoodHumanFoods_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_perturbation, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.FoodHumanFoods_pool_dna_extracts = Slot(uri=MIXS['0000325'], name="FoodHumanFoods_pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_pool_dna_extracts, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_samp_collect_device = Slot(uri=MIXS['0000002'], name="FoodHumanFoods_samp_collect_device", curie=MIXS.curie('0000002'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_samp_collect_device, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_samp_collect_method = Slot(uri=MIXS['0001225'], name="FoodHumanFoods_samp_collect_method", curie=MIXS.curie('0001225'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_samp_collect_method, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodHumanFoods_samp_pooling = Slot(uri=MIXS['0001153'], name="FoodHumanFoods_samp_pooling", curie=MIXS.curie('0001153'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_samp_pooling, domain=FoodHumanFoods, range=Optional[Union[str, List[str]]])

slots.FoodHumanFoods_samp_purpose = Slot(uri=MIXS['0001151'], name="FoodHumanFoods_samp_purpose", curie=MIXS.curie('0001151'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_samp_purpose, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_samp_size = Slot(uri=MIXS['0000001'], name="FoodHumanFoods_samp_size", curie=MIXS.curie('0000001'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_samp_size, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodHumanFoods_samp_source_mat_cat = Slot(uri=MIXS['0001154'], name="FoodHumanFoods_samp_source_mat_cat", curie=MIXS.curie('0001154'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_samp_source_mat_cat, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_samp_stor_device = Slot(uri=MIXS['0001228'], name="FoodHumanFoods_samp_stor_device", curie=MIXS.curie('0001228'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_samp_stor_device, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_samp_stor_media = Slot(uri=MIXS['0001229'], name="FoodHumanFoods_samp_stor_media", curie=MIXS.curie('0001229'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_samp_stor_media, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+)|(([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\])$'))

slots.FoodHumanFoods_samp_store_dur = Slot(uri=MIXS['0000116'], name="FoodHumanFoods_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_samp_store_dur, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.FoodHumanFoods_samp_store_loc = Slot(uri=MIXS['0000755'], name="FoodHumanFoods_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_samp_store_loc, domain=FoodHumanFoods, range=Optional[str])

slots.FoodHumanFoods_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="FoodHumanFoods_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_samp_vol_we_dna_ext, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.FoodHumanFoods_temp = Slot(uri=MIXS['0000113'], name="FoodHumanFoods_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.FoodHumanFoods_temp, domain=FoodHumanFoods, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HostAssociated_alt = Slot(uri=MIXS['0000094'], name="HostAssociated_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS_6_2_RC.HostAssociated_alt, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HostAssociated_chem_administration = Slot(uri=MIXS['0000751'], name="HostAssociated_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.HostAssociated_chem_administration, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.HostAssociated_depth = Slot(uri=MIXS['0000018'], name="HostAssociated_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.HostAssociated_depth, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HostAssociated_elev = Slot(uri=MIXS['0000093'], name="HostAssociated_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.HostAssociated_elev, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HostAssociated_gravidity = Slot(uri=MIXS['0000875'], name="HostAssociated_gravidity", curie=MIXS.curie('0000875'),
                   model_uri=MIXS_6_2_RC.HostAssociated_gravidity, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_age = Slot(uri=MIXS['0000255'], name="HostAssociated_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_age, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HostAssociated_host_body_habitat = Slot(uri=MIXS['0000866'], name="HostAssociated_host_body_habitat", curie=MIXS.curie('0000866'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_body_habitat, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_body_site = Slot(uri=MIXS['0000867'], name="HostAssociated_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_body_site, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_body_temp = Slot(uri=MIXS['0000274'], name="HostAssociated_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_body_temp, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HostAssociated_host_color = Slot(uri=MIXS['0000260'], name="HostAssociated_host_color", curie=MIXS.curie('0000260'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_color, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_common_name = Slot(uri=MIXS['0000248'], name="HostAssociated_host_common_name", curie=MIXS.curie('0000248'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_common_name, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_diet = Slot(uri=MIXS['0000869'], name="HostAssociated_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_diet, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.HostAssociated_host_disease_stat = Slot(uri=MIXS['0000031'], name="HostAssociated_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_disease_stat, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_fam_rel = Slot(uri=MIXS['0000872'], name="HostAssociated_host_fam_rel", curie=MIXS.curie('0000872'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_fam_rel, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.HostAssociated_host_genotype = Slot(uri=MIXS['0000365'], name="HostAssociated_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_genotype, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_growth_cond = Slot(uri=MIXS['0000871'], name="HostAssociated_host_growth_cond", curie=MIXS.curie('0000871'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_growth_cond, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HostAssociated_host_height = Slot(uri=MIXS['0000264'], name="HostAssociated_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_height, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HostAssociated_host_last_meal = Slot(uri=MIXS['0000870'], name="HostAssociated_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_last_meal, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.HostAssociated_host_length = Slot(uri=MIXS['0000256'], name="HostAssociated_host_length", curie=MIXS.curie('0000256'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_length, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HostAssociated_host_life_stage = Slot(uri=MIXS['0000251'], name="HostAssociated_host_life_stage", curie=MIXS.curie('0000251'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_life_stage, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_phenotype = Slot(uri=MIXS['0000874'], name="HostAssociated_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_phenotype, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_shape = Slot(uri=MIXS['0000261'], name="HostAssociated_host_shape", curie=MIXS.curie('0000261'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_shape, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_subject_id = Slot(uri=MIXS['0000861'], name="HostAssociated_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_subject_id, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_substrate = Slot(uri=MIXS['0000252'], name="HostAssociated_host_substrate", curie=MIXS.curie('0000252'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_substrate, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_symbiont = Slot(uri=MIXS['0001298'], name="HostAssociated_host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_symbiont, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.HostAssociated_host_taxid = Slot(uri=MIXS['0000250'], name="HostAssociated_host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_taxid, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_host_tot_mass = Slot(uri=MIXS['0000263'], name="HostAssociated_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS_6_2_RC.HostAssociated_host_tot_mass, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HostAssociated_organism_count = Slot(uri=MIXS['0000103'], name="HostAssociated_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.HostAssociated_organism_count, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.HostAssociated_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="HostAssociated_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.HostAssociated_oxy_stat_samp, domain=HostAssociated, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.HostAssociated_perturbation = Slot(uri=MIXS['0000754'], name="HostAssociated_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.HostAssociated_perturbation, domain=HostAssociated, range=Optional[Union[str, List[str]]])

slots.HostAssociated_samp_store_dur = Slot(uri=MIXS['0000116'], name="HostAssociated_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.HostAssociated_samp_store_dur, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.HostAssociated_samp_store_loc = Slot(uri=MIXS['0000755'], name="HostAssociated_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.HostAssociated_samp_store_loc, domain=HostAssociated, range=Optional[str])

slots.HostAssociated_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="HostAssociated_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.HostAssociated_samp_vol_we_dna_ext, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HostAssociated_temp = Slot(uri=MIXS['0000113'], name="HostAssociated_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.HostAssociated_temp, domain=HostAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanAssociated_chem_administration = Slot(uri=MIXS['0000751'], name="HumanAssociated_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_chem_administration, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.HumanAssociated_host_age = Slot(uri=MIXS['0000255'], name="HumanAssociated_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_host_age, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanAssociated_host_body_site = Slot(uri=MIXS['0000867'], name="HumanAssociated_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_host_body_site, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_host_body_temp = Slot(uri=MIXS['0000274'], name="HumanAssociated_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_host_body_temp, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanAssociated_host_diet = Slot(uri=MIXS['0000869'], name="HumanAssociated_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_host_diet, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.HumanAssociated_host_disease_stat = Slot(uri=MIXS['0000031'], name="HumanAssociated_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_host_disease_stat, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_host_fam_rel = Slot(uri=MIXS['0000872'], name="HumanAssociated_host_fam_rel", curie=MIXS.curie('0000872'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_host_fam_rel, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.HumanAssociated_host_genotype = Slot(uri=MIXS['0000365'], name="HumanAssociated_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_host_genotype, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_host_height = Slot(uri=MIXS['0000264'], name="HumanAssociated_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_host_height, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanAssociated_host_last_meal = Slot(uri=MIXS['0000870'], name="HumanAssociated_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_host_last_meal, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.HumanAssociated_host_phenotype = Slot(uri=MIXS['0000874'], name="HumanAssociated_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_host_phenotype, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_host_subject_id = Slot(uri=MIXS['0000861'], name="HumanAssociated_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_host_subject_id, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_host_symbiont = Slot(uri=MIXS['0001298'], name="HumanAssociated_host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_host_symbiont, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.HumanAssociated_host_tot_mass = Slot(uri=MIXS['0000263'], name="HumanAssociated_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_host_tot_mass, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanAssociated_organism_count = Slot(uri=MIXS['0000103'], name="HumanAssociated_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_organism_count, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.HumanAssociated_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="HumanAssociated_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_oxy_stat_samp, domain=HumanAssociated, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.HumanAssociated_perturbation = Slot(uri=MIXS['0000754'], name="HumanAssociated_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_perturbation, domain=HumanAssociated, range=Optional[Union[str, List[str]]])

slots.HumanAssociated_samp_store_dur = Slot(uri=MIXS['0000116'], name="HumanAssociated_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_samp_store_dur, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.HumanAssociated_samp_store_loc = Slot(uri=MIXS['0000755'], name="HumanAssociated_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_samp_store_loc, domain=HumanAssociated, range=Optional[str])

slots.HumanAssociated_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="HumanAssociated_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_samp_vol_we_dna_ext, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanAssociated_temp = Slot(uri=MIXS['0000113'], name="HumanAssociated_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.HumanAssociated_temp, domain=HumanAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanGut_chem_administration = Slot(uri=MIXS['0000751'], name="HumanGut_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.HumanGut_chem_administration, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.HumanGut_host_age = Slot(uri=MIXS['0000255'], name="HumanGut_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS_6_2_RC.HumanGut_host_age, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanGut_host_body_site = Slot(uri=MIXS['0000867'], name="HumanGut_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=MIXS_6_2_RC.HumanGut_host_body_site, domain=HumanGut, range=Optional[str])

slots.HumanGut_host_body_temp = Slot(uri=MIXS['0000274'], name="HumanGut_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=MIXS_6_2_RC.HumanGut_host_body_temp, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanGut_host_diet = Slot(uri=MIXS['0000869'], name="HumanGut_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=MIXS_6_2_RC.HumanGut_host_diet, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.HumanGut_host_disease_stat = Slot(uri=MIXS['0000031'], name="HumanGut_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS_6_2_RC.HumanGut_host_disease_stat, domain=HumanGut, range=Optional[str])

slots.HumanGut_host_fam_rel = Slot(uri=MIXS['0000872'], name="HumanGut_host_fam_rel", curie=MIXS.curie('0000872'),
                   model_uri=MIXS_6_2_RC.HumanGut_host_fam_rel, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.HumanGut_host_genotype = Slot(uri=MIXS['0000365'], name="HumanGut_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS_6_2_RC.HumanGut_host_genotype, domain=HumanGut, range=Optional[str])

slots.HumanGut_host_height = Slot(uri=MIXS['0000264'], name="HumanGut_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS_6_2_RC.HumanGut_host_height, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanGut_host_last_meal = Slot(uri=MIXS['0000870'], name="HumanGut_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=MIXS_6_2_RC.HumanGut_host_last_meal, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.HumanGut_host_phenotype = Slot(uri=MIXS['0000874'], name="HumanGut_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS_6_2_RC.HumanGut_host_phenotype, domain=HumanGut, range=Optional[str])

slots.HumanGut_host_subject_id = Slot(uri=MIXS['0000861'], name="HumanGut_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=MIXS_6_2_RC.HumanGut_host_subject_id, domain=HumanGut, range=Optional[str])

slots.HumanGut_host_symbiont = Slot(uri=MIXS['0001298'], name="HumanGut_host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=MIXS_6_2_RC.HumanGut_host_symbiont, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.HumanGut_host_tot_mass = Slot(uri=MIXS['0000263'], name="HumanGut_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS_6_2_RC.HumanGut_host_tot_mass, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanGut_organism_count = Slot(uri=MIXS['0000103'], name="HumanGut_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.HumanGut_organism_count, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.HumanGut_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="HumanGut_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.HumanGut_oxy_stat_samp, domain=HumanGut, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.HumanGut_perturbation = Slot(uri=MIXS['0000754'], name="HumanGut_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.HumanGut_perturbation, domain=HumanGut, range=Optional[Union[str, List[str]]])

slots.HumanGut_samp_store_dur = Slot(uri=MIXS['0000116'], name="HumanGut_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.HumanGut_samp_store_dur, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.HumanGut_samp_store_loc = Slot(uri=MIXS['0000755'], name="HumanGut_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.HumanGut_samp_store_loc, domain=HumanGut, range=Optional[str])

slots.HumanGut_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="HumanGut_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.HumanGut_samp_vol_we_dna_ext, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanGut_temp = Slot(uri=MIXS['0000113'], name="HumanGut_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.HumanGut_temp, domain=HumanGut, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanOral_chem_administration = Slot(uri=MIXS['0000751'], name="HumanOral_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.HumanOral_chem_administration, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.HumanOral_host_age = Slot(uri=MIXS['0000255'], name="HumanOral_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS_6_2_RC.HumanOral_host_age, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanOral_host_body_site = Slot(uri=MIXS['0000867'], name="HumanOral_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=MIXS_6_2_RC.HumanOral_host_body_site, domain=HumanOral, range=Optional[str])

slots.HumanOral_host_body_temp = Slot(uri=MIXS['0000274'], name="HumanOral_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=MIXS_6_2_RC.HumanOral_host_body_temp, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanOral_host_diet = Slot(uri=MIXS['0000869'], name="HumanOral_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=MIXS_6_2_RC.HumanOral_host_diet, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.HumanOral_host_disease_stat = Slot(uri=MIXS['0000031'], name="HumanOral_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS_6_2_RC.HumanOral_host_disease_stat, domain=HumanOral, range=Optional[str])

slots.HumanOral_host_fam_rel = Slot(uri=MIXS['0000872'], name="HumanOral_host_fam_rel", curie=MIXS.curie('0000872'),
                   model_uri=MIXS_6_2_RC.HumanOral_host_fam_rel, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.HumanOral_host_genotype = Slot(uri=MIXS['0000365'], name="HumanOral_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS_6_2_RC.HumanOral_host_genotype, domain=HumanOral, range=Optional[str])

slots.HumanOral_host_height = Slot(uri=MIXS['0000264'], name="HumanOral_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS_6_2_RC.HumanOral_host_height, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanOral_host_last_meal = Slot(uri=MIXS['0000870'], name="HumanOral_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=MIXS_6_2_RC.HumanOral_host_last_meal, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.HumanOral_host_phenotype = Slot(uri=MIXS['0000874'], name="HumanOral_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS_6_2_RC.HumanOral_host_phenotype, domain=HumanOral, range=Optional[str])

slots.HumanOral_host_subject_id = Slot(uri=MIXS['0000861'], name="HumanOral_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=MIXS_6_2_RC.HumanOral_host_subject_id, domain=HumanOral, range=Optional[str])

slots.HumanOral_host_symbiont = Slot(uri=MIXS['0001298'], name="HumanOral_host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=MIXS_6_2_RC.HumanOral_host_symbiont, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.HumanOral_host_tot_mass = Slot(uri=MIXS['0000263'], name="HumanOral_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS_6_2_RC.HumanOral_host_tot_mass, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanOral_organism_count = Slot(uri=MIXS['0000103'], name="HumanOral_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.HumanOral_organism_count, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.HumanOral_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="HumanOral_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.HumanOral_oxy_stat_samp, domain=HumanOral, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.HumanOral_perturbation = Slot(uri=MIXS['0000754'], name="HumanOral_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.HumanOral_perturbation, domain=HumanOral, range=Optional[Union[str, List[str]]])

slots.HumanOral_samp_store_dur = Slot(uri=MIXS['0000116'], name="HumanOral_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.HumanOral_samp_store_dur, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.HumanOral_samp_store_loc = Slot(uri=MIXS['0000755'], name="HumanOral_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.HumanOral_samp_store_loc, domain=HumanOral, range=Optional[str])

slots.HumanOral_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="HumanOral_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.HumanOral_samp_vol_we_dna_ext, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanOral_temp = Slot(uri=MIXS['0000113'], name="HumanOral_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.HumanOral_temp, domain=HumanOral, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanSkin_chem_administration = Slot(uri=MIXS['0000751'], name="HumanSkin_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.HumanSkin_chem_administration, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.HumanSkin_host_age = Slot(uri=MIXS['0000255'], name="HumanSkin_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS_6_2_RC.HumanSkin_host_age, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanSkin_host_body_site = Slot(uri=MIXS['0000867'], name="HumanSkin_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=MIXS_6_2_RC.HumanSkin_host_body_site, domain=HumanSkin, range=Optional[str])

slots.HumanSkin_host_body_temp = Slot(uri=MIXS['0000274'], name="HumanSkin_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=MIXS_6_2_RC.HumanSkin_host_body_temp, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanSkin_host_diet = Slot(uri=MIXS['0000869'], name="HumanSkin_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=MIXS_6_2_RC.HumanSkin_host_diet, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.HumanSkin_host_disease_stat = Slot(uri=MIXS['0000031'], name="HumanSkin_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS_6_2_RC.HumanSkin_host_disease_stat, domain=HumanSkin, range=Optional[str])

slots.HumanSkin_host_fam_rel = Slot(uri=MIXS['0000872'], name="HumanSkin_host_fam_rel", curie=MIXS.curie('0000872'),
                   model_uri=MIXS_6_2_RC.HumanSkin_host_fam_rel, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.HumanSkin_host_genotype = Slot(uri=MIXS['0000365'], name="HumanSkin_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS_6_2_RC.HumanSkin_host_genotype, domain=HumanSkin, range=Optional[str])

slots.HumanSkin_host_height = Slot(uri=MIXS['0000264'], name="HumanSkin_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS_6_2_RC.HumanSkin_host_height, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanSkin_host_last_meal = Slot(uri=MIXS['0000870'], name="HumanSkin_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=MIXS_6_2_RC.HumanSkin_host_last_meal, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.HumanSkin_host_phenotype = Slot(uri=MIXS['0000874'], name="HumanSkin_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS_6_2_RC.HumanSkin_host_phenotype, domain=HumanSkin, range=Optional[str])

slots.HumanSkin_host_subject_id = Slot(uri=MIXS['0000861'], name="HumanSkin_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=MIXS_6_2_RC.HumanSkin_host_subject_id, domain=HumanSkin, range=Optional[str])

slots.HumanSkin_host_symbiont = Slot(uri=MIXS['0001298'], name="HumanSkin_host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=MIXS_6_2_RC.HumanSkin_host_symbiont, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.HumanSkin_host_tot_mass = Slot(uri=MIXS['0000263'], name="HumanSkin_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS_6_2_RC.HumanSkin_host_tot_mass, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanSkin_organism_count = Slot(uri=MIXS['0000103'], name="HumanSkin_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.HumanSkin_organism_count, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.HumanSkin_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="HumanSkin_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.HumanSkin_oxy_stat_samp, domain=HumanSkin, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.HumanSkin_perturbation = Slot(uri=MIXS['0000754'], name="HumanSkin_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.HumanSkin_perturbation, domain=HumanSkin, range=Optional[Union[str, List[str]]])

slots.HumanSkin_samp_store_dur = Slot(uri=MIXS['0000116'], name="HumanSkin_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.HumanSkin_samp_store_dur, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.HumanSkin_samp_store_loc = Slot(uri=MIXS['0000755'], name="HumanSkin_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.HumanSkin_samp_store_loc, domain=HumanSkin, range=Optional[str])

slots.HumanSkin_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="HumanSkin_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.HumanSkin_samp_vol_we_dna_ext, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanSkin_temp = Slot(uri=MIXS['0000113'], name="HumanSkin_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.HumanSkin_temp, domain=HumanSkin, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanVaginal_chem_administration = Slot(uri=MIXS['0000751'], name="HumanVaginal_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_chem_administration, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.HumanVaginal_host_age = Slot(uri=MIXS['0000255'], name="HumanVaginal_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_host_age, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanVaginal_host_body_site = Slot(uri=MIXS['0000867'], name="HumanVaginal_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_host_body_site, domain=HumanVaginal, range=Optional[str])

slots.HumanVaginal_host_body_temp = Slot(uri=MIXS['0000274'], name="HumanVaginal_host_body_temp", curie=MIXS.curie('0000274'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_host_body_temp, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanVaginal_host_diet = Slot(uri=MIXS['0000869'], name="HumanVaginal_host_diet", curie=MIXS.curie('0000869'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_host_diet, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.HumanVaginal_host_disease_stat = Slot(uri=MIXS['0000031'], name="HumanVaginal_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_host_disease_stat, domain=HumanVaginal, range=Optional[str])

slots.HumanVaginal_host_fam_rel = Slot(uri=MIXS['0000872'], name="HumanVaginal_host_fam_rel", curie=MIXS.curie('0000872'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_host_fam_rel, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.HumanVaginal_host_genotype = Slot(uri=MIXS['0000365'], name="HumanVaginal_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_host_genotype, domain=HumanVaginal, range=Optional[str])

slots.HumanVaginal_host_height = Slot(uri=MIXS['0000264'], name="HumanVaginal_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_host_height, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanVaginal_host_last_meal = Slot(uri=MIXS['0000870'], name="HumanVaginal_host_last_meal", curie=MIXS.curie('0000870'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_host_last_meal, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.HumanVaginal_host_phenotype = Slot(uri=MIXS['0000874'], name="HumanVaginal_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_host_phenotype, domain=HumanVaginal, range=Optional[str])

slots.HumanVaginal_host_subject_id = Slot(uri=MIXS['0000861'], name="HumanVaginal_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_host_subject_id, domain=HumanVaginal, range=Optional[str])

slots.HumanVaginal_host_symbiont = Slot(uri=MIXS['0001298'], name="HumanVaginal_host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_host_symbiont, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.HumanVaginal_host_tot_mass = Slot(uri=MIXS['0000263'], name="HumanVaginal_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_host_tot_mass, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanVaginal_organism_count = Slot(uri=MIXS['0000103'], name="HumanVaginal_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_organism_count, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.HumanVaginal_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="HumanVaginal_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_oxy_stat_samp, domain=HumanVaginal, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.HumanVaginal_perturbation = Slot(uri=MIXS['0000754'], name="HumanVaginal_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_perturbation, domain=HumanVaginal, range=Optional[Union[str, List[str]]])

slots.HumanVaginal_samp_store_dur = Slot(uri=MIXS['0000116'], name="HumanVaginal_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_samp_store_dur, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.HumanVaginal_samp_store_loc = Slot(uri=MIXS['0000755'], name="HumanVaginal_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_samp_store_loc, domain=HumanVaginal, range=Optional[str])

slots.HumanVaginal_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="HumanVaginal_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_samp_vol_we_dna_ext, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HumanVaginal_temp = Slot(uri=MIXS['0000113'], name="HumanVaginal_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.HumanVaginal_temp, domain=HumanVaginal, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesCores_ammonium = Slot(uri=MIXS['0000427'], name="HydrocarbonResourcesCores_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_ammonium, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesCores_depos_env = Slot(uri=MIXS['0000992'], name="HydrocarbonResourcesCores_depos_env", curie=MIXS.curie('0000992'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_depos_env, domain=HydrocarbonResourcesCores, range=Optional[Union[str, "DEPOSENVENUM"]])

slots.HydrocarbonResourcesCores_diss_inorg_phosp = Slot(uri=MIXS['0000106'], name="HydrocarbonResourcesCores_diss_inorg_phosp", curie=MIXS.curie('0000106'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_diss_inorg_phosp, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesCores_elev = Slot(uri=MIXS['0000093'], name="HydrocarbonResourcesCores_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_elev, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesCores_hcr_temp = Slot(uri=MIXS['0000393'], name="HydrocarbonResourcesCores_hcr_temp", curie=MIXS.curie('0000393'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_hcr_temp, domain=HydrocarbonResourcesCores, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+ *- *[-+]?[0-9]*\.?[0-9]+ ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesCores_nitrate = Slot(uri=MIXS['0000425'], name="HydrocarbonResourcesCores_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_nitrate, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesCores_nitrite = Slot(uri=MIXS['0000426'], name="HydrocarbonResourcesCores_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_nitrite, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesCores_organism_count = Slot(uri=MIXS['0000103'], name="HydrocarbonResourcesCores_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_organism_count, domain=HydrocarbonResourcesCores, range=Optional[Union[str, List[str]]])

slots.HydrocarbonResourcesCores_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="HydrocarbonResourcesCores_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_oxy_stat_samp, domain=HydrocarbonResourcesCores, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.HydrocarbonResourcesCores_ph = Slot(uri=MIXS['0001001'], name="HydrocarbonResourcesCores_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_ph, domain=HydrocarbonResourcesCores, range=Optional[float])

slots.HydrocarbonResourcesCores_samp_store_dur = Slot(uri=MIXS['0000116'], name="HydrocarbonResourcesCores_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_samp_store_dur, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.HydrocarbonResourcesCores_samp_store_loc = Slot(uri=MIXS['0000755'], name="HydrocarbonResourcesCores_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_samp_store_loc, domain=HydrocarbonResourcesCores, range=Optional[str])

slots.HydrocarbonResourcesCores_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="HydrocarbonResourcesCores_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_samp_vol_we_dna_ext, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesCores_sulfate = Slot(uri=MIXS['0000423'], name="HydrocarbonResourcesCores_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_sulfate, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesCores_sulfate_fw = Slot(uri=MIXS['0000407'], name="HydrocarbonResourcesCores_sulfate_fw", curie=MIXS.curie('0000407'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_sulfate_fw, domain=HydrocarbonResourcesCores, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesCores_sulfide = Slot(uri=MIXS['0000424'], name="HydrocarbonResourcesCores_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_sulfide, domain=HydrocarbonResourcesCores, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesCores_temp = Slot(uri=MIXS['0000113'], name="HydrocarbonResourcesCores_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_temp, domain=HydrocarbonResourcesCores, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesCores_vfa_fw = Slot(uri=MIXS['0000408'], name="HydrocarbonResourcesCores_vfa_fw", curie=MIXS.curie('0000408'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesCores_vfa_fw, domain=HydrocarbonResourcesCores, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesFluidsSwabs_ammonium = Slot(uri=MIXS['0000427'], name="HydrocarbonResourcesFluidsSwabs_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_ammonium, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesFluidsSwabs_depos_env = Slot(uri=MIXS['0000992'], name="HydrocarbonResourcesFluidsSwabs_depos_env", curie=MIXS.curie('0000992'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_depos_env, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[Union[str, "DEPOSENVENUM"]])

slots.HydrocarbonResourcesFluidsSwabs_diss_inorg_phosp = Slot(uri=MIXS['0000106'], name="HydrocarbonResourcesFluidsSwabs_diss_inorg_phosp", curie=MIXS.curie('0000106'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_diss_inorg_phosp, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesFluidsSwabs_hcr_temp = Slot(uri=MIXS['0000393'], name="HydrocarbonResourcesFluidsSwabs_hcr_temp", curie=MIXS.curie('0000393'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_hcr_temp, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+ *- *[-+]?[0-9]*\.?[0-9]+ ([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesFluidsSwabs_nitrate = Slot(uri=MIXS['0000425'], name="HydrocarbonResourcesFluidsSwabs_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_nitrate, domain=HydrocarbonResourcesFluidsSwabs, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesFluidsSwabs_nitrite = Slot(uri=MIXS['0000426'], name="HydrocarbonResourcesFluidsSwabs_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_nitrite, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesFluidsSwabs_organism_count = Slot(uri=MIXS['0000103'], name="HydrocarbonResourcesFluidsSwabs_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_organism_count, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[Union[str, List[str]]])

slots.HydrocarbonResourcesFluidsSwabs_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="HydrocarbonResourcesFluidsSwabs_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_oxy_stat_samp, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.HydrocarbonResourcesFluidsSwabs_ph = Slot(uri=MIXS['0001001'], name="HydrocarbonResourcesFluidsSwabs_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_ph, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[float])

slots.HydrocarbonResourcesFluidsSwabs_samp_store_dur = Slot(uri=MIXS['0000116'], name="HydrocarbonResourcesFluidsSwabs_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_samp_store_dur, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.HydrocarbonResourcesFluidsSwabs_samp_store_loc = Slot(uri=MIXS['0000755'], name="HydrocarbonResourcesFluidsSwabs_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_samp_store_loc, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str])

slots.HydrocarbonResourcesFluidsSwabs_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="HydrocarbonResourcesFluidsSwabs_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_samp_vol_we_dna_ext, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesFluidsSwabs_sulfate = Slot(uri=MIXS['0000423'], name="HydrocarbonResourcesFluidsSwabs_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_sulfate, domain=HydrocarbonResourcesFluidsSwabs, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesFluidsSwabs_sulfate_fw = Slot(uri=MIXS['0000407'], name="HydrocarbonResourcesFluidsSwabs_sulfate_fw", curie=MIXS.curie('0000407'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_sulfate_fw, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesFluidsSwabs_sulfide = Slot(uri=MIXS['0000424'], name="HydrocarbonResourcesFluidsSwabs_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_sulfide, domain=HydrocarbonResourcesFluidsSwabs, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesFluidsSwabs_temp = Slot(uri=MIXS['0000113'], name="HydrocarbonResourcesFluidsSwabs_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_temp, domain=HydrocarbonResourcesFluidsSwabs, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.HydrocarbonResourcesFluidsSwabs_vfa_fw = Slot(uri=MIXS['0000408'], name="HydrocarbonResourcesFluidsSwabs_vfa_fw", curie=MIXS.curie('0000408'),
                   model_uri=MIXS_6_2_RC.HydrocarbonResourcesFluidsSwabs_vfa_fw, domain=HydrocarbonResourcesFluidsSwabs, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_alkyl_diethers = Slot(uri=MIXS['0000490'], name="MicrobialMatBiofilm_alkyl_diethers", curie=MIXS.curie('0000490'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_alkyl_diethers, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_ammonium = Slot(uri=MIXS['0000427'], name="MicrobialMatBiofilm_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_ammonium, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_bacteria_carb_prod = Slot(uri=MIXS['0000173'], name="MicrobialMatBiofilm_bacteria_carb_prod", curie=MIXS.curie('0000173'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_bacteria_carb_prod, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_chem_administration = Slot(uri=MIXS['0000751'], name="MicrobialMatBiofilm_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_chem_administration, domain=MicrobialMatBiofilm, range=Optional[Union[str, List[str]]])

slots.MicrobialMatBiofilm_depth = Slot(uri=MIXS['0000018'], name="MicrobialMatBiofilm_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_depth, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_diss_org_nitro = Slot(uri=MIXS['0000162'], name="MicrobialMatBiofilm_diss_org_nitro", curie=MIXS.curie('0000162'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_diss_org_nitro, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_elev = Slot(uri=MIXS['0000093'], name="MicrobialMatBiofilm_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_elev, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_methane = Slot(uri=MIXS['0000101'], name="MicrobialMatBiofilm_methane", curie=MIXS.curie('0000101'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_methane, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_n_alkanes = Slot(uri=MIXS['0000503'], name="MicrobialMatBiofilm_n_alkanes", curie=MIXS.curie('0000503'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_n_alkanes, domain=MicrobialMatBiofilm, range=Optional[Union[str, List[str]]])

slots.MicrobialMatBiofilm_nitrate = Slot(uri=MIXS['0000425'], name="MicrobialMatBiofilm_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_nitrate, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_nitrite = Slot(uri=MIXS['0000426'], name="MicrobialMatBiofilm_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_nitrite, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_org_carb = Slot(uri=MIXS['0000508'], name="MicrobialMatBiofilm_org_carb", curie=MIXS.curie('0000508'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_org_carb, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_org_nitro = Slot(uri=MIXS['0000205'], name="MicrobialMatBiofilm_org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_org_nitro, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_organism_count = Slot(uri=MIXS['0000103'], name="MicrobialMatBiofilm_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_organism_count, domain=MicrobialMatBiofilm, range=Optional[Union[str, List[str]]])

slots.MicrobialMatBiofilm_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="MicrobialMatBiofilm_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_oxy_stat_samp, domain=MicrobialMatBiofilm, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.MicrobialMatBiofilm_part_org_carb = Slot(uri=MIXS['0000515'], name="MicrobialMatBiofilm_part_org_carb", curie=MIXS.curie('0000515'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_part_org_carb, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_perturbation = Slot(uri=MIXS['0000754'], name="MicrobialMatBiofilm_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_perturbation, domain=MicrobialMatBiofilm, range=Optional[Union[str, List[str]]])

slots.MicrobialMatBiofilm_ph = Slot(uri=MIXS['0001001'], name="MicrobialMatBiofilm_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_ph, domain=MicrobialMatBiofilm, range=Optional[float])

slots.MicrobialMatBiofilm_phosplipid_fatt_acid = Slot(uri=MIXS['0000181'], name="MicrobialMatBiofilm_phosplipid_fatt_acid", curie=MIXS.curie('0000181'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_phosplipid_fatt_acid, domain=MicrobialMatBiofilm, range=Optional[Union[str, List[str]]])

slots.MicrobialMatBiofilm_samp_store_dur = Slot(uri=MIXS['0000116'], name="MicrobialMatBiofilm_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_samp_store_dur, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.MicrobialMatBiofilm_samp_store_loc = Slot(uri=MIXS['0000755'], name="MicrobialMatBiofilm_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_samp_store_loc, domain=MicrobialMatBiofilm, range=Optional[str])

slots.MicrobialMatBiofilm_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MicrobialMatBiofilm_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_samp_vol_we_dna_ext, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_sulfate = Slot(uri=MIXS['0000423'], name="MicrobialMatBiofilm_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_sulfate, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_sulfide = Slot(uri=MIXS['0000424'], name="MicrobialMatBiofilm_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_sulfide, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_temp = Slot(uri=MIXS['0000113'], name="MicrobialMatBiofilm_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_temp, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_tot_carb = Slot(uri=MIXS['0000525'], name="MicrobialMatBiofilm_tot_carb", curie=MIXS.curie('0000525'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_tot_carb, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_tot_nitro_content = Slot(uri=MIXS['0000530'], name="MicrobialMatBiofilm_tot_nitro_content", curie=MIXS.curie('0000530'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_tot_nitro_content, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_tot_org_carb = Slot(uri=MIXS['0000533'], name="MicrobialMatBiofilm_tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_tot_org_carb, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_turbidity = Slot(uri=MIXS['0000191'], name="MicrobialMatBiofilm_turbidity", curie=MIXS.curie('0000191'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_turbidity, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MicrobialMatBiofilm_water_content = Slot(uri=MIXS['0000185'], name="MicrobialMatBiofilm_water_content", curie=MIXS.curie('0000185'),
                   model_uri=MIXS_6_2_RC.MicrobialMatBiofilm_water_content, domain=MicrobialMatBiofilm, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MiscellaneousNaturalOrArtificialEnvironment_alt = Slot(uri=MIXS['0000094'], name="MiscellaneousNaturalOrArtificialEnvironment_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_alt, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MiscellaneousNaturalOrArtificialEnvironment_ammonium = Slot(uri=MIXS['0000427'], name="MiscellaneousNaturalOrArtificialEnvironment_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_ammonium, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MiscellaneousNaturalOrArtificialEnvironment_chem_administration = Slot(uri=MIXS['0000751'], name="MiscellaneousNaturalOrArtificialEnvironment_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_chem_administration, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[Union[str, List[str]]])

slots.MiscellaneousNaturalOrArtificialEnvironment_depth = Slot(uri=MIXS['0000018'], name="MiscellaneousNaturalOrArtificialEnvironment_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_depth, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MiscellaneousNaturalOrArtificialEnvironment_diss_org_nitro = Slot(uri=MIXS['0000162'], name="MiscellaneousNaturalOrArtificialEnvironment_diss_org_nitro", curie=MIXS.curie('0000162'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_diss_org_nitro, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MiscellaneousNaturalOrArtificialEnvironment_elev = Slot(uri=MIXS['0000093'], name="MiscellaneousNaturalOrArtificialEnvironment_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_elev, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MiscellaneousNaturalOrArtificialEnvironment_nitrate = Slot(uri=MIXS['0000425'], name="MiscellaneousNaturalOrArtificialEnvironment_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_nitrate, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MiscellaneousNaturalOrArtificialEnvironment_nitrite = Slot(uri=MIXS['0000426'], name="MiscellaneousNaturalOrArtificialEnvironment_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_nitrite, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MiscellaneousNaturalOrArtificialEnvironment_org_carb = Slot(uri=MIXS['0000508'], name="MiscellaneousNaturalOrArtificialEnvironment_org_carb", curie=MIXS.curie('0000508'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_org_carb, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MiscellaneousNaturalOrArtificialEnvironment_org_nitro = Slot(uri=MIXS['0000205'], name="MiscellaneousNaturalOrArtificialEnvironment_org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_org_nitro, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MiscellaneousNaturalOrArtificialEnvironment_organism_count = Slot(uri=MIXS['0000103'], name="MiscellaneousNaturalOrArtificialEnvironment_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_organism_count, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[Union[str, List[str]]])

slots.MiscellaneousNaturalOrArtificialEnvironment_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="MiscellaneousNaturalOrArtificialEnvironment_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_oxy_stat_samp, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.MiscellaneousNaturalOrArtificialEnvironment_perturbation = Slot(uri=MIXS['0000754'], name="MiscellaneousNaturalOrArtificialEnvironment_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_perturbation, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[Union[str, List[str]]])

slots.MiscellaneousNaturalOrArtificialEnvironment_ph = Slot(uri=MIXS['0001001'], name="MiscellaneousNaturalOrArtificialEnvironment_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_ph, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[float])

slots.MiscellaneousNaturalOrArtificialEnvironment_phosplipid_fatt_acid = Slot(uri=MIXS['0000181'], name="MiscellaneousNaturalOrArtificialEnvironment_phosplipid_fatt_acid", curie=MIXS.curie('0000181'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_phosplipid_fatt_acid, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[Union[str, List[str]]])

slots.MiscellaneousNaturalOrArtificialEnvironment_samp_store_dur = Slot(uri=MIXS['0000116'], name="MiscellaneousNaturalOrArtificialEnvironment_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_samp_store_dur, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.MiscellaneousNaturalOrArtificialEnvironment_samp_store_loc = Slot(uri=MIXS['0000755'], name="MiscellaneousNaturalOrArtificialEnvironment_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_samp_store_loc, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str])

slots.MiscellaneousNaturalOrArtificialEnvironment_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="MiscellaneousNaturalOrArtificialEnvironment_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_samp_vol_we_dna_ext, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MiscellaneousNaturalOrArtificialEnvironment_sulfate = Slot(uri=MIXS['0000423'], name="MiscellaneousNaturalOrArtificialEnvironment_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_sulfate, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MiscellaneousNaturalOrArtificialEnvironment_sulfide = Slot(uri=MIXS['0000424'], name="MiscellaneousNaturalOrArtificialEnvironment_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_sulfide, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.MiscellaneousNaturalOrArtificialEnvironment_temp = Slot(uri=MIXS['0000113'], name="MiscellaneousNaturalOrArtificialEnvironment_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.MiscellaneousNaturalOrArtificialEnvironment_temp, domain=MiscellaneousNaturalOrArtificialEnvironment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.PlantAssociated_biotic_regm = Slot(uri=MIXS['0001038'], name="PlantAssociated_biotic_regm", curie=MIXS.curie('0001038'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_biotic_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.PlantAssociated_chem_administration = Slot(uri=MIXS['0000751'], name="PlantAssociated_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_chem_administration, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.PlantAssociated_climate_environment = Slot(uri=MIXS['0001040'], name="PlantAssociated_climate_environment", curie=MIXS.curie('0001040'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_climate_environment, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.PlantAssociated_depth = Slot(uri=MIXS['0000018'], name="PlantAssociated_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_depth, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.PlantAssociated_elev = Slot(uri=MIXS['0000093'], name="PlantAssociated_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_elev, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.PlantAssociated_fungicide_regm = Slot(uri=MIXS['0000557'], name="PlantAssociated_fungicide_regm", curie=MIXS.curie('0000557'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_fungicide_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.PlantAssociated_gaseous_environment = Slot(uri=MIXS['0000558'], name="PlantAssociated_gaseous_environment", curie=MIXS.curie('0000558'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_gaseous_environment, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.PlantAssociated_herbicide_regm = Slot(uri=MIXS['0000561'], name="PlantAssociated_herbicide_regm", curie=MIXS.curie('0000561'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_herbicide_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.PlantAssociated_host_age = Slot(uri=MIXS['0000255'], name="PlantAssociated_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_host_age, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.PlantAssociated_host_common_name = Slot(uri=MIXS['0000248'], name="PlantAssociated_host_common_name", curie=MIXS.curie('0000248'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_host_common_name, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_host_disease_stat = Slot(uri=MIXS['0000031'], name="PlantAssociated_host_disease_stat", curie=MIXS.curie('0000031'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_host_disease_stat, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_host_genotype = Slot(uri=MIXS['0000365'], name="PlantAssociated_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_host_genotype, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_host_height = Slot(uri=MIXS['0000264'], name="PlantAssociated_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_host_height, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.PlantAssociated_host_length = Slot(uri=MIXS['0000256'], name="PlantAssociated_host_length", curie=MIXS.curie('0000256'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_host_length, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.PlantAssociated_host_life_stage = Slot(uri=MIXS['0000251'], name="PlantAssociated_host_life_stage", curie=MIXS.curie('0000251'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_host_life_stage, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_host_phenotype = Slot(uri=MIXS['0000874'], name="PlantAssociated_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_host_phenotype, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_host_symbiont = Slot(uri=MIXS['0001298'], name="PlantAssociated_host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_host_symbiont, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.PlantAssociated_host_taxid = Slot(uri=MIXS['0000250'], name="PlantAssociated_host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_host_taxid, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_host_tot_mass = Slot(uri=MIXS['0000263'], name="PlantAssociated_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_host_tot_mass, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.PlantAssociated_non_min_nutr_regm = Slot(uri=MIXS['0000571'], name="PlantAssociated_non_min_nutr_regm", curie=MIXS.curie('0000571'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_non_min_nutr_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.PlantAssociated_organism_count = Slot(uri=MIXS['0000103'], name="PlantAssociated_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_organism_count, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.PlantAssociated_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="PlantAssociated_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_oxy_stat_samp, domain=PlantAssociated, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.PlantAssociated_perturbation = Slot(uri=MIXS['0000754'], name="PlantAssociated_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_perturbation, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.PlantAssociated_pesticide_regm = Slot(uri=MIXS['0000573'], name="PlantAssociated_pesticide_regm", curie=MIXS.curie('0000573'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_pesticide_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.PlantAssociated_ph_regm = Slot(uri=MIXS['0001056'], name="PlantAssociated_ph_regm", curie=MIXS.curie('0001056'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_ph_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.PlantAssociated_plant_growth_med = Slot(uri=MIXS['0001057'], name="PlantAssociated_plant_growth_med", curie=MIXS.curie('0001057'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_plant_growth_med, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_plant_product = Slot(uri=MIXS['0001058'], name="PlantAssociated_plant_product", curie=MIXS.curie('0001058'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_plant_product, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_plant_struc = Slot(uri=MIXS['0001060'], name="PlantAssociated_plant_struc", curie=MIXS.curie('0001060'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_plant_struc, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'^([^\s-]{1,2}|[^\s-]+.+[^\s-]+) \[[a-zA-Z]{2,}:[a-zA-Z0-9]\d+\]$'))

slots.PlantAssociated_salt_regm = Slot(uri=MIXS['0000582'], name="PlantAssociated_salt_regm", curie=MIXS.curie('0000582'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_salt_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.PlantAssociated_samp_store_dur = Slot(uri=MIXS['0000116'], name="PlantAssociated_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_samp_store_dur, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.PlantAssociated_samp_store_loc = Slot(uri=MIXS['0000755'], name="PlantAssociated_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_samp_store_loc, domain=PlantAssociated, range=Optional[str])

slots.PlantAssociated_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="PlantAssociated_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_samp_vol_we_dna_ext, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.PlantAssociated_season_environment = Slot(uri=MIXS['0001068'], name="PlantAssociated_season_environment", curie=MIXS.curie('0001068'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_season_environment, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.PlantAssociated_standing_water_regm = Slot(uri=MIXS['0001069'], name="PlantAssociated_standing_water_regm", curie=MIXS.curie('0001069'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_standing_water_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.PlantAssociated_temp = Slot(uri=MIXS['0000113'], name="PlantAssociated_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_temp, domain=PlantAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.PlantAssociated_water_temp_regm = Slot(uri=MIXS['0000590'], name="PlantAssociated_water_temp_regm", curie=MIXS.curie('0000590'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_water_temp_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.PlantAssociated_watering_regm = Slot(uri=MIXS['0000591'], name="PlantAssociated_watering_regm", curie=MIXS.curie('0000591'),
                   model_uri=MIXS_6_2_RC.PlantAssociated_watering_regm, domain=PlantAssociated, range=Optional[Union[str, List[str]]])

slots.Sediment_alkyl_diethers = Slot(uri=MIXS['0000490'], name="Sediment_alkyl_diethers", curie=MIXS.curie('0000490'),
                   model_uri=MIXS_6_2_RC.Sediment_alkyl_diethers, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_ammonium = Slot(uri=MIXS['0000427'], name="Sediment_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=MIXS_6_2_RC.Sediment_ammonium, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_bacteria_carb_prod = Slot(uri=MIXS['0000173'], name="Sediment_bacteria_carb_prod", curie=MIXS.curie('0000173'),
                   model_uri=MIXS_6_2_RC.Sediment_bacteria_carb_prod, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_chem_administration = Slot(uri=MIXS['0000751'], name="Sediment_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.Sediment_chem_administration, domain=Sediment, range=Optional[Union[str, List[str]]])

slots.Sediment_depth = Slot(uri=MIXS['0000018'], name="Sediment_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.Sediment_depth, domain=Sediment, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_diss_org_nitro = Slot(uri=MIXS['0000162'], name="Sediment_diss_org_nitro", curie=MIXS.curie('0000162'),
                   model_uri=MIXS_6_2_RC.Sediment_diss_org_nitro, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_elev = Slot(uri=MIXS['0000093'], name="Sediment_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.Sediment_elev, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_methane = Slot(uri=MIXS['0000101'], name="Sediment_methane", curie=MIXS.curie('0000101'),
                   model_uri=MIXS_6_2_RC.Sediment_methane, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_n_alkanes = Slot(uri=MIXS['0000503'], name="Sediment_n_alkanes", curie=MIXS.curie('0000503'),
                   model_uri=MIXS_6_2_RC.Sediment_n_alkanes, domain=Sediment, range=Optional[Union[str, List[str]]])

slots.Sediment_nitrate = Slot(uri=MIXS['0000425'], name="Sediment_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=MIXS_6_2_RC.Sediment_nitrate, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_nitrite = Slot(uri=MIXS['0000426'], name="Sediment_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=MIXS_6_2_RC.Sediment_nitrite, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_org_carb = Slot(uri=MIXS['0000508'], name="Sediment_org_carb", curie=MIXS.curie('0000508'),
                   model_uri=MIXS_6_2_RC.Sediment_org_carb, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_org_nitro = Slot(uri=MIXS['0000205'], name="Sediment_org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=MIXS_6_2_RC.Sediment_org_nitro, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_organism_count = Slot(uri=MIXS['0000103'], name="Sediment_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.Sediment_organism_count, domain=Sediment, range=Optional[Union[str, List[str]]])

slots.Sediment_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="Sediment_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.Sediment_oxy_stat_samp, domain=Sediment, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.Sediment_part_org_carb = Slot(uri=MIXS['0000515'], name="Sediment_part_org_carb", curie=MIXS.curie('0000515'),
                   model_uri=MIXS_6_2_RC.Sediment_part_org_carb, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_perturbation = Slot(uri=MIXS['0000754'], name="Sediment_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.Sediment_perturbation, domain=Sediment, range=Optional[Union[str, List[str]]])

slots.Sediment_ph = Slot(uri=MIXS['0001001'], name="Sediment_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS_6_2_RC.Sediment_ph, domain=Sediment, range=Optional[float])

slots.Sediment_phosplipid_fatt_acid = Slot(uri=MIXS['0000181'], name="Sediment_phosplipid_fatt_acid", curie=MIXS.curie('0000181'),
                   model_uri=MIXS_6_2_RC.Sediment_phosplipid_fatt_acid, domain=Sediment, range=Optional[Union[str, List[str]]])

slots.Sediment_samp_store_dur = Slot(uri=MIXS['0000116'], name="Sediment_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.Sediment_samp_store_dur, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.Sediment_samp_store_loc = Slot(uri=MIXS['0000755'], name="Sediment_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.Sediment_samp_store_loc, domain=Sediment, range=Optional[str])

slots.Sediment_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Sediment_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.Sediment_samp_vol_we_dna_ext, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_sulfate = Slot(uri=MIXS['0000423'], name="Sediment_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=MIXS_6_2_RC.Sediment_sulfate, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_sulfide = Slot(uri=MIXS['0000424'], name="Sediment_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=MIXS_6_2_RC.Sediment_sulfide, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_temp = Slot(uri=MIXS['0000113'], name="Sediment_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.Sediment_temp, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_tot_carb = Slot(uri=MIXS['0000525'], name="Sediment_tot_carb", curie=MIXS.curie('0000525'),
                   model_uri=MIXS_6_2_RC.Sediment_tot_carb, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_tot_nitro_content = Slot(uri=MIXS['0000530'], name="Sediment_tot_nitro_content", curie=MIXS.curie('0000530'),
                   model_uri=MIXS_6_2_RC.Sediment_tot_nitro_content, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_tot_org_carb = Slot(uri=MIXS['0000533'], name="Sediment_tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=MIXS_6_2_RC.Sediment_tot_org_carb, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_turbidity = Slot(uri=MIXS['0000191'], name="Sediment_turbidity", curie=MIXS.curie('0000191'),
                   model_uri=MIXS_6_2_RC.Sediment_turbidity, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Sediment_water_content = Slot(uri=MIXS['0000185'], name="Sediment_water_content", curie=MIXS.curie('0000185'),
                   model_uri=MIXS_6_2_RC.Sediment_water_content, domain=Sediment, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Soil_crop_rotation = Slot(uri=MIXS['0000318'], name="Soil_crop_rotation", curie=MIXS.curie('0000318'),
                   model_uri=MIXS_6_2_RC.Soil_crop_rotation, domain=Soil, range=Optional[str])

slots.Soil_cur_vegetation = Slot(uri=MIXS['0000312'], name="Soil_cur_vegetation", curie=MIXS.curie('0000312'),
                   model_uri=MIXS_6_2_RC.Soil_cur_vegetation, domain=Soil, range=Optional[str])

slots.Soil_cur_vegetation_meth = Slot(uri=MIXS['0000314'], name="Soil_cur_vegetation_meth", curie=MIXS.curie('0000314'),
                   model_uri=MIXS_6_2_RC.Soil_cur_vegetation_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Soil_depth = Slot(uri=MIXS['0000018'], name="Soil_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.Soil_depth, domain=Soil, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Soil_drainage_class = Slot(uri=MIXS['0001085'], name="Soil_drainage_class", curie=MIXS.curie('0001085'),
                   model_uri=MIXS_6_2_RC.Soil_drainage_class, domain=Soil, range=Optional[Union[str, "DRAINAGECLASSENUM"]])

slots.Soil_elev = Slot(uri=MIXS['0000093'], name="Soil_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.Soil_elev, domain=Soil, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Soil_extreme_event = Slot(uri=MIXS['0000320'], name="Soil_extreme_event", curie=MIXS.curie('0000320'),
                   model_uri=MIXS_6_2_RC.Soil_extreme_event, domain=Soil, range=Optional[Union[str, XSDDateTime]])

slots.Soil_fao_class = Slot(uri=MIXS['0001083'], name="Soil_fao_class", curie=MIXS.curie('0001083'),
                   model_uri=MIXS_6_2_RC.Soil_fao_class, domain=Soil, range=Optional[Union[str, "FAOCLASSENUM"]])

slots.Soil_fire = Slot(uri=MIXS['0001086'], name="Soil_fire", curie=MIXS.curie('0001086'),
                   model_uri=MIXS_6_2_RC.Soil_fire, domain=Soil, range=Optional[Union[str, XSDDateTime]])

slots.Soil_flooding = Slot(uri=MIXS['0000319'], name="Soil_flooding", curie=MIXS.curie('0000319'),
                   model_uri=MIXS_6_2_RC.Soil_flooding, domain=Soil, range=Optional[Union[str, XSDDateTime]])

slots.Soil_heavy_metals_meth = Slot(uri=MIXS['0000343'], name="Soil_heavy_metals_meth", curie=MIXS.curie('0000343'),
                   model_uri=MIXS_6_2_RC.Soil_heavy_metals_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Soil_horizon_meth = Slot(uri=MIXS['0000321'], name="Soil_horizon_meth", curie=MIXS.curie('0000321'),
                   model_uri=MIXS_6_2_RC.Soil_horizon_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Soil_local_class = Slot(uri=MIXS['0000330'], name="Soil_local_class", curie=MIXS.curie('0000330'),
                   model_uri=MIXS_6_2_RC.Soil_local_class, domain=Soil, range=Optional[str])

slots.Soil_local_class_meth = Slot(uri=MIXS['0000331'], name="Soil_local_class_meth", curie=MIXS.curie('0000331'),
                   model_uri=MIXS_6_2_RC.Soil_local_class_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Soil_micro_biomass_meth = Slot(uri=MIXS['0000339'], name="Soil_micro_biomass_meth", curie=MIXS.curie('0000339'),
                   model_uri=MIXS_6_2_RC.Soil_micro_biomass_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Soil_microbial_biomass = Slot(uri=MIXS['0000650'], name="Soil_microbial_biomass", curie=MIXS.curie('0000650'),
                   model_uri=MIXS_6_2_RC.Soil_microbial_biomass, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Soil_org_nitro = Slot(uri=MIXS['0000205'], name="Soil_org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=MIXS_6_2_RC.Soil_org_nitro, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Soil_ph = Slot(uri=MIXS['0001001'], name="Soil_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS_6_2_RC.Soil_ph, domain=Soil, range=Optional[float])

slots.Soil_ph_meth = Slot(uri=MIXS['0001106'], name="Soil_ph_meth", curie=MIXS.curie('0001106'),
                   model_uri=MIXS_6_2_RC.Soil_ph_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Soil_pool_dna_extracts = Slot(uri=MIXS['0000325'], name="Soil_pool_dna_extracts", curie=MIXS.curie('0000325'),
                   model_uri=MIXS_6_2_RC.Soil_pool_dna_extracts, domain=Soil, range=Optional[str])

slots.Soil_prev_land_use_meth = Slot(uri=MIXS['0000316'], name="Soil_prev_land_use_meth", curie=MIXS.curie('0000316'),
                   model_uri=MIXS_6_2_RC.Soil_prev_land_use_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Soil_previous_land_use = Slot(uri=MIXS['0000315'], name="Soil_previous_land_use", curie=MIXS.curie('0000315'),
                   model_uri=MIXS_6_2_RC.Soil_previous_land_use, domain=Soil, range=Optional[str])

slots.Soil_profile_position = Slot(uri=MIXS['0001084'], name="Soil_profile_position", curie=MIXS.curie('0001084'),
                   model_uri=MIXS_6_2_RC.Soil_profile_position, domain=Soil, range=Optional[Union[str, "PROFILEPOSITIONENUM"]])

slots.Soil_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Soil_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.Soil_samp_vol_we_dna_ext, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Soil_season_precpt = Slot(uri=MIXS['0000645'], name="Soil_season_precpt", curie=MIXS.curie('0000645'),
                   model_uri=MIXS_6_2_RC.Soil_season_precpt, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Soil_sieving = Slot(uri=MIXS['0000322'], name="Soil_sieving", curie=MIXS.curie('0000322'),
                   model_uri=MIXS_6_2_RC.Soil_sieving, domain=Soil, range=Optional[str])

slots.Soil_slope_aspect = Slot(uri=MIXS['0000647'], name="Soil_slope_aspect", curie=MIXS.curie('0000647'),
                   model_uri=MIXS_6_2_RC.Soil_slope_aspect, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Soil_slope_gradient = Slot(uri=MIXS['0000646'], name="Soil_slope_gradient", curie=MIXS.curie('0000646'),
                   model_uri=MIXS_6_2_RC.Soil_slope_gradient, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Soil_soil_horizon = Slot(uri=MIXS['0001082'], name="Soil_soil_horizon", curie=MIXS.curie('0001082'),
                   model_uri=MIXS_6_2_RC.Soil_soil_horizon, domain=Soil, range=Optional[Union[str, "SOILHORIZONENUM"]])

slots.Soil_soil_type = Slot(uri=MIXS['0000332'], name="Soil_soil_type", curie=MIXS.curie('0000332'),
                   model_uri=MIXS_6_2_RC.Soil_soil_type, domain=Soil, range=Optional[str])

slots.Soil_soil_type_meth = Slot(uri=MIXS['0000334'], name="Soil_soil_type_meth", curie=MIXS.curie('0000334'),
                   model_uri=MIXS_6_2_RC.Soil_soil_type_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Soil_store_cond = Slot(uri=MIXS['0000327'], name="Soil_store_cond", curie=MIXS.curie('0000327'),
                   model_uri=MIXS_6_2_RC.Soil_store_cond, domain=Soil, range=Optional[str])

slots.Soil_temp = Slot(uri=MIXS['0000113'], name="Soil_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.Soil_temp, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Soil_tillage = Slot(uri=MIXS['0001081'], name="Soil_tillage", curie=MIXS.curie('0001081'),
                   model_uri=MIXS_6_2_RC.Soil_tillage, domain=Soil, range=Optional[Union[Union[str, "TILLAGEENUM"], List[Union[str, "TILLAGEENUM"]]]])

slots.Soil_tot_nitro_cont_meth = Slot(uri=MIXS['0000338'], name="Soil_tot_nitro_cont_meth", curie=MIXS.curie('0000338'),
                   model_uri=MIXS_6_2_RC.Soil_tot_nitro_cont_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Soil_tot_nitro_content = Slot(uri=MIXS['0000530'], name="Soil_tot_nitro_content", curie=MIXS.curie('0000530'),
                   model_uri=MIXS_6_2_RC.Soil_tot_nitro_content, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Soil_tot_org_c_meth = Slot(uri=MIXS['0000337'], name="Soil_tot_org_c_meth", curie=MIXS.curie('0000337'),
                   model_uri=MIXS_6_2_RC.Soil_tot_org_c_meth, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$$'))

slots.Soil_tot_org_carb = Slot(uri=MIXS['0000533'], name="Soil_tot_org_carb", curie=MIXS.curie('0000533'),
                   model_uri=MIXS_6_2_RC.Soil_tot_org_carb, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Soil_water_content = Slot(uri=MIXS['0000185'], name="Soil_water_content", curie=MIXS.curie('0000185'),
                   model_uri=MIXS_6_2_RC.Soil_water_content, domain=Soil, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.SymbiontAssociated_alt = Slot(uri=MIXS['0000094'], name="SymbiontAssociated_alt", curie=MIXS.curie('0000094'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_alt, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.SymbiontAssociated_chem_administration = Slot(uri=MIXS['0000751'], name="SymbiontAssociated_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_chem_administration, domain=SymbiontAssociated, range=Optional[Union[str, List[str]]])

slots.SymbiontAssociated_depth = Slot(uri=MIXS['0000018'], name="SymbiontAssociated_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_depth, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.SymbiontAssociated_elev = Slot(uri=MIXS['0000093'], name="SymbiontAssociated_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_elev, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.SymbiontAssociated_gravidity = Slot(uri=MIXS['0000875'], name="SymbiontAssociated_gravidity", curie=MIXS.curie('0000875'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_gravidity, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_age = Slot(uri=MIXS['0000255'], name="SymbiontAssociated_host_age", curie=MIXS.curie('0000255'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_age, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.SymbiontAssociated_host_body_habitat = Slot(uri=MIXS['0000866'], name="SymbiontAssociated_host_body_habitat", curie=MIXS.curie('0000866'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_body_habitat, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_body_site = Slot(uri=MIXS['0000867'], name="SymbiontAssociated_host_body_site", curie=MIXS.curie('0000867'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_body_site, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_color = Slot(uri=MIXS['0000260'], name="SymbiontAssociated_host_color", curie=MIXS.curie('0000260'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_color, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_common_name = Slot(uri=MIXS['0000248'], name="SymbiontAssociated_host_common_name", curie=MIXS.curie('0000248'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_common_name, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_fam_rel = Slot(uri=MIXS['0000872'], name="SymbiontAssociated_host_fam_rel", curie=MIXS.curie('0000872'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_fam_rel, domain=SymbiontAssociated, range=Optional[Union[str, List[str]]])

slots.SymbiontAssociated_host_genotype = Slot(uri=MIXS['0000365'], name="SymbiontAssociated_host_genotype", curie=MIXS.curie('0000365'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_genotype, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_growth_cond = Slot(uri=MIXS['0000871'], name="SymbiontAssociated_host_growth_cond", curie=MIXS.curie('0000871'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_growth_cond, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'^^PMID:\d+$|^doi:10.\d{2,9}/.*$|^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$|([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.SymbiontAssociated_host_height = Slot(uri=MIXS['0000264'], name="SymbiontAssociated_host_height", curie=MIXS.curie('0000264'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_height, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.SymbiontAssociated_host_length = Slot(uri=MIXS['0000256'], name="SymbiontAssociated_host_length", curie=MIXS.curie('0000256'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_length, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.SymbiontAssociated_host_life_stage = Slot(uri=MIXS['0000251'], name="SymbiontAssociated_host_life_stage", curie=MIXS.curie('0000251'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_life_stage, domain=SymbiontAssociated, range=str)

slots.SymbiontAssociated_host_phenotype = Slot(uri=MIXS['0000874'], name="SymbiontAssociated_host_phenotype", curie=MIXS.curie('0000874'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_phenotype, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_shape = Slot(uri=MIXS['0000261'], name="SymbiontAssociated_host_shape", curie=MIXS.curie('0000261'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_shape, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_subject_id = Slot(uri=MIXS['0000861'], name="SymbiontAssociated_host_subject_id", curie=MIXS.curie('0000861'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_subject_id, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_substrate = Slot(uri=MIXS['0000252'], name="SymbiontAssociated_host_substrate", curie=MIXS.curie('0000252'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_substrate, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_symbiont = Slot(uri=MIXS['0001298'], name="SymbiontAssociated_host_symbiont", curie=MIXS.curie('0001298'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_symbiont, domain=SymbiontAssociated, range=Optional[Union[str, List[str]]])

slots.SymbiontAssociated_host_taxid = Slot(uri=MIXS['0000250'], name="SymbiontAssociated_host_taxid", curie=MIXS.curie('0000250'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_taxid, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_host_tot_mass = Slot(uri=MIXS['0000263'], name="SymbiontAssociated_host_tot_mass", curie=MIXS.curie('0000263'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_host_tot_mass, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.SymbiontAssociated_organism_count = Slot(uri=MIXS['0000103'], name="SymbiontAssociated_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_organism_count, domain=SymbiontAssociated, range=Optional[Union[str, List[str]]])

slots.SymbiontAssociated_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="SymbiontAssociated_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_oxy_stat_samp, domain=SymbiontAssociated, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.SymbiontAssociated_perturbation = Slot(uri=MIXS['0000754'], name="SymbiontAssociated_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_perturbation, domain=SymbiontAssociated, range=Optional[Union[str, List[str]]])

slots.SymbiontAssociated_samp_store_dur = Slot(uri=MIXS['0000116'], name="SymbiontAssociated_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_samp_store_dur, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.SymbiontAssociated_samp_store_loc = Slot(uri=MIXS['0000755'], name="SymbiontAssociated_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_samp_store_loc, domain=SymbiontAssociated, range=Optional[str])

slots.SymbiontAssociated_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="SymbiontAssociated_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_samp_vol_we_dna_ext, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.SymbiontAssociated_source_mat_id = Slot(uri=MIXS['0000026'], name="SymbiontAssociated_source_mat_id", curie=MIXS.curie('0000026'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_source_mat_id, domain=SymbiontAssociated, range=Optional[Union[str, List[str]]])

slots.SymbiontAssociated_temp = Slot(uri=MIXS['0000113'], name="SymbiontAssociated_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.SymbiontAssociated_temp, domain=SymbiontAssociated, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.WastewaterSludge_chem_administration = Slot(uri=MIXS['0000751'], name="WastewaterSludge_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.WastewaterSludge_chem_administration, domain=WastewaterSludge, range=Optional[Union[str, List[str]]])

slots.WastewaterSludge_depth = Slot(uri=MIXS['0000018'], name="WastewaterSludge_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.WastewaterSludge_depth, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.WastewaterSludge_nitrate = Slot(uri=MIXS['0000425'], name="WastewaterSludge_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=MIXS_6_2_RC.WastewaterSludge_nitrate, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.WastewaterSludge_organism_count = Slot(uri=MIXS['0000103'], name="WastewaterSludge_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.WastewaterSludge_organism_count, domain=WastewaterSludge, range=Optional[Union[str, List[str]]])

slots.WastewaterSludge_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="WastewaterSludge_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.WastewaterSludge_oxy_stat_samp, domain=WastewaterSludge, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.WastewaterSludge_perturbation = Slot(uri=MIXS['0000754'], name="WastewaterSludge_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.WastewaterSludge_perturbation, domain=WastewaterSludge, range=Optional[Union[str, List[str]]])

slots.WastewaterSludge_ph = Slot(uri=MIXS['0001001'], name="WastewaterSludge_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS_6_2_RC.WastewaterSludge_ph, domain=WastewaterSludge, range=Optional[float])

slots.WastewaterSludge_samp_store_dur = Slot(uri=MIXS['0000116'], name="WastewaterSludge_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.WastewaterSludge_samp_store_dur, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.WastewaterSludge_samp_store_loc = Slot(uri=MIXS['0000755'], name="WastewaterSludge_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.WastewaterSludge_samp_store_loc, domain=WastewaterSludge, range=Optional[str])

slots.WastewaterSludge_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="WastewaterSludge_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.WastewaterSludge_samp_vol_we_dna_ext, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.WastewaterSludge_temp = Slot(uri=MIXS['0000113'], name="WastewaterSludge_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.WastewaterSludge_temp, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.WastewaterSludge_tot_phosphate = Slot(uri=MIXS['0000689'], name="WastewaterSludge_tot_phosphate", curie=MIXS.curie('0000689'),
                   model_uri=MIXS_6_2_RC.WastewaterSludge_tot_phosphate, domain=WastewaterSludge, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_alkyl_diethers = Slot(uri=MIXS['0000490'], name="Water_alkyl_diethers", curie=MIXS.curie('0000490'),
                   model_uri=MIXS_6_2_RC.Water_alkyl_diethers, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_ammonium = Slot(uri=MIXS['0000427'], name="Water_ammonium", curie=MIXS.curie('0000427'),
                   model_uri=MIXS_6_2_RC.Water_ammonium, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_bacteria_carb_prod = Slot(uri=MIXS['0000173'], name="Water_bacteria_carb_prod", curie=MIXS.curie('0000173'),
                   model_uri=MIXS_6_2_RC.Water_bacteria_carb_prod, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_chem_administration = Slot(uri=MIXS['0000751'], name="Water_chem_administration", curie=MIXS.curie('0000751'),
                   model_uri=MIXS_6_2_RC.Water_chem_administration, domain=Water, range=Optional[Union[str, List[str]]])

slots.Water_depth = Slot(uri=MIXS['0000018'], name="Water_depth", curie=MIXS.curie('0000018'),
                   model_uri=MIXS_6_2_RC.Water_depth, domain=Water, range=str,
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_diss_inorg_phosp = Slot(uri=MIXS['0000106'], name="Water_diss_inorg_phosp", curie=MIXS.curie('0000106'),
                   model_uri=MIXS_6_2_RC.Water_diss_inorg_phosp, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_diss_org_nitro = Slot(uri=MIXS['0000162'], name="Water_diss_org_nitro", curie=MIXS.curie('0000162'),
                   model_uri=MIXS_6_2_RC.Water_diss_org_nitro, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_elev = Slot(uri=MIXS['0000093'], name="Water_elev", curie=MIXS.curie('0000093'),
                   model_uri=MIXS_6_2_RC.Water_elev, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_n_alkanes = Slot(uri=MIXS['0000503'], name="Water_n_alkanes", curie=MIXS.curie('0000503'),
                   model_uri=MIXS_6_2_RC.Water_n_alkanes, domain=Water, range=Optional[Union[str, List[str]]])

slots.Water_nitrate = Slot(uri=MIXS['0000425'], name="Water_nitrate", curie=MIXS.curie('0000425'),
                   model_uri=MIXS_6_2_RC.Water_nitrate, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_nitrite = Slot(uri=MIXS['0000426'], name="Water_nitrite", curie=MIXS.curie('0000426'),
                   model_uri=MIXS_6_2_RC.Water_nitrite, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_org_carb = Slot(uri=MIXS['0000508'], name="Water_org_carb", curie=MIXS.curie('0000508'),
                   model_uri=MIXS_6_2_RC.Water_org_carb, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_org_nitro = Slot(uri=MIXS['0000205'], name="Water_org_nitro", curie=MIXS.curie('0000205'),
                   model_uri=MIXS_6_2_RC.Water_org_nitro, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_organism_count = Slot(uri=MIXS['0000103'], name="Water_organism_count", curie=MIXS.curie('0000103'),
                   model_uri=MIXS_6_2_RC.Water_organism_count, domain=Water, range=Optional[Union[str, List[str]]])

slots.Water_oxy_stat_samp = Slot(uri=MIXS['0000753'], name="Water_oxy_stat_samp", curie=MIXS.curie('0000753'),
                   model_uri=MIXS_6_2_RC.Water_oxy_stat_samp, domain=Water, range=Optional[Union[str, "OXYSTATSAMPENUM"]])

slots.Water_part_org_carb = Slot(uri=MIXS['0000515'], name="Water_part_org_carb", curie=MIXS.curie('0000515'),
                   model_uri=MIXS_6_2_RC.Water_part_org_carb, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_perturbation = Slot(uri=MIXS['0000754'], name="Water_perturbation", curie=MIXS.curie('0000754'),
                   model_uri=MIXS_6_2_RC.Water_perturbation, domain=Water, range=Optional[Union[str, List[str]]])

slots.Water_ph = Slot(uri=MIXS['0001001'], name="Water_ph", curie=MIXS.curie('0001001'),
                   model_uri=MIXS_6_2_RC.Water_ph, domain=Water, range=Optional[float])

slots.Water_phosplipid_fatt_acid = Slot(uri=MIXS['0000181'], name="Water_phosplipid_fatt_acid", curie=MIXS.curie('0000181'),
                   model_uri=MIXS_6_2_RC.Water_phosplipid_fatt_acid, domain=Water, range=Optional[Union[str, List[str]]])

slots.Water_samp_store_dur = Slot(uri=MIXS['0000116'], name="Water_samp_store_dur", curie=MIXS.curie('0000116'),
                   model_uri=MIXS_6_2_RC.Water_samp_store_dur, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^P(?:(?:\d+D|\d+M(?:\d+D)?|\d+Y(?:\d+M(?:\d+D)?)?)(?:T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S))?|T(?:\d+H(?:\d+M(?:\d+S)?)?|\d+M(?:\d+S)?|\d+S)|\d+W)$'))

slots.Water_samp_store_loc = Slot(uri=MIXS['0000755'], name="Water_samp_store_loc", curie=MIXS.curie('0000755'),
                   model_uri=MIXS_6_2_RC.Water_samp_store_loc, domain=Water, range=Optional[str])

slots.Water_samp_vol_we_dna_ext = Slot(uri=MIXS['0000111'], name="Water_samp_vol_we_dna_ext", curie=MIXS.curie('0000111'),
                   model_uri=MIXS_6_2_RC.Water_samp_vol_we_dna_ext, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_sulfate = Slot(uri=MIXS['0000423'], name="Water_sulfate", curie=MIXS.curie('0000423'),
                   model_uri=MIXS_6_2_RC.Water_sulfate, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_sulfide = Slot(uri=MIXS['0000424'], name="Water_sulfide", curie=MIXS.curie('0000424'),
                   model_uri=MIXS_6_2_RC.Water_sulfide, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_temp = Slot(uri=MIXS['0000113'], name="Water_temp", curie=MIXS.curie('0000113'),
                   model_uri=MIXS_6_2_RC.Water_temp, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))

slots.Water_turbidity = Slot(uri=MIXS['0000191'], name="Water_turbidity", curie=MIXS.curie('0000191'),
                   model_uri=MIXS_6_2_RC.Water_turbidity, domain=Water, range=Optional[str],
                   pattern=re.compile(r'^[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?( *- *[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)? *([^\s-]{1,2}|[^\s-]+.+[^\s-]+)$'))